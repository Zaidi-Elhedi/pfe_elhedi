
fx_sd_gsm_get.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b724  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0801b9c4  0801b9c4  0002b9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bcbc  0801bcbc  0002bcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bcc4  0801bcc4  0002bcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bcc8  0801bcc8  0002bcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c0  24000000  0801bccc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a5c  240000c0  0801bd8c  000300c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004b1c  0801bd8c  00034b1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ee  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005ed3a  00000000  00000000  00030131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000cf14  00000000  00000000  0008ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002448  00000000  00000000  0009bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019fb  00000000  00000000  0009e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000456a8  00000000  00000000  0009fbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005124e  00000000  00000000  000e526b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00177b25  00000000  00000000  001364b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e98  00000000  00000000  002adfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000104  00000000  00000000  002b5e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b9ac 	.word	0x0801b9ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	0801b9ac 	.word	0x0801b9ac

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	240043c8 	.word	0x240043c8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24004464 	.word	0x24004464
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240043cc 	.word	0x240043cc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240043d0 	.word	0x240043d0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	240049d0 	.word	0x240049d0

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f01a f819 	bl	801a4f0 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f019 ff04 	bl	801a2d0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24004470 	.word	0x24004470
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	240049d0 	.word	0x240049d0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24004474 	.word	0x24004474
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24004500 	.word	0x24004500
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24004504 	.word	0x24004504
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	240044fc 	.word	0x240044fc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	240044f8 	.word	0x240044f8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24004464 	.word	0x24004464
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240043cc 	.word	0x240043cc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240043d0 	.word	0x240043d0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <strcmp>:
 8000518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800051c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000520:	2a01      	cmp	r2, #1
 8000522:	bf28      	it	cs
 8000524:	429a      	cmpcs	r2, r3
 8000526:	d0f7      	beq.n	8000518 <strcmp>
 8000528:	1ad0      	subs	r0, r2, r3
 800052a:	4770      	bx	lr

0800052c <strlen>:
 800052c:	4603      	mov	r3, r0
 800052e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000532:	2a00      	cmp	r2, #0
 8000534:	d1fb      	bne.n	800052e <strlen+0x2>
 8000536:	1a18      	subs	r0, r3, r0
 8000538:	3801      	subs	r0, #1
 800053a:	4770      	bx	lr
 800053c:	0000      	movs	r0, r0
	...

08000540 <memchr>:
 8000540:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000544:	2a10      	cmp	r2, #16
 8000546:	db2b      	blt.n	80005a0 <memchr+0x60>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	d008      	beq.n	8000560 <memchr+0x20>
 800054e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000552:	3a01      	subs	r2, #1
 8000554:	428b      	cmp	r3, r1
 8000556:	d02d      	beq.n	80005b4 <memchr+0x74>
 8000558:	f010 0f07 	tst.w	r0, #7
 800055c:	b342      	cbz	r2, 80005b0 <memchr+0x70>
 800055e:	d1f6      	bne.n	800054e <memchr+0xe>
 8000560:	b4f0      	push	{r4, r5, r6, r7}
 8000562:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000566:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800056a:	f022 0407 	bic.w	r4, r2, #7
 800056e:	f07f 0700 	mvns.w	r7, #0
 8000572:	2300      	movs	r3, #0
 8000574:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000578:	3c08      	subs	r4, #8
 800057a:	ea85 0501 	eor.w	r5, r5, r1
 800057e:	ea86 0601 	eor.w	r6, r6, r1
 8000582:	fa85 f547 	uadd8	r5, r5, r7
 8000586:	faa3 f587 	sel	r5, r3, r7
 800058a:	fa86 f647 	uadd8	r6, r6, r7
 800058e:	faa5 f687 	sel	r6, r5, r7
 8000592:	b98e      	cbnz	r6, 80005b8 <memchr+0x78>
 8000594:	d1ee      	bne.n	8000574 <memchr+0x34>
 8000596:	bcf0      	pop	{r4, r5, r6, r7}
 8000598:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059c:	f002 0207 	and.w	r2, r2, #7
 80005a0:	b132      	cbz	r2, 80005b0 <memchr+0x70>
 80005a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005a6:	3a01      	subs	r2, #1
 80005a8:	ea83 0301 	eor.w	r3, r3, r1
 80005ac:	b113      	cbz	r3, 80005b4 <memchr+0x74>
 80005ae:	d1f8      	bne.n	80005a2 <memchr+0x62>
 80005b0:	2000      	movs	r0, #0
 80005b2:	4770      	bx	lr
 80005b4:	3801      	subs	r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	bf06      	itte	eq
 80005bc:	4635      	moveq	r5, r6
 80005be:	3803      	subeq	r0, #3
 80005c0:	3807      	subne	r0, #7
 80005c2:	f015 0f01 	tst.w	r5, #1
 80005c6:	d107      	bne.n	80005d8 <memchr+0x98>
 80005c8:	3001      	adds	r0, #1
 80005ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ce:	bf02      	ittt	eq
 80005d0:	3001      	addeq	r0, #1
 80005d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005d6:	3001      	addeq	r0, #1
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	3801      	subs	r0, #1
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b970 	b.w	80008d8 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	460d      	mov	r5, r1
 8000618:	4604      	mov	r4, r0
 800061a:	460f      	mov	r7, r1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d14a      	bne.n	80006b6 <__udivmoddi4+0xa6>
 8000620:	428a      	cmp	r2, r1
 8000622:	4694      	mov	ip, r2
 8000624:	d965      	bls.n	80006f2 <__udivmoddi4+0xe2>
 8000626:	fab2 f382 	clz	r3, r2
 800062a:	b143      	cbz	r3, 800063e <__udivmoddi4+0x2e>
 800062c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000630:	f1c3 0220 	rsb	r2, r3, #32
 8000634:	409f      	lsls	r7, r3
 8000636:	fa20 f202 	lsr.w	r2, r0, r2
 800063a:	4317      	orrs	r7, r2
 800063c:	409c      	lsls	r4, r3
 800063e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000642:	fa1f f58c 	uxth.w	r5, ip
 8000646:	fbb7 f1fe 	udiv	r1, r7, lr
 800064a:	0c22      	lsrs	r2, r4, #16
 800064c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000650:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000654:	fb01 f005 	mul.w	r0, r1, r5
 8000658:	4290      	cmp	r0, r2
 800065a:	d90a      	bls.n	8000672 <__udivmoddi4+0x62>
 800065c:	eb1c 0202 	adds.w	r2, ip, r2
 8000660:	f101 37ff 	add.w	r7, r1, #4294967295
 8000664:	f080 811c 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000668:	4290      	cmp	r0, r2
 800066a:	f240 8119 	bls.w	80008a0 <__udivmoddi4+0x290>
 800066e:	3902      	subs	r1, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a12      	subs	r2, r2, r0
 8000674:	b2a4      	uxth	r4, r4
 8000676:	fbb2 f0fe 	udiv	r0, r2, lr
 800067a:	fb0e 2210 	mls	r2, lr, r0, r2
 800067e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000682:	fb00 f505 	mul.w	r5, r0, r5
 8000686:	42a5      	cmp	r5, r4
 8000688:	d90a      	bls.n	80006a0 <__udivmoddi4+0x90>
 800068a:	eb1c 0404 	adds.w	r4, ip, r4
 800068e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000692:	f080 8107 	bcs.w	80008a4 <__udivmoddi4+0x294>
 8000696:	42a5      	cmp	r5, r4
 8000698:	f240 8104 	bls.w	80008a4 <__udivmoddi4+0x294>
 800069c:	4464      	add	r4, ip
 800069e:	3802      	subs	r0, #2
 80006a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006a4:	1b64      	subs	r4, r4, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	b11e      	cbz	r6, 80006b2 <__udivmoddi4+0xa2>
 80006aa:	40dc      	lsrs	r4, r3
 80006ac:	2300      	movs	r3, #0
 80006ae:	e9c6 4300 	strd	r4, r3, [r6]
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0xbc>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80ed 	beq.w	800089a <__udivmoddi4+0x28a>
 80006c0:	2100      	movs	r1, #0
 80006c2:	e9c6 0500 	strd	r0, r5, [r6]
 80006c6:	4608      	mov	r0, r1
 80006c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006cc:	fab3 f183 	clz	r1, r3
 80006d0:	2900      	cmp	r1, #0
 80006d2:	d149      	bne.n	8000768 <__udivmoddi4+0x158>
 80006d4:	42ab      	cmp	r3, r5
 80006d6:	d302      	bcc.n	80006de <__udivmoddi4+0xce>
 80006d8:	4282      	cmp	r2, r0
 80006da:	f200 80f8 	bhi.w	80008ce <__udivmoddi4+0x2be>
 80006de:	1a84      	subs	r4, r0, r2
 80006e0:	eb65 0203 	sbc.w	r2, r5, r3
 80006e4:	2001      	movs	r0, #1
 80006e6:	4617      	mov	r7, r2
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d0e2      	beq.n	80006b2 <__udivmoddi4+0xa2>
 80006ec:	e9c6 4700 	strd	r4, r7, [r6]
 80006f0:	e7df      	b.n	80006b2 <__udivmoddi4+0xa2>
 80006f2:	b902      	cbnz	r2, 80006f6 <__udivmoddi4+0xe6>
 80006f4:	deff      	udf	#255	; 0xff
 80006f6:	fab2 f382 	clz	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 8090 	bne.w	8000820 <__udivmoddi4+0x210>
 8000700:	1a8a      	subs	r2, r1, r2
 8000702:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000706:	fa1f fe8c 	uxth.w	lr, ip
 800070a:	2101      	movs	r1, #1
 800070c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000710:	fb07 2015 	mls	r0, r7, r5, r2
 8000714:	0c22      	lsrs	r2, r4, #16
 8000716:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800071a:	fb0e f005 	mul.w	r0, lr, r5
 800071e:	4290      	cmp	r0, r2
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x124>
 8000722:	eb1c 0202 	adds.w	r2, ip, r2
 8000726:	f105 38ff 	add.w	r8, r5, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4290      	cmp	r0, r2
 800072e:	f200 80cb 	bhi.w	80008c8 <__udivmoddi4+0x2b8>
 8000732:	4645      	mov	r5, r8
 8000734:	1a12      	subs	r2, r2, r0
 8000736:	b2a4      	uxth	r4, r4
 8000738:	fbb2 f0f7 	udiv	r0, r2, r7
 800073c:	fb07 2210 	mls	r2, r7, r0, r2
 8000740:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000744:	fb0e fe00 	mul.w	lr, lr, r0
 8000748:	45a6      	cmp	lr, r4
 800074a:	d908      	bls.n	800075e <__udivmoddi4+0x14e>
 800074c:	eb1c 0404 	adds.w	r4, ip, r4
 8000750:	f100 32ff 	add.w	r2, r0, #4294967295
 8000754:	d202      	bcs.n	800075c <__udivmoddi4+0x14c>
 8000756:	45a6      	cmp	lr, r4
 8000758:	f200 80bb 	bhi.w	80008d2 <__udivmoddi4+0x2c2>
 800075c:	4610      	mov	r0, r2
 800075e:	eba4 040e 	sub.w	r4, r4, lr
 8000762:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x98>
 8000768:	f1c1 0720 	rsb	r7, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000772:	ea4c 0c03 	orr.w	ip, ip, r3
 8000776:	fa05 f401 	lsl.w	r4, r5, r1
 800077a:	fa20 f307 	lsr.w	r3, r0, r7
 800077e:	40fd      	lsrs	r5, r7
 8000780:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000784:	4323      	orrs	r3, r4
 8000786:	fbb5 f8f9 	udiv	r8, r5, r9
 800078a:	fa1f fe8c 	uxth.w	lr, ip
 800078e:	fb09 5518 	mls	r5, r9, r8, r5
 8000792:	0c1c      	lsrs	r4, r3, #16
 8000794:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000798:	fb08 f50e 	mul.w	r5, r8, lr
 800079c:	42a5      	cmp	r5, r4
 800079e:	fa02 f201 	lsl.w	r2, r2, r1
 80007a2:	fa00 f001 	lsl.w	r0, r0, r1
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b0:	f080 8088 	bcs.w	80008c4 <__udivmoddi4+0x2b4>
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	f240 8085 	bls.w	80008c4 <__udivmoddi4+0x2b4>
 80007ba:	f1a8 0802 	sub.w	r8, r8, #2
 80007be:	4464      	add	r4, ip
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	b29d      	uxth	r5, r3
 80007c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80007c8:	fb09 4413 	mls	r4, r9, r3, r4
 80007cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007d4:	45a6      	cmp	lr, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1c 0404 	adds.w	r4, ip, r4
 80007dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80007e0:	d26c      	bcs.n	80008bc <__udivmoddi4+0x2ac>
 80007e2:	45a6      	cmp	lr, r4
 80007e4:	d96a      	bls.n	80008bc <__udivmoddi4+0x2ac>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	4464      	add	r4, ip
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fba3 9502 	umull	r9, r5, r3, r2
 80007f2:	eba4 040e 	sub.w	r4, r4, lr
 80007f6:	42ac      	cmp	r4, r5
 80007f8:	46c8      	mov	r8, r9
 80007fa:	46ae      	mov	lr, r5
 80007fc:	d356      	bcc.n	80008ac <__udivmoddi4+0x29c>
 80007fe:	d053      	beq.n	80008a8 <__udivmoddi4+0x298>
 8000800:	b156      	cbz	r6, 8000818 <__udivmoddi4+0x208>
 8000802:	ebb0 0208 	subs.w	r2, r0, r8
 8000806:	eb64 040e 	sbc.w	r4, r4, lr
 800080a:	fa04 f707 	lsl.w	r7, r4, r7
 800080e:	40ca      	lsrs	r2, r1
 8000810:	40cc      	lsrs	r4, r1
 8000812:	4317      	orrs	r7, r2
 8000814:	e9c6 7400 	strd	r7, r4, [r6]
 8000818:	4618      	mov	r0, r3
 800081a:	2100      	movs	r1, #0
 800081c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000820:	f1c3 0120 	rsb	r1, r3, #32
 8000824:	fa02 fc03 	lsl.w	ip, r2, r3
 8000828:	fa20 f201 	lsr.w	r2, r0, r1
 800082c:	fa25 f101 	lsr.w	r1, r5, r1
 8000830:	409d      	lsls	r5, r3
 8000832:	432a      	orrs	r2, r5
 8000834:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000838:	fa1f fe8c 	uxth.w	lr, ip
 800083c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000840:	fb07 1510 	mls	r5, r7, r0, r1
 8000844:	0c11      	lsrs	r1, r2, #16
 8000846:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800084a:	fb00 f50e 	mul.w	r5, r0, lr
 800084e:	428d      	cmp	r5, r1
 8000850:	fa04 f403 	lsl.w	r4, r4, r3
 8000854:	d908      	bls.n	8000868 <__udivmoddi4+0x258>
 8000856:	eb1c 0101 	adds.w	r1, ip, r1
 800085a:	f100 38ff 	add.w	r8, r0, #4294967295
 800085e:	d22f      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000860:	428d      	cmp	r5, r1
 8000862:	d92d      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000864:	3802      	subs	r0, #2
 8000866:	4461      	add	r1, ip
 8000868:	1b49      	subs	r1, r1, r5
 800086a:	b292      	uxth	r2, r2
 800086c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000870:	fb07 1115 	mls	r1, r7, r5, r1
 8000874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000878:	fb05 f10e 	mul.w	r1, r5, lr
 800087c:	4291      	cmp	r1, r2
 800087e:	d908      	bls.n	8000892 <__udivmoddi4+0x282>
 8000880:	eb1c 0202 	adds.w	r2, ip, r2
 8000884:	f105 38ff 	add.w	r8, r5, #4294967295
 8000888:	d216      	bcs.n	80008b8 <__udivmoddi4+0x2a8>
 800088a:	4291      	cmp	r1, r2
 800088c:	d914      	bls.n	80008b8 <__udivmoddi4+0x2a8>
 800088e:	3d02      	subs	r5, #2
 8000890:	4462      	add	r2, ip
 8000892:	1a52      	subs	r2, r2, r1
 8000894:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000898:	e738      	b.n	800070c <__udivmoddi4+0xfc>
 800089a:	4631      	mov	r1, r6
 800089c:	4630      	mov	r0, r6
 800089e:	e708      	b.n	80006b2 <__udivmoddi4+0xa2>
 80008a0:	4639      	mov	r1, r7
 80008a2:	e6e6      	b.n	8000672 <__udivmoddi4+0x62>
 80008a4:	4610      	mov	r0, r2
 80008a6:	e6fb      	b.n	80006a0 <__udivmoddi4+0x90>
 80008a8:	4548      	cmp	r0, r9
 80008aa:	d2a9      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008ac:	ebb9 0802 	subs.w	r8, r9, r2
 80008b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008b4:	3b01      	subs	r3, #1
 80008b6:	e7a3      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b8:	4645      	mov	r5, r8
 80008ba:	e7ea      	b.n	8000892 <__udivmoddi4+0x282>
 80008bc:	462b      	mov	r3, r5
 80008be:	e794      	b.n	80007ea <__udivmoddi4+0x1da>
 80008c0:	4640      	mov	r0, r8
 80008c2:	e7d1      	b.n	8000868 <__udivmoddi4+0x258>
 80008c4:	46d0      	mov	r8, sl
 80008c6:	e77b      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c8:	3d02      	subs	r5, #2
 80008ca:	4462      	add	r2, ip
 80008cc:	e732      	b.n	8000734 <__udivmoddi4+0x124>
 80008ce:	4608      	mov	r0, r1
 80008d0:	e70a      	b.n	80006e8 <__udivmoddi4+0xd8>
 80008d2:	4464      	add	r4, ip
 80008d4:	3802      	subs	r0, #2
 80008d6:	e742      	b.n	800075e <__udivmoddi4+0x14e>

080008d8 <__aeabi_idiv0>:
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008e8:	2334      	movs	r3, #52	; 0x34
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <tx_application_define+0x6c>)
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <tx_application_define+0x70>)
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <tx_application_define+0x74>)
 80008f6:	f01a f8a5 	bl	801aa44 <_txe_byte_pool_create>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <tx_application_define+0x74>)
 8000902:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f001 f834 	bl	8001972 <App_ThreadX_Init>
 800090a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d000      	beq.n	8000914 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000912:	e7fe      	b.n	8000912 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000914:	2334      	movs	r3, #52	; 0x34
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <tx_application_define+0x78>)
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <tx_application_define+0x7c>)
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <tx_application_define+0x80>)
 8000922:	f01a f88f 	bl	801aa44 <_txe_byte_pool_create>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <tx_application_define+0x80>)
 800092e:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000930:	68b8      	ldr	r0, [r7, #8]
 8000932:	f00d f97b 	bl	800dc2c <MX_FileX_Init>
 8000936:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d000      	beq.n	8000940 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 800093e:	e7fe      	b.n	800093e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	240000dc 	.word	0x240000dc
 800094c:	0801b9c4 	.word	0x0801b9c4
 8000950:	240004dc 	.word	0x240004dc
 8000954:	24000510 	.word	0x24000510
 8000958:	0801b9d8 	.word	0x0801b9d8
 800095c:	24000910 	.word	0x24000910

08000960 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d102      	bne.n	800097a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000974:	230c      	movs	r3, #12
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e005      	b.n	8000986 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	2b04      	cmp	r3, #4
 8000980:	d101      	bne.n	8000986 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000982:	230a      	movs	r3, #10
 8000984:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800098e:	f000 fb5e 	bl	800104e <MQTTstrlen>
 8000992:	4603      	mov	r3, r0
 8000994:	3302      	adds	r3, #2
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7edb      	ldrb	r3, [r3, #27]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d013      	beq.n	80009cc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3324      	adds	r3, #36	; 0x24
 80009a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ac:	f000 fb4f 	bl	800104e <MQTTstrlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	1c9c      	adds	r4, r3, #2
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3330      	adds	r3, #48	; 0x30
 80009b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009bc:	f000 fb47 	bl	800104e <MQTTstrlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4423      	add	r3, r4
 80009c4:	3302      	adds	r3, #2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d103      	bne.n	80009dc <MQTTSerialize_connectLength+0x7c>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00a      	beq.n	80009f2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3340      	adds	r3, #64	; 0x40
 80009e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009e4:	f000 fb33 	bl	800104e <MQTTstrlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	3302      	adds	r3, #2
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <MQTTSerialize_connectLength+0xa2>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00a      	beq.n	8000a18 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	334c      	adds	r3, #76	; 0x4c
 8000a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a0a:	f000 fb20 	bl	800104e <MQTTstrlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	3302      	adds	r3, #2
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
	...

08000a24 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff8a 	bl	8000960 <MQTTSerialize_connectLength>
 8000a4c:	6238      	str	r0, [r7, #32]
 8000a4e:	6a38      	ldr	r0, [r7, #32]
 8000a50:	f000 f9b2 	bl	8000db8 <MQTTPacket_len>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	da03      	bge.n	8000a64 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000a5c:	f06f 0301 	mvn.w	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000a62:	e0c2      	b.n	8000bea <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000a68:	7e3b      	ldrb	r3, [r7, #24]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f362 1307 	bfi	r3, r2, #4, #4
 8000a70:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000a72:	7e3a      	ldrb	r2, [r7, #24]
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fa2b 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	6a39      	ldr	r1, [r7, #32]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f92b 	bl	8000ce0 <MQTTPacket_encode>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	4413      	add	r3, r2
 8000a90:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7a1b      	ldrb	r3, [r3, #8]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d10c      	bne.n	8000ab4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4955      	ldr	r1, [pc, #340]	; (8000bf4 <MQTTSerialize_connect+0x1d0>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa56 	bl	8000f52 <writeCString>
		writeChar(&ptr, (char) 4);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fa12 	bl	8000ed6 <writeChar>
 8000ab2:	e00b      	b.n	8000acc <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	494f      	ldr	r1, [pc, #316]	; (8000bf8 <MQTTSerialize_connect+0x1d4>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa49 	bl	8000f52 <writeCString>
		writeChar(&ptr, (char) 3);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa05 	bl	8000ed6 <writeChar>
	}

	flags.all = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e9b      	ldrb	r3, [r3, #26]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	7d3b      	ldrb	r3, [r7, #20]
 8000adc:	f362 0341 	bfi	r3, r2, #1, #1
 8000ae0:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7edb      	ldrb	r3, [r3, #27]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	f362 0382 	bfi	r3, r2, #2, #1
 8000af6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000af8:	7d3b      	ldrb	r3, [r7, #20]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	7d3b      	ldrb	r3, [r7, #20]
 8000b12:	f362 03c4 	bfi	r3, r2, #3, #2
 8000b16:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	7d3b      	ldrb	r3, [r7, #20]
 8000b26:	f362 1345 	bfi	r3, r2, #5, #1
 8000b2a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d103      	bne.n	8000b3c <MQTTSerialize_connect+0x118>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000b3c:	7d3b      	ldrb	r3, [r7, #20]
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b42:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <MQTTSerialize_connect+0x130>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000b54:	7d3b      	ldrb	r3, [r7, #20]
 8000b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000b5c:	7d3a      	ldrb	r2, [r7, #20]
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f9b6 	bl	8000ed6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	8b1b      	ldrh	r3, [r3, #24]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f9c2 	bl	8000f00 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f107 001c 	add.w	r0, r7, #28
 8000b82:	330c      	adds	r3, #12
 8000b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b86:	f000 fa03 	bl	8000f90 <writeMQTTString>
	if (options->willFlag)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7edb      	ldrb	r3, [r3, #27]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00d      	beq.n	8000bae <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f107 001c 	add.w	r0, r7, #28
 8000b98:	3324      	adds	r3, #36	; 0x24
 8000b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b9c:	f000 f9f8 	bl	8000f90 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f107 001c 	add.w	r0, r7, #28
 8000ba6:	3330      	adds	r3, #48	; 0x30
 8000ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000baa:	f000 f9f1 	bl	8000f90 <writeMQTTString>
	}
	if (flags.bits.username)
 8000bae:	7d3b      	ldrb	r3, [r7, #20]
 8000bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f107 001c 	add.w	r0, r7, #28
 8000bc0:	3340      	adds	r3, #64	; 0x40
 8000bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc4:	f000 f9e4 	bl	8000f90 <writeMQTTString>
	if (flags.bits.password)
 8000bc8:	7d3b      	ldrb	r3, [r7, #20]
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f107 001c 	add.w	r0, r7, #28
 8000bda:	334c      	adds	r3, #76	; 0x4c
 8000bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bde:	f000 f9d7 	bl	8000f90 <writeMQTTString>

	rc = ptr - buf;
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	0801b9ec 	.word	0x0801b9ec
 8000bf8:	0801b9f4 	.word	0x0801b9f4

08000bfc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c10:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f943 	bl	8000eae <readChar>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8000c2c:	7f3b      	ldrb	r3, [r7, #28]
 8000c2e:	f023 030f 	bic.w	r3, r3, #15
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b30      	cmp	r3, #48	; 0x30
 8000c36:	d14b      	bne.n	8000cd0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8000c38:	7f3b      	ldrb	r3, [r7, #28]
 8000c3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8000c46:	7f3b      	ldrb	r3, [r7, #28]
 8000c48:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8000c54:	7f3b      	ldrb	r3, [r7, #28]
 8000c56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	f107 0214 	add.w	r2, r7, #20
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f8ee 	bl	8000e4c <MQTTPacket_decodeBuf>
 8000c70:	6278      	str	r0, [r7, #36]	; 0x24
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4413      	add	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8c:	f000 f9ae 	bl	8000fec <readMQTTLenString>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d01e      	beq.n	8000cd4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db19      	blt.n	8000cd4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dd08      	ble.n	8000cba <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f8e3 	bl	8000e78 <readInt>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc8:	601a      	str	r2, [r3, #0]
	rc = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	e002      	b.n	8000cd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000cd4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	425a      	negs	r2, r3
 8000cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cfa:	bf58      	it	pl
 8000cfc:	4253      	negpl	r3, r2
 8000cfe:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da00      	bge.n	8000d08 <MQTTPacket_encode+0x28>
 8000d06:	337f      	adds	r3, #127	; 0x7f
 8000d08:	11db      	asrs	r3, r3, #7
 8000d0a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dd03      	ble.n	8000d1a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	7afa      	ldrb	r2, [r7, #11]
 8000d28:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dcde      	bgt.n	8000cee <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	dd03      	ble.n	8000d70 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	60fb      	str	r3, [r7, #12]
			goto exit;
 8000d6e:	e01d      	b.n	8000dac <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8000d70:	f107 020b 	add.w	r2, r7, #11
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2101      	movs	r1, #1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4798      	blx	r3
 8000d7c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d112      	bne.n	8000daa <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d8e:	6979      	ldr	r1, [r7, #20]
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dbd6      	blt.n	8000d56 <MQTTPacket_decode+0x18>
exit:
 8000da8:	e000      	b.n	8000dac <MQTTPacket_decode+0x6e>
			goto exit;
 8000daa:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000dac:	693b      	ldr	r3, [r7, #16]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dca:	dc03      	bgt.n	8000dd4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e012      	b.n	8000dfa <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dda:	da03      	bge.n	8000de4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	e00a      	b.n	8000dfa <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <MQTTPacket_len+0x50>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dc03      	bgt.n	8000df4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3303      	adds	r3, #3
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e002      	b.n	8000dfa <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3304      	adds	r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000dfa:	687b      	ldr	r3, [r7, #4]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	001ffffe 	.word	0x001ffffe

08000e0c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e00a      	b.n	8000e32 <bufchar+0x26>
		*c = *bufptr++;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <bufchar+0x3c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4909      	ldr	r1, [pc, #36]	; (8000e48 <bufchar+0x3c>)
 8000e24:	600a      	str	r2, [r1, #0]
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <bufchar+0x10>
	return count;
 8000e3a:	683b      	ldr	r3, [r7, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	24000944 	.word	0x24000944

08000e4c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <MQTTPacket_decodeBuf+0x24>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MQTTPacket_decodeBuf+0x28>)
 8000e60:	f7ff ff6d 	bl	8000d3e <MQTTPacket_decode>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000944 	.word	0x24000944
 8000e74:	08000e0d 	.word	0x08000e0d

08000e78 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	3201      	adds	r2, #1
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1c9a      	adds	r2, r3, #2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
	return len;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
	return c;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da00      	bge.n	8000f12 <writeInt+0x12>
 8000f10:	33ff      	adds	r3, #255	; 0xff
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	bf58      	it	pl
 8000f32:	4253      	negpl	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fae5 	bl	800052c <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc9 	bl	8000f00 <writeInt>
	memcpy(*pptr, string, len);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f01a f8c8 	bl	801b10c <memcpy>
	*pptr += len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	441a      	add	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	4638      	mov	r0, r7
 8000f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dd12      	ble.n	8000fca <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff ffa9 	bl	8000f00 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f01a f8a8 	bl	801b10c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000fc8:	e00c      	b.n	8000fe4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ffbc 	bl	8000f52 <writeCString>
}
 8000fda:	e003      	b.n	8000fe4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff ff8e 	bl	8000f00 <writeInt>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	dd1a      	ble.n	800103e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff ff35 	bl	8000e78 <readInt>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	6852      	ldr	r2, [r2, #4]
 800101c:	4413      	add	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d30c      	bcc.n	800103e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	6852      	ldr	r2, [r2, #4]
 8001034:	441a      	add	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	601a      	str	r2, [r3, #0]
			rc = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8001044:	697b      	ldr	r3, [r7, #20]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa60 	bl	800052c <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e001      	b.n	8001076 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	617b      	str	r3, [r7, #20]
	return rc;
 8001076:	697b      	ldr	r3, [r7, #20]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	4638      	mov	r0, r7
 800108a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8001092:	463b      	mov	r3, r7
 8001094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001098:	f7ff ffd9 	bl	800104e <MQTTstrlen>
 800109c:	4603      	mov	r3, r0
 800109e:	1c9a      	adds	r2, r3, #2
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	4413      	add	r3, r2
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd02      	ble.n	80010b6 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3302      	adds	r3, #2
 80010b4:	617b      	str	r3, [r7, #20]
	return len;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80010e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f7ff ffc8 	bl	8001080 <MQTTSerialize_publishLength>
 80010f0:	61b8      	str	r0, [r7, #24]
 80010f2:	69b8      	ldr	r0, [r7, #24]
 80010f4:	f7ff fe60 	bl	8000db8 <MQTTPacket_len>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	da03      	bge.n	8001108 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001100:	f06f 0301 	mvn.w	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001106:	e04c      	b.n	80011a2 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8001108:	7c3b      	ldrb	r3, [r7, #16]
 800110a:	2203      	movs	r2, #3
 800110c:	f362 1307 	bfi	r3, r2, #4, #4
 8001110:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001120:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7c3b      	ldrb	r3, [r7, #16]
 800112c:	f362 0342 	bfi	r3, r2, #1, #2
 8001130:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	7c3b      	ldrb	r3, [r7, #16]
 800113e:	f362 0300 	bfi	r3, r2, #0, #1
 8001142:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001144:	7c3a      	ldrb	r2, [r7, #16]
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fec2 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	69b9      	ldr	r1, [r7, #24]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fdc2 	bl	8000ce0 <MQTTPacket_encode>
 800115c:	4602      	mov	r2, r0
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4413      	add	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001164:	f107 0014 	add.w	r0, r7, #20
 8001168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116e:	f7ff ff0f 	bl	8000f90 <writeMQTTString>

	if (qos > 0)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	dd06      	ble.n	8001186 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001178:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff febd 	bl	8000f00 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800118c:	4618      	mov	r0, r3
 800118e:	f019 ffbd 	bl	801b10c <memcpy>
	ptr += payloadlen;
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011a2:	69fb      	ldr	r3, [r7, #28]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	b291      	uxth	r1, r2
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011ba:	8011      	strh	r1, [r2, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 80011c0:	7819      	ldrb	r1, [r3, #0]
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011c4:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <Sim800_RxCallBack+0x154>)
 80011c8:	7c9b      	ldrb	r3, [r3, #18]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d135      	bne.n	800123a <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 80011ce:	494d      	ldr	r1, [pc, #308]	; (8001304 <Sim800_RxCallBack+0x158>)
 80011d0:	484a      	ldr	r0, [pc, #296]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011d2:	f019 ff59 	bl	801b088 <strstr>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <Sim800_RxCallBack+0x40>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d103      	bne.n	80011ec <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
 80011ea:	e026      	b.n	800123a <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 80011ec:	4945      	ldr	r1, [pc, #276]	; (8001304 <Sim800_RxCallBack+0x158>)
 80011ee:	4843      	ldr	r0, [pc, #268]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011f0:	f019 ff4a 	bl	801b088 <strstr>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01f      	beq.n	800123a <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 80011fa:	4a43      	ldr	r2, [pc, #268]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8001206:	461a      	mov	r2, r3
 8001208:	f019 ff80 	bl	801b10c <memcpy>
            clearRxBuffer();
 800120c:	f000 f88e 	bl	800132c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8001210:	493e      	ldr	r1, [pc, #248]	; (800130c <Sim800_RxCallBack+0x160>)
 8001212:	483d      	ldr	r0, [pc, #244]	; (8001308 <Sim800_RxCallBack+0x15c>)
 8001214:	f019 ff38 	bl	801b088 <strstr>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001220:	2200      	movs	r2, #0
 8001222:	749a      	strb	r2, [r3, #18]
 8001224:	e009      	b.n	800123a <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8001226:	493a      	ldr	r1, [pc, #232]	; (8001310 <Sim800_RxCallBack+0x164>)
 8001228:	4837      	ldr	r0, [pc, #220]	; (8001308 <Sim800_RxCallBack+0x15c>)
 800122a:	f019 ff2d 	bl	801b088 <strstr>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001236:	2201      	movs	r2, #1
 8001238:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 800123a:	4936      	ldr	r1, [pc, #216]	; (8001314 <Sim800_RxCallBack+0x168>)
 800123c:	482f      	ldr	r0, [pc, #188]	; (80012fc <Sim800_RxCallBack+0x150>)
 800123e:	f019 ff23 	bl	801b088 <strstr>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <Sim800_RxCallBack+0xb8>
 8001248:	4933      	ldr	r1, [pc, #204]	; (8001318 <Sim800_RxCallBack+0x16c>)
 800124a:	482c      	ldr	r0, [pc, #176]	; (80012fc <Sim800_RxCallBack+0x150>)
 800124c:	f019 ff1c 	bl	801b088 <strstr>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <Sim800_RxCallBack+0xb8>
 8001256:	4931      	ldr	r1, [pc, #196]	; (800131c <Sim800_RxCallBack+0x170>)
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <Sim800_RxCallBack+0x150>)
 800125a:	f019 ff15 	bl	801b088 <strstr>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001266:	2200      	movs	r2, #0
 8001268:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <Sim800_RxCallBack+0x154>)
 800126c:	7c9b      	ldrb	r3, [r3, #18]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <Sim800_RxCallBack+0xd4>
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b30      	cmp	r3, #48	; 0x30
 8001278:	d102      	bne.n	8001280 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <Sim800_RxCallBack+0x174>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <Sim800_RxCallBack+0x174>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d124      	bne.n	80012d2 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <Sim800_RxCallBack+0x178>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	b291      	uxth	r1, r2
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <Sim800_RxCallBack+0x178>)
 8001292:	8011      	strh	r1, [r2, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 8001298:	7819      	ldrb	r1, [r3, #0]
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Sim800_RxCallBack+0x15c>)
 800129c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d90d      	bls.n	80012c2 <Sim800_RxCallBack+0x116>
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a16      	ldr	r2, [pc, #88]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80012ae:	7852      	ldrb	r2, [r2, #1]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	dd06      	ble.n	80012c2 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80012b6:	f000 fa6f 	bl	8001798 <MQTT_Receive>
            clearRxBuffer();
 80012ba:	f000 f837 	bl	800132c <clearRxBuffer>
            clearMqttBuffer();
 80012be:	f000 f847 	bl	8001350 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 80012ce:	f000 f83f 	bl	8001350 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80012da:	4293      	cmp	r3, r2
 80012dc:	d903      	bls.n	80012e6 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 80012de:	f000 f825 	bl	800132c <clearRxBuffer>
        clearMqttBuffer();
 80012e2:	f000 f835 	bl	8001350 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 80012ea:	480f      	ldr	r0, [pc, #60]	; (8001328 <Sim800_RxCallBack+0x17c>)
 80012ec:	f009 f9d8 	bl	800a6a0 <HAL_UART_Receive_IT>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000f00 	.word	0x24000f00
 80012f8:	24000948 	.word	0x24000948
 80012fc:	2400094c 	.word	0x2400094c
 8001300:	240014bc 	.word	0x240014bc
 8001304:	0801b9fc 	.word	0x0801b9fc
 8001308:	24000f04 	.word	0x24000f04
 800130c:	0801ba00 	.word	0x0801ba00
 8001310:	0801ba10 	.word	0x0801ba10
 8001314:	0801ba1c 	.word	0x0801ba1c
 8001318:	0801ba28 	.word	0x0801ba28
 800131c:	0801ba30 	.word	0x0801ba30
 8001320:	24000f02 	.word	0x24000f02
 8001324:	240014b8 	.word	0x240014b8
 8001328:	24001684 	.word	0x24001684

0800132c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <clearRxBuffer+0x1c>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001336:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800133a:	2100      	movs	r1, #0
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <clearRxBuffer+0x20>)
 800133e:	f019 fe9b 	bl	801b078 <memset>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000f00 	.word	0x24000f00
 800134c:	2400094c 	.word	0x2400094c

08001350 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <clearMqttBuffer+0x20>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <clearMqttBuffer+0x24>)
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8001360:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001364:	2100      	movs	r1, #0
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <clearMqttBuffer+0x28>)
 8001368:	f019 fe86 	bl	801b078 <memset>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000f02 	.word	0x24000f02
 8001374:	240014b8 	.word	0x240014b8
 8001378:	24000f04 	.word	0x24000f04

0800137c <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff f8ce 	bl	800052c <strlen>
 8001390:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <SIM800_SendCommand+0x50>)
 800139a:	f009 f8ed 	bl	800a578 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fa2f 	bl	8002804 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <SIM800_SendCommand+0x54>)
 80013aa:	f019 fe6d 	bl	801b088 <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 80013b4:	f7ff ffba 	bl	800132c <clearRxBuffer>
        return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e002      	b.n	80013c2 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 80013bc:	f7ff ffb6 	bl	800132c <clearRxBuffer>
    return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24001684 	.word	0x24001684
 80013d0:	24000f04 	.word	0x24000f04

080013d4 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MQTT_Init+0xf0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	749a      	strb	r2, [r3, #18]
    int error = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    char str[32] = {0};
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	4932      	ldr	r1, [pc, #200]	; (80014c8 <MQTT_Init+0xf4>)
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <MQTT_Init+0xf8>)
 8001402:	f009 f94d 	bl	800a6a0 <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8001406:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800140a:	4931      	ldr	r1, [pc, #196]	; (80014d0 <MQTT_Init+0xfc>)
 800140c:	4831      	ldr	r0, [pc, #196]	; (80014d4 <MQTT_Init+0x100>)
 800140e:	f7ff ffb5 	bl	800137c <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8001412:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001416:	492e      	ldr	r1, [pc, #184]	; (80014d0 <MQTT_Init+0xfc>)
 8001418:	482f      	ldr	r0, [pc, #188]	; (80014d8 <MQTT_Init+0x104>)
 800141a:	f7ff ffaf 	bl	800137c <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800141e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <MQTT_Init+0x108>)
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <MQTT_Init+0x10c>)
 8001426:	f7ff ffa9 	bl	800137c <SIM800_SendCommand>
 800142a:	4602      	mov	r2, r0
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	4413      	add	r3, r2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8001432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001436:	4926      	ldr	r1, [pc, #152]	; (80014d0 <MQTT_Init+0xfc>)
 8001438:	482a      	ldr	r0, [pc, #168]	; (80014e4 <MQTT_Init+0x110>)
 800143a:	f7ff ff9f 	bl	800137c <SIM800_SendCommand>
 800143e:	4602      	mov	r2, r0
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	4413      	add	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8001446:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800144a:	4921      	ldr	r1, [pc, #132]	; (80014d0 <MQTT_Init+0xfc>)
 800144c:	4826      	ldr	r0, [pc, #152]	; (80014e8 <MQTT_Init+0x114>)
 800144e:	f7ff ff95 	bl	800137c <SIM800_SendCommand>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MQTT_Init+0xf0>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MQTT_Init+0xf0>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MQTT_Init+0xf0>)
 8001464:	6892      	ldr	r2, [r2, #8]
 8001466:	1d38      	adds	r0, r7, #4
 8001468:	9201      	str	r2, [sp, #4]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	460b      	mov	r3, r1
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <MQTT_Init+0x118>)
 8001470:	2120      	movs	r1, #32
 8001472:	f019 fdad 	bl	801afd0 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800147c:	4914      	ldr	r1, [pc, #80]	; (80014d0 <MQTT_Init+0xfc>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff7c 	bl	800137c <SIM800_SendCommand>
 8001484:	4602      	mov	r2, r0
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	4413      	add	r3, r2
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800148c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001490:	490f      	ldr	r1, [pc, #60]	; (80014d0 <MQTT_Init+0xfc>)
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <MQTT_Init+0x11c>)
 8001494:	f7ff ff72 	bl	800137c <SIM800_SendCommand>
 8001498:	4602      	mov	r2, r0
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	4413      	add	r3, r2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 80014a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MQTT_Init+0x120>)
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MQTT_Init+0x124>)
 80014a8:	f7ff ff68 	bl	800137c <SIM800_SendCommand>
    if (error == 0)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <MQTT_Init+0xe6>
    {
        MQTT_Connect();
 80014b2:	f000 f823 	bl	80014fc <MQTT_Connect>
        return error;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	e000      	b.n	80014bc <MQTT_Init+0xe8>
    }
    else
    {
        return error;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	240014bc 	.word	0x240014bc
 80014c8:	24000948 	.word	0x24000948
 80014cc:	24001684 	.word	0x24001684
 80014d0:	0801ba38 	.word	0x0801ba38
 80014d4:	0801ba40 	.word	0x0801ba40
 80014d8:	0801ba48 	.word	0x0801ba48
 80014dc:	0801ba50 	.word	0x0801ba50
 80014e0:	0801ba5c 	.word	0x0801ba5c
 80014e4:	0801ba6c 	.word	0x0801ba6c
 80014e8:	0801ba7c 	.word	0x0801ba7c
 80014ec:	0801ba8c 	.word	0x0801ba8c
 80014f0:	0801baa8 	.word	0x0801baa8
 80014f4:	0801bab4 	.word	0x0801bab4
 80014f8:	0801bab8 	.word	0x0801bab8

080014fc <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0d8      	sub	sp, #352	; 0x160
 8001500:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <MQTT_Connect+0x104>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <MQTT_Connect+0x104>)
 800150c:	2200      	movs	r2, #0
 800150e:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001516:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800151a:	227c      	movs	r2, #124	; 0x7c
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f019 fdaa 	bl	801b078 <memset>
    unsigned char buf[128] = {0};
 8001524:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	3304      	adds	r3, #4
 8001532:	227c      	movs	r2, #124	; 0x7c
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f019 fd9e 	bl	801b078 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MQTT_Connect+0x104>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MQTT_Connect+0x104>)
 8001542:	8a1b      	ldrh	r3, [r3, #16]
 8001544:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001548:	492e      	ldr	r1, [pc, #184]	; (8001604 <MQTT_Connect+0x108>)
 800154a:	f019 fd75 	bl	801b038 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800154e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001552:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <MQTT_Connect+0x10c>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff0f 	bl	800137c <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 800155e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001562:	f001 f94f 	bl	8002804 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MQTT_Connect+0x104>)
 8001568:	7c9b      	ldrb	r3, [r3, #18]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d142      	bne.n	80015f4 <MQTT_Connect+0xf8>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 800156e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001572:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <MQTT_Connect+0x110>)
 8001578:	4618      	mov	r0, r3
 800157a:	4611      	mov	r1, r2
 800157c:	2358      	movs	r3, #88	; 0x58
 800157e:	461a      	mov	r2, r3
 8001580:	f019 fdc4 	bl	801b10c <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MQTT_Connect+0x104>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800158c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MQTT_Connect+0x104>)
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800159a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800159e:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MQTT_Connect+0x104>)
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015ac:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MQTT_Connect+0x104>)
 80015b0:	8c1a      	ldrh	r2, [r3, #32]
 80015b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015ba:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 80015bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015c4:	2201      	movs	r2, #1
 80015c6:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 80015c8:	1d3a      	adds	r2, r7, #4
 80015ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fa27 	bl	8000a24 <MQTTSerialize_connect>
 80015d6:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80015da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015e4:	4619      	mov	r1, r3
 80015e6:	480a      	ldr	r0, [pc, #40]	; (8001610 <MQTT_Connect+0x114>)
 80015e8:	f008 ffc6 	bl	800a578 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 80015ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80015f0:	f001 f908 	bl	8002804 <HAL_Delay>
#endif
    }
}
 80015f4:	bf00      	nop
 80015f6:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	240014bc 	.word	0x240014bc
 8001604:	0801bac4 	.word	0x0801bac4
 8001608:	0801ba38 	.word	0x0801ba38
 800160c:	0801bae0 	.word	0x0801bae0
 8001610:	24001684 	.word	0x24001684

08001614 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b0cf      	sub	sp, #316	; 0x13c
 8001618:	af08      	add	r7, sp, #32
 800161a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001628:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800162c:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800162e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	22fc      	movs	r2, #252	; 0xfc
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f019 fd19 	bl	801b078 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001646:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800164a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001656:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001662:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800166a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001672:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001676:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800167e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001682:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	f7fe ff50 	bl	800052c <strlen>
 800168c:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800168e:	f107 0414 	add.w	r4, r7, #20
 8001692:	9306      	str	r3, [sp, #24]
 8001694:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	9305      	str	r3, [sp, #20]
 80016a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016a4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80016a8:	ab02      	add	r3, sp, #8
 80016aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016b0:	2300      	movs	r3, #0
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fcfd 	bl	80010c0 <MQTTSerialize_publish>
 80016c6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80016ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MQTT_Pub+0xd8>)
 80016d8:	f008 ff4e 	bl	800a578 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80016dc:	2064      	movs	r0, #100	; 0x64
 80016de:	f001 f891 	bl	8002804 <HAL_Delay>
#endif
}
 80016e2:	bf00      	nop
 80016e4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	24001684 	.word	0x24001684

080016f0 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0ca      	sub	sp, #296	; 0x128
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016fe:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 8001700:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	22fc      	movs	r2, #252	; 0xfc
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f019 fcb0 	bl	801b078 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001728:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001734:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800173c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001740:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001744:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001748:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8001750:	f107 0014 	add.w	r0, r7, #20
 8001754:	2300      	movs	r3, #0
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	2301      	movs	r3, #1
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	f000 f886 	bl	800187a <MQTTSerialize_subscribe>
 800176e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MQTT_Sub+0xa4>)
 8001780:	f008 fefa 	bl	800a578 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f001 f83d 	bl	8002804 <HAL_Delay>
#endif
}
 800178a:	bf00      	nop
 800178c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24001684 	.word	0x24001684

08001798 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af06      	add	r7, sp, #24
 800179e:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	2100      	movs	r1, #0
 80017a4:	4819      	ldr	r0, [pc, #100]	; (800180c <MQTT_Receive+0x74>)
 80017a6:	f019 fc67 	bl	801b078 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	2100      	movs	r1, #0
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <MQTT_Receive+0x78>)
 80017b0:	f019 fc62 	bl	801b078 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 80017b4:	2304      	movs	r3, #4
 80017b6:	9304      	str	r3, [sp, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	9303      	str	r3, [sp, #12]
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MQTT_Receive+0x7c>)
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MQTT_Receive+0x80>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <MQTT_Receive+0x84>)
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <MQTT_Receive+0x88>)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MQTT_Receive+0x8c>)
 80017d4:	f7ff fa12 	bl	8000bfc <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <MQTT_Receive+0x74>)
 80017e0:	f019 fc94 	bl	801b10c <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <MQTT_Receive+0x90>)
 80017e8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <MQTT_Receive+0x90>)
 80017f0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80017f2:	4619      	mov	r1, r3
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <MQTT_Receive+0x78>)
 80017f6:	f019 fc89 	bl	801b10c <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MQTT_Receive+0x90>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24001530 	.word	0x24001530
 8001810:	240014ec 	.word	0x240014ec
 8001814:	2400152c 	.word	0x2400152c
 8001818:	240014ea 	.word	0x240014ea
 800181c:	240014e8 	.word	0x240014e8
 8001820:	240014e4 	.word	0x240014e4
 8001824:	240014e1 	.word	0x240014e1
 8001828:	240014bc 	.word	0x240014bc

0800182c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001836:	2302      	movs	r3, #2
 8001838:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e013      	b.n	8001868 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001854:	f7ff fbfb 	bl	800104e <MQTTstrlen>
 8001858:	4603      	mov	r3, r0
 800185a:	3303      	adds	r3, #3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbe7      	blt.n	8001840 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	; 0x28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	4611      	mov	r1, r2
 8001886:	461a      	mov	r2, r3
 8001888:	460b      	mov	r3, r1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4613      	mov	r3, r2
 800188e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80018a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018a8:	f7ff ffc0 	bl	800182c <MQTTSerialize_subscribeLength>
 80018ac:	61f8      	str	r0, [r7, #28]
 80018ae:	69f8      	ldr	r0, [r7, #28]
 80018b0:	f7ff fa82 	bl	8000db8 <MQTTPacket_len>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	da03      	bge.n	80018c4 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80018bc:	f06f 0301 	mvn.w	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80018c2:	e051      	b.n	8001968 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80018c8:	7d3b      	ldrb	r3, [r7, #20]
 80018ca:	2208      	movs	r2, #8
 80018cc:	f362 1307 	bfi	r3, r2, #4, #4
 80018d0:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7d3b      	ldrb	r3, [r7, #20]
 80018dc:	f362 03c3 	bfi	r3, r2, #3, #1
 80018e0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80018e2:	7d3b      	ldrb	r3, [r7, #20]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f362 0342 	bfi	r3, r2, #1, #2
 80018ea:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80018ec:	7d3a      	ldrb	r2, [r7, #20]
 80018ee:	f107 0318 	add.w	r3, r7, #24
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff faee 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	69f9      	ldr	r1, [r7, #28]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9ee 	bl	8000ce0 <MQTTPacket_encode>
 8001904:	4602      	mov	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4413      	add	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800190c:	88ba      	ldrh	r2, [r7, #4]
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff faf3 	bl	8000f00 <writeInt>

	for (i = 0; i < count; ++i)
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	e01b      	b.n	8001958 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	4413      	add	r3, r2
 8001930:	f107 0018 	add.w	r0, r7, #24
 8001934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001936:	f7ff fb2b 	bl	8000f90 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001940:	4413      	add	r3, r2
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fac2 	bl	8000ed6 <writeChar>
	for (i = 0; i < count; ++i)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	3301      	adds	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	429a      	cmp	r2, r3
 800195e:	dbdf      	blt.n	8001920 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800196a:	4618      	mov	r0, r3
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001990:	f016 fee8 	bl	8018764 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a4c:	f003 f838 	bl	8004ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	4825      	ldr	r0, [pc, #148]	; (8001aec <MX_GPIO_Init+0x154>)
 8001a56:	f003 f833 	bl	8004ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481f      	ldr	r0, [pc, #124]	; (8001af0 <MX_GPIO_Init+0x158>)
 8001a72:	f002 fd6b 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001a76:	2320      	movs	r3, #32
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a7a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a8c:	f002 fd5e 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001aaa:	f002 fd4f 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001aae:	2310      	movs	r3, #16
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2302      	movs	r3, #2
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <MX_GPIO_Init+0x154>)
 8001ac6:	f002 fd41 	bl	800454c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2106      	movs	r1, #6
 8001ace:	2017      	movs	r0, #23
 8001ad0:	f000 ffcb 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ad4:	2017      	movs	r0, #23
 8001ad6:	f000 ffe2 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58021400 	.word	0x58021400
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020800 	.word	0x58020800

08001af4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
     if (huart == UART_SIM800) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_UART_RxCpltCallback+0x1c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_UART_RxCpltCallback+0x14>
         Sim800_RxCallBack();
 8001b04:	f7ff fb52 	bl	80011ac <Sim800_RxCallBack>
     }
 }
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	24001684 	.word	0x24001684

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <main+0x124>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11b      	bne.n	8001b5e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b26:	f3bf 8f4f 	dsb	sy
}
 8001b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b2c:	f3bf 8f6f 	isb	sy
}
 8001b30:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <main+0x124>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3a:	f3bf 8f4f 	dsb	sy
}
 8001b3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b40:	f3bf 8f6f 	isb	sy
}
 8001b44:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <main+0x124>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <main+0x124>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b52:	f3bf 8f4f 	dsb	sy
}
 8001b56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b58:	f3bf 8f6f 	isb	sy
}
 8001b5c:	e000      	b.n	8001b60 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b5e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <main+0x124>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d138      	bne.n	8001bde <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <main+0x124>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b74:	f3bf 8f4f 	dsb	sy
}
 8001b78:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <main+0x124>)
 8001b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b80:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0b5b      	lsrs	r3, r3, #13
 8001b86:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b8a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	08db      	lsrs	r3, r3, #3
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b9e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ba4:	4924      	ldr	r1, [pc, #144]	; (8001c38 <main+0x124>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <main+0x82>
    } while(sets-- != 0U);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e5      	bne.n	8001b8c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc0:	f3bf 8f4f 	dsb	sy
}
 8001bc4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <main+0x124>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <main+0x124>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd2:	f3bf 8f4f 	dsb	sy
}
 8001bd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd8:	f3bf 8f6f 	isb	sy
}
 8001bdc:	e000      	b.n	8001be0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001bde:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be0:	f000 fdb4 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be4:	f000 f834 	bl	8001c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be8:	f7ff fed6 	bl	8001998 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8001bec:	f000 fa22 	bl	8002034 <MX_SDMMC1_SD_Init>
  MX_USART2_UART_Init();
 8001bf0:	f000 fcc6 	bl	8002580 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // MQQT settings
      SIM800.sim.apn = "weborange";
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <main+0x128>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <main+0x12c>)
 8001bf8:	601a      	str	r2, [r3, #0]
      SIM800.sim.apn_user = "";
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <main+0x128>)
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <main+0x130>)
 8001bfe:	605a      	str	r2, [r3, #4]
      SIM800.sim.apn_pass = "";
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <main+0x128>)
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <main+0x130>)
 8001c04:	609a      	str	r2, [r3, #8]
      SIM800.mqttServer.host = "test.mosquitto.org";
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <main+0x128>)
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <main+0x134>)
 8001c0a:	60da      	str	r2, [r3, #12]
      SIM800.mqttServer.port = 1883;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <main+0x128>)
 8001c0e:	f240 725b 	movw	r2, #1883	; 0x75b
 8001c12:	821a      	strh	r2, [r3, #16]
      SIM800.mqttClient.username = "";
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <main+0x128>)
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <main+0x130>)
 8001c18:	615a      	str	r2, [r3, #20]
      SIM800.mqttClient.pass = "";
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <main+0x128>)
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <main+0x130>)
 8001c1e:	619a      	str	r2, [r3, #24]
      SIM800.mqttClient.clientID = "TestSub";
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <main+0x128>)
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <main+0x138>)
 8001c24:	61da      	str	r2, [r3, #28]
      SIM800.mqttClient.keepAliveInterval = 120;
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <main+0x128>)
 8001c28:	2278      	movs	r2, #120	; 0x78
 8001c2a:	841a      	strh	r2, [r3, #32]




      MQTT_Init();
 8001c2c:	f7ff fbd2 	bl	80013d4 <MQTT_Init>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001c30:	f7ff feac 	bl	800198c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <main+0x120>
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	240014bc 	.word	0x240014bc
 8001c40:	0801bb40 	.word	0x0801bb40
 8001c44:	0801bb4c 	.word	0x0801bb4c
 8001c48:	0801bb50 	.word	0x0801bb50
 8001c4c:	0801bb64 	.word	0x0801bb64

08001c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ce      	sub	sp, #312	; 0x138
 8001c54:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
		  RCC_OscInitTypeDef RCC_OscInitStruct;
		  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
		  HAL_StatusTypeDef ret = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

		  /*!< Supply configuration update enable */
		  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f002 ff6d 	bl	8004b3c <HAL_PWREx_ConfigSupply>

		  /* The voltage scaling allows optimizing the power consumption when the device is
		     clocked below the maximum system frequency, to update the voltage scaling value
		     regarding system frequency refer to product datasheet.  */
		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <SystemClock_Config+0x21c>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <SystemClock_Config+0x21c>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <SystemClock_Config+0x21c>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <SystemClock_Config+0x220>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <SystemClock_Config+0x220>)
 8001c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <SystemClock_Config+0x220>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001ca0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001cae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cb2:	681b      	ldr	r3, [r3, #0]

		  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cb4:	bf00      	nop
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <SystemClock_Config+0x220>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc2:	d1f8      	bne.n	8001cb6 <SystemClock_Config+0x66>

		  /* Enable HSE Oscillator and activate PLL with HSE as source */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  RCC_OscInitStruct.PLL.PLLM = 5;
 8001cea:	2305      	movs	r3, #5
 8001cec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  RCC_OscInitStruct.PLL.PLLN = 160;
 8001cf0:	23a0      	movs	r3, #160	; 0xa0
 8001cf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001d14:	2308      	movs	r3, #8
 8001d16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 ff46 	bl	8004bb0 <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001d2a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xe6>
		  {
		    Error_Handler();
 8001d32:	f000 f979 	bl	8002028 <Error_Handler>
		  }

		/* Select PLL as system clock source and configure  bus clocks dividers */
		  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001d36:	233f      	movs	r3, #63	; 0x3f
 8001d38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d62:	2340      	movs	r3, #64	; 0x40
 8001d64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001d68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb78 	bl	8005464 <HAL_RCC_ClockConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001d7a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0x136>
		  {
		    Error_Handler();
 8001d82:	f000 f951 	bl	8002028 <Error_Handler>
		  }

		  /* PLL2_VCO Input = HSE_VALUE/PLL2_M = 5 Mhz */
		  /* PLL2_VCO Output = PLL2_VCO Input * PLL_N = 700 Mhz */
		  /* SDMMC Kernel Clock = PLL2_VCO Output/PLL_R = 700/6 = 116 Mhz */
		  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001d86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d8a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8001d8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
		  RCC_PeriphCLKInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001d9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50
		  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL1VCIRANGE_2;
 8001da8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001db0:	2208      	movs	r2, #8
 8001db2:	61da      	str	r2, [r3, #28]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 5;
 8001db4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	609a      	str	r2, [r3, #8]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 140;
 8001dc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dc8:	228c      	movs	r2, #140	; 0x8c
 8001dca:	60da      	str	r2, [r3, #12]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 8001dcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
		  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 2;
 8001dd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001de0:	2202      	movs	r2, #2
 8001de2:	611a      	str	r2, [r3, #16]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 6;
 8001de4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dec:	2206      	movs	r2, #6
 8001dee:	619a      	str	r2, [r3, #24]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 4;
 8001df0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001df8:	2204      	movs	r2, #4
 8001dfa:	615a      	str	r2, [r3, #20]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
		  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fef7 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001e18:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x1d4>
		  {
		    Error_Handler();
 8001e20:	f000 f902 	bl	8002028 <Error_Handler>
		  }

		  /*activate CSI clock mondatory for I/O Compensation Cell*/
		  __HAL_RCC_CSI_ENABLE() ;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <SystemClock_Config+0x224>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <SystemClock_Config+0x224>)
 8001e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2e:	6013      	str	r3, [r2, #0]

		  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
		  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <SystemClock_Config+0x224>)
 8001e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <SystemClock_Config+0x224>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <SystemClock_Config+0x224>)
 8001e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e46:	f003 0202 	and.w	r2, r3, #2
 8001e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e58:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e5c:	681b      	ldr	r3, [r3, #0]

		  /* Enables the I/O Compensation Cell */
		  HAL_EnableCompensationCell();
 8001e5e:	f000 fd01 	bl	8002864 <HAL_EnableCompensationCell>
}
 8001e62:	bf00      	nop
 8001e64:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	58000400 	.word	0x58000400
 8001e70:	58024800 	.word	0x58024800
 8001e74:	58024400 	.word	0x58024400

08001e78 <GetSector>:
/* USER CODE BEGIN 4 */



uint32_t GetSector(uint32_t Address)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <GetSector+0x150>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d803      	bhi.n	8001e94 <GetSector+0x1c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e92:	d207      	bcs.n	8001ea4 <GetSector+0x2c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <GetSector+0x154>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d806      	bhi.n	8001eaa <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001ea2:	d302      	bcc.n	8001eaa <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e086      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <GetSector+0x158>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d803      	bhi.n	8001eba <GetSector+0x42>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <GetSector+0x150>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d807      	bhi.n	8001eca <GetSector+0x52>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a45      	ldr	r2, [pc, #276]	; (8001fd4 <GetSector+0x15c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d806      	bhi.n	8001ed0 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <GetSector+0x154>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d902      	bls.n	8001ed0 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e073      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <GetSector+0x160>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d803      	bhi.n	8001ee0 <GetSector+0x68>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3d      	ldr	r2, [pc, #244]	; (8001fd0 <GetSector+0x158>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d807      	bhi.n	8001ef0 <GetSector+0x78>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <GetSector+0x164>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d806      	bhi.n	8001ef6 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <GetSector+0x15c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d902      	bls.n	8001ef6 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e060      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <GetSector+0x168>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d803      	bhi.n	8001f06 <GetSector+0x8e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <GetSector+0x160>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d807      	bhi.n	8001f16 <GetSector+0x9e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <GetSector+0x16c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d806      	bhi.n	8001f1c <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <GetSector+0x164>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d902      	bls.n	8001f1c <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 8001f16:	2303      	movs	r3, #3
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e04d      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <GetSector+0x170>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d803      	bhi.n	8001f2c <GetSector+0xb4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <GetSector+0x168>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d807      	bhi.n	8001f3c <GetSector+0xc4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <GetSector+0x174>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d806      	bhi.n	8001f42 <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <GetSector+0x16c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d902      	bls.n	8001f42 <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e03a      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <GetSector+0x178>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d803      	bhi.n	8001f52 <GetSector+0xda>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <GetSector+0x170>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d807      	bhi.n	8001f62 <GetSector+0xea>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <GetSector+0x17c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d806      	bhi.n	8001f68 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <GetSector+0x174>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d902      	bls.n	8001f68 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8001f62:	2305      	movs	r3, #5
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e027      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <GetSector+0x180>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d803      	bhi.n	8001f78 <GetSector+0x100>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <GetSector+0x178>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d807      	bhi.n	8001f88 <GetSector+0x110>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <GetSector+0x184>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d806      	bhi.n	8001f8e <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <GetSector+0x17c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d902      	bls.n	8001f8e <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e014      	b.n	8001fb8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001f94:	d203      	bcs.n	8001f9e <GetSector+0x126>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <GetSector+0x180>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d807      	bhi.n	8001fae <GetSector+0x136>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <GetSector+0x188>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d806      	bhi.n	8001fb4 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <GetSector+0x184>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d902      	bls.n	8001fb4 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e001      	b.n	8001fb8 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	0801ffff 	.word	0x0801ffff
 8001fcc:	0811ffff 	.word	0x0811ffff
 8001fd0:	0803ffff 	.word	0x0803ffff
 8001fd4:	0813ffff 	.word	0x0813ffff
 8001fd8:	0805ffff 	.word	0x0805ffff
 8001fdc:	0815ffff 	.word	0x0815ffff
 8001fe0:	0807ffff 	.word	0x0807ffff
 8001fe4:	0817ffff 	.word	0x0817ffff
 8001fe8:	0809ffff 	.word	0x0809ffff
 8001fec:	0819ffff 	.word	0x0819ffff
 8001ff0:	080bffff 	.word	0x080bffff
 8001ff4:	081bffff 	.word	0x081bffff
 8001ff8:	080dffff 	.word	0x080dffff
 8001ffc:	081dffff 	.word	0x081dffff
 8002000:	081ffffe 	.word	0x081ffffe

08002004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002016:	f000 fbd5 	bl	80027c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40001000 	.word	0x40001000

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	e7fe      	b.n	8002030 <Error_Handler+0x8>
	...

08002034 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <MX_SDMMC1_SD_Init+0x40>)
 800203c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  //hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_SDMMC1_SD_Init+0x3c>)
 800205e:	f006 facd 	bl	80085fc <HAL_SD_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8002068:	f7ff ffde 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240015b4 	.word	0x240015b4
 8002074:	52007000 	.word	0x52007000

08002078 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0bc      	sub	sp, #240	; 0xf0
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	22c0      	movs	r2, #192	; 0xc0
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f018 ffed 	bl	801b078 <memset>
	  if(sdHandle->Instance==SDMMC1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_SD_MspInit+0x194>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f040 80ac 	bne.w	8002202 <HAL_SD_MspInit+0x18a>

	  /* USER CODE END SDMMC1_MspInit 0 */

	  /** Initializes the peripherals clock
	  */
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	66bb      	str	r3, [r7, #104]	; 0x68
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fd9e 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_SD_MspInit+0x56>
	    {
	      Error_Handler();
 80020ca:	f7ff ffad 	bl	8002028 <Error_Handler>
	    }

	    /* Peripheral clock enable */
	    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ec:	4b48      	ldr	r3, [pc, #288]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fc:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_SD_MspInit+0x198>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_SD_MspInit+0x198>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002110:	4a3f      	ldr	r2, [pc, #252]	; (8002210 <HAL_SD_MspInit+0x198>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_SD_MspInit+0x198>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_SD_MspInit+0x198>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_SD_MspInit+0x198>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_SD_MspInit+0x198>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
	    PC8     ------> SDMMC1_D0
	    PC9     ------> SDMMC1_D1
	    PC7     ------> SDMMC1_D123DIR
	    PC6     ------> SDMMC1_D0DIR
	    */
	    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8002146:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800214a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	                          |SDIO1_D1_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002160:	230c      	movs	r3, #12
 8002162:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002166:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800216a:	4619      	mov	r1, r3
 800216c:	4829      	ldr	r0, [pc, #164]	; (8002214 <HAL_SD_MspInit+0x19c>)
 800216e:	f002 f9ed 	bl	800454c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8002172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 800218c:	2307      	movs	r3, #7
 800218e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002196:	4619      	mov	r1, r3
 8002198:	481f      	ldr	r0, [pc, #124]	; (8002218 <HAL_SD_MspInit+0x1a0>)
 800219a:	f002 f9d7 	bl	800454c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800219e:	2304      	movs	r3, #4
 80021a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021b6:	230c      	movs	r3, #12
 80021b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c0:	4619      	mov	r1, r3
 80021c2:	4816      	ldr	r0, [pc, #88]	; (800221c <HAL_SD_MspInit+0x1a4>)
 80021c4:	f002 f9c2 	bl	800454c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80021c8:	23c0      	movs	r3, #192	; 0xc0
 80021ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80021e0:	2308      	movs	r3, #8
 80021e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ea:	4619      	mov	r1, r3
 80021ec:	4809      	ldr	r0, [pc, #36]	; (8002214 <HAL_SD_MspInit+0x19c>)
 80021ee:	f002 f9ad 	bl	800454c <HAL_GPIO_Init>

	    /* SDMMC1 interrupt Init */
	    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2107      	movs	r1, #7
 80021f6:	2031      	movs	r0, #49	; 0x31
 80021f8:	f000 fc37 	bl	8002a6a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80021fc:	2031      	movs	r0, #49	; 0x31
 80021fe:	f000 fc4e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SDMMC1_MspInit 1 */

	  /* USER CODE END SDMMC1_MspInit 1 */
	  }
}
 8002202:	bf00      	nop
 8002204:	37f0      	adds	r7, #240	; 0xf0
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	52007000 	.word	0x52007000
 8002210:	58024400 	.word	0x58024400
 8002214:	58020800 	.word	0x58020800
 8002218:	58020400 	.word	0x58020400
 800221c:	58020c00 	.word	0x58020c00

08002220 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

	  if(sdHandle->Instance==SDMMC1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_SD_MspDeInit+0x4c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d118      	bne.n	8002264 <HAL_SD_MspDeInit+0x44>
	  {
	  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

	  /* USER CODE END SDMMC1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_SD_MspDeInit+0x50>)
 8002234:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_SD_MspDeInit+0x50>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	    PC8     ------> SDMMC1_D0
	    PC9     ------> SDMMC1_D1
	    PC7     ------> SDMMC1_D123DIR
	    PC6     ------> SDMMC1_D0DIR
	    */
	    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8002242:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002246:	480b      	ldr	r0, [pc, #44]	; (8002274 <HAL_SD_MspDeInit+0x54>)
 8002248:	f002 fb30 	bl	80048ac <HAL_GPIO_DeInit>
	                          |SDIO1_D1_Pin|SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin);

	    HAL_GPIO_DeInit(GPIOB, SDIO1_CDIR_Pin|SDIO1_CKIN_Pin);
 800224c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002250:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_SD_MspDeInit+0x58>)
 8002252:	f002 fb2b 	bl	80048ac <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 8002256:	2104      	movs	r1, #4
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <HAL_SD_MspDeInit+0x5c>)
 800225a:	f002 fb27 	bl	80048ac <HAL_GPIO_DeInit>

	    /* SDMMC1 interrupt DeInit */
	    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800225e:	2031      	movs	r0, #49	; 0x31
 8002260:	f000 fc2b 	bl	8002aba <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

	  /* USER CODE END SDMMC1_MspDeInit 1 */
	  }
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	52007000 	.word	0x52007000
 8002270:	58024400 	.word	0x58024400
 8002274:	58020800 	.word	0x58020800
 8002278:	58020400 	.word	0x58020400
 800227c:	58020c00 	.word	0x58020c00

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_MspInit+0x30>)
 8002288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_MspInit+0x30>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_MspInit+0x30>)
 8002298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	58024400 	.word	0x58024400

080022b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	; 0x40
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	d827      	bhi.n	8002312 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80022c2:	2200      	movs	r2, #0
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	2036      	movs	r0, #54	; 0x36
 80022c8:	f000 fbcf 	bl	8002a6a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022cc:	2036      	movs	r0, #54	; 0x36
 80022ce:	f000 fbe6 	bl	8002a9e <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_InitTick+0xc4>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022d8:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_InitTick+0xc8>)
 80022da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_InitTick+0xc8>)
 80022e0:	f043 0310 	orr.w	r3, r3, #16
 80022e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_InitTick+0xc8>)
 80022ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022f6:	f107 0210 	add.w	r2, r7, #16
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fc3b 	bl	8005b7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_InitTick+0x6a>
 8002310:	e001      	b.n	8002316 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e02b      	b.n	800236e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002316:	f003 fc05 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800231a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800231c:	e004      	b.n	8002328 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800231e:	f003 fc01 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8002322:	4603      	mov	r3, r0
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_InitTick+0xcc>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	3b01      	subs	r3, #1
 8002334:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_InitTick+0xd0>)
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_InitTick+0xd4>)
 800233a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_InitTick+0xd0>)
 800233e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002342:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_InitTick+0xd0>)
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002348:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_InitTick+0xd0>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_InitTick+0xd0>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002356:	480b      	ldr	r0, [pc, #44]	; (8002384 <HAL_InitTick+0xd0>)
 8002358:	f007 fde4 	bl	8009f24 <HAL_TIM_Base_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002362:	4808      	ldr	r0, [pc, #32]	; (8002384 <HAL_InitTick+0xd0>)
 8002364:	f007 fe40 	bl	8009fe8 <HAL_TIM_Base_Start_IT>
 8002368:	4603      	mov	r3, r0
 800236a:	e000      	b.n	800236e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	3740      	adds	r7, #64	; 0x40
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	24000008 	.word	0x24000008
 800237c:	58024400 	.word	0x58024400
 8002380:	431bde83 	.word	0x431bde83
 8002384:	24001634 	.word	0x24001634
 8002388:	40001000 	.word	0x40001000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 80023bc:	2020      	movs	r0, #32
 80023be:	f002 fb98 	bl	8004af2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <USART2_IRQHandler+0x10>)
 80023ce:	f008 f9b3 	bl	800a738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	24001684 	.word	0x24001684

080023dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <SDMMC1_IRQHandler+0x10>)
 80023e2:	f006 fbb5 	bl	8008b50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	240015b4 	.word	0x240015b4

080023f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM6_DAC_IRQHandler+0x10>)
 80023f6:	f007 fe6f 	bl	800a0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	24001634 	.word	0x24001634

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f018 fe3e 	bl	801b0b4 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	24080000 	.word	0x24080000
 8002464:	00000400 	.word	0x00000400
 8002468:	24001680 	.word	0x24001680
 800246c:	24004b20 	.word	0x24004b20

08002470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <SystemInit+0xe4>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	4a36      	ldr	r2, [pc, #216]	; (8002554 <SystemInit+0xe4>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <SystemInit+0xe8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	2b06      	cmp	r3, #6
 800248e:	d807      	bhi.n	80024a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <SystemInit+0xe8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 030f 	bic.w	r3, r3, #15
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <SystemInit+0xe8>)
 800249a:	f043 0307 	orr.w	r3, r3, #7
 800249e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024a0:	4b2e      	ldr	r3, [pc, #184]	; (800255c <SystemInit+0xec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <SystemInit+0xec>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <SystemInit+0xec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <SystemInit+0xec>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4929      	ldr	r1, [pc, #164]	; (800255c <SystemInit+0xec>)
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <SystemInit+0xf0>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <SystemInit+0xe8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <SystemInit+0xe8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 030f 	bic.w	r3, r3, #15
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <SystemInit+0xe8>)
 80024d4:	f043 0307 	orr.w	r3, r3, #7
 80024d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <SystemInit+0xec>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <SystemInit+0xec>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <SystemInit+0xec>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <SystemInit+0xec>)
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <SystemInit+0xf4>)
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <SystemInit+0xec>)
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <SystemInit+0xf8>)
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <SystemInit+0xec>)
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <SystemInit+0xfc>)
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <SystemInit+0xec>)
 8002500:	2200      	movs	r2, #0
 8002502:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <SystemInit+0xec>)
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <SystemInit+0xfc>)
 8002508:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <SystemInit+0xec>)
 800250c:	2200      	movs	r2, #0
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <SystemInit+0xec>)
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <SystemInit+0xfc>)
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <SystemInit+0xec>)
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <SystemInit+0xec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <SystemInit+0xec>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <SystemInit+0xec>)
 800252a:	2200      	movs	r2, #0
 800252c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <SystemInit+0x100>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SystemInit+0x104>)
 8002534:	4013      	ands	r3, r2
 8002536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253a:	d202      	bcs.n	8002542 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SystemInit+0x108>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <SystemInit+0x10c>)
 8002544:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002548:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	52002000 	.word	0x52002000
 800255c:	58024400 	.word	0x58024400
 8002560:	eaf6ed7f 	.word	0xeaf6ed7f
 8002564:	02020200 	.word	0x02020200
 8002568:	01ff0000 	.word	0x01ff0000
 800256c:	01010280 	.word	0x01010280
 8002570:	5c001000 	.word	0x5c001000
 8002574:	ffff0000 	.word	0xffff0000
 8002578:	51008108 	.word	0x51008108
 800257c:	52004000 	.word	0x52004000

08002580 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <MX_USART2_UART_Init+0x90>)
 8002586:	4a23      	ldr	r2, [pc, #140]	; (8002614 <MX_USART2_UART_Init+0x94>)
 8002588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <MX_USART2_UART_Init+0x90>)
 800258c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <MX_USART2_UART_Init+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <MX_USART2_UART_Init+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025ca:	f007 ff85 	bl	800a4d8 <HAL_UART_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025d4:	f7ff fd28 	bl	8002028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d8:	2100      	movs	r1, #0
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025dc:	f00a fc81 	bl	800cee2 <HAL_UARTEx_SetTxFifoThreshold>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025e6:	f7ff fd1f 	bl	8002028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ea:	2100      	movs	r1, #0
 80025ec:	4808      	ldr	r0, [pc, #32]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025ee:	f00a fcb6 	bl	800cf5e <HAL_UARTEx_SetRxFifoThreshold>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025f8:	f7ff fd16 	bl	8002028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_USART2_UART_Init+0x90>)
 80025fe:	f00a fc37 	bl	800ce70 <HAL_UARTEx_DisableFifoMode>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002608:	f7ff fd0e 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	24001684 	.word	0x24001684
 8002614:	40004400 	.word	0x40004400

08002618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0ba      	sub	sp, #232	; 0xe8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	22c0      	movs	r2, #192	; 0xc0
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f018 fd1d 	bl	801b078 <memset>
  if(uartHandle->Instance==USART2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_UART_MspInit+0xd4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d14d      	bne.n	80026e4 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002648:	f04f 0202 	mov.w	r2, #2
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4618      	mov	r0, r3
 8002660:	f003 face 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800266a:	f7ff fcdd 	bl	8002028 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 8002670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002674:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 8002680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_MspInit+0xd8>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026aa:	2360      	movs	r3, #96	; 0x60
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c2:	2307      	movs	r3, #7
 80026c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <HAL_UART_MspInit+0xdc>)
 80026d0:	f001 ff3c 	bl	800454c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	2026      	movs	r0, #38	; 0x26
 80026da:	f000 f9c6 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026de:	2026      	movs	r0, #38	; 0x26
 80026e0:	f000 f9dd 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026e4:	bf00      	nop
 80026e6:	37e8      	adds	r7, #232	; 0xe8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40004400 	.word	0x40004400
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58020c00 	.word	0x58020c00

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026fc:	f7ff feb8 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	; (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	; (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002726:	f018 fccb 	bl	801b0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff f9f3 	bl	8001b14 <main>
  bx  lr
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002734:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002738:	240000c0 	.word	0x240000c0
  ldr r2, =_sidata
 800273c:	0801bccc 	.word	0x0801bccc
  ldr r2, =_sbss
 8002740:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8002744:	24004b1c 	.word	0x24004b1c

08002748 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC3_IRQHandler>
	...

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
 8002754:	f000 f97e 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002758:	f003 f83a 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_Init+0x68>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	4913      	ldr	r1, [pc, #76]	; (80027b8 <HAL_Init+0x6c>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_Init+0x68>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_Init+0x6c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_Init+0x70>)
 800278e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_Init+0x74>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	200f      	movs	r0, #15
 8002798:	f7ff fd8c 	bl	80022b4 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e002      	b.n	80027ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027a6:	f7ff fd6b 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	58024400 	.word	0x58024400
 80027b8:	0801bc50 	.word	0x0801bc50
 80027bc:	24000004 	.word	0x24000004
 80027c0:	24000000 	.word	0x24000000

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	2400000c 	.word	0x2400000c
 80027e8:	24001718 	.word	0x24001718

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	24001718 	.word	0x24001718

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2400000c 	.word	0x2400000c

0800284c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_GetREVID+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	5c001000 	.word	0x5c001000

08002864 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_EnableCompensationCell+0x1c>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_EnableCompensationCell+0x1c>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6213      	str	r3, [r2, #32]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	58000400 	.word	0x58000400

08002884 <__NVIC_SetPriorityGrouping>:
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00
 80028c8:	05fa0000 	.word	0x05fa0000

080028cc <__NVIC_GetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <__NVIC_EnableIRQ+0x38>)
 8002902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100

08002924 <__NVIC_DisableIRQ>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db12      	blt.n	800295c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	490a      	ldr	r1, [pc, #40]	; (8002968 <__NVIC_DisableIRQ+0x44>)
 800293e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	3320      	adds	r3, #32
 800294c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002950:	f3bf 8f4f 	dsb	sy
}
 8002954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002956:	f3bf 8f6f 	isb	sy
}
 800295a:	bf00      	nop
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <__NVIC_SystemReset>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002a2c:	f3bf 8f4f 	dsb	sy
}
 8002a30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <__NVIC_SystemReset+0x24>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <__NVIC_SystemReset+0x24>)
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_SystemReset+0x28>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a42:	f3bf 8f4f 	dsb	sy
}
 8002a46:	bf00      	nop
    __NOP();
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <__NVIC_SystemReset+0x20>
 8002a4c:	e000ed00 	.word	0xe000ed00
 8002a50:	05fa0004 	.word	0x05fa0004

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff11 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff28 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff9c 	bl	80029c0 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff6b 	bl	800296c <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff1b 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff2b 	bl	8002924 <__NVIC_DisableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002ada:	f7ff ffa5 	bl	8002a28 <__NVIC_SystemReset>
	...

08002ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fe80 	bl	80027ec <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e2dc      	b.n	80030b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e2cd      	b.n	80030b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a76      	ldr	r2, [pc, #472]	; (8002cf4 <HAL_DMA_Abort+0x214>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d04a      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a74      	ldr	r2, [pc, #464]	; (8002cf8 <HAL_DMA_Abort+0x218>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d045      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a73      	ldr	r2, [pc, #460]	; (8002cfc <HAL_DMA_Abort+0x21c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d040      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a71      	ldr	r2, [pc, #452]	; (8002d00 <HAL_DMA_Abort+0x220>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d03b      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a70      	ldr	r2, [pc, #448]	; (8002d04 <HAL_DMA_Abort+0x224>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d036      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <HAL_DMA_Abort+0x228>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d031      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6d      	ldr	r2, [pc, #436]	; (8002d0c <HAL_DMA_Abort+0x22c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02c      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6b      	ldr	r2, [pc, #428]	; (8002d10 <HAL_DMA_Abort+0x230>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d027      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6a      	ldr	r2, [pc, #424]	; (8002d14 <HAL_DMA_Abort+0x234>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_DMA_Abort+0x238>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01d      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a67      	ldr	r2, [pc, #412]	; (8002d1c <HAL_DMA_Abort+0x23c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <HAL_DMA_Abort+0x240>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a64      	ldr	r2, [pc, #400]	; (8002d24 <HAL_DMA_Abort+0x244>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_DMA_Abort+0x248>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a61      	ldr	r2, [pc, #388]	; (8002d2c <HAL_DMA_Abort+0x24c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_DMA_Abort+0xd6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <HAL_DMA_Abort+0x250>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_DMA_Abort+0xda>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_DMA_Abort+0xdc>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 021e 	bic.w	r2, r2, #30
 8002bce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bde:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e00a      	b.n	8002bfe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 020e 	bic.w	r2, r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a3c      	ldr	r2, [pc, #240]	; (8002cf4 <HAL_DMA_Abort+0x214>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d072      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_DMA_Abort+0x218>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d06d      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <HAL_DMA_Abort+0x21c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d068      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_DMA_Abort+0x220>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d063      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_DMA_Abort+0x224>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_DMA_Abort+0x228>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d059      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_DMA_Abort+0x22c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d054      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_DMA_Abort+0x230>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04f      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <HAL_DMA_Abort+0x234>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_DMA_Abort+0x238>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <HAL_DMA_Abort+0x23c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <HAL_DMA_Abort+0x240>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_DMA_Abort+0x244>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_DMA_Abort+0x248>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_DMA_Abort+0x24c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_DMA_Abort+0x250>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <HAL_DMA_Abort+0x254>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_DMA_Abort+0x258>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_DMA_Abort+0x25c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_DMA_Abort+0x260>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_DMA_Abort+0x264>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_DMA_Abort+0x268>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_DMA_Abort+0x26c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Abort+0x20e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_DMA_Abort+0x270>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d132      	bne.n	8002d54 <HAL_DMA_Abort+0x274>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e031      	b.n	8002d56 <HAL_DMA_Abort+0x276>
 8002cf2:	bf00      	nop
 8002cf4:	40020010 	.word	0x40020010
 8002cf8:	40020028 	.word	0x40020028
 8002cfc:	40020040 	.word	0x40020040
 8002d00:	40020058 	.word	0x40020058
 8002d04:	40020070 	.word	0x40020070
 8002d08:	40020088 	.word	0x40020088
 8002d0c:	400200a0 	.word	0x400200a0
 8002d10:	400200b8 	.word	0x400200b8
 8002d14:	40020410 	.word	0x40020410
 8002d18:	40020428 	.word	0x40020428
 8002d1c:	40020440 	.word	0x40020440
 8002d20:	40020458 	.word	0x40020458
 8002d24:	40020470 	.word	0x40020470
 8002d28:	40020488 	.word	0x40020488
 8002d2c:	400204a0 	.word	0x400204a0
 8002d30:	400204b8 	.word	0x400204b8
 8002d34:	58025408 	.word	0x58025408
 8002d38:	5802541c 	.word	0x5802541c
 8002d3c:	58025430 	.word	0x58025430
 8002d40:	58025444 	.word	0x58025444
 8002d44:	58025458 	.word	0x58025458
 8002d48:	5802546c 	.word	0x5802546c
 8002d4c:	58025480 	.word	0x58025480
 8002d50:	58025494 	.word	0x58025494
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6d      	ldr	r2, [pc, #436]	; (8002f24 <HAL_DMA_Abort+0x444>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6b      	ldr	r2, [pc, #428]	; (8002f28 <HAL_DMA_Abort+0x448>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <HAL_DMA_Abort+0x44c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_DMA_Abort+0x450>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_DMA_Abort+0x454>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a65      	ldr	r2, [pc, #404]	; (8002f38 <HAL_DMA_Abort+0x458>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a64      	ldr	r2, [pc, #400]	; (8002f3c <HAL_DMA_Abort+0x45c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a62      	ldr	r2, [pc, #392]	; (8002f40 <HAL_DMA_Abort+0x460>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_DMA_Abort+0x464>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_DMA_Abort+0x468>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_DMA_Abort+0x46c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_DMA_Abort+0x470>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a5b      	ldr	r2, [pc, #364]	; (8002f54 <HAL_DMA_Abort+0x474>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a59      	ldr	r2, [pc, #356]	; (8002f58 <HAL_DMA_Abort+0x478>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_DMA_Abort+0x47c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_Abort+0x32a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_DMA_Abort+0x480>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_Abort+0x33c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e007      	b.n	8002e2c <HAL_DMA_Abort+0x34c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e2c:	e013      	b.n	8002e56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e2e:	f7ff fcdd 	bl	80027ec <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d90c      	bls.n	8002e56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12d      	b.n	80030b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e5      	bne.n	8002e2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <HAL_DMA_Abort+0x444>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d04a      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_DMA_Abort+0x448>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d045      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_DMA_Abort+0x44c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d040      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_DMA_Abort+0x450>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d03b      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_DMA_Abort+0x454>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d036      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_DMA_Abort+0x458>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d031      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_DMA_Abort+0x45c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d02c      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_Abort+0x460>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d027      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_DMA_Abort+0x464>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DMA_Abort+0x468>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_DMA_Abort+0x46c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_DMA_Abort+0x470>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <HAL_DMA_Abort+0x474>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_DMA_Abort+0x478>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_DMA_Abort+0x47c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_DMA_Abort+0x422>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_DMA_Abort+0x480>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_Abort+0x426>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_DMA_Abort+0x428>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02b      	beq.n	8002f64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	223f      	movs	r2, #63	; 0x3f
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e02a      	b.n	8002f7a <HAL_DMA_Abort+0x49a>
 8002f24:	40020010 	.word	0x40020010
 8002f28:	40020028 	.word	0x40020028
 8002f2c:	40020040 	.word	0x40020040
 8002f30:	40020058 	.word	0x40020058
 8002f34:	40020070 	.word	0x40020070
 8002f38:	40020088 	.word	0x40020088
 8002f3c:	400200a0 	.word	0x400200a0
 8002f40:	400200b8 	.word	0x400200b8
 8002f44:	40020410 	.word	0x40020410
 8002f48:	40020428 	.word	0x40020428
 8002f4c:	40020440 	.word	0x40020440
 8002f50:	40020458 	.word	0x40020458
 8002f54:	40020470 	.word	0x40020470
 8002f58:	40020488 	.word	0x40020488
 8002f5c:	400204a0 	.word	0x400204a0
 8002f60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a4f      	ldr	r2, [pc, #316]	; (80030bc <HAL_DMA_Abort+0x5dc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d072      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a4d      	ldr	r2, [pc, #308]	; (80030c0 <HAL_DMA_Abort+0x5e0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d06d      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4c      	ldr	r2, [pc, #304]	; (80030c4 <HAL_DMA_Abort+0x5e4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d068      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_DMA_Abort+0x5e8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d063      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a49      	ldr	r2, [pc, #292]	; (80030cc <HAL_DMA_Abort+0x5ec>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d05e      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a47      	ldr	r2, [pc, #284]	; (80030d0 <HAL_DMA_Abort+0x5f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d059      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a46      	ldr	r2, [pc, #280]	; (80030d4 <HAL_DMA_Abort+0x5f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d054      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <HAL_DMA_Abort+0x5f8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d04f      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_DMA_Abort+0x5fc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04a      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a41      	ldr	r2, [pc, #260]	; (80030e0 <HAL_DMA_Abort+0x600>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d045      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a40      	ldr	r2, [pc, #256]	; (80030e4 <HAL_DMA_Abort+0x604>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d040      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3e      	ldr	r2, [pc, #248]	; (80030e8 <HAL_DMA_Abort+0x608>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d03b      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3d      	ldr	r2, [pc, #244]	; (80030ec <HAL_DMA_Abort+0x60c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d036      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_DMA_Abort+0x610>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d031      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_DMA_Abort+0x614>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d02c      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <HAL_DMA_Abort+0x618>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d027      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_DMA_Abort+0x61c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a35      	ldr	r2, [pc, #212]	; (8003100 <HAL_DMA_Abort+0x620>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_Abort+0x624>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a32      	ldr	r2, [pc, #200]	; (8003108 <HAL_DMA_Abort+0x628>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_DMA_Abort+0x62c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <HAL_DMA_Abort+0x630>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2e      	ldr	r2, [pc, #184]	; (8003114 <HAL_DMA_Abort+0x634>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_Abort+0x58a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <HAL_DMA_Abort+0x638>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_DMA_Abort+0x58e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_DMA_Abort+0x590>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800307c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800309e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40020010 	.word	0x40020010
 80030c0:	40020028 	.word	0x40020028
 80030c4:	40020040 	.word	0x40020040
 80030c8:	40020058 	.word	0x40020058
 80030cc:	40020070 	.word	0x40020070
 80030d0:	40020088 	.word	0x40020088
 80030d4:	400200a0 	.word	0x400200a0
 80030d8:	400200b8 	.word	0x400200b8
 80030dc:	40020410 	.word	0x40020410
 80030e0:	40020428 	.word	0x40020428
 80030e4:	40020440 	.word	0x40020440
 80030e8:	40020458 	.word	0x40020458
 80030ec:	40020470 	.word	0x40020470
 80030f0:	40020488 	.word	0x40020488
 80030f4:	400204a0 	.word	0x400204a0
 80030f8:	400204b8 	.word	0x400204b8
 80030fc:	58025408 	.word	0x58025408
 8003100:	5802541c 	.word	0x5802541c
 8003104:	58025430 	.word	0x58025430
 8003108:	58025444 	.word	0x58025444
 800310c:	58025458 	.word	0x58025458
 8003110:	5802546c 	.word	0x5802546c
 8003114:	58025480 	.word	0x58025480
 8003118:	58025494 	.word	0x58025494

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e237      	b.n	800359e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e22c      	b.n	800359e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_DMA_Abort_IT+0x1a0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d04a      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <HAL_DMA_Abort_IT+0x1a4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d045      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_DMA_Abort_IT+0x1a8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d040      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_DMA_Abort_IT+0x1ac>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d03b      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_DMA_Abort_IT+0x1b0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d036      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_DMA_Abort_IT+0x1b4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d031      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a53      	ldr	r2, [pc, #332]	; (80032d4 <HAL_DMA_Abort_IT+0x1b8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02c      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_DMA_Abort_IT+0x1bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d027      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_DMA_Abort_IT+0x1c0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_DMA_Abort_IT+0x1c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01d      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4d      	ldr	r2, [pc, #308]	; (80032e4 <HAL_DMA_Abort_IT+0x1c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4c      	ldr	r2, [pc, #304]	; (80032e8 <HAL_DMA_Abort_IT+0x1cc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4a      	ldr	r2, [pc, #296]	; (80032ec <HAL_DMA_Abort_IT+0x1d0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00e      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a49      	ldr	r2, [pc, #292]	; (80032f0 <HAL_DMA_Abort_IT+0x1d4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_DMA_Abort_IT+0x1d8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <HAL_DMA_Abort_IT+0x1dc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Abort_IT+0xcc>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_DMA_Abort_IT+0xce>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8086 	beq.w	80032fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2f      	ldr	r2, [pc, #188]	; (80032bc <HAL_DMA_Abort_IT+0x1a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04a      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <HAL_DMA_Abort_IT+0x1a4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d045      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <HAL_DMA_Abort_IT+0x1a8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d040      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_DMA_Abort_IT+0x1ac>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d03b      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_DMA_Abort_IT+0x1b0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d036      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_DMA_Abort_IT+0x1b4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d031      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <HAL_DMA_Abort_IT+0x1b8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02c      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_DMA_Abort_IT+0x1bc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d027      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_DMA_Abort_IT+0x1c0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_DMA_Abort_IT+0x1c4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_DMA_Abort_IT+0x1c8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_DMA_Abort_IT+0x1cc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_DMA_Abort_IT+0x1d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_DMA_Abort_IT+0x1d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <HAL_DMA_Abort_IT+0x1d8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_Abort_IT+0x17c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_DMA_Abort_IT+0x1dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <HAL_DMA_Abort_IT+0x18e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e178      	b.n	800359c <HAL_DMA_Abort_IT+0x480>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e16f      	b.n	800359c <HAL_DMA_Abort_IT+0x480>
 80032bc:	40020010 	.word	0x40020010
 80032c0:	40020028 	.word	0x40020028
 80032c4:	40020040 	.word	0x40020040
 80032c8:	40020058 	.word	0x40020058
 80032cc:	40020070 	.word	0x40020070
 80032d0:	40020088 	.word	0x40020088
 80032d4:	400200a0 	.word	0x400200a0
 80032d8:	400200b8 	.word	0x400200b8
 80032dc:	40020410 	.word	0x40020410
 80032e0:	40020428 	.word	0x40020428
 80032e4:	40020440 	.word	0x40020440
 80032e8:	40020458 	.word	0x40020458
 80032ec:	40020470 	.word	0x40020470
 80032f0:	40020488 	.word	0x40020488
 80032f4:	400204a0 	.word	0x400204a0
 80032f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020e 	bic.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6c      	ldr	r2, [pc, #432]	; (80034c4 <HAL_DMA_Abort_IT+0x3a8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d04a      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6b      	ldr	r2, [pc, #428]	; (80034c8 <HAL_DMA_Abort_IT+0x3ac>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d045      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a69      	ldr	r2, [pc, #420]	; (80034cc <HAL_DMA_Abort_IT+0x3b0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d040      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a68      	ldr	r2, [pc, #416]	; (80034d0 <HAL_DMA_Abort_IT+0x3b4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a66      	ldr	r2, [pc, #408]	; (80034d4 <HAL_DMA_Abort_IT+0x3b8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d036      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_DMA_Abort_IT+0x3bc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d031      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_DMA_Abort_IT+0x3c0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a62      	ldr	r2, [pc, #392]	; (80034e0 <HAL_DMA_Abort_IT+0x3c4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d027      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a60      	ldr	r2, [pc, #384]	; (80034e4 <HAL_DMA_Abort_IT+0x3c8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5f      	ldr	r2, [pc, #380]	; (80034e8 <HAL_DMA_Abort_IT+0x3cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5d      	ldr	r2, [pc, #372]	; (80034ec <HAL_DMA_Abort_IT+0x3d0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5c      	ldr	r2, [pc, #368]	; (80034f0 <HAL_DMA_Abort_IT+0x3d4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_DMA_Abort_IT+0x3d8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a59      	ldr	r2, [pc, #356]	; (80034f8 <HAL_DMA_Abort_IT+0x3dc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a57      	ldr	r2, [pc, #348]	; (80034fc <HAL_DMA_Abort_IT+0x3e0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0x290>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a56      	ldr	r2, [pc, #344]	; (8003500 <HAL_DMA_Abort_IT+0x3e4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d108      	bne.n	80033be <HAL_DMA_Abort_IT+0x2a2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e007      	b.n	80033ce <HAL_DMA_Abort_IT+0x2b2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <HAL_DMA_Abort_IT+0x3a8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d072      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_DMA_Abort_IT+0x3ac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d06d      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a39      	ldr	r2, [pc, #228]	; (80034cc <HAL_DMA_Abort_IT+0x3b0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d068      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_DMA_Abort_IT+0x3b4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d063      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_DMA_Abort_IT+0x3b8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d05e      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_DMA_Abort_IT+0x3bc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d059      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_DMA_Abort_IT+0x3c0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d054      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_DMA_Abort_IT+0x3c4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d04f      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_DMA_Abort_IT+0x3c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d04a      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_DMA_Abort_IT+0x3cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d045      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DMA_Abort_IT+0x3d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d040      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_DMA_Abort_IT+0x3d4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d03b      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_DMA_Abort_IT+0x3d8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d036      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_DMA_Abort_IT+0x3dc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d031      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_DMA_Abort_IT+0x3e0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d02c      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_DMA_Abort_IT+0x3e4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d027      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Abort_IT+0x3e8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Abort_IT+0x3ec>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01d      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Abort_IT+0x3f0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_DMA_Abort_IT+0x3f4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_DMA_Abort_IT+0x3f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_DMA_Abort_IT+0x3fc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_DMA_Abort_IT+0x400>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_DMA_Abort_IT+0x3a2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_DMA_Abort_IT+0x404>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d132      	bne.n	8003524 <HAL_DMA_Abort_IT+0x408>
 80034be:	2301      	movs	r3, #1
 80034c0:	e031      	b.n	8003526 <HAL_DMA_Abort_IT+0x40a>
 80034c2:	bf00      	nop
 80034c4:	40020010 	.word	0x40020010
 80034c8:	40020028 	.word	0x40020028
 80034cc:	40020040 	.word	0x40020040
 80034d0:	40020058 	.word	0x40020058
 80034d4:	40020070 	.word	0x40020070
 80034d8:	40020088 	.word	0x40020088
 80034dc:	400200a0 	.word	0x400200a0
 80034e0:	400200b8 	.word	0x400200b8
 80034e4:	40020410 	.word	0x40020410
 80034e8:	40020428 	.word	0x40020428
 80034ec:	40020440 	.word	0x40020440
 80034f0:	40020458 	.word	0x40020458
 80034f4:	40020470 	.word	0x40020470
 80034f8:	40020488 	.word	0x40020488
 80034fc:	400204a0 	.word	0x400204a0
 8003500:	400204b8 	.word	0x400204b8
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d028      	beq.n	800357c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003558:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003570:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800357a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop

080035a8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80035bc:	2308      	movs	r3, #8
 80035be:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035c0:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_FLASH_Program+0x11c>)
 80035c2:	7d1b      	ldrb	r3, [r3, #20]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_FLASH_Program+0x24>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e076      	b.n	80036ba <HAL_FLASH_Program+0x112>
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_FLASH_Program+0x11c>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d8:	d306      	bcc.n	80035e8 <HAL_FLASH_Program+0x40>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80035e0:	d202      	bcs.n	80035e8 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e00c      	b.n	8003602 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80035ee:	d306      	bcc.n	80035fe <HAL_FLASH_Program+0x56>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80035f6:	d202      	bcs.n	80035fe <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e001      	b.n	8003602 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e05b      	b.n	80036ba <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003602:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <HAL_FLASH_Program+0x11c>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800360e:	f000 f915 	bl	800383c <FLASH_WaitForLastOperation>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361c:	2b00      	cmp	r3, #0
 800361e:	d147      	bne.n	80036b0 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d106      	bne.n	8003634 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_FLASH_Program+0x120>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_FLASH_Program+0x120>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	60d3      	str	r3, [r2, #12]
 8003632:	e007      	b.n	8003644 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_FLASH_Program+0x120>)
 8003636:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800363a:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_FLASH_Program+0x120>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8003644:	f3bf 8f6f 	isb	sy
}
 8003648:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800364a:	f3bf 8f4f 	dsb	sy
}
 800364e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	3304      	adds	r3, #4
 800365c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	61fb      	str	r3, [r7, #28]
        row_index--;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	3b01      	subs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8003670:	f3bf 8f6f 	isb	sy
}
 8003674:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003676:	f3bf 8f4f 	dsb	sy
}
 800367a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003682:	f000 f8db 	bl	800383c <FLASH_WaitForLastOperation>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_FLASH_Program+0x120>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <HAL_FLASH_Program+0x120>)
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	60d3      	str	r3, [r2, #12]
 800369e:	e007      	b.n	80036b0 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_FLASH_Program+0x120>)
 80036a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80036a6:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <HAL_FLASH_Program+0x120>)
 80036a8:	f023 0302 	bic.w	r3, r3, #2
 80036ac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_FLASH_Program+0x11c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	751a      	strb	r2, [r3, #20]

  return status;
 80036b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2400171c 	.word	0x2400171c
 80036c8:	52002000 	.word	0x52002000

080036cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_FLASH_Unlock+0x6c>)
 80036e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_FLASH_Unlock+0x70>)
 80036e6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e018      	b.n	800372a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 80036fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <HAL_FLASH_Unlock+0x6c>)
 800370a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <HAL_FLASH_Unlock+0x70>)
 8003712:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_FLASH_Unlock+0x68>)
 8003718:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	52002000 	.word	0x52002000
 8003738:	45670123 	.word	0x45670123
 800373c:	cdef89ab 	.word	0xcdef89ab

08003740 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_FLASH_Lock+0x50>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_FLASH_Lock+0x50>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_FLASH_Lock+0x50>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e011      	b.n	8003784 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_FLASH_Lock+0x50>)
 8003762:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_FLASH_Lock+0x50>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_FLASH_Lock+0x50>)
 8003772:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	52002000 	.word	0x52002000

08003794 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_FLASH_OB_Unlock+0x38>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_FLASH_OB_Unlock+0x38>)
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_FLASH_OB_Unlock+0x3c>)
 80037a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_FLASH_OB_Unlock+0x38>)
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_FLASH_OB_Unlock+0x40>)
 80037ae:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_FLASH_OB_Unlock+0x38>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	52002000 	.word	0x52002000
 80037d0:	08192a3b 	.word	0x08192a3b
 80037d4:	4c5d6e7f 	.word	0x4c5d6e7f

080037d8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80037de:	2101      	movs	r1, #1
 80037e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037e4:	f000 f902 	bl	80039ec <FLASH_CRC_WaitForLastOperation>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	71fb      	strb	r3, [r7, #7]
 80037f2:	e00c      	b.n	800380e <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80037f4:	2102      	movs	r1, #2
 80037f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037fa:	f000 f8f7 	bl	80039ec <FLASH_CRC_WaitForLastOperation>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	e001      	b.n	800380e <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10b      	bne.n	800382c <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_FLASH_OB_Launch+0x60>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_FLASH_OB_Launch+0x60>)
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003820:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003824:	f000 f8a6 	bl	8003974 <FLASH_OB_WaitForLastOperation>
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800382c:	79fb      	ldrb	r3, [r7, #7]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	52002000 	.word	0x52002000

0800383c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8003846:	2304      	movs	r3, #4
 8003848:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7fe ffcd 	bl	80027ec <HAL_GetTick>
 8003852:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d113      	bne.n	8003882 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <FLASH_WaitForLastOperation+0x124>)
 800385c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800385e:	e010      	b.n	8003882 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d00c      	beq.n	8003882 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fe ffc0 	bl	80027ec <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <FLASH_WaitForLastOperation+0x42>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e06a      	b.n	8003958 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <FLASH_WaitForLastOperation+0x128>)
 8003886:	4013      	ands	r3, r2
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	429a      	cmp	r2, r3
 800388c:	d10a      	bne.n	80038a4 <FLASH_WaitForLastOperation+0x68>
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e00c      	b.n	80038be <FLASH_WaitForLastOperation+0x82>
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 80038a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80038aa:	43da      	mvns	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4013      	ands	r3, r2
 80038b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ce      	bne.n	8003860 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <FLASH_WaitForLastOperation+0x130>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e007      	b.n	80038e4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 80038d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <FLASH_WaitForLastOperation+0x130>)
 80038dc:	4013      	ands	r3, r2
 80038de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <FLASH_WaitForLastOperation+0x134>)
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <FLASH_WaitForLastOperation+0x134>)
 80038f8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <FLASH_WaitForLastOperation+0x128>)
 80038fe:	4013      	ands	r3, r2
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d103      	bne.n	800390e <FLASH_WaitForLastOperation+0xd2>
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6153      	str	r3, [r2, #20]
 800390c:	e005      	b.n	800391a <FLASH_WaitForLastOperation+0xde>
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003916:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e01c      	b.n	8003958 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10b      	bne.n	800393c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d111      	bne.n	8003956 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 8003934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	e00c      	b.n	8003956 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 800393e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d104      	bne.n	8003956 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <FLASH_WaitForLastOperation+0x12c>)
 800394e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003952:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	80000004 	.word	0x80000004
 8003964:	1fef000f 	.word	0x1fef000f
 8003968:	52002000 	.word	0x52002000
 800396c:	17ee0000 	.word	0x17ee0000
 8003970:	2400171c 	.word	0x2400171c

08003974 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7fe ff36 	bl	80027ec <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8003982:	e010      	b.n	80039a6 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d00c      	beq.n	80039a6 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe ff2e 	bl	80027ec <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <FLASH_OB_WaitForLastOperation+0x2e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e01a      	b.n	80039dc <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <FLASH_OB_WaitForLastOperation+0x70>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e8      	bne.n	8003984 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <FLASH_OB_WaitForLastOperation+0x70>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <FLASH_OB_WaitForLastOperation+0x74>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <FLASH_OB_WaitForLastOperation+0x74>)
 80039c8:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <FLASH_OB_WaitForLastOperation+0x70>)
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <FLASH_OB_WaitForLastOperation+0x70>)
 80039d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	52002000 	.word	0x52002000
 80039e8:	2400171c 	.word	0x2400171c

080039ec <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 80039f6:	f7fe fef9 	bl	80027ec <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 8003a02:	2308      	movs	r3, #8
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e013      	b.n	8003a30 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <FLASH_CRC_WaitForLastOperation+0xe4>)
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003a0c:	e010      	b.n	8003a30 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d00c      	beq.n	8003a30 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe fee9 	bl	80027ec <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <FLASH_CRC_WaitForLastOperation+0x40>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e04b      	b.n	8003ac8 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <FLASH_CRC_WaitForLastOperation+0xe8>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d10a      	bne.n	8003a52 <FLASH_CRC_WaitForLastOperation+0x66>
 8003a3c:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e00c      	b.n	8003a6c <FLASH_CRC_WaitForLastOperation+0x80>
 8003a52:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003a54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ce      	bne.n	8003a0e <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d112      	bne.n	8003a9c <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a82:	d120      	bne.n	8003ac6 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8003a84:	4b15      	ldr	r3, [pc, #84]	; (8003adc <FLASH_CRC_WaitForLastOperation+0xf0>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <FLASH_CRC_WaitForLastOperation+0xf0>)
 8003a8e:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e015      	b.n	8003ac8 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003a9e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aaa:	d10c      	bne.n	8003ac6 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <FLASH_CRC_WaitForLastOperation+0xf0>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <FLASH_CRC_WaitForLastOperation+0xf0>)
 8003ab6:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	80000008 	.word	0x80000008
 8003ad4:	1fef000f 	.word	0x1fef000f
 8003ad8:	52002000 	.word	0x52002000
 8003adc:	2400171c 	.word	0x2400171c

08003ae0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003aee:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_FLASHEx_Erase+0x188>)
 8003af0:	7d1b      	ldrb	r3, [r3, #20]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_FLASHEx_Erase+0x1a>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0b2      	b.n	8003c60 <HAL_FLASHEx_Erase+0x180>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_FLASHEx_Erase+0x188>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b00:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_FLASHEx_Erase+0x188>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003b12:	2101      	movs	r1, #1
 8003b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b18:	f7ff fe90 	bl	800383c <FLASH_WaitForLastOperation>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8003b32:	2102      	movs	r1, #2
 8003b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b38:	f7ff fe80 	bl	800383c <FLASH_WaitForLastOperation>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8085 	bne.w	8003c58 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d136      	bne.n	8003bc4 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 f987 	bl	8003e74 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00f      	beq.n	8003b92 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003b72:	2101      	movs	r1, #1
 8003b74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b78:	f7ff fe60 	bl	800383c <FLASH_WaitForLastOperation>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003b8c:	f023 0308 	bic.w	r3, r3, #8
 8003b90:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d05c      	beq.n	8003c58 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ba4:	f7ff fe4a 	bl	800383c <FLASH_WaitForLastOperation>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003bb4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003bba:	f023 0308 	bic.w	r3, r3, #8
 8003bbe:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003bc2:	e049      	b.n	8003c58 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bca:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	e039      	b.n	8003c48 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68b8      	ldr	r0, [r7, #8]
 8003be0:	f000 f9b2 	bl	8003f48 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00c      	beq.n	8003c0a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf6:	f7ff fe21 	bl	800383c <FLASH_WaitForLastOperation>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	491a      	ldr	r1, [pc, #104]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_FLASHEx_Erase+0x190>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8003c16:	2102      	movs	r1, #2
 8003c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c1c:	f7ff fe0e 	bl	800383c <FLASH_WaitForLastOperation>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003c26:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003c2a:	4910      	ldr	r1, [pc, #64]	; (8003c6c <HAL_FLASHEx_Erase+0x18c>)
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_FLASHEx_Erase+0x190>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	601a      	str	r2, [r3, #0]
          break;
 8003c40:	e00a      	b.n	8003c58 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4413      	add	r3, r2
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3bd      	bcc.n	8003bd4 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_FLASHEx_Erase+0x188>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	751a      	strb	r2, [r3, #20]

  return status;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2400171c 	.word	0x2400171c
 8003c6c:	52002000 	.word	0x52002000
 8003c70:	fffff8fb 	.word	0xfffff8fb

08003c74 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <HAL_FLASHEx_OBProgram+0x144>)
 8003c7e:	7d1b      	ldrb	r3, [r3, #20]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_FLASHEx_OBProgram+0x14>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e092      	b.n	8003dae <HAL_FLASHEx_OBProgram+0x13a>
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_FLASHEx_OBProgram+0x144>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_FLASHEx_OBProgram+0x144>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003c94:	2101      	movs	r1, #1
 8003c96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c9a:	f7ff fdcf 	bl	800383c <FLASH_WaitForLastOperation>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e00c      	b.n	8003cc4 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8003caa:	2102      	movs	r1, #2
 8003cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cb0:	f7ff fdc4 	bl	800383c <FLASH_WaitForLastOperation>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e001      	b.n	8003cc4 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d16d      	bne.n	8003da6 <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d108      	bne.n	8003cf0 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f000 f96b 	bl	8003fc4 <FLASH_OB_EnableWRP>
 8003cee:	e007      	b.n	8003d00 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f000 f98c 	bl	8004018 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f9d7 	bl	80040c4 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 f9f9 	bl	8004124 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a18      	ldr	r0, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f000 faa1 	bl	8004294 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb0e 	bl	8004384 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	461a      	mov	r2, r3
 8003d82:	f000 fb21 	bl	80043c8 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f000 fb57 	bl	8004454 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_FLASHEx_OBProgram+0x144>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	751a      	strb	r2, [r3, #20]

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2400171c 	.word	0x2400171c

08003dbc <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2216      	movs	r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003dca:	f000 f98f 	bl	80040ec <FLASH_OB_GetRDP>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003dd4:	f000 fa48 	bl	8004268 <FLASH_OB_GetUser>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8003dde:	f000 fae5 	bl	80043ac <FLASH_OB_GetBOR>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d003      	beq.n	8003df8 <HAL_FLASHEx_OBGetConfig+0x3c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d129      	bne.n	8003e4c <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	1d18      	adds	r0, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f103 0108 	add.w	r1, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f928 	bl	8004068 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f103 0020 	add.w	r0, r3, #32
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f000 fa67 	bl	8004300 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f000 fb3e 	bl	80044c8 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3334      	adds	r3, #52	; 0x34
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fadf 	bl	800441c <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d122      	bne.n	8003ece <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e92:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003e96:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003e9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ea0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	4926      	ldr	r1, [pc, #152]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003eb2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003eb6:	4923      	ldr	r1, [pc, #140]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ec6:	f043 0310 	orr.w	r3, r3, #16
 8003eca:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8003ecc:	e033      	b.n	8003f36 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d011      	beq.n	8003efc <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ede:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ee2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003ee4:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003ef6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8003efa:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d017      	beq.n	8003f36 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f08:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f12:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f18:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003f2c:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <FLASH_MassErase+0xd0>)
 8003f2e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8003f32:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	52002000 	.word	0x52002000

08003f48 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f64:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8003f68:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0219      	lsls	r1, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f7a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8003f7e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d014      	beq.n	8003fb4 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f92:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8003f96:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003f9c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0219      	lsls	r1, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <FLASH_Erase_Sector+0x78>)
 8003fac:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8003fb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	52002000 	.word	0x52002000

08003fc4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <FLASH_OB_EnableWRP+0x50>)
 8003fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	490c      	ldr	r1, [pc, #48]	; (8004014 <FLASH_OB_EnableWRP+0x50>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <FLASH_OB_EnableWRP+0x50>)
 8003ff4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4905      	ldr	r1, [pc, #20]	; (8004014 <FLASH_OB_EnableWRP+0x50>)
 8004000:	4013      	ands	r3, r2
 8004002:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	52002000 	.word	0x52002000

08004018 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <FLASH_OB_DisableWRP+0x4c>)
 800402e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	490b      	ldr	r1, [pc, #44]	; (8004064 <FLASH_OB_DisableWRP+0x4c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <FLASH_OB_DisableWRP+0x4c>)
 8004046:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4905      	ldr	r1, [pc, #20]	; (8004064 <FLASH_OB_DisableWRP+0x4c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	52002000 	.word	0x52002000

08004068 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d102      	bne.n	8004084 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <FLASH_OB_GetWRP+0x58>)
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d103      	bne.n	8004092 <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <FLASH_OB_GetWRP+0x58>)
 800408c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004090:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	43db      	mvns	r3, r3
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 80040aa:	e002      	b.n	80040b2 <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	52002000 	.word	0x52002000

080040c4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <FLASH_OB_RDPConfig+0x24>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040d4:	4904      	ldr	r1, [pc, #16]	; (80040e8 <FLASH_OB_RDPConfig+0x24>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4313      	orrs	r3, r2
 80040da:	620b      	str	r3, [r1, #32]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	52002000 	.word	0x52002000

080040ec <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <FLASH_OB_GetRDP+0x34>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040fa:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8004102:	d006      	beq.n	8004112 <FLASH_OB_GetRDP+0x26>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 800410a:	d002      	beq.n	8004112 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 800410c:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 8004110:	e000      	b.n	8004114 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 8004112:	687b      	ldr	r3, [r7, #4]
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	52002000 	.word	0x52002000

08004124 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f043 0310 	orr.w	r3, r3, #16
 8004152:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004170:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ca:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80041e8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004206:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004224:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004242:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <FLASH_OB_UserConfig+0x140>)
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	4905      	ldr	r1, [pc, #20]	; (8004264 <FLASH_OB_UserConfig+0x140>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	620b      	str	r3, [r1, #32]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	52002000 	.word	0x52002000

08004268 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <FLASH_OB_GetUser+0x24>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <FLASH_OB_GetUser+0x28>)
 8004278:	4013      	ands	r3, r2
 800427a:	607b      	str	r3, [r7, #4]

  return userConfig;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	52002000 	.word	0x52002000
 8004290:	ffff00f3 	.word	0xffff00f3

08004294 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80042b2:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80042be:	431a      	orrs	r2, r3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80042c6:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80042d8:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80042e4:	431a      	orrs	r2, r3
 80042e6:	4905      	ldr	r1, [pc, #20]	; (80042fc <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80042ec:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	52002000 	.word	0x52002000

08004300 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <FLASH_OB_GetPCROP+0x7c>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8004322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004326:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d106      	bne.n	800433c <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <FLASH_OB_GetPCROP+0x7c>)
 8004330:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004334:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 8004336:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800433a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	021a      	lsls	r2, r3, #8
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <FLASH_OB_GetPCROP+0x80>)
 800434c:	4013      	ands	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	441a      	add	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	52002000 	.word	0x52002000
 8004380:	000fff00 	.word	0x000fff00

08004384 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <FLASH_OB_BOR_LevelConfig+0x24>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f023 020c 	bic.w	r2, r3, #12
 8004394:	4904      	ldr	r1, [pc, #16]	; (80043a8 <FLASH_OB_BOR_LevelConfig+0x24>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4313      	orrs	r3, r2
 800439a:	620b      	str	r3, [r1, #32]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	52002000 	.word	0x52002000

080043ac <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <FLASH_OB_GetBOR+0x18>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 030c 	and.w	r3, r3, #12
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	52002000 	.word	0x52002000

080043c8 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <FLASH_OB_BootAddConfig+0x4c>)
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <FLASH_OB_BootAddConfig+0x50>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0c12      	lsrs	r2, r2, #16
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <FLASH_OB_BootAddConfig+0x4c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <FLASH_OB_BootAddConfig+0x4c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	b29a      	uxth	r2, r3
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <FLASH_OB_BootAddConfig+0x4c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	52002000 	.word	0x52002000
 8004418:	ffff0000 	.word	0xffff0000

0800441c <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <FLASH_OB_GetBootAdd+0x30>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	041a      	lsls	r2, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <FLASH_OB_GetBootAdd+0x34>)
 8004438:	4013      	ands	r3, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	52002000 	.word	0x52002000
 8004450:	ffff0000 	.word	0xffff0000

08004454 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00f      	beq.n	800448c <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004472:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800447e:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8004486:	490f      	ldr	r1, [pc, #60]	; (80044c4 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8004488:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800448a:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 800449c:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80044a8:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80044b0:	4904      	ldr	r1, [pc, #16]	; (80044c4 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 80044b2:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80044b4:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	52002000 	.word	0x52002000

080044c8 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <FLASH_OB_GetSecureArea+0x7c>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 80044ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ee:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d106      	bne.n	8004504 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <FLASH_OB_GetSecureArea+0x7c>)
 80044f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80044fc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 80044fe:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8004502:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <FLASH_OB_GetSecureArea+0x80>)
 8004514:	4013      	ands	r3, r2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	441a      	add	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	021a      	lsls	r2, r3, #8
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	441a      	add	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	52002000 	.word	0x52002000
 8004548:	000fff00 	.word	0x000fff00

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800455a:	4b89      	ldr	r3, [pc, #548]	; (8004780 <HAL_GPIO_Init+0x234>)
 800455c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800455e:	e194      	b.n	800488a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2101      	movs	r1, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8186 	beq.w	8004884 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d005      	beq.n	8004590 <HAL_GPIO_Init+0x44>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d130      	bne.n	80045f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c6:	2201      	movs	r2, #1
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0201 	and.w	r2, r3, #1
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d017      	beq.n	800462e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d123      	bne.n	8004682 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	08da      	lsrs	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3208      	adds	r2, #8
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80e0 	beq.w	8004884 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x238>)
 80046c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ca:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <HAL_GPIO_Init+0x238>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_GPIO_Init+0x238>)
 80046d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_GPIO_Init+0x23c>)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3302      	adds	r3, #2
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	220f      	movs	r2, #15
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_GPIO_Init+0x240>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d052      	beq.n	80047b4 <HAL_GPIO_Init+0x268>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <HAL_GPIO_Init+0x244>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d031      	beq.n	800477a <HAL_GPIO_Init+0x22e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_GPIO_Init+0x248>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02b      	beq.n	8004776 <HAL_GPIO_Init+0x22a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <HAL_GPIO_Init+0x24c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d025      	beq.n	8004772 <HAL_GPIO_Init+0x226>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_GPIO_Init+0x250>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <HAL_GPIO_Init+0x222>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_GPIO_Init+0x254>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d019      	beq.n	800476a <HAL_GPIO_Init+0x21e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <HAL_GPIO_Init+0x258>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_GPIO_Init+0x21a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a19      	ldr	r2, [pc, #100]	; (80047a8 <HAL_GPIO_Init+0x25c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00d      	beq.n	8004762 <HAL_GPIO_Init+0x216>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_GPIO_Init+0x260>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <HAL_GPIO_Init+0x212>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_GPIO_Init+0x264>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_GPIO_Init+0x20e>
 8004756:	2309      	movs	r3, #9
 8004758:	e02d      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800475a:	230a      	movs	r3, #10
 800475c:	e02b      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800475e:	2308      	movs	r3, #8
 8004760:	e029      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 8004762:	2307      	movs	r3, #7
 8004764:	e027      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 8004766:	2306      	movs	r3, #6
 8004768:	e025      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800476a:	2305      	movs	r3, #5
 800476c:	e023      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800476e:	2304      	movs	r3, #4
 8004770:	e021      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 8004772:	2303      	movs	r3, #3
 8004774:	e01f      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 8004776:	2302      	movs	r3, #2
 8004778:	e01d      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800477a:	2301      	movs	r3, #1
 800477c:	e01b      	b.n	80047b6 <HAL_GPIO_Init+0x26a>
 800477e:	bf00      	nop
 8004780:	58000080 	.word	0x58000080
 8004784:	58024400 	.word	0x58024400
 8004788:	58000400 	.word	0x58000400
 800478c:	58020000 	.word	0x58020000
 8004790:	58020400 	.word	0x58020400
 8004794:	58020800 	.word	0x58020800
 8004798:	58020c00 	.word	0x58020c00
 800479c:	58021000 	.word	0x58021000
 80047a0:	58021400 	.word	0x58021400
 80047a4:	58021800 	.word	0x58021800
 80047a8:	58021c00 	.word	0x58021c00
 80047ac:	58022000 	.word	0x58022000
 80047b0:	58022400 	.word	0x58022400
 80047b4:	2300      	movs	r3, #0
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	f002 0203 	and.w	r2, r2, #3
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	4093      	lsls	r3, r2
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c6:	4938      	ldr	r1, [pc, #224]	; (80048a8 <HAL_GPIO_Init+0x35c>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f ae63 	bne.w	8004560 <HAL_GPIO_Init+0x14>
  }
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	3724      	adds	r7, #36	; 0x24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	58000400 	.word	0x58000400

080048ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048ba:	4b75      	ldr	r3, [pc, #468]	; (8004a90 <HAL_GPIO_DeInit+0x1e4>)
 80048bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80048be:	e0d9      	b.n	8004a74 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80048c0:	2201      	movs	r2, #1
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	4013      	ands	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80cc 	beq.w	8004a6e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	4a6f      	ldr	r2, [pc, #444]	; (8004a94 <HAL_GPIO_DeInit+0x1e8>)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_GPIO_DeInit+0x1ec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d037      	beq.n	8004970 <HAL_GPIO_DeInit+0xc4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a66      	ldr	r2, [pc, #408]	; (8004a9c <HAL_GPIO_DeInit+0x1f0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <HAL_GPIO_DeInit+0xc0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a65      	ldr	r2, [pc, #404]	; (8004aa0 <HAL_GPIO_DeInit+0x1f4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02b      	beq.n	8004968 <HAL_GPIO_DeInit+0xbc>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a64      	ldr	r2, [pc, #400]	; (8004aa4 <HAL_GPIO_DeInit+0x1f8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d025      	beq.n	8004964 <HAL_GPIO_DeInit+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a63      	ldr	r2, [pc, #396]	; (8004aa8 <HAL_GPIO_DeInit+0x1fc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01f      	beq.n	8004960 <HAL_GPIO_DeInit+0xb4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a62      	ldr	r2, [pc, #392]	; (8004aac <HAL_GPIO_DeInit+0x200>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d019      	beq.n	800495c <HAL_GPIO_DeInit+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a61      	ldr	r2, [pc, #388]	; (8004ab0 <HAL_GPIO_DeInit+0x204>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_GPIO_DeInit+0xac>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a60      	ldr	r2, [pc, #384]	; (8004ab4 <HAL_GPIO_DeInit+0x208>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00d      	beq.n	8004954 <HAL_GPIO_DeInit+0xa8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a5f      	ldr	r2, [pc, #380]	; (8004ab8 <HAL_GPIO_DeInit+0x20c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <HAL_GPIO_DeInit+0xa4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a5e      	ldr	r2, [pc, #376]	; (8004abc <HAL_GPIO_DeInit+0x210>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_GPIO_DeInit+0xa0>
 8004948:	2309      	movs	r3, #9
 800494a:	e012      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 800494c:	230a      	movs	r3, #10
 800494e:	e010      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004950:	2308      	movs	r3, #8
 8004952:	e00e      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004954:	2307      	movs	r3, #7
 8004956:	e00c      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004958:	2306      	movs	r3, #6
 800495a:	e00a      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 800495c:	2305      	movs	r3, #5
 800495e:	e008      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004960:	2304      	movs	r3, #4
 8004962:	e006      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004964:	2303      	movs	r3, #3
 8004966:	e004      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004968:	2302      	movs	r3, #2
 800496a:	e002      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_GPIO_DeInit+0xc6>
 8004970:	2300      	movs	r3, #0
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	f002 0203 	and.w	r2, r2, #3
 8004978:	0092      	lsls	r2, r2, #2
 800497a:	4093      	lsls	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d136      	bne.n	80049f0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	43db      	mvns	r3, r3
 8004998:	401a      	ands	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ac:	4013      	ands	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049be:	4013      	ands	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	220f      	movs	r2, #15
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80049d2:	4a30      	ldr	r2, [pc, #192]	; (8004a94 <HAL_GPIO_DeInit+0x1e8>)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3302      	adds	r3, #2
 80049da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	482c      	ldr	r0, [pc, #176]	; (8004a94 <HAL_GPIO_DeInit+0x1e8>)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	400a      	ands	r2, r1
 80049ea:	3302      	adds	r3, #2
 80049ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2103      	movs	r1, #3
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	08da      	lsrs	r2, r3, #3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3208      	adds	r2, #8
 8004a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	220f      	movs	r2, #15
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	08d2      	lsrs	r2, r2, #3
 8004a24:	4019      	ands	r1, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3208      	adds	r2, #8
 8004a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	2103      	movs	r1, #3
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2103      	movs	r1, #3
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f47f af1f 	bne.w	80048c0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	58000080 	.word	0x58000080
 8004a94:	58000400 	.word	0x58000400
 8004a98:	58020000 	.word	0x58020000
 8004a9c:	58020400 	.word	0x58020400
 8004aa0:	58020800 	.word	0x58020800
 8004aa4:	58020c00 	.word	0x58020c00
 8004aa8:	58021000 	.word	0x58021000
 8004aac:	58021400 	.word	0x58021400
 8004ab0:	58021800 	.word	0x58021800
 8004ab4:	58021c00 	.word	0x58021c00
 8004ab8:	58022000 	.word	0x58022000
 8004abc:	58022400 	.word	0x58022400

08004ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
 8004acc:	4613      	mov	r3, r2
 8004ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad0:	787b      	ldrb	r3, [r7, #1]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004adc:	e003      	b.n	8004ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	041a      	lsls	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	619a      	str	r2, [r3, #24]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f804 	bl	8004b26 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d00a      	beq.n	8004b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e01f      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e01d      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	490f      	ldr	r1, [pc, #60]	; (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b76:	f7fd fe39 	bl	80027ec <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b7c:	e009      	b.n	8004b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b7e:	f7fd fe35 	bl	80027ec <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8c:	d901      	bls.n	8004b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e007      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	58024800 	.word	0x58024800

08004bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f000 bc48 	b.w	8005454 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8088 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd2:	4b99      	ldr	r3, [pc, #612]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bdc:	4b96      	ldr	r3, [pc, #600]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d007      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x48>
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b18      	cmp	r3, #24
 8004bec:	d111      	bne.n	8004c12 <HAL_RCC_OscConfig+0x62>
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	4b8f      	ldr	r3, [pc, #572]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d06d      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x130>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d169      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f000 bc21 	b.w	8005454 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x7a>
 8004c1c:	4b86      	ldr	r3, [pc, #536]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a85      	ldr	r2, [pc, #532]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e02e      	b.n	8004c88 <HAL_RCC_OscConfig+0xd8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x9c>
 8004c32:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a80      	ldr	r2, [pc, #512]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7d      	ldr	r2, [pc, #500]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e01d      	b.n	8004c88 <HAL_RCC_OscConfig+0xd8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0xc0>
 8004c56:	4b78      	ldr	r3, [pc, #480]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a77      	ldr	r2, [pc, #476]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b75      	ldr	r3, [pc, #468]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a74      	ldr	r2, [pc, #464]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCC_OscConfig+0xd8>
 8004c70:	4b71      	ldr	r3, [pc, #452]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a70      	ldr	r2, [pc, #448]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b6e      	ldr	r3, [pc, #440]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6d      	ldr	r2, [pc, #436]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fd fdac 	bl	80027ec <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fd fda8 	bl	80027ec <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e3d4      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0xe8>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fd98 	bl	80027ec <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fd fd94 	bl	80027ec <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e3c0      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cd2:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x110>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80ca 	beq.w	8004e84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf0:	4b51      	ldr	r3, [pc, #324]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfa:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_RCC_OscConfig+0x166>
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b18      	cmp	r3, #24
 8004d0a:	d156      	bne.n	8004dba <HAL_RCC_OscConfig+0x20a>
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d151      	bne.n	8004dba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d16:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_RCC_OscConfig+0x17e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e392      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d2e:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0219 	bic.w	r2, r3, #25
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	493f      	ldr	r1, [pc, #252]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fd54 	bl	80027ec <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fd fd50 	bl	80027ec <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e37c      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d5a:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d66:	f7fd fd71 	bl	800284c <HAL_GetREVID>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d817      	bhi.n	8004da4 <HAL_RCC_OscConfig+0x1f4>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d108      	bne.n	8004d8e <HAL_RCC_OscConfig+0x1de>
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d84:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d8c:	e07a      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	031b      	lsls	r3, r3, #12
 8004d9c:	4926      	ldr	r1, [pc, #152]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da2:	e06f      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	4921      	ldr	r1, [pc, #132]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db8:	e064      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d047      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0219 	bic.w	r2, r3, #25
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	491a      	ldr	r1, [pc, #104]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fd0a 	bl	80027ec <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fd fd06 	bl	80027ec <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e332      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	f7fd fd27 	bl	800284c <HAL_GetREVID>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d819      	bhi.n	8004e3c <HAL_RCC_OscConfig+0x28c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d108      	bne.n	8004e22 <HAL_RCC_OscConfig+0x272>
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e18:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1e:	6053      	str	r3, [r2, #4]
 8004e20:	e030      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	031b      	lsls	r3, r3, #12
 8004e30:	4901      	ldr	r1, [pc, #4]	; (8004e38 <HAL_RCC_OscConfig+0x288>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
 8004e36:	e025      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	4b9a      	ldr	r3, [pc, #616]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	4997      	ldr	r1, [pc, #604]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	e018      	b.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e52:	4b95      	ldr	r3, [pc, #596]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a94      	ldr	r2, [pc, #592]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd fcc5 	bl	80027ec <HAL_GetTick>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fd fcc1 	bl	80027ec <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e2ed      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e78:	4b8b      	ldr	r3, [pc, #556]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a9 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e9c:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d007      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x308>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b18      	cmp	r3, #24
 8004eac:	d13a      	bne.n	8004f24 <HAL_RCC_OscConfig+0x374>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d135      	bne.n	8004f24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eb8:	4b7b      	ldr	r3, [pc, #492]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x320>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e2c1      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ed0:	f7fd fcbc 	bl	800284c <HAL_GetREVID>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d817      	bhi.n	8004f0e <HAL_RCC_OscConfig+0x35e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x348>
 8004ee6:	4b70      	ldr	r3, [pc, #448]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004eee:	4a6e      	ldr	r2, [pc, #440]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef6:	e075      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ef8:	4b6b      	ldr	r3, [pc, #428]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	069b      	lsls	r3, r3, #26
 8004f06:	4968      	ldr	r1, [pc, #416]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f0c:	e06a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f0e:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	4962      	ldr	r1, [pc, #392]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f22:	e05f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d042      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f2c:	4b5e      	ldr	r3, [pc, #376]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd fc58 	bl	80027ec <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f40:	f7fd fc54 	bl	80027ec <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e280      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f52:	4b55      	ldr	r3, [pc, #340]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f5e:	f7fd fc75 	bl	800284c <HAL_GetREVID>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d817      	bhi.n	8004f9c <HAL_RCC_OscConfig+0x3ec>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d108      	bne.n	8004f86 <HAL_RCC_OscConfig+0x3d6>
 8004f74:	4b4c      	ldr	r3, [pc, #304]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f7c:	4a4a      	ldr	r2, [pc, #296]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f82:	6053      	str	r3, [r2, #4]
 8004f84:	e02e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
 8004f86:	4b48      	ldr	r3, [pc, #288]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	069b      	lsls	r3, r3, #26
 8004f94:	4944      	ldr	r1, [pc, #272]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
 8004f9a:	e023      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
 8004f9c:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	493f      	ldr	r1, [pc, #252]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fb2:	4b3d      	ldr	r3, [pc, #244]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fd fc15 	bl	80027ec <HAL_GetTick>
 8004fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fc11 	bl	80027ec <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e23d      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd8:	4b33      	ldr	r3, [pc, #204]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d036      	beq.n	800505e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d019      	beq.n	800502c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fd fbf2 	bl	80027ec <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500c:	f7fd fbee 	bl	80027ec <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e21a      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8005020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x45c>
 800502a:	e018      	b.n	800505e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fd fbd8 	bl	80027ec <HAL_GetTick>
 800503c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7fd fbd4 	bl	80027ec <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e200      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005052:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d039      	beq.n	80050de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01c      	beq.n	80050ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 8005078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800507c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800507e:	f7fd fbb5 	bl	80027ec <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005086:	f7fd fbb1 	bl	80027ec <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1dd      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <HAL_RCC_OscConfig+0x4f8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x4d6>
 80050a4:	e01b      	b.n	80050de <HAL_RCC_OscConfig+0x52e>
 80050a6:	bf00      	nop
 80050a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ac:	4b9b      	ldr	r3, [pc, #620]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a9a      	ldr	r2, [pc, #616]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80050b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050b8:	f7fd fb98 	bl	80027ec <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c0:	f7fd fb94 	bl	80027ec <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1c0      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050d2:	4b92      	ldr	r3, [pc, #584]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8081 	beq.w	80051ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050ec:	4b8c      	ldr	r3, [pc, #560]	; (8005320 <HAL_RCC_OscConfig+0x770>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a8b      	ldr	r2, [pc, #556]	; (8005320 <HAL_RCC_OscConfig+0x770>)
 80050f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050f8:	f7fd fb78 	bl	80027ec <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005100:	f7fd fb74 	bl	80027ec <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e1a0      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005112:	4b83      	ldr	r3, [pc, #524]	; (8005320 <HAL_RCC_OscConfig+0x770>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d106      	bne.n	8005134 <HAL_RCC_OscConfig+0x584>
 8005126:	4b7d      	ldr	r3, [pc, #500]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4a7c      	ldr	r2, [pc, #496]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	6713      	str	r3, [r2, #112]	; 0x70
 8005132:	e02d      	b.n	8005190 <HAL_RCC_OscConfig+0x5e0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10c      	bne.n	8005156 <HAL_RCC_OscConfig+0x5a6>
 800513c:	4b77      	ldr	r3, [pc, #476]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a76      	ldr	r2, [pc, #472]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	4b74      	ldr	r3, [pc, #464]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	4a73      	ldr	r2, [pc, #460]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800514e:	f023 0304 	bic.w	r3, r3, #4
 8005152:	6713      	str	r3, [r2, #112]	; 0x70
 8005154:	e01c      	b.n	8005190 <HAL_RCC_OscConfig+0x5e0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b05      	cmp	r3, #5
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x5c8>
 800515e:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a6e      	ldr	r2, [pc, #440]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005164:	f043 0304 	orr.w	r3, r3, #4
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
 800516a:	4b6c      	ldr	r3, [pc, #432]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a6b      	ldr	r2, [pc, #428]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0x5e0>
 8005178:	4b68      	ldr	r3, [pc, #416]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a67      	ldr	r2, [pc, #412]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
 8005184:	4b65      	ldr	r3, [pc, #404]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a64      	ldr	r2, [pc, #400]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800518a:	f023 0304 	bic.w	r3, r3, #4
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fd fb28 	bl	80027ec <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd fb24 	bl	80027ec <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e14e      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b6:	4b59      	ldr	r3, [pc, #356]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ee      	beq.n	80051a0 <HAL_RCC_OscConfig+0x5f0>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd fb12 	bl	80027ec <HAL_GetTick>
 80051c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd fb0e 	bl	80027ec <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e138      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051e2:	4b4e      	ldr	r3, [pc, #312]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1ee      	bne.n	80051cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 812d 	beq.w	8005452 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051f8:	4b48      	ldr	r3, [pc, #288]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005200:	2b18      	cmp	r3, #24
 8005202:	f000 80bd 	beq.w	8005380 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b02      	cmp	r3, #2
 800520c:	f040 809e 	bne.w	800534c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b42      	ldr	r3, [pc, #264]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a41      	ldr	r2, [pc, #260]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd fae6 	bl	80027ec <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fd fae2 	bl	80027ec <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e10e      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005246:	4b37      	ldr	r3, [pc, #220]	; (8005324 <HAL_RCC_OscConfig+0x774>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005252:	0112      	lsls	r2, r2, #4
 8005254:	430a      	orrs	r2, r1
 8005256:	4931      	ldr	r1, [pc, #196]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	628b      	str	r3, [r1, #40]	; 0x28
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	3b01      	subs	r3, #1
 8005262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	3b01      	subs	r3, #1
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	b29b      	uxth	r3, r3
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	3b01      	subs	r3, #1
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	3b01      	subs	r3, #1
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800528c:	4923      	ldr	r1, [pc, #140]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005292:	4b22      	ldr	r3, [pc, #136]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	4a21      	ldr	r2, [pc, #132]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800529e:	4b1f      	ldr	r3, [pc, #124]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a2:	4b21      	ldr	r3, [pc, #132]	; (8005328 <HAL_RCC_OscConfig+0x778>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052aa:	00d2      	lsls	r2, r2, #3
 80052ac:	491b      	ldr	r1, [pc, #108]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f023 020c 	bic.w	r2, r3, #12
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4917      	ldr	r1, [pc, #92]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f023 0202 	bic.w	r2, r3, #2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	4912      	ldr	r1, [pc, #72]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4a0d      	ldr	r2, [pc, #52]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <HAL_RCC_OscConfig+0x76c>)
 800530c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fd fa6b 	bl	80027ec <HAL_GetTick>
 8005316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005318:	e011      	b.n	800533e <HAL_RCC_OscConfig+0x78e>
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	58024800 	.word	0x58024800
 8005324:	fffffc0c 	.word	0xfffffc0c
 8005328:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532c:	f7fd fa5e 	bl	80027ec <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e08a      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800533e:	4b47      	ldr	r3, [pc, #284]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x77c>
 800534a:	e082      	b.n	8005452 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a42      	ldr	r2, [pc, #264]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd fa48 	bl	80027ec <HAL_GetTick>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fd fa44 	bl	80027ec <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e070      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005372:	4b3a      	ldr	r3, [pc, #232]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x7b0>
 800537e:	e068      	b.n	8005452 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005380:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b01      	cmp	r3, #1
 8005392:	d031      	beq.n	80053f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0203 	and.w	r2, r3, #3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d12a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d122      	bne.n	80053f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d11a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0a5b      	lsrs	r3, r3, #9
 80053c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d111      	bne.n	80053f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d108      	bne.n	80053f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0e1b      	lsrs	r3, r3, #24
 80053ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02b      	b.n	8005454 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005406:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d01f      	beq.n	8005452 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005412:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4a11      	ldr	r2, [pc, #68]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800541e:	f7fd f9e5 	bl	80027ec <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005424:	bf00      	nop
 8005426:	f7fd f9e1 	bl	80027ec <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	4293      	cmp	r3, r2
 8005430:	d0f9      	beq.n	8005426 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_OscConfig+0x8b0>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800543e:	00d2      	lsls	r2, r2, #3
 8005440:	4906      	ldr	r1, [pc, #24]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005442:	4313      	orrs	r3, r2
 8005444:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005446:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4a04      	ldr	r2, [pc, #16]	; (800545c <HAL_RCC_OscConfig+0x8ac>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	; 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	58024400 	.word	0x58024400
 8005460:	ffff0007 	.word	0xffff0007

08005464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e19c      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b8a      	ldr	r3, [pc, #552]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d910      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b87      	ldr	r3, [pc, #540]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 020f 	bic.w	r2, r3, #15
 800548e:	4985      	ldr	r1, [pc, #532]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b83      	ldr	r3, [pc, #524]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e184      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	4b7b      	ldr	r3, [pc, #492]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d908      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054c4:	4b78      	ldr	r3, [pc, #480]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	4975      	ldr	r1, [pc, #468]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d010      	beq.n	8005504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	4b70      	ldr	r3, [pc, #448]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d908      	bls.n	8005504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054f2:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	496a      	ldr	r1, [pc, #424]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005500:	4313      	orrs	r3, r2
 8005502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d010      	beq.n	8005532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800551c:	429a      	cmp	r2, r3
 800551e:	d908      	bls.n	8005532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	495e      	ldr	r1, [pc, #376]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800552e:	4313      	orrs	r3, r2
 8005530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69da      	ldr	r2, [r3, #28]
 8005542:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800554a:	429a      	cmp	r2, r3
 800554c:	d908      	bls.n	8005560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800554e:	4b56      	ldr	r3, [pc, #344]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4953      	ldr	r1, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d010      	beq.n	800558e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	4b4d      	ldr	r3, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	429a      	cmp	r2, r3
 800557a:	d908      	bls.n	800558e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f023 020f 	bic.w	r2, r3, #15
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4947      	ldr	r1, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800558a:	4313      	orrs	r3, r2
 800558c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d055      	beq.n	8005646 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800559a:	4b43      	ldr	r3, [pc, #268]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4940      	ldr	r1, [pc, #256]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d107      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b4:	4b3c      	ldr	r3, [pc, #240]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d121      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0f6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055cc:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d115      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0ea      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0de      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055f4:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0d6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005604:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4925      	ldr	r1, [pc, #148]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005612:	4313      	orrs	r3, r2
 8005614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005616:	f7fd f8e9 	bl	80027ec <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561c:	e00a      	b.n	8005634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561e:	f7fd f8e5 	bl	80027ec <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0be      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	429a      	cmp	r2, r3
 8005644:	d1eb      	bne.n	800561e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	429a      	cmp	r2, r3
 8005660:	d208      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f023 020f 	bic.w	r2, r3, #15
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005670:	4313      	orrs	r3, r2
 8005672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d214      	bcs.n	80056ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 020f 	bic.w	r2, r3, #15
 800568a:	4906      	ldr	r1, [pc, #24]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e086      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
 80056a4:	52002000 	.word	0x52002000
 80056a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d010      	beq.n	80056da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d208      	bcs.n	80056da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056c8:	4b3c      	ldr	r3, [pc, #240]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4939      	ldr	r1, [pc, #228]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d010      	beq.n	8005708 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d208      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	492e      	ldr	r1, [pc, #184]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005704:	4313      	orrs	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005720:	429a      	cmp	r2, r3
 8005722:	d208      	bcs.n	8005736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	4922      	ldr	r1, [pc, #136]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005732:	4313      	orrs	r3, r2
 8005734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800574e:	429a      	cmp	r2, r3
 8005750:	d208      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4917      	ldr	r1, [pc, #92]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005760:	4313      	orrs	r3, r2
 8005762:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005764:	f000 f834 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	4912      	ldr	r1, [pc, #72]	; (80057c0 <HAL_RCC_ClockConfig+0x35c>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <HAL_RCC_ClockConfig+0x35c>)
 800578c:	5cd3      	ldrb	r3, [r2, r3]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <HAL_RCC_ClockConfig+0x360>)
 800579a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <HAL_RCC_ClockConfig+0x364>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCC_ClockConfig+0x368>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fd84 	bl	80022b4 <HAL_InitTick>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	0801bc50 	.word	0x0801bc50
 80057c4:	24000004 	.word	0x24000004
 80057c8:	24000000 	.word	0x24000000
 80057cc:	24000008 	.word	0x24000008

080057d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	; 0x24
 80057d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057d6:	4bb3      	ldr	r3, [pc, #716]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057de:	2b18      	cmp	r3, #24
 80057e0:	f200 8155 	bhi.w	8005a8e <HAL_RCC_GetSysClockFreq+0x2be>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005a8f 	.word	0x08005a8f
 80057f4:	08005a8f 	.word	0x08005a8f
 80057f8:	08005a8f 	.word	0x08005a8f
 80057fc:	08005a8f 	.word	0x08005a8f
 8005800:	08005a8f 	.word	0x08005a8f
 8005804:	08005a8f 	.word	0x08005a8f
 8005808:	08005a8f 	.word	0x08005a8f
 800580c:	08005877 	.word	0x08005877
 8005810:	08005a8f 	.word	0x08005a8f
 8005814:	08005a8f 	.word	0x08005a8f
 8005818:	08005a8f 	.word	0x08005a8f
 800581c:	08005a8f 	.word	0x08005a8f
 8005820:	08005a8f 	.word	0x08005a8f
 8005824:	08005a8f 	.word	0x08005a8f
 8005828:	08005a8f 	.word	0x08005a8f
 800582c:	0800587d 	.word	0x0800587d
 8005830:	08005a8f 	.word	0x08005a8f
 8005834:	08005a8f 	.word	0x08005a8f
 8005838:	08005a8f 	.word	0x08005a8f
 800583c:	08005a8f 	.word	0x08005a8f
 8005840:	08005a8f 	.word	0x08005a8f
 8005844:	08005a8f 	.word	0x08005a8f
 8005848:	08005a8f 	.word	0x08005a8f
 800584c:	08005883 	.word	0x08005883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005850:	4b94      	ldr	r3, [pc, #592]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800585c:	4b91      	ldr	r3, [pc, #580]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	4a90      	ldr	r2, [pc, #576]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800586e:	e111      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005870:	4b8d      	ldr	r3, [pc, #564]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005872:	61bb      	str	r3, [r7, #24]
      break;
 8005874:	e10e      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005876:	4b8d      	ldr	r3, [pc, #564]	; (8005aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005878:	61bb      	str	r3, [r7, #24]
      break;
 800587a:	e10b      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800587c:	4b8c      	ldr	r3, [pc, #560]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800587e:	61bb      	str	r3, [r7, #24]
      break;
 8005880:	e108      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005882:	4b88      	ldr	r3, [pc, #544]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800588c:	4b85      	ldr	r3, [pc, #532]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005896:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005898:	4b82      	ldr	r3, [pc, #520]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058a2:	4b80      	ldr	r3, [pc, #512]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	08db      	lsrs	r3, r3, #3
 80058a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80e1 	beq.w	8005a88 <HAL_RCC_GetSysClockFreq+0x2b8>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	f000 8083 	beq.w	80059d4 <HAL_RCC_GetSysClockFreq+0x204>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	f200 80a1 	bhi.w	8005a18 <HAL_RCC_GetSysClockFreq+0x248>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x114>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d056      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058e2:	e099      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058e4:	4b6f      	ldr	r3, [pc, #444]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02d      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058f0:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	08db      	lsrs	r3, r3, #3
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	4a6b      	ldr	r2, [pc, #428]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005900:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b62      	ldr	r3, [pc, #392]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a02 	vldr	s12, [r7, #8]
 800592e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800594a:	e087      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595e:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005972:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800598e:	e065      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005abc <HAL_RCC_GetSysClockFreq+0x2ec>
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059d2:	e043      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a16:	e021      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005abc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	0a5b      	lsrs	r3, r3, #9
 8005a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a66:	3301      	adds	r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a80:	ee17 3a90 	vmov	r3, s15
 8005a84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a86:	e005      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
      break;
 8005a8c:	e002      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a90:	61bb      	str	r3, [r7, #24]
      break;
 8005a92:	bf00      	nop
  }

  return sysclockfreq;
 8005a94:	69bb      	ldr	r3, [r7, #24]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	; 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	03d09000 	.word	0x03d09000
 8005aac:	003d0900 	.word	0x003d0900
 8005ab0:	017d7840 	.word	0x017d7840
 8005ab4:	46000000 	.word	0x46000000
 8005ab8:	4c742400 	.word	0x4c742400
 8005abc:	4a742400 	.word	0x4a742400
 8005ac0:	4bbebc20 	.word	0x4bbebc20

08005ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aca:	f7ff fe81 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	490f      	ldr	r1, [pc, #60]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	fa22 f303 	lsr.w	r3, r2, r3
 8005afe:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b02:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	58024400 	.word	0x58024400
 8005b18:	0801bc50 	.word	0x0801bc50
 8005b1c:	24000004 	.word	0x24000004
 8005b20:	24000000 	.word	0x24000000

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b28:	f7ff ffcc 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4904      	ldr	r1, [pc, #16]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	0801bc50 	.word	0x0801bc50

08005b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b54:	f7ff ffb6 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4904      	ldr	r1, [pc, #16]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	58024400 	.word	0x58024400
 8005b78:	0801bc50 	.word	0x0801bc50

08005b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223f      	movs	r2, #63	; 0x3f
 8005b8a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0207 	and.w	r2, r3, #7
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005b98:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_GetClockConfig+0x80>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	52002000 	.word	0x52002000

08005c00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b0ca      	sub	sp, #296	; 0x128
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c24:	2500      	movs	r5, #0
 8005c26:	ea54 0305 	orrs.w	r3, r4, r5
 8005c2a:	d049      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c36:	d02f      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c3c:	d828      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c42:	d01a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c48:	d822      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c52:	d007      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c54:	e01c      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4bb8      	ldr	r3, [pc, #736]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4ab7      	ldr	r2, [pc, #732]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c62:	e01a      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 fb61 	bl	8008334 <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c78:	e00f      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7e:	3328      	adds	r3, #40	; 0x28
 8005c80:	2102      	movs	r1, #2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f002 fc08 	bl	8008498 <RCCEx_PLL3_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c8e:	e004      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c96:	e000      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ca2:	4ba5      	ldr	r3, [pc, #660]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb0:	4aa1      	ldr	r2, [pc, #644]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	6513      	str	r3, [r2, #80]	; 0x50
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ccc:	f04f 0900 	mov.w	r9, #0
 8005cd0:	ea58 0309 	orrs.w	r3, r8, r9
 8005cd4:	d047      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d82a      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cfd 	.word	0x08005cfd
 8005cec:	08005d0b 	.word	0x08005d0b
 8005cf0:	08005d21 	.word	0x08005d21
 8005cf4:	08005d3f 	.word	0x08005d3f
 8005cf8:	08005d3f 	.word	0x08005d3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4b8e      	ldr	r3, [pc, #568]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4a8d      	ldr	r2, [pc, #564]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d08:	e01a      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0e:	3308      	adds	r3, #8
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 fb0e 	bl	8008334 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d1e:	e00f      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d24:	3328      	adds	r3, #40	; 0x28
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f002 fbb5 	bl	8008498 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e004      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d48:	4b7b      	ldr	r3, [pc, #492]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	f023 0107 	bic.w	r1, r3, #7
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	4a78      	ldr	r2, [pc, #480]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6513      	str	r3, [r2, #80]	; 0x50
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005d72:	f04f 0b00 	mov.w	fp, #0
 8005d76:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d7a:	d04c      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d030      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8c:	d829      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d90:	d02d      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d92:	2bc0      	cmp	r3, #192	; 0xc0
 8005d94:	d825      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d96:	2b80      	cmp	r3, #128	; 0x80
 8005d98:	d018      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d821      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d007      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005da6:	e01c      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4b63      	ldr	r3, [pc, #396]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a62      	ldr	r2, [pc, #392]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005db4:	e01c      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 fab8 	bl	8008334 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd0:	3328      	adds	r3, #40	; 0x28
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f002 fb5f 	bl	8008498 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005de0:	e006      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005df8:	4b4f      	ldr	r3, [pc, #316]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	4a4c      	ldr	r2, [pc, #304]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e2c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d053      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e42:	d035      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e48:	d82e      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e4e:	d031      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e54:	d828      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5a:	d01a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e60:	d822      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e6a:	d007      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e6c:	e01c      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6e:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e7a:	e01c      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e80:	3308      	adds	r3, #8
 8005e82:	2100      	movs	r1, #0
 8005e84:	4618      	mov	r0, r3
 8005e86:	f002 fa55 	bl	8008334 <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e90:	e011      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e96:	3328      	adds	r3, #40	; 0x28
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f002 fafc 	bl	8008498 <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e006      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ebe:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed4:	e003      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ef4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d056      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f0a:	d038      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f10:	d831      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f16:	d034      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f1c:	d82b      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f22:	d01d      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f28:	d825      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f34:	e01f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3c:	4ba2      	ldr	r3, [pc, #648]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4aa1      	ldr	r2, [pc, #644]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f48:	e01c      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4e:	3308      	adds	r3, #8
 8005f50:	2100      	movs	r1, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 f9ee 	bl	8008334 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f5e:	e011      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f64:	3328      	adds	r3, #40	; 0x28
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 fa95 	bl	8008498 <RCCEx_PLL3_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f74:	e006      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f7c:	e002      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f8c:	4b8e      	ldr	r3, [pc, #568]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f9c:	4a8a      	ldr	r2, [pc, #552]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8005fa2:	e003      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d03a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	2b30      	cmp	r3, #48	; 0x30
 8005fd4:	d01f      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d819      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d815      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d019      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d111      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fea:	4b77      	ldr	r3, [pc, #476]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a76      	ldr	r2, [pc, #472]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ff6:	e011      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	2102      	movs	r1, #2
 8006000:	4618      	mov	r0, r3
 8006002:	f002 f997 	bl	8008334 <RCCEx_PLL2_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800600c:	e006      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006014:	e002      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800601a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006024:	4b68      	ldr	r3, [pc, #416]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006028:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	4a65      	ldr	r2, [pc, #404]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006034:	430b      	orrs	r3, r1
 8006036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800603e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800604e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006052:	2300      	movs	r3, #0
 8006054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006058:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d051      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800606c:	d035      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800606e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006072:	d82e      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006078:	d031      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800607a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800607e:	d828      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	d01a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608a:	d822      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006094:	d007      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006096:	e01c      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006098:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	4a4a      	ldr	r2, [pc, #296]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800609e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060a4:	e01c      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060aa:	3308      	adds	r3, #8
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 f940 	bl	8008334 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060ba:	e011      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c0:	3328      	adds	r3, #40	; 0x28
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 f9e7 	bl	8008498 <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d8:	e002      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060e8:	4b37      	ldr	r3, [pc, #220]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f8:	430b      	orrs	r3, r1
 80060fa:	6513      	str	r3, [r2, #80]	; 0x50
 80060fc:	e003      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800611c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006120:	460b      	mov	r3, r1
 8006122:	4313      	orrs	r3, r2
 8006124:	d056      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006130:	d033      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006136:	d82c      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800613c:	d02f      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800613e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006142:	d826      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006148:	d02b      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800614a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800614e:	d820      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006154:	d012      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615a:	d81a      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d022      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d115      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616a:	3308      	adds	r3, #8
 800616c:	2101      	movs	r1, #1
 800616e:	4618      	mov	r0, r3
 8006170:	f002 f8e0 	bl	8008334 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800617a:	e015      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006180:	3328      	adds	r3, #40	; 0x28
 8006182:	2101      	movs	r1, #1
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f987 	bl	8008498 <RCCEx_PLL3_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006190:	e00a      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006198:	e006      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800619a:	bf00      	nop
 800619c:	e004      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061be:	4a02      	ldr	r2, [pc, #8]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6513      	str	r3, [r2, #80]	; 0x50
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061c6:	bf00      	nop
 80061c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80061e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d055      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006200:	d033      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006206:	d82c      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d02f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d826      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006218:	d02b      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800621a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800621e:	d820      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006224:	d012      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622a:	d81a      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d022      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006234:	d115      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623a:	3308      	adds	r3, #8
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f002 f878 	bl	8008334 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800624a:	e015      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	3328      	adds	r3, #40	; 0x28
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f002 f91f 	bl	8008498 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006260:	e00a      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800626a:	bf00      	nop
 800626c:	e004      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006280:	4ba3      	ldr	r3, [pc, #652]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006290:	4a9f      	ldr	r2, [pc, #636]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6593      	str	r3, [r2, #88]	; 0x58
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062ba:	460b      	mov	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	d037      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ca:	d00e      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d0:	d816      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80062d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062da:	d111      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4b8c      	ldr	r3, [pc, #560]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	4a8b      	ldr	r2, [pc, #556]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062e8:	e00f      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	3308      	adds	r3, #8
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f002 f81e 	bl	8008334 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006312:	4b7f      	ldr	r3, [pc, #508]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006316:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	4a7b      	ldr	r2, [pc, #492]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006322:	430b      	orrs	r3, r1
 8006324:	6513      	str	r3, [r2, #80]	; 0x50
 8006326:	e003      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800633c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006346:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	d039      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	2b03      	cmp	r3, #3
 8006358:	d81c      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	0800639d 	.word	0x0800639d
 8006364:	08006371 	.word	0x08006371
 8006368:	0800637f 	.word	0x0800637f
 800636c:	0800639d 	.word	0x0800639d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006370:	4b67      	ldr	r3, [pc, #412]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	4a66      	ldr	r2, [pc, #408]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800637c:	e00f      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006382:	3308      	adds	r3, #8
 8006384:	2102      	movs	r1, #2
 8006386:	4618      	mov	r0, r3
 8006388:	f001 ffd4 	bl	8008334 <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006392:	e004      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800639a:	e000      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800639c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063a6:	4b5a      	ldr	r3, [pc, #360]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	f023 0103 	bic.w	r1, r3, #3
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b4:	4a56      	ldr	r2, [pc, #344]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b6:	430b      	orrs	r3, r1
 80063b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80063d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f000 809f 	beq.w	8006524 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063e6:	4b4b      	ldr	r3, [pc, #300]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4a      	ldr	r2, [pc, #296]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063f2:	f7fc f9fb 	bl	80027ec <HAL_GetTick>
 80063f6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fa:	e00b      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063fc:	f7fc f9f6 	bl	80027ec <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b64      	cmp	r3, #100	; 0x64
 800640a:	d903      	bls.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006412:	e005      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006414:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0ed      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006424:	2b00      	cmp	r3, #0
 8006426:	d179      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006428:	4b39      	ldr	r3, [pc, #228]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800642a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006434:	4053      	eors	r3, r2
 8006436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800643e:	4b34      	ldr	r3, [pc, #208]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006446:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006456:	4b2e      	ldr	r3, [pc, #184]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	4a2d      	ldr	r2, [pc, #180]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800645c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006460:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006468:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d118      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fc f9b8 	bl	80027ec <HAL_GetTick>
 800647c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006480:	e00d      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fc f9b3 	bl	80027ec <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006492:	429a      	cmp	r2, r3
 8006494:	d903      	bls.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800649c:	e005      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800649e:	4b1c      	ldr	r3, [pc, #112]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0eb      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80064aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d129      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c2:	d10e      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064d4:	091a      	lsrs	r2, r3, #4
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80064d8:	4013      	ands	r3, r2
 80064da:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	6113      	str	r3, [r2, #16]
 80064e0:	e005      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80064ec:	6113      	str	r3, [r2, #16]
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006500:	430b      	orrs	r3, r1
 8006502:	6713      	str	r3, [r2, #112]	; 0x70
 8006504:	e00e      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800650e:	e009      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006510:	58024400 	.word	0x58024400
 8006514:	58024800 	.word	0x58024800
 8006518:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f002 0301 	and.w	r3, r2, #1
 8006530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800653a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800653e:	460b      	mov	r3, r1
 8006540:	4313      	orrs	r3, r2
 8006542:	f000 8089 	beq.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654c:	2b28      	cmp	r3, #40	; 0x28
 800654e:	d86b      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	08006631 	.word	0x08006631
 800655c:	08006629 	.word	0x08006629
 8006560:	08006629 	.word	0x08006629
 8006564:	08006629 	.word	0x08006629
 8006568:	08006629 	.word	0x08006629
 800656c:	08006629 	.word	0x08006629
 8006570:	08006629 	.word	0x08006629
 8006574:	08006629 	.word	0x08006629
 8006578:	080065fd 	.word	0x080065fd
 800657c:	08006629 	.word	0x08006629
 8006580:	08006629 	.word	0x08006629
 8006584:	08006629 	.word	0x08006629
 8006588:	08006629 	.word	0x08006629
 800658c:	08006629 	.word	0x08006629
 8006590:	08006629 	.word	0x08006629
 8006594:	08006629 	.word	0x08006629
 8006598:	08006613 	.word	0x08006613
 800659c:	08006629 	.word	0x08006629
 80065a0:	08006629 	.word	0x08006629
 80065a4:	08006629 	.word	0x08006629
 80065a8:	08006629 	.word	0x08006629
 80065ac:	08006629 	.word	0x08006629
 80065b0:	08006629 	.word	0x08006629
 80065b4:	08006629 	.word	0x08006629
 80065b8:	08006631 	.word	0x08006631
 80065bc:	08006629 	.word	0x08006629
 80065c0:	08006629 	.word	0x08006629
 80065c4:	08006629 	.word	0x08006629
 80065c8:	08006629 	.word	0x08006629
 80065cc:	08006629 	.word	0x08006629
 80065d0:	08006629 	.word	0x08006629
 80065d4:	08006629 	.word	0x08006629
 80065d8:	08006631 	.word	0x08006631
 80065dc:	08006629 	.word	0x08006629
 80065e0:	08006629 	.word	0x08006629
 80065e4:	08006629 	.word	0x08006629
 80065e8:	08006629 	.word	0x08006629
 80065ec:	08006629 	.word	0x08006629
 80065f0:	08006629 	.word	0x08006629
 80065f4:	08006629 	.word	0x08006629
 80065f8:	08006631 	.word	0x08006631
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006600:	3308      	adds	r3, #8
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fe95 	bl	8008334 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006610:	e00f      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	3328      	adds	r3, #40	; 0x28
 8006618:	2101      	movs	r1, #1
 800661a:	4618      	mov	r0, r3
 800661c:	f001 ff3c 	bl	8008498 <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006626:	e004      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800663a:	4bbf      	ldr	r3, [pc, #764]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800663c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	4abb      	ldr	r2, [pc, #748]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800664a:	430b      	orrs	r3, r1
 800664c:	6553      	str	r3, [r2, #84]	; 0x54
 800664e:	e003      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f002 0302 	and.w	r3, r2, #2
 8006664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006668:	2300      	movs	r3, #0
 800666a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800666e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d041      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667e:	2b05      	cmp	r3, #5
 8006680:	d824      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066a1 	.word	0x080066a1
 8006690:	080066b7 	.word	0x080066b7
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066d5 	.word	0x080066d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a4:	3308      	adds	r3, #8
 80066a6:	2101      	movs	r1, #1
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fe43 	bl	8008334 <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ba:	3328      	adds	r3, #40	; 0x28
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 feea 	bl	8008498 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066de:	4b96      	ldr	r3, [pc, #600]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	f023 0107 	bic.w	r1, r3, #7
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ec:	4a92      	ldr	r2, [pc, #584]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6553      	str	r3, [r2, #84]	; 0x54
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f002 0304 	and.w	r3, r2, #4
 8006708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006712:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d044      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006724:	2b05      	cmp	r3, #5
 8006726:	d825      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	0800677d 	.word	0x0800677d
 8006734:	08006749 	.word	0x08006749
 8006738:	0800675f 	.word	0x0800675f
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674c:	3308      	adds	r3, #8
 800674e:	2101      	movs	r1, #1
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fdef 	bl	8008334 <RCCEx_PLL2_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006762:	3328      	adds	r3, #40	; 0x28
 8006764:	2101      	movs	r1, #1
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fe96 	bl	8008498 <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006786:	4b6c      	ldr	r3, [pc, #432]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f023 0107 	bic.w	r1, r3, #7
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006796:	4a68      	ldr	r2, [pc, #416]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6593      	str	r3, [r2, #88]	; 0x58
 800679c:	e003      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f002 0320 	and.w	r3, r2, #32
 80067b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067c0:	460b      	mov	r3, r1
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d055      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d2:	d033      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80067d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d8:	d82c      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067de:	d02f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e4:	d826      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ea:	d02b      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80067ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067f0:	d820      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f6:	d012      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fc:	d81a      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d022      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006806:	d115      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680c:	3308      	adds	r3, #8
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f001 fd8f 	bl	8008334 <RCCEx_PLL2_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800681c:	e015      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006822:	3328      	adds	r3, #40	; 0x28
 8006824:	2102      	movs	r1, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fe36 	bl	8008498 <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006832:	e00a      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800683a:	e006      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800683c:	bf00      	nop
 800683e:	e004      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006840:	bf00      	nop
 8006842:	e002      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10b      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006852:	4b39      	ldr	r3, [pc, #228]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	4a35      	ldr	r2, [pc, #212]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006864:	430b      	orrs	r3, r1
 8006866:	6553      	str	r3, [r2, #84]	; 0x54
 8006868:	e003      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800686e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006882:	2300      	movs	r3, #0
 8006884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006888:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d058      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800689a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800689e:	d033      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80068a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068a4:	d82c      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d02f      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d826      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068b6:	d02b      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80068b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068bc:	d820      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c2:	d012      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c8:	d81a      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d022      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d115      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d8:	3308      	adds	r3, #8
 80068da:	2100      	movs	r1, #0
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fd29 	bl	8008334 <RCCEx_PLL2_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068e8:	e015      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	3328      	adds	r3, #40	; 0x28
 80068f0:	2102      	movs	r1, #2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 fdd0 	bl	8008498 <RCCEx_PLL3_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068fe:	e00a      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006906:	e006      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006908:	bf00      	nop
 800690a:	e004      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10e      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800692e:	4a02      	ldr	r2, [pc, #8]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6593      	str	r3, [r2, #88]	; 0x58
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800695e:	460b      	mov	r3, r1
 8006960:	4313      	orrs	r3, r2
 8006962:	d055      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800696c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006970:	d033      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006972:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006976:	d82c      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697c:	d02f      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006982:	d826      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006984:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006988:	d02b      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800698a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800698e:	d820      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006994:	d012      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699a:	d81a      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d022      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a4:	d115      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069aa:	3308      	adds	r3, #8
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fcc0 	bl	8008334 <RCCEx_PLL2_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069ba:	e015      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	3328      	adds	r3, #40	; 0x28
 80069c2:	2102      	movs	r1, #2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fd67 	bl	8008498 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069d0:	e00a      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069d8:	e006      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069da:	bf00      	nop
 80069dc:	e004      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069f0:	4ba1      	ldr	r3, [pc, #644]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a00:	4a9d      	ldr	r2, [pc, #628]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6593      	str	r3, [r2, #88]	; 0x58
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f002 0308 	and.w	r3, r2, #8
 8006a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a20:	2300      	movs	r3, #0
 8006a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	d01e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a42:	3328      	adds	r3, #40	; 0x28
 8006a44:	2102      	movs	r1, #2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 fd26 	bl	8008498 <RCCEx_PLL3_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a58:	4b87      	ldr	r3, [pc, #540]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a68:	4a83      	ldr	r2, [pc, #524]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f002 0310 	and.w	r3, r2, #16
 8006a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d01e      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa0:	3328      	adds	r3, #40	; 0x28
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fcf7 	bl	8008498 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ab6:	4b70      	ldr	r3, [pc, #448]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac6:	4a6c      	ldr	r2, [pc, #432]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d03e      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af8:	d022      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afe:	d81b      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b08:	d00b      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b0a:	e015      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b10:	3308      	adds	r3, #8
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fc0d 	bl	8008334 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	3328      	adds	r3, #40	; 0x28
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fcb4 	bl	8008498 <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b4a:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b5a:	4a47      	ldr	r2, [pc, #284]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006b76:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b78:	2300      	movs	r3, #0
 8006b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d03b      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b92:	d01f      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006b94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b98:	d818      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba4:	d007      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006ba6:	e011      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba8:	4b33      	ldr	r3, [pc, #204]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bb4:	e00f      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bba:	3328      	adds	r3, #40	; 0x28
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 fc6a 	bl	8008498 <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bca:	e004      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bde:	4b26      	ldr	r3, [pc, #152]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	4a22      	ldr	r2, [pc, #136]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6553      	str	r3, [r2, #84]	; 0x54
 8006bf4:	e003      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	677b      	str	r3, [r7, #116]	; 0x74
 8006c10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006c14:	460b      	mov	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	d034      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d007      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c2a:	e011      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2c:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a11      	ldr	r2, [pc, #68]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c38:	e00e      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3e:	3308      	adds	r3, #8
 8006c40:	2102      	movs	r1, #2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fb76 	bl	8008334 <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c4e:	e003      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10d      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	4a02      	ldr	r2, [pc, #8]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c74:	e006      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006c90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c92:	2300      	movs	r3, #0
 8006c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d00c      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca4:	3328      	adds	r3, #40	; 0x28
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fbf5 	bl	8008498 <RCCEx_PLL3_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc8:	2300      	movs	r3, #0
 8006cca:	667b      	str	r3, [r7, #100]	; 0x64
 8006ccc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d038      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce2:	d018      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce8:	d811      	bhi.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d014      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf4:	d80b      	bhi.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4bc3      	ldr	r3, [pc, #780]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4ac2      	ldr	r2, [pc, #776]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d0c:	e008      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d28:	4bb9      	ldr	r3, [pc, #740]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d38:	4ab5      	ldr	r2, [pc, #724]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	6553      	str	r3, [r2, #84]	; 0x54
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d56:	2300      	movs	r3, #0
 8006d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d64:	4baa      	ldr	r3, [pc, #680]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	4aa7      	ldr	r2, [pc, #668]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006d84:	653b      	str	r3, [r7, #80]	; 0x50
 8006d86:	2300      	movs	r3, #0
 8006d88:	657b      	str	r3, [r7, #84]	; 0x54
 8006d8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d94:	4b9e      	ldr	r3, [pc, #632]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006da4:	4a9a      	ldr	r2, [pc, #616]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db8:	2300      	movs	r3, #0
 8006dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006dc6:	4b92      	ldr	r3, [pc, #584]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	4a8e      	ldr	r2, [pc, #568]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006de6:	643b      	str	r3, [r7, #64]	; 0x40
 8006de8:	2300      	movs	r3, #0
 8006dea:	647b      	str	r3, [r7, #68]	; 0x44
 8006dec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006df6:	4b86      	ldr	r3, [pc, #536]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	4a85      	ldr	r2, [pc, #532]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e00:	6113      	str	r3, [r2, #16]
 8006e02:	4b83      	ldr	r3, [pc, #524]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e04:	6919      	ldr	r1, [r3, #16]
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e0e:	4a80      	ldr	r2, [pc, #512]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e30:	4b77      	ldr	r3, [pc, #476]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	4a74      	ldr	r2, [pc, #464]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e40:	430b      	orrs	r3, r1
 8006e42:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
 8006e56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e60:	4b6b      	ldr	r3, [pc, #428]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e70:	4a67      	ldr	r2, [pc, #412]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	d011      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e96:	3308      	adds	r3, #8
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 fa4a 	bl	8008334 <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6239      	str	r1, [r7, #32]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d011      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fa2a 	bl	8008334 <RCCEx_PLL2_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	2100      	movs	r1, #0
 8006f00:	61b9      	str	r1, [r7, #24]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d011      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f16:	3308      	adds	r3, #8
 8006f18:	2102      	movs	r1, #2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 fa0a 	bl	8008334 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6139      	str	r1, [r7, #16]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	d011      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f56:	3328      	adds	r3, #40	; 0x28
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fa9c 	bl	8008498 <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d011      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f96:	3328      	adds	r3, #40	; 0x28
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fa7c 	bl	8008498 <RCCEx_PLL3_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6039      	str	r1, [r7, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d011      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd6:	3328      	adds	r3, #40	; 0x28
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fa5c 	bl	8008498 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006ff6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
}
 8007004:	4618      	mov	r0, r3
 8007006:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800700a:	46bd      	mov	sp, r7
 800700c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007010:	58024400 	.word	0x58024400

08007014 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b090      	sub	sp, #64	; 0x40
 8007018:	af00      	add	r7, sp, #0
 800701a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800701e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007022:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007026:	430b      	orrs	r3, r1
 8007028:	f040 8094 	bne.w	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800702c:	4b9e      	ldr	r3, [pc, #632]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800702e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	2b04      	cmp	r3, #4
 800703a:	f200 8087 	bhi.w	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007059 	.word	0x08007059
 8007048:	08007081 	.word	0x08007081
 800704c:	080070a9 	.word	0x080070a9
 8007050:	08007145 	.word	0x08007145
 8007054:	080070d1 	.word	0x080070d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007058:	4b93      	ldr	r3, [pc, #588]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007064:	d108      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706a:	4618      	mov	r0, r3
 800706c:	f001 f810 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007074:	f000 bd45 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	f000 bd41 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007080:	4b89      	ldr	r3, [pc, #548]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800708c:	d108      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708e:	f107 0318 	add.w	r3, r7, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd54 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800709c:	f000 bd31 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a4:	f000 bd2d 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070a8:	4b7f      	ldr	r3, [pc, #508]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d108      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fe94 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c4:	f000 bd1d 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070cc:	f000 bd19 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070d0:	4b75      	ldr	r3, [pc, #468]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070da:	4b73      	ldr	r3, [pc, #460]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d10c      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070ec:	4b6e      	ldr	r3, [pc, #440]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fe:	e01f      	b.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007100:	4b69      	ldr	r3, [pc, #420]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710c:	d106      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007114:	d102      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007116:	4b66      	ldr	r3, [pc, #408]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800711a:	e011      	b.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800711c:	4b62      	ldr	r3, [pc, #392]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007128:	d106      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007130:	d102      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007132:	4b60      	ldr	r3, [pc, #384]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007136:	e003      	b.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800713c:	f000 bce1 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007140:	f000 bcdf 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007144:	4b5c      	ldr	r3, [pc, #368]	; (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007148:	f000 bcdb 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007150:	f000 bcd7 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007158:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800715c:	430b      	orrs	r3, r1
 800715e:	f040 80ad 	bne.w	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007162:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800716a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007172:	d056      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717a:	f200 8090 	bhi.w	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2bc0      	cmp	r3, #192	; 0xc0
 8007182:	f000 8088 	beq.w	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	2bc0      	cmp	r3, #192	; 0xc0
 800718a:	f200 8088 	bhi.w	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2b80      	cmp	r3, #128	; 0x80
 8007192:	d032      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	f200 8081 	bhi.w	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d014      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80071a8:	e079      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071aa:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b6:	d108      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 ff67 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c6:	f000 bc9c 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ce:	f000 bc98 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071d2:	4b35      	ldr	r3, [pc, #212]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071de:	d108      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e0:	f107 0318 	add.w	r3, r7, #24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fcab 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ee:	f000 bc88 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f6:	f000 bc84 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071fa:	4b2b      	ldr	r3, [pc, #172]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007206:	d108      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007208:	f107 030c 	add.w	r3, r7, #12
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fdeb 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007216:	f000 bc74 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	f000 bc70 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007222:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800722a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800722c:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b04      	cmp	r3, #4
 8007236:	d10c      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	08db      	lsrs	r3, r3, #3
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	4a18      	ldr	r2, [pc, #96]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800724a:	fa22 f303 	lsr.w	r3, r2, r3
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	e01f      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	d106      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007266:	d102      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800726c:	e011      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800726e:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800727a:	d106      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800728e:	f000 bc38 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007292:	f000 bc36 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729a:	f000 bc32 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a2:	f000 bc2e 	b.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072a6:	bf00      	nop
 80072a8:	58024400 	.word	0x58024400
 80072ac:	03d09000 	.word	0x03d09000
 80072b0:	003d0900 	.word	0x003d0900
 80072b4:	017d7840 	.word	0x017d7840
 80072b8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80072bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80072c4:	430b      	orrs	r3, r1
 80072c6:	f040 809c 	bne.w	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80072ca:	4b9e      	ldr	r3, [pc, #632]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80072d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072da:	d054      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072e2:	f200 808b 	bhi.w	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072ec:	f000 8083 	beq.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072f6:	f200 8081 	bhi.w	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007300:	d02f      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007308:	d878      	bhi.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007316:	d012      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007318:	e070      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800731a:	4b8a      	ldr	r3, [pc, #552]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007326:	d107      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800732c:	4618      	mov	r0, r3
 800732e:	f000 feaf 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007336:	e3e4      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733c:	e3e1      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800733e:	4b81      	ldr	r3, [pc, #516]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800734a:	d107      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734c:	f107 0318 	add.w	r3, r7, #24
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fbf5 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800735a:	e3d2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007360:	e3cf      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007362:	4b78      	ldr	r3, [pc, #480]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736e:	d107      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007370:	f107 030c 	add.w	r3, r7, #12
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fd37 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800737e:	e3c0      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007384:	e3bd      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007386:	4b6f      	ldr	r3, [pc, #444]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800738e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007390:	4b6c      	ldr	r3, [pc, #432]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b04      	cmp	r3, #4
 800739a:	d10c      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a2:	4b68      	ldr	r3, [pc, #416]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	08db      	lsrs	r3, r3, #3
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	4a66      	ldr	r2, [pc, #408]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b4:	e01e      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073b6:	4b63      	ldr	r3, [pc, #396]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d106      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ca:	d102      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073cc:	4b5f      	ldr	r3, [pc, #380]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	e010      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073d2:	4b5c      	ldr	r3, [pc, #368]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073de:	d106      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e6:	d102      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073e8:	4b59      	ldr	r3, [pc, #356]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073f2:	e386      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073f4:	e385      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073f6:	4b57      	ldr	r3, [pc, #348]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073fa:	e382      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007400:	e37f      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007406:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800740a:	430b      	orrs	r3, r1
 800740c:	f040 80a7 	bne.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007410:	4b4c      	ldr	r3, [pc, #304]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007418:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007420:	d055      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007428:	f200 8096 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007432:	f000 8084 	beq.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800743c:	f200 808c 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007446:	d030      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800744e:	f200 8083 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800745e:	d012      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007460:	e07a      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007462:	4b38      	ldr	r3, [pc, #224]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800746e:	d107      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fe0b 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747e:	e340      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007484:	e33d      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007486:	4b2f      	ldr	r3, [pc, #188]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007492:	d107      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007494:	f107 0318 	add.w	r3, r7, #24
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fb51 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a2:	e32e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a8:	e32b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074aa:	4b26      	ldr	r3, [pc, #152]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d107      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b8:	f107 030c 	add.w	r3, r7, #12
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fc93 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c6:	e31c      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074cc:	e319      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074ce:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d10c      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80074e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80074f6:	fa22 f303 	lsr.w	r3, r2, r3
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fc:	e01e      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750a:	d106      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007512:	d102      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007518:	e010      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800751a:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007526:	d106      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800752e:	d102      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	e002      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800753a:	e2e2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800753c:	e2e1      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007542:	e2de      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007544:	58024400 	.word	0x58024400
 8007548:	03d09000 	.word	0x03d09000
 800754c:	003d0900 	.word	0x003d0900
 8007550:	017d7840 	.word	0x017d7840
 8007554:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800755c:	e2d1      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800755e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007562:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007566:	430b      	orrs	r3, r1
 8007568:	f040 809c 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800756c:	4b93      	ldr	r3, [pc, #588]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007574:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800757c:	d054      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007584:	f200 808b 	bhi.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800758e:	f000 8083 	beq.w	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007598:	f200 8081 	bhi.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	d02f      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075aa:	d878      	bhi.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b8:	d012      	beq.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80075ba:	e070      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075bc:	4b7f      	ldr	r3, [pc, #508]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fd5e 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d8:	e293      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075de:	e290      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075e0:	4b76      	ldr	r3, [pc, #472]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ec:	d107      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ee:	f107 0318 	add.w	r3, r7, #24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 faa4 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fc:	e281      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007602:	e27e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007604:	4b6d      	ldr	r3, [pc, #436]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800760c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007610:	d107      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fbe6 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007620:	e26f      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007626:	e26c      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007628:	4b64      	ldr	r3, [pc, #400]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007630:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007632:	4b62      	ldr	r3, [pc, #392]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d10c      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007644:	4b5d      	ldr	r3, [pc, #372]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a5c      	ldr	r2, [pc, #368]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007656:	e01e      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007658:	4b58      	ldr	r3, [pc, #352]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766c:	d102      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800766e:	4b55      	ldr	r3, [pc, #340]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	e010      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007674:	4b51      	ldr	r3, [pc, #324]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007680:	d106      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007688:	d102      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800768a:	4b4f      	ldr	r3, [pc, #316]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768e:	e002      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007694:	e235      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007696:	e234      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007698:	4b4c      	ldr	r3, [pc, #304]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769c:	e231      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a2:	e22e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80076a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80076ac:	430b      	orrs	r3, r1
 80076ae:	f040 808f 	bne.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80076b2:	4b42      	ldr	r3, [pc, #264]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80076ba:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c2:	d06b      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ca:	d874      	bhi.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d2:	d056      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076da:	d86c      	bhi.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076e2:	d03b      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076ea:	d864      	bhi.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076f2:	d021      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076fa:	d85c      	bhi.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007708:	d004      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800770a:	e054      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fe fa0a 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8007710:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007712:	e1f6      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007714:	4b29      	ldr	r3, [pc, #164]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007720:	d107      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007722:	f107 0318 	add.w	r3, r7, #24
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fa0a 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007730:	e1e7      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007736:	e1e4      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007744:	d107      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fb4c 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007754:	e1d5      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800775a:	e1d2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800775c:	4b17      	ldr	r3, [pc, #92]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d109      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007768:	4b14      	ldr	r3, [pc, #80]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777a:	e1c2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007780:	e1bf      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	d102      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007794:	e1b5      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800779a:	e1b2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a8:	d102      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ae:	e1a8      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b4:	e1a5      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ba:	e1a2      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	017d7840 	.word	0x017d7840
 80077cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80077d8:	430b      	orrs	r3, r1
 80077da:	d173      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80077dc:	4b9c      	ldr	r3, [pc, #624]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ec:	d02f      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d863      	bhi.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007802:	d012      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007804:	e05b      	b.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007806:	4b92      	ldr	r3, [pc, #584]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800780e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007812:	d107      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007814:	f107 0318 	add.w	r3, r7, #24
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f991 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007822:	e16e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007828:	e16b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800782a:	4b89      	ldr	r3, [pc, #548]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007836:	d107      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007838:	f107 030c 	add.w	r3, r7, #12
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fad3 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007846:	e15c      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784c:	e159      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800784e:	4b80      	ldr	r3, [pc, #512]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007856:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007858:	4b7d      	ldr	r3, [pc, #500]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b04      	cmp	r3, #4
 8007862:	d10c      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800786a:	4b79      	ldr	r3, [pc, #484]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	08db      	lsrs	r3, r3, #3
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	4a77      	ldr	r2, [pc, #476]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007876:	fa22 f303 	lsr.w	r3, r2, r3
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800787c:	e01e      	b.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800787e:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788a:	d106      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007892:	d102      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007894:	4b70      	ldr	r3, [pc, #448]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007898:	e010      	b.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800789a:	4b6d      	ldr	r3, [pc, #436]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a6:	d106      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ae:	d102      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078b0:	4b6a      	ldr	r3, [pc, #424]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b4:	e002      	b.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078ba:	e122      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078bc:	e121      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c2:	e11e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80078cc:	430b      	orrs	r3, r1
 80078ce:	d133      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80078d0:	4b5f      	ldr	r3, [pc, #380]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e6:	d012      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80078e8:	e023      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078ea:	4b59      	ldr	r3, [pc, #356]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078f6:	d107      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fbc7 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007906:	e0fc      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800790c:	e0f9      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800790e:	4b50      	ldr	r3, [pc, #320]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800791a:	d107      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791c:	f107 0318 	add.w	r3, r7, #24
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f90d 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800792a:	e0ea      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007930:	e0e7      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007936:	e0e4      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007940:	430b      	orrs	r3, r1
 8007942:	f040 808d 	bne.w	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007946:	4b42      	ldr	r3, [pc, #264]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007956:	d06b      	beq.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800795e:	d874      	bhi.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007966:	d056      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796e:	d86c      	bhi.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007976:	d03b      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800797e:	d864      	bhi.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d021      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800798e:	d85c      	bhi.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800799c:	d004      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800799e:	e054      	b.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80079a0:	f000 f8b8 	bl	8007b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80079a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079a6:	e0ac      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b6:	f107 0318 	add.w	r3, r7, #24
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f8c0 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c4:	e09d      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ca:	e09a      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079cc:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079da:	f107 030c 	add.w	r3, r7, #12
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fa02 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e8:	e08b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ee:	e088      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d109      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fc:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	08db      	lsrs	r3, r3, #3
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0e:	e078      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a14:	e075      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a16:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a22:	d102      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a28:	e06b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2e:	e068      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a3c:	d102      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a42:	e05e      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a48:	e05b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4e:	e058      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a50:	58024400 	.word	0x58024400
 8007a54:	03d09000 	.word	0x03d09000
 8007a58:	003d0900 	.word	0x003d0900
 8007a5c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a64:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	d148      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a6c:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a74:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a7c:	d02a      	beq.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d838      	bhi.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a92:	d00d      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007a94:	e030      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a96:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa2:	d102      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa8:	e02b      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aae:	e028      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ab0:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007abc:	d107      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fae4 	bl	8008090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007acc:	e019      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad2:	e016      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad4:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f82a 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af0:	e007      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af6:	e004      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007afc:	e001      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3740      	adds	r7, #64	; 0x40
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	017d7840 	.word	0x017d7840

08007b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b18:	f7fd ffd4 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	4904      	ldr	r1, [pc, #16]	; (8007b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b2a:	5ccb      	ldrb	r3, [r1, r3]
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	0801bc50 	.word	0x0801bc50

08007b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b089      	sub	sp, #36	; 0x24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b48:	4ba1      	ldr	r3, [pc, #644]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f003 0303 	and.w	r3, r3, #3
 8007b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b52:	4b9f      	ldr	r3, [pc, #636]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	0b1b      	lsrs	r3, r3, #12
 8007b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b5e:	4b9c      	ldr	r3, [pc, #624]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	091b      	lsrs	r3, r3, #4
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b6a:	4b99      	ldr	r3, [pc, #612]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	fb02 f303 	mul.w	r3, r2, r3
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8111 	beq.w	8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	f000 8083 	beq.w	8007c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	f200 80a1 	bhi.w	8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d056      	beq.n	8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007baa:	e099      	b.n	8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bac:	4b88      	ldr	r3, [pc, #544]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d02d      	beq.n	8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bb8:	4b85      	ldr	r3, [pc, #532]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	08db      	lsrs	r3, r3, #3
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	4a84      	ldr	r2, [pc, #528]	; (8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	ee07 3a90 	vmov	s15, r3
 8007bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be2:	4b7b      	ldr	r3, [pc, #492]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c12:	e087      	b.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b6a      	ldr	r3, [pc, #424]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c56:	e065      	b.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b59      	ldr	r3, [pc, #356]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c9a:	e043      	b.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b48      	ldr	r3, [pc, #288]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cde:	e021      	b.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b37      	ldr	r3, [pc, #220]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d24:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	0a5b      	lsrs	r3, r3, #9
 8007d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4a:	ee17 2a90 	vmov	r2, s15
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d52:	4b1f      	ldr	r3, [pc, #124]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d78:	ee17 2a90 	vmov	r2, s15
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d80:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	0e1b      	lsrs	r3, r3, #24
 8007d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da6:	ee17 2a90 	vmov	r2, s15
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007dae:	e008      	b.n	8007dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	609a      	str	r2, [r3, #8]
}
 8007dc2:	bf00      	nop
 8007dc4:	3724      	adds	r7, #36	; 0x24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	03d09000 	.word	0x03d09000
 8007dd8:	46000000 	.word	0x46000000
 8007ddc:	4c742400 	.word	0x4c742400
 8007de0:	4a742400 	.word	0x4a742400
 8007de4:	4bbebc20 	.word	0x4bbebc20

08007de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b089      	sub	sp, #36	; 0x24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007df0:	4ba1      	ldr	r3, [pc, #644]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dfa:	4b9f      	ldr	r3, [pc, #636]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	0d1b      	lsrs	r3, r3, #20
 8007e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e06:	4b9c      	ldr	r3, [pc, #624]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	0a1b      	lsrs	r3, r3, #8
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e12:	4b99      	ldr	r3, [pc, #612]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e16:	08db      	lsrs	r3, r3, #3
 8007e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8111 	beq.w	8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	f000 8083 	beq.w	8007f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	f200 80a1 	bhi.w	8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d056      	beq.n	8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e52:	e099      	b.n	8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e54:	4b88      	ldr	r3, [pc, #544]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02d      	beq.n	8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e60:	4b85      	ldr	r3, [pc, #532]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	08db      	lsrs	r3, r3, #3
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	4a84      	ldr	r2, [pc, #528]	; (800807c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8a:	4b7b      	ldr	r3, [pc, #492]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007eba:	e087      	b.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ece:	4b6a      	ldr	r3, [pc, #424]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007efe:	e065      	b.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f12:	4b59      	ldr	r3, [pc, #356]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f42:	e043      	b.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800808c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f56:	4b48      	ldr	r3, [pc, #288]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f86:	e021      	b.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b37      	ldr	r3, [pc, #220]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007fcc:	4b2a      	ldr	r3, [pc, #168]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	0a5b      	lsrs	r3, r3, #9
 8007fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff2:	ee17 2a90 	vmov	r2, s15
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007ffa:	4b1f      	ldr	r3, [pc, #124]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	ee07 3a90 	vmov	s15, r3
 8008008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008014:	edd7 6a07 	vldr	s13, [r7, #28]
 8008018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008020:	ee17 2a90 	vmov	r2, s15
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008028:	4b13      	ldr	r3, [pc, #76]	; (8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	0e1b      	lsrs	r3, r3, #24
 800802e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800803e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008042:	edd7 6a07 	vldr	s13, [r7, #28]
 8008046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800804e:	ee17 2a90 	vmov	r2, s15
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008056:	e008      	b.n	800806a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	609a      	str	r2, [r3, #8]
}
 800806a:	bf00      	nop
 800806c:	3724      	adds	r7, #36	; 0x24
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	58024400 	.word	0x58024400
 800807c:	03d09000 	.word	0x03d09000
 8008080:	46000000 	.word	0x46000000
 8008084:	4c742400 	.word	0x4c742400
 8008088:	4a742400 	.word	0x4a742400
 800808c:	4bbebc20 	.word	0x4bbebc20

08008090 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008090:	b480      	push	{r7}
 8008092:	b089      	sub	sp, #36	; 0x24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008098:	4ba0      	ldr	r3, [pc, #640]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80080a2:	4b9e      	ldr	r3, [pc, #632]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	091b      	lsrs	r3, r3, #4
 80080a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80080ae:	4b9b      	ldr	r3, [pc, #620]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080b8:	4b98      	ldr	r3, [pc, #608]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	fb02 f303 	mul.w	r3, r2, r3
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8111 	beq.w	80082fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	f000 8083 	beq.w	80081ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	f200 80a1 	bhi.w	800822e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d056      	beq.n	80081a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80080f8:	e099      	b.n	800822e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fa:	4b88      	ldr	r3, [pc, #544]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d02d      	beq.n	8008162 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008106:	4b85      	ldr	r3, [pc, #532]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	4a83      	ldr	r2, [pc, #524]	; (8008320 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	ee07 3a90 	vmov	s15, r3
 8008128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008130:	4b7a      	ldr	r3, [pc, #488]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008138:	ee07 3a90 	vmov	s15, r3
 800813c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008140:	ed97 6a03 	vldr	s12, [r7, #12]
 8008144:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008160:	e087      	b.n	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	ee07 3a90 	vmov	s15, r3
 8008168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008174:	4b69      	ldr	r3, [pc, #420]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008184:	ed97 6a03 	vldr	s12, [r7, #12]
 8008188:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800818c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081a4:	e065      	b.n	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800832c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80081b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b8:	4b58      	ldr	r3, [pc, #352]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081e8:	e043      	b.n	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80081f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fc:	4b47      	ldr	r3, [pc, #284]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008210:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800822c:	e021      	b.n	8008272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008238:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800823c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008240:	4b36      	ldr	r3, [pc, #216]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008250:	ed97 6a03 	vldr	s12, [r7, #12]
 8008254:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008270:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	0a5b      	lsrs	r3, r3, #9
 8008278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008298:	ee17 2a90 	vmov	r2, s15
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80082a0:	4b1e      	ldr	r3, [pc, #120]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	0c1b      	lsrs	r3, r3, #16
 80082a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80082be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c6:	ee17 2a90 	vmov	r2, s15
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	0e1b      	lsrs	r3, r3, #24
 80082d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f4:	ee17 2a90 	vmov	r2, s15
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082fc:	e008      	b.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	609a      	str	r2, [r3, #8]
}
 8008310:	bf00      	nop
 8008312:	3724      	adds	r7, #36	; 0x24
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	58024400 	.word	0x58024400
 8008320:	03d09000 	.word	0x03d09000
 8008324:	46000000 	.word	0x46000000
 8008328:	4c742400 	.word	0x4c742400
 800832c:	4a742400 	.word	0x4a742400
 8008330:	4bbebc20 	.word	0x4bbebc20

08008334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008342:	4b53      	ldr	r3, [pc, #332]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d101      	bne.n	8008352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e099      	b.n	8008486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008352:	4b4f      	ldr	r3, [pc, #316]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a4e      	ldr	r2, [pc, #312]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800835c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800835e:	f7fa fa45 	bl	80027ec <HAL_GetTick>
 8008362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008364:	e008      	b.n	8008378 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008366:	f7fa fa41 	bl	80027ec <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e086      	b.n	8008486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008378:	4b45      	ldr	r3, [pc, #276]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f0      	bne.n	8008366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008384:	4b42      	ldr	r3, [pc, #264]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	031b      	lsls	r3, r3, #12
 8008392:	493f      	ldr	r1, [pc, #252]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008394:	4313      	orrs	r3, r2
 8008396:	628b      	str	r3, [r1, #40]	; 0x28
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	3b01      	subs	r3, #1
 800839e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	025b      	lsls	r3, r3, #9
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	061b      	lsls	r3, r3, #24
 80083c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083c8:	4931      	ldr	r1, [pc, #196]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083ce:	4b30      	ldr	r3, [pc, #192]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	492d      	ldr	r1, [pc, #180]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083e0:	4b2b      	ldr	r3, [pc, #172]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	f023 0220 	bic.w	r2, r3, #32
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	4928      	ldr	r1, [pc, #160]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083f2:	4b27      	ldr	r3, [pc, #156]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	4a26      	ldr	r2, [pc, #152]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	f023 0310 	bic.w	r3, r3, #16
 80083fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008402:	4b24      	ldr	r3, [pc, #144]	; (8008494 <RCCEx_PLL2_Config+0x160>)
 8008404:	4013      	ands	r3, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	69d2      	ldr	r2, [r2, #28]
 800840a:	00d2      	lsls	r2, r2, #3
 800840c:	4920      	ldr	r1, [pc, #128]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008412:	4b1f      	ldr	r3, [pc, #124]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008418:	f043 0310 	orr.w	r3, r3, #16
 800841c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008424:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4a19      	ldr	r2, [pc, #100]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800842a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800842e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008430:	e00f      	b.n	8008452 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d106      	bne.n	8008446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008438:	4b15      	ldr	r3, [pc, #84]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a14      	ldr	r2, [pc, #80]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008444:	e005      	b.n	8008452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008446:	4b12      	ldr	r3, [pc, #72]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	4a11      	ldr	r2, [pc, #68]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800844c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008450:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 8008458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800845c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845e:	f7fa f9c5 	bl	80027ec <HAL_GetTick>
 8008462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008464:	e008      	b.n	8008478 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008466:	f7fa f9c1 	bl	80027ec <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e006      	b.n	8008486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <RCCEx_PLL2_Config+0x15c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	58024400 	.word	0x58024400
 8008494:	ffff0007 	.word	0xffff0007

08008498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084a6:	4b53      	ldr	r3, [pc, #332]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d101      	bne.n	80084b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e099      	b.n	80085ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084b6:	4b4f      	ldr	r3, [pc, #316]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a4e      	ldr	r2, [pc, #312]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c2:	f7fa f993 	bl	80027ec <HAL_GetTick>
 80084c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084c8:	e008      	b.n	80084dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084ca:	f7fa f98f 	bl	80027ec <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e086      	b.n	80085ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084dc:	4b45      	ldr	r3, [pc, #276]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1f0      	bne.n	80084ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084e8:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	051b      	lsls	r3, r3, #20
 80084f6:	493f      	ldr	r1, [pc, #252]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	628b      	str	r3, [r1, #40]	; 0x28
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	3b01      	subs	r3, #1
 8008502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	3b01      	subs	r3, #1
 800850c:	025b      	lsls	r3, r3, #9
 800850e:	b29b      	uxth	r3, r3
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	3b01      	subs	r3, #1
 8008518:	041b      	lsls	r3, r3, #16
 800851a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	3b01      	subs	r3, #1
 8008526:	061b      	lsls	r3, r3, #24
 8008528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800852c:	4931      	ldr	r1, [pc, #196]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800852e:	4313      	orrs	r3, r2
 8008530:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008532:	4b30      	ldr	r3, [pc, #192]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	492d      	ldr	r1, [pc, #180]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008540:	4313      	orrs	r3, r2
 8008542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008544:	4b2b      	ldr	r3, [pc, #172]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	4928      	ldr	r1, [pc, #160]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008556:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800855c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008566:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <RCCEx_PLL3_Config+0x160>)
 8008568:	4013      	ands	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	69d2      	ldr	r2, [r2, #28]
 800856e:	00d2      	lsls	r2, r2, #3
 8008570:	4920      	ldr	r1, [pc, #128]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008572:	4313      	orrs	r3, r2
 8008574:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800857c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008588:	4b1a      	ldr	r3, [pc, #104]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	4a19      	ldr	r2, [pc, #100]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800858e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008594:	e00f      	b.n	80085b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d106      	bne.n	80085aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800859c:	4b15      	ldr	r3, [pc, #84]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	4a14      	ldr	r2, [pc, #80]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085a8:	e005      	b.n	80085b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a0e      	ldr	r2, [pc, #56]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085c2:	f7fa f913 	bl	80027ec <HAL_GetTick>
 80085c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085c8:	e008      	b.n	80085dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085ca:	f7fa f90f 	bl	80027ec <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d901      	bls.n	80085dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e006      	b.n	80085ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <RCCEx_PLL3_Config+0x15c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0f0      	beq.n	80085ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	58024400 	.word	0x58024400
 80085f8:	ffff0007 	.word	0xffff0007

080085fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e07c      	b.n	8008708 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10c      	bne.n	8008634 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f9 fd22 	bl	8002078 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2204      	movs	r2, #4
 8008638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f867 	bl	8008710 <HAL_SD_InitCard>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e05d      	b.n	8008708 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800864c:	f107 0308 	add.w	r3, r7, #8
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fdee 	bl	8009234 <HAL_SD_GetCardStatus>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e052      	b.n	8008708 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008662:	7e3b      	ldrb	r3, [r7, #24]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008668:	7e7b      	ldrb	r3, [r7, #25]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	2b01      	cmp	r3, #1
 8008674:	d10a      	bne.n	800868c <HAL_SD_Init+0x90>
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <HAL_SD_Init+0x86>
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008688:	65da      	str	r2, [r3, #92]	; 0x5c
 800868a:	e00b      	b.n	80086a4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d104      	bne.n	800869e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800869a:	65da      	str	r2, [r3, #92]	; 0x5c
 800869c:	e002      	b.n	80086a4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fe80 	bl	80093b0 <HAL_SD_ConfigWideBusOperation>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e026      	b.n	8008708 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80086ba:	f7fa f897 	bl	80027ec <HAL_GetTick>
 80086be:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80086c0:	e011      	b.n	80086e6 <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086c2:	f7fa f893 	bl	80027ec <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d109      	bne.n	80086e6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e010      	b.n	8008708 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 ff78 	bl	80095dc <HAL_SD_GetCardState>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d1e7      	bne.n	80086c2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3728      	adds	r7, #40	; 0x28
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008710:	b5b0      	push	{r4, r5, r7, lr}
 8008712:	b08e      	sub	sp, #56	; 0x38
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008718:	2300      	movs	r3, #0
 800871a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008728:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800872c:	f04f 0100 	mov.w	r1, #0
 8008730:	f7fe fc70 	bl	8007014 <HAL_RCCEx_GetPeriphCLKFreq>
 8008734:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e07f      	b.n	8008850 <HAL_SD_InitCard+0x140>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	4a40      	ldr	r2, [pc, #256]	; (8008858 <HAL_SD_InitCard+0x148>)
 8008756:	fba2 2303 	umull	r2, r3, r2, r3
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d107      	bne.n	800877c <HAL_SD_InitCard+0x6c>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0210 	orr.w	r2, r2, #16
 800877a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681d      	ldr	r5, [r3, #0]
 8008780:	466c      	mov	r4, sp
 8008782:	f107 0314 	add.w	r3, r7, #20
 8008786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800878a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008794:	4628      	mov	r0, r5
 8008796:	f004 fc6f 	bl	800d078 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f004 fcb2 	bl	800d108 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <HAL_SD_InitCard+0xa6>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <HAL_SD_InitCard+0xbc>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80087bc:	4a27      	ldr	r2, [pc, #156]	; (800885c <HAL_SD_InitCard+0x14c>)
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	3301      	adds	r3, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fa f81c 	bl	8002804 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fff3 	bl	80097b8 <SD_PowerON>
 80087d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <HAL_SD_InitCard+0xe2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e02e      	b.n	8008850 <HAL_SD_InitCard+0x140>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 ff12 	bl	800961c <SD_InitCard>
 80087f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <HAL_SD_InitCard+0x108>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e01b      	b.n	8008850 <HAL_SD_InitCard+0x140>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008820:	4618      	mov	r0, r3
 8008822:	f004 fd17 	bl	800d254 <SDMMC_CmdBlockLength>
 8008826:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00f      	beq.n	800884e <HAL_SD_InitCard+0x13e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a0b      	ldr	r2, [pc, #44]	; (8008860 <HAL_SD_InitCard+0x150>)
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <HAL_SD_InitCard+0x140>
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3728      	adds	r7, #40	; 0x28
 8008854:	46bd      	mov	sp, r7
 8008856:	bdb0      	pop	{r4, r5, r7, pc}
 8008858:	014f8b59 	.word	0x014f8b59
 800885c:	00012110 	.word	0x00012110
 8008860:	1fe00fff 	.word	0x1fe00fff

08008864 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e018      	b.n	80088a8 <HAL_SD_DeInit+0x44>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2203      	movs	r2, #3
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_SD_TRANSCEIVER != 0U)
  /* Deactivate the 1.8V Mode */
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d102      	bne.n	800888c <HAL_SD_DeInit+0x28>
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
    hsd->DriveTransceiver_1_8V_Callback(RESET);
#else
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8008886:	2000      	movs	r0, #0
 8008888:	f000 fb24 	bl	8008ed4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f825 	bl	80098dc <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f9 fcc4 	bl	8002220 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08c      	sub	sp, #48	; 0x30
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d107      	bne.n	80088d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e08d      	b.n	80089f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	f040 8086 	bne.w	80089f2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d907      	bls.n	800890a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e074      	b.n	80089f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2203      	movs	r2, #3
 800890e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	025a      	lsls	r2, r3, #9
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d002      	beq.n	8008936 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	025b      	lsls	r3, r3, #9
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	025b      	lsls	r3, r3, #9
 8008940:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008942:	2390      	movs	r3, #144	; 0x90
 8008944:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008946:	2302      	movs	r3, #2
 8008948:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800894a:	2300      	movs	r3, #0
 800894c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800894e:	2300      	movs	r3, #0
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f107 0210 	add.w	r2, r7, #16
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f004 fc4d 	bl	800d1fc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008970:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2201      	movs	r2, #1
 8008980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d90a      	bls.n	800899e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2282      	movs	r2, #130	; 0x82
 800898c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008994:	4618      	mov	r0, r3
 8008996:	f004 fca3 	bl	800d2e0 <SDMMC_CmdReadMultiBlock>
 800899a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800899c:	e009      	b.n	80089b2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2281      	movs	r2, #129	; 0x81
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089aa:	4618      	mov	r0, r3
 80089ac:	f004 fc75 	bl	800d29a <SDMMC_CmdReadSingleBlock>
 80089b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d012      	beq.n	80089de <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <HAL_SD_ReadBlocks_DMA+0x14c>)
 80089be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	431a      	orrs	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e00a      	b.n	80089f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80089ec:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e000      	b.n	80089f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80089f2:	2302      	movs	r3, #2
  }
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3730      	adds	r7, #48	; 0x30
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	1fe00fff 	.word	0x1fe00fff

08008a00 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	; 0x30
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d107      	bne.n	8008a28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e08d      	b.n	8008b44 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	f040 8086 	bne.w	8008b42 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	441a      	add	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d907      	bls.n	8008a5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e074      	b.n	8008b44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2200      	movs	r2, #0
 8008a68:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	025a      	lsls	r2, r3, #9
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d002      	beq.n	8008a86 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	025b      	lsls	r3, r3, #9
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	025b      	lsls	r3, r3, #9
 8008a90:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a92:	2390      	movs	r3, #144	; 0x90
 8008a94:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f107 0210 	add.w	r2, r7, #16
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f004 fba5 	bl	800d1fc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d90a      	bls.n	8008aee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	22a0      	movs	r2, #160	; 0xa0
 8008adc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f004 fc41 	bl	800d36c <SDMMC_CmdWriteMultiBlock>
 8008aea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008aec:	e009      	b.n	8008b02 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2290      	movs	r2, #144	; 0x90
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008afa:	4618      	mov	r0, r3
 8008afc:	f004 fc13 	bl	800d326 <SDMMC_CmdWriteSingleBlock>
 8008b00:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d012      	beq.n	8008b2e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0f      	ldr	r2, [pc, #60]	; (8008b4c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	431a      	orrs	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e00a      	b.n	8008b44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e000      	b.n	8008b44 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3730      	adds	r7, #48	; 0x30
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	1fe00fff 	.word	0x1fe00fff

08008b50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <HAL_SD_IRQHandler+0x2e>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f91c 	bl	8009db4 <SD_Read_IT>
 8008b7c:	e19a      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80ac 	beq.w	8008ce6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <HAL_SD_IRQHandler+0x1b8>)
 8008ba4:	400b      	ands	r3, r1
 8008ba6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d038      	beq.n	8008c44 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_SD_IRQHandler+0x96>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d011      	beq.n	8008c0a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f004 fbe2 	bl	800d3b4 <SDMMC_CmdStopTransfer>
 8008bf0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f95b 	bl	8008ec0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a3f      	ldr	r2, [pc, #252]	; (8008d0c <HAL_SD_IRQHandler+0x1bc>)
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <HAL_SD_IRQHandler+0xe4>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f005 fb9f 	bl	800e378 <HAL_SD_RxCpltCallback>
 8008c3a:	e13b      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f005 fb8d 	bl	800e35c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c42:	e137      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8132 	beq.w	8008eb4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2200      	movs	r2, #0
 8008c66:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <HAL_SD_IRQHandler+0x12c>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d011      	beq.n	8008ca0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f004 fb97 	bl	800d3b4 <SDMMC_CmdStopTransfer>
 8008c86:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f910 	bl	8008ec0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <HAL_SD_IRQHandler+0x172>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f005 fb4a 	bl	800e35c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <HAL_SD_IRQHandler+0x18e>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80eb 	beq.w	8008eb4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f005 fb4a 	bl	800e378 <HAL_SD_RxCpltCallback>
}
 8008ce4:	e0e6      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00d      	beq.n	8008d10 <HAL_SD_IRQHandler+0x1c0>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d008      	beq.n	8008d10 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 f89e 	bl	8009e40 <SD_Write_IT>
 8008d04:	e0d6      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
 8008d06:	bf00      	nop
 8008d08:	ffff3ec5 	.word	0xffff3ec5
 8008d0c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 809d 	beq.w	8008e5a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	f043 0202 	orr.w	r2, r3, #2
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f043 0208 	orr.w	r2, r3, #8
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	f043 0220 	orr.w	r2, r3, #32
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	f003 0310 	and.w	r3, r3, #16
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	f043 0210 	orr.w	r2, r3, #16
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a4b      	ldr	r2, [pc, #300]	; (8008ebc <HAL_SD_IRQHandler+0x36c>)
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dce:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f004 faed 	bl	800d3b4 <SDMMC_CmdStopTransfer>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008df4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f851 	bl	8008ec0 <HAL_SD_ErrorCallback>
}
 8008e1e:	e049      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d044      	beq.n	8008eb4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d040      	beq.n	8008eb4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008e40:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f834 	bl	8008ec0 <HAL_SD_ErrorCallback>
}
 8008e58:	e02c      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d025      	beq.n	8008eb4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10c      	bne.n	8008e9a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 f840 	bl	8009f10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008e90:	e010      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f828 	bl	8009ee8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008e98:	e00c      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f829 	bl	8009efc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008eaa:	e003      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f811 	bl	8009ed4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008eb2:	e7ff      	b.n	8008eb4 <HAL_SD_IRQHandler+0x364>
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	18000f3a 	.word	0x18000f3a

08008ec0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efa:	0f9b      	lsrs	r3, r3, #30
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f06:	0e9b      	lsrs	r3, r3, #26
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f18:	0e1b      	lsrs	r3, r3, #24
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4c:	0d1b      	lsrs	r3, r3, #20
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f6a:	0bdb      	lsrs	r3, r3, #15
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7c:	0b9b      	lsrs	r3, r3, #14
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f8e:	0b5b      	lsrs	r3, r3, #13
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa0:	0b1b      	lsrs	r3, r3, #12
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d163      	bne.n	8009084 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc0:	009a      	lsls	r2, r3, #2
 8008fc2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008fcc:	0f92      	lsrs	r2, r2, #30
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd8:	0edb      	lsrs	r3, r3, #27
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fea:	0e1b      	lsrs	r3, r3, #24
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ffc:	0d5b      	lsrs	r3, r3, #21
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	b2da      	uxtb	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900e:	0c9b      	lsrs	r3, r3, #18
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	b2da      	uxtb	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009020:	0bdb      	lsrs	r3, r3, #15
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	b2da      	uxtb	r2, r3
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	7e1b      	ldrb	r3, [r3, #24]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	3302      	adds	r3, #2
 8009044:	2201      	movs	r2, #1
 8009046:	fa02 f303 	lsl.w	r3, r2, r3
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800904e:	fb03 f202 	mul.w	r2, r3, r2
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	7a1b      	ldrb	r3, [r3, #8]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	2201      	movs	r2, #1
 8009062:	409a      	lsls	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009070:	0a52      	lsrs	r2, r2, #9
 8009072:	fb03 f202 	mul.w	r2, r3, r2
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009080:	659a      	str	r2, [r3, #88]	; 0x58
 8009082:	e031      	b.n	80090e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d11d      	bne.n	80090c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009090:	041b      	lsls	r3, r3, #16
 8009092:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909a:	0c1b      	lsrs	r3, r3, #16
 800909c:	431a      	orrs	r2, r3
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	3301      	adds	r3, #1
 80090a8:	029a      	lsls	r2, r3, #10
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	659a      	str	r2, [r3, #88]	; 0x58
 80090c6:	e00f      	b.n	80090e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a58      	ldr	r2, [pc, #352]	; (8009230 <HAL_SD_GetCardCSD+0x344>)
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e09d      	b.n	8009224 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ec:	0b9b      	lsrs	r3, r3, #14
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090fe:	09db      	lsrs	r3, r3, #7
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009106:	b2da      	uxtb	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009116:	b2da      	uxtb	r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009120:	0fdb      	lsrs	r3, r3, #31
 8009122:	b2da      	uxtb	r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912c:	0f5b      	lsrs	r3, r3, #29
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	b2da      	uxtb	r2, r3
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913e:	0e9b      	lsrs	r3, r3, #26
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	b2da      	uxtb	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009150:	0d9b      	lsrs	r3, r3, #22
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009162:	0d5b      	lsrs	r3, r3, #21
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917e:	0c1b      	lsrs	r3, r3, #16
 8009180:	b2db      	uxtb	r3, r3
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	b2da      	uxtb	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009192:	0bdb      	lsrs	r3, r3, #15
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a6:	0b9b      	lsrs	r3, r3, #14
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ba:	0b5b      	lsrs	r3, r3, #13
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ce:	0b1b      	lsrs	r3, r3, #12
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e2:	0a9b      	lsrs	r3, r3, #10
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f6:	0a1b      	lsrs	r3, r3, #8
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009212:	b2da      	uxtb	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	1fe00fff 	.word	0x1fe00fff

08009234 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b094      	sub	sp, #80	; 0x50
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b03      	cmp	r3, #3
 800924e:	d101      	bne.n	8009254 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e0a7      	b.n	80093a4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009254:	f107 0308 	add.w	r3, r7, #8
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb4c 	bl	80098f8 <SD_SendSDStatus>
 8009260:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009264:	2b00      	cmp	r3, #0
 8009266:	d011      	beq.n	800928c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a4f      	ldr	r2, [pc, #316]	; (80093ac <HAL_SD_GetCardStatus+0x178>)
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800928a:	e070      	b.n	800936e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	099b      	lsrs	r3, r3, #6
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	b2da      	uxtb	r2, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	0e1b      	lsrs	r3, r3, #24
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	061a      	lsls	r2, r3, #24
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	0a1b      	lsrs	r3, r3, #8
 80092d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	0e1b      	lsrs	r3, r3, #24
 80092e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	0a1b      	lsrs	r3, r3, #8
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	0d1b      	lsrs	r3, r3, #20
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 030f 	and.w	r3, r3, #15
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	0c1b      	lsrs	r3, r3, #16
 800930e:	b29b      	uxth	r3, r3
 8009310:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009314:	b29a      	uxth	r2, r3
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	b29b      	uxth	r3, r3
 800931a:	b2db      	uxtb	r3, r3
 800931c:	b29b      	uxth	r3, r3
 800931e:	4313      	orrs	r3, r2
 8009320:	b29a      	uxth	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	0a9b      	lsrs	r3, r3, #10
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009330:	b2da      	uxtb	r2, r3
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	0a1b      	lsrs	r3, r3, #8
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	b2da      	uxtb	r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	b2da      	uxtb	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	b2da      	uxtb	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	0e1b      	lsrs	r3, r3, #24
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009376:	4618      	mov	r0, r3
 8009378:	f003 ff6c 	bl	800d254 <SDMMC_CmdBlockLength>
 800937c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800937e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00d      	beq.n	80093a0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a08      	ldr	r2, [pc, #32]	; (80093ac <HAL_SD_GetCardStatus+0x178>)
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009390:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80093a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3750      	adds	r7, #80	; 0x50
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	1fe00fff 	.word	0x1fe00fff

080093b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b090      	sub	sp, #64	; 0x40
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2203      	movs	r2, #3
 80093c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d02e      	beq.n	800942e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093d6:	d106      	bne.n	80093e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	639a      	str	r2, [r3, #56]	; 0x38
 80093e4:	e029      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ec:	d10a      	bne.n	8009404 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fb7a 	bl	8009ae8 <SD_WideBus_Enable>
 80093f4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	639a      	str	r2, [r3, #56]	; 0x38
 8009402:	e01a      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fbb7 	bl	8009b7e <SD_WideBus_Disable>
 8009410:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	639a      	str	r2, [r3, #56]	; 0x38
 800941e:	e00c      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
 800942c:	e005      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a61      	ldr	r2, [pc, #388]	; (80095cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009448:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009450:	e099      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x1d6>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009452:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009456:	f04f 0100 	mov.w	r1, #0
 800945a:	f7fd fddb 	bl	8007014 <HAL_RCCEx_GetPeriphCLKFreq>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8086 	beq.w	8009574 <HAL_SD_ConfigWideBusOperation+0x1c4>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	4952      	ldr	r1, [pc, #328]	; (80095d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009486:	fba1 1303 	umull	r1, r3, r1, r3
 800948a:	0e1b      	lsrs	r3, r3, #24
 800948c:	429a      	cmp	r2, r3
 800948e:	d303      	bcc.n	8009498 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	e05a      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a0:	d103      	bne.n	80094aa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	e051      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b2:	d126      	bne.n	8009502 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10e      	bne.n	80094da <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	4a45      	ldr	r2, [pc, #276]	; (80095d4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d906      	bls.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	4a42      	ldr	r2, [pc, #264]	; (80095d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80094c8:	fba2 2303 	umull	r2, r3, r2, r3
 80094cc:	0e5b      	lsrs	r3, r3, #25
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e03d      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	e039      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e6:	4a3b      	ldr	r2, [pc, #236]	; (80095d4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d906      	bls.n	80094fa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	4a38      	ldr	r2, [pc, #224]	; (80095d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	0e5b      	lsrs	r3, r3, #25
 80094f6:	61fb      	str	r3, [r7, #28]
 80094f8:	e029      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	e025      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10e      	bne.n	8009528 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	4a32      	ldr	r2, [pc, #200]	; (80095d8 <HAL_SD_ConfigWideBusOperation+0x228>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d906      	bls.n	8009520 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	4a2e      	ldr	r2, [pc, #184]	; (80095d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009516:	fba2 2303 	umull	r2, r3, r2, r3
 800951a:	0e1b      	lsrs	r3, r3, #24
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	e016      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e012      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009530:	fbb2 f3f3 	udiv	r3, r2, r3
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <HAL_SD_ConfigWideBusOperation+0x228>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d906      	bls.n	8009548 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	4a24      	ldr	r2, [pc, #144]	; (80095d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800953e:	fba2 2303 	umull	r2, r3, r2, r3
 8009542:	0e1b      	lsrs	r3, r3, #24
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e002      	b.n	800954e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681d      	ldr	r5, [r3, #0]
 8009558:	466c      	mov	r4, sp
 800955a:	f107 0318 	add.w	r3, r7, #24
 800955e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800956c:	4628      	mov	r0, r5
 800956e:	f003 fd83 	bl	800d078 <SDMMC_Init>
 8009572:	e008      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x1d6>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800958e:	4618      	mov	r0, r3
 8009590:	f003 fe60 	bl	800d254 <SDMMC_CmdBlockLength>
 8009594:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00c      	beq.n	80095b6 <HAL_SD_ConfigWideBusOperation+0x206>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3730      	adds	r7, #48	; 0x30
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bdb0      	pop	{r4, r5, r7, pc}
 80095ca:	bf00      	nop
 80095cc:	1fe00fff 	.word	0x1fe00fff
 80095d0:	55e63b89 	.word	0x55e63b89
 80095d4:	02faf080 	.word	0x02faf080
 80095d8:	017d7840 	.word	0x017d7840

080095dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa52 	bl	8009a98 <SD_SendStatus>
 80095f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	0a5b      	lsrs	r3, r3, #9
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009612:	693b      	ldr	r3, [r7, #16]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b090      	sub	sp, #64	; 0x40
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009628:	f7f9 f8e0 	bl	80027ec <HAL_GetTick>
 800962c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f003 fd8a 	bl	800d14c <SDMMC_GetPowerState>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800963e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009642:	e0b5      	b.n	80097b0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	2b03      	cmp	r3, #3
 800964a:	d02e      	beq.n	80096aa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4618      	mov	r0, r3
 8009652:	f003 ffd4 	bl	800d5fe <SDMMC_CmdSendCID>
 8009656:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <SD_InitCard+0x46>
    {
      return errorstate;
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	e0a6      	b.n	80097b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f003 fdb4 	bl	800d1d6 <SDMMC_GetResponse>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2104      	movs	r1, #4
 800967a:	4618      	mov	r0, r3
 800967c:	f003 fdab 	bl	800d1d6 <SDMMC_GetResponse>
 8009680:	4602      	mov	r2, r0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2108      	movs	r1, #8
 800968c:	4618      	mov	r0, r3
 800968e:	f003 fda2 	bl	800d1d6 <SDMMC_GetResponse>
 8009692:	4602      	mov	r2, r0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	210c      	movs	r1, #12
 800969e:	4618      	mov	r0, r3
 80096a0:	f003 fd99 	bl	800d1d6 <SDMMC_GetResponse>
 80096a4:	4602      	mov	r2, r0
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d01d      	beq.n	80096ee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80096b2:	e019      	b.n	80096e8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f107 020a 	add.w	r2, r7, #10
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f003 ffdc 	bl	800d67c <SDMMC_CmdSetRelAdd>
 80096c4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	e06f      	b.n	80097b0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80096d0:	f7f9 f88c 	bl	80027ec <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f241 3287 	movw	r2, #4999	; 0x1387
 80096de:	4293      	cmp	r3, r2
 80096e0:	d902      	bls.n	80096e8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80096e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096e6:	e063      	b.n	80097b0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80096e8:	897b      	ldrh	r3, [r7, #10]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0e2      	beq.n	80096b4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d036      	beq.n	8009764 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096f6:	897b      	ldrh	r3, [r7, #10]
 80096f8:	461a      	mov	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009706:	041b      	lsls	r3, r3, #16
 8009708:	4619      	mov	r1, r3
 800970a:	4610      	mov	r0, r2
 800970c:	f003 ff96 	bl	800d63c <SDMMC_CmdSendCSD>
 8009710:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <SD_InitCard+0x100>
    {
      return errorstate;
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	e049      	b.n	80097b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2100      	movs	r1, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f003 fd57 	bl	800d1d6 <SDMMC_GetResponse>
 8009728:	4602      	mov	r2, r0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2104      	movs	r1, #4
 8009734:	4618      	mov	r0, r3
 8009736:	f003 fd4e 	bl	800d1d6 <SDMMC_GetResponse>
 800973a:	4602      	mov	r2, r0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2108      	movs	r1, #8
 8009746:	4618      	mov	r0, r3
 8009748:	f003 fd45 	bl	800d1d6 <SDMMC_GetResponse>
 800974c:	4602      	mov	r2, r0
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	210c      	movs	r1, #12
 8009758:	4618      	mov	r0, r3
 800975a:	f003 fd3c 	bl	800d1d6 <SDMMC_GetResponse>
 800975e:	4602      	mov	r2, r0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2104      	movs	r1, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f003 fd33 	bl	800d1d6 <SDMMC_GetResponse>
 8009770:	4603      	mov	r3, r0
 8009772:	0d1a      	lsrs	r2, r3, #20
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009778:	f107 030c 	add.w	r3, r7, #12
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fbb4 	bl	8008eec <HAL_SD_GetCardCSD>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800978a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800978e:	e00f      	b.n	80097b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009798:	041b      	lsls	r3, r3, #16
 800979a:	4619      	mov	r1, r3
 800979c:	4610      	mov	r0, r2
 800979e:	f003 fe45 	bl	800d42c <SDMMC_CmdSelDesel>
 80097a2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <SD_InitCard+0x192>
  {
    return errorstate;
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	e000      	b.n	80097b0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3740      	adds	r7, #64	; 0x40
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80097cc:	f7f9 f80e 	bl	80027ec <HAL_GetTick>
 80097d0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f003 fe4b 	bl	800d472 <SDMMC_CmdGoIdleState>
 80097dc:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <SD_PowerON+0x30>
  {
    return errorstate;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	e072      	b.n	80098ce <SD_PowerON+0x116>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f003 fe5e 	bl	800d4ae <SDMMC_CmdOperCond>
 80097f2:	6138      	str	r0, [r7, #16]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097fa:	d10d      	bne.n	8009818 <SD_PowerON+0x60>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f003 fe33 	bl	800d472 <SDMMC_CmdGoIdleState>
 800980c:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <SD_PowerON+0x66>
    {
      return errorstate;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	e05a      	b.n	80098ce <SD_PowerON+0x116>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b01      	cmp	r3, #1
 8009824:	d137      	bne.n	8009896 <SD_PowerON+0xde>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f003 fe5e 	bl	800d4ee <SDMMC_CmdAppCommand>
 8009832:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02d      	beq.n	8009896 <SD_PowerON+0xde>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800983a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800983e:	e046      	b.n	80098ce <SD_PowerON+0x116>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2100      	movs	r1, #0
 8009846:	4618      	mov	r0, r3
 8009848:	f003 fe51 	bl	800d4ee <SDMMC_CmdAppCommand>
 800984c:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <SD_PowerON+0xa0>
    {
      return errorstate;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	e03a      	b.n	80098ce <SD_PowerON+0x116>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	491e      	ldr	r1, [pc, #120]	; (80098d8 <SD_PowerON+0x120>)
 800985e:	4618      	mov	r0, r3
 8009860:	f003 fe68 	bl	800d534 <SDMMC_CmdAppOperCommand>
 8009864:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <SD_PowerON+0xba>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800986c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009870:	e02d      	b.n	80098ce <SD_PowerON+0x116>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f003 fcac 	bl	800d1d6 <SDMMC_GetResponse>
 800987e:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	0fdb      	lsrs	r3, r3, #31
 8009884:	2b01      	cmp	r3, #1
 8009886:	d101      	bne.n	800988c <SD_PowerON+0xd4>
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <SD_PowerON+0xd6>
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]

    count++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3301      	adds	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800989c:	4293      	cmp	r3, r2
 800989e:	d802      	bhi.n	80098a6 <SD_PowerON+0xee>
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0cc      	beq.n	8009840 <SD_PowerON+0x88>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d902      	bls.n	80098b6 <SD_PowerON+0xfe>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80098b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098b4:	e00b      	b.n	80098ce <SD_PowerON+0x116>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <SD_PowerON+0x114>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	c1100000 	.word	0xc1100000

080098dc <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f003 fc1e 	bl	800d12a <SDMMC_PowerState_OFF>
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08c      	sub	sp, #48	; 0x30
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009902:	f7f8 ff73 	bl	80027ec <HAL_GetTick>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f003 fc5f 	bl	800d1d6 <SDMMC_GetResponse>
 8009918:	4603      	mov	r3, r0
 800991a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009922:	d102      	bne.n	800992a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009928:	e0b0      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2140      	movs	r1, #64	; 0x40
 8009930:	4618      	mov	r0, r3
 8009932:	f003 fc8f 	bl	800d254 <SDMMC_CmdBlockLength>
 8009936:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	e0a0      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009952:	041b      	lsls	r3, r3, #16
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f003 fdc9 	bl	800d4ee <SDMMC_CmdAppCommand>
 800995c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	e08d      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009970:	f04f 33ff 	mov.w	r3, #4294967295
 8009974:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800997a:	2360      	movs	r3, #96	; 0x60
 800997c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800997e:	2302      	movs	r3, #2
 8009980:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009982:	2300      	movs	r3, #0
 8009984:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009986:	2301      	movs	r3, #1
 8009988:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f107 0208 	add.w	r2, r7, #8
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f003 fc31 	bl	800d1fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f003 feb1 	bl	800d706 <SDMMC_CmdStatusRegister>
 80099a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02b      	beq.n	8009a04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	e069      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d013      	beq.n	80099ee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ca:	e00d      	b.n	80099e8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f003 fb7b 	bl	800d0cc <SDMMC_ReadFIFO>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	601a      	str	r2, [r3, #0]
        pData++;
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	3304      	adds	r3, #4
 80099e0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	3301      	adds	r3, #1
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2b07      	cmp	r3, #7
 80099ec:	d9ee      	bls.n	80099cc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099ee:	f7f8 fefd 	bl	80027ec <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d102      	bne.n	8009a04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a02:	e043      	b.n	8009a8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0d2      	beq.n	80099b8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a20:	2308      	movs	r3, #8
 8009a22:	e033      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a32:	2302      	movs	r3, #2
 8009a34:	e02a      	b.n	8009a8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d017      	beq.n	8009a74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a44:	2320      	movs	r3, #32
 8009a46:	e021      	b.n	8009a8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f003 fb3d 	bl	800d0cc <SDMMC_ReadFIFO>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	601a      	str	r2, [r3, #0]
    pData++;
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a5e:	f7f8 fec5 	bl	80027ec <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6c:	d102      	bne.n	8009a74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a72:	e00b      	b.n	8009a8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e2      	bne.n	8009a48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a03      	ldr	r2, [pc, #12]	; (8009a94 <SD_SendSDStatus+0x19c>)
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3730      	adds	r7, #48	; 0x30
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	18000f3a 	.word	0x18000f3a

08009a98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d102      	bne.n	8009aae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009aac:	e018      	b.n	8009ae0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f003 fe00 	bl	800d6c0 <SDMMC_CmdSendStatus>
 8009ac0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	e009      	b.n	8009ae0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f003 fb7f 	bl	800d1d6 <SDMMC_GetResponse>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2100      	movs	r1, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f003 fb69 	bl	800d1d6 <SDMMC_GetResponse>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b0e:	d102      	bne.n	8009b16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b14:	e02f      	b.n	8009b76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b16:	f107 030c 	add.w	r3, r7, #12
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f879 	bl	8009c14 <SD_FindSCR>
 8009b22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	e023      	b.n	8009b76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01c      	beq.n	8009b72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	4619      	mov	r1, r3
 8009b44:	4610      	mov	r0, r2
 8009b46:	f003 fcd2 	bl	800d4ee <SDMMC_CmdAppCommand>
 8009b4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	e00f      	b.n	8009b76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f003 fd09 	bl	800d574 <SDMMC_CmdBusWidth>
 8009b62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	e003      	b.n	8009b76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e001      	b.n	8009b76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f003 fb1e 	bl	800d1d6 <SDMMC_GetResponse>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ba4:	d102      	bne.n	8009bac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009baa:	e02f      	b.n	8009c0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f82e 	bl	8009c14 <SD_FindSCR>
 8009bb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	e023      	b.n	8009c0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01c      	beq.n	8009c08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd6:	041b      	lsls	r3, r3, #16
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f003 fc87 	bl	800d4ee <SDMMC_CmdAppCommand>
 8009be0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	e00f      	b.n	8009c0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f003 fcbe 	bl	800d574 <SDMMC_CmdBusWidth>
 8009bf8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	e003      	b.n	8009c0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c04:	2300      	movs	r3, #0
 8009c06:	e001      	b.n	8009c0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08e      	sub	sp, #56	; 0x38
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c1e:	f7f8 fde5 	bl	80027ec <HAL_GetTick>
 8009c22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60bb      	str	r3, [r7, #8]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2108      	movs	r1, #8
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f003 fb0a 	bl	800d254 <SDMMC_CmdBlockLength>
 8009c40:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	e0ad      	b.n	8009da8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f003 fc48 	bl	800d4ee <SDMMC_CmdAppCommand>
 8009c5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	e09e      	b.n	8009da8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c70:	2308      	movs	r3, #8
 8009c72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c74:	2330      	movs	r3, #48	; 0x30
 8009c76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f107 0210 	add.w	r2, r7, #16
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f003 fab4 	bl	800d1fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f003 fc8e 	bl	800d5ba <SDMMC_CmdSendSCR>
 8009c9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d027      	beq.n	8009cf6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	e07e      	b.n	8009da8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d113      	bne.n	8009ce0 <SD_FindSCR+0xcc>
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d110      	bne.n	8009ce0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f003 fa02 	bl	800d0cc <SDMMC_ReadFIFO>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f003 f9fb 	bl	800d0cc <SDMMC_ReadFIFO>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	60fb      	str	r3, [r7, #12]
      index++;
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	3301      	adds	r3, #1
 8009cde:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ce0:	f7f8 fd84 	bl	80027ec <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d102      	bne.n	8009cf6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cf4:	e058      	b.n	8009da8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cfc:	f240 532a 	movw	r3, #1322	; 0x52a
 8009d00:	4013      	ands	r3, r2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0d1      	beq.n	8009caa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2208      	movs	r2, #8
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d1c:	2308      	movs	r3, #8
 8009d1e:	e043      	b.n	8009da8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2202      	movs	r2, #2
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d36:	2302      	movs	r3, #2
 8009d38:	e036      	b.n	8009da8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d40:	f003 0320 	and.w	r3, r3, #32
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009d50:	2320      	movs	r3, #32
 8009d52:	e029      	b.n	8009da8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a15      	ldr	r2, [pc, #84]	; (8009db0 <SD_FindSCR+0x19c>)
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	061a      	lsls	r2, r3, #24
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	0a1b      	lsrs	r3, r3, #8
 8009d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	0e1b      	lsrs	r3, r3, #24
 8009d78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	601a      	str	r2, [r3, #0]
    scr++;
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	3304      	adds	r3, #4
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	061a      	lsls	r2, r3, #24
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	0a1b      	lsrs	r3, r3, #8
 8009d96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	0e1b      	lsrs	r3, r3, #24
 8009da0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3738      	adds	r7, #56	; 0x38
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	18000f3a 	.word	0x18000f3a

08009db4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	2b1f      	cmp	r3, #31
 8009dc8:	d936      	bls.n	8009e38 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	e027      	b.n	8009e20 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f003 f979 	bl	800d0cc <SDMMC_ReadFIFO>
 8009dda:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	3301      	adds	r3, #1
 8009de8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	3301      	adds	r3, #1
 8009df8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	3301      	adds	r3, #1
 8009e08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	0e1b      	lsrs	r3, r3, #24
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3301      	adds	r3, #1
 8009e18:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b07      	cmp	r3, #7
 8009e24:	d9d4      	bls.n	8009dd0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	f1a3 0220 	sub.w	r2, r3, #32
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e38:	bf00      	nop
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b1f      	cmp	r3, #31
 8009e54:	d93a      	bls.n	8009ecc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	e02b      	b.n	8009eb4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3301      	adds	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	021a      	lsls	r2, r3, #8
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	3301      	adds	r3, #1
 8009e78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	041a      	lsls	r2, r3, #16
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	061a      	lsls	r2, r3, #24
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f107 020c 	add.w	r2, r7, #12
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f003 f91c 	bl	800d0e6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2b07      	cmp	r3, #7
 8009eb8:	d9d0      	bls.n	8009e5c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	f1a3 0220 	sub.w	r2, r3, #32
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009ecc:	bf00      	nop
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e049      	b.n	8009fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f841 	bl	8009fd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f000 fa00 	bl	800a368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
	...

08009fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d001      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e054      	b.n	800a0aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68da      	ldr	r2, [r3, #12]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a26      	ldr	r2, [pc, #152]	; (800a0b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d022      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02a:	d01d      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a22      	ldr	r2, [pc, #136]	; (800a0bc <HAL_TIM_Base_Start_IT+0xd4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d018      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1f      	ldr	r2, [pc, #124]	; (800a0c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1e      	ldr	r2, [pc, #120]	; (800a0c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <HAL_TIM_Base_Start_IT+0xe4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1b      	ldr	r2, [pc, #108]	; (800a0d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d115      	bne.n	800a094 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <HAL_TIM_Base_Start_IT+0xec>)
 800a070:	4013      	ands	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b06      	cmp	r3, #6
 800a078:	d015      	beq.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a080:	d011      	beq.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0201 	orr.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a092:	e008      	b.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f042 0201 	orr.w	r2, r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e000      	b.n	800a0a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40010400 	.word	0x40010400
 800a0cc:	40001800 	.word	0x40001800
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	00010007 	.word	0x00010007

0800a0d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d122      	bne.n	800a134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0202 	mvn.w	r2, #2
 800a104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f905 	bl	800a32a <HAL_TIM_IC_CaptureCallback>
 800a120:	e005      	b.n	800a12e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f8f7 	bl	800a316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f908 	bl	800a33e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d122      	bne.n	800a188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d11b      	bne.n	800a188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0204 	mvn.w	r2, #4
 800a158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2202      	movs	r2, #2
 800a15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f8db 	bl	800a32a <HAL_TIM_IC_CaptureCallback>
 800a174:	e005      	b.n	800a182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8cd 	bl	800a316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f8de 	bl	800a33e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f003 0308 	and.w	r3, r3, #8
 800a192:	2b08      	cmp	r3, #8
 800a194:	d122      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f003 0308 	and.w	r3, r3, #8
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d11b      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f06f 0208 	mvn.w	r2, #8
 800a1ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8b1 	bl	800a32a <HAL_TIM_IC_CaptureCallback>
 800a1c8:	e005      	b.n	800a1d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f8a3 	bl	800a316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f8b4 	bl	800a33e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0310 	and.w	r3, r3, #16
 800a1e6:	2b10      	cmp	r3, #16
 800a1e8:	d122      	bne.n	800a230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d11b      	bne.n	800a230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0210 	mvn.w	r2, #16
 800a200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2208      	movs	r2, #8
 800a206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f887 	bl	800a32a <HAL_TIM_IC_CaptureCallback>
 800a21c:	e005      	b.n	800a22a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f879 	bl	800a316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f88a 	bl	800a33e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d10e      	bne.n	800a25c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d107      	bne.n	800a25c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0201 	mvn.w	r2, #1
 800a254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7f7 fed4 	bl	8002004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b80      	cmp	r3, #128	; 0x80
 800a268:	d10e      	bne.n	800a288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a274:	2b80      	cmp	r3, #128	; 0x80
 800a276:	d107      	bne.n	800a288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f914 	bl	800a4b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d10e      	bne.n	800a2b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a2:	2b80      	cmp	r3, #128	; 0x80
 800a2a4:	d107      	bne.n	800a2b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f907 	bl	800a4c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c0:	2b40      	cmp	r3, #64	; 0x40
 800a2c2:	d10e      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ce:	2b40      	cmp	r3, #64	; 0x40
 800a2d0:	d107      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f838 	bl	800a352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d10e      	bne.n	800a30e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f003 0320 	and.w	r3, r3, #32
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d107      	bne.n	800a30e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f06f 0220 	mvn.w	r2, #32
 800a306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f8c7 	bl	800a49c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
	...

0800a368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a40      	ldr	r2, [pc, #256]	; (800a47c <TIM_Base_SetConfig+0x114>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d013      	beq.n	800a3a8 <TIM_Base_SetConfig+0x40>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a386:	d00f      	beq.n	800a3a8 <TIM_Base_SetConfig+0x40>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a3d      	ldr	r2, [pc, #244]	; (800a480 <TIM_Base_SetConfig+0x118>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d00b      	beq.n	800a3a8 <TIM_Base_SetConfig+0x40>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a3c      	ldr	r2, [pc, #240]	; (800a484 <TIM_Base_SetConfig+0x11c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d007      	beq.n	800a3a8 <TIM_Base_SetConfig+0x40>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a3b      	ldr	r2, [pc, #236]	; (800a488 <TIM_Base_SetConfig+0x120>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_Base_SetConfig+0x40>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a3a      	ldr	r2, [pc, #232]	; (800a48c <TIM_Base_SetConfig+0x124>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d108      	bne.n	800a3ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a2f      	ldr	r2, [pc, #188]	; (800a47c <TIM_Base_SetConfig+0x114>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d01f      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c8:	d01b      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a2c      	ldr	r2, [pc, #176]	; (800a480 <TIM_Base_SetConfig+0x118>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d017      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a2b      	ldr	r2, [pc, #172]	; (800a484 <TIM_Base_SetConfig+0x11c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d013      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a2a      	ldr	r2, [pc, #168]	; (800a488 <TIM_Base_SetConfig+0x120>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00f      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a29      	ldr	r2, [pc, #164]	; (800a48c <TIM_Base_SetConfig+0x124>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d00b      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a28      	ldr	r2, [pc, #160]	; (800a490 <TIM_Base_SetConfig+0x128>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d007      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a27      	ldr	r2, [pc, #156]	; (800a494 <TIM_Base_SetConfig+0x12c>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d003      	beq.n	800a402 <TIM_Base_SetConfig+0x9a>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a26      	ldr	r2, [pc, #152]	; (800a498 <TIM_Base_SetConfig+0x130>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d108      	bne.n	800a414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a10      	ldr	r2, [pc, #64]	; (800a47c <TIM_Base_SetConfig+0x114>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d00f      	beq.n	800a460 <TIM_Base_SetConfig+0xf8>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a12      	ldr	r2, [pc, #72]	; (800a48c <TIM_Base_SetConfig+0x124>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d00b      	beq.n	800a460 <TIM_Base_SetConfig+0xf8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a11      	ldr	r2, [pc, #68]	; (800a490 <TIM_Base_SetConfig+0x128>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d007      	beq.n	800a460 <TIM_Base_SetConfig+0xf8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a10      	ldr	r2, [pc, #64]	; (800a494 <TIM_Base_SetConfig+0x12c>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d003      	beq.n	800a460 <TIM_Base_SetConfig+0xf8>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a0f      	ldr	r2, [pc, #60]	; (800a498 <TIM_Base_SetConfig+0x130>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d103      	bne.n	800a468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691a      	ldr	r2, [r3, #16]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	615a      	str	r2, [r3, #20]
}
 800a46e:	bf00      	nop
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40010000 	.word	0x40010000
 800a480:	40000400 	.word	0x40000400
 800a484:	40000800 	.word	0x40000800
 800a488:	40000c00 	.word	0x40000c00
 800a48c:	40010400 	.word	0x40010400
 800a490:	40014000 	.word	0x40014000
 800a494:	40014400 	.word	0x40014400
 800a498:	40014800 	.word	0x40014800

0800a49c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e042      	b.n	800a570 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7f8 f88b 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2224      	movs	r2, #36	; 0x24
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 0201 	bic.w	r2, r2, #1
 800a518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fce6 	bl	800aeec <UART_SetConfig>
 800a520:	4603      	mov	r3, r0
 800a522:	2b01      	cmp	r3, #1
 800a524:	d101      	bne.n	800a52a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e022      	b.n	800a570 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fa42 	bl	800b9bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 fac9 	bl	800bb00 <UART_CheckIdleState>
 800a56e:	4603      	mov	r3, r0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a578:	b480      	push	{r7}
 800a57a:	b091      	sub	sp, #68	; 0x44
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d178      	bne.n	800a682 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <HAL_UART_Transmit_IT+0x24>
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e071      	b.n	800a684 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	88fa      	ldrh	r2, [r7, #6]
 800a5aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	88fa      	ldrh	r2, [r7, #6]
 800a5b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2221      	movs	r2, #33	; 0x21
 800a5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d4:	d12a      	bne.n	800a62c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5de:	d107      	bne.n	800a5f0 <HAL_UART_Transmit_IT+0x78>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	4a29      	ldr	r2, [pc, #164]	; (800a690 <HAL_UART_Transmit_IT+0x118>)
 800a5ec:	679a      	str	r2, [r3, #120]	; 0x78
 800a5ee:	e002      	b.n	800a5f6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4a28      	ldr	r2, [pc, #160]	; (800a694 <HAL_UART_Transmit_IT+0x11c>)
 800a5f4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	e853 3f00 	ldrex	r3, [r3]
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a616:	637a      	str	r2, [r7, #52]	; 0x34
 800a618:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61e:	e841 2300 	strex	r3, r2, [r1]
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1e5      	bne.n	800a5f6 <HAL_UART_Transmit_IT+0x7e>
 800a62a:	e028      	b.n	800a67e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a634:	d107      	bne.n	800a646 <HAL_UART_Transmit_IT+0xce>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d103      	bne.n	800a646 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4a15      	ldr	r2, [pc, #84]	; (800a698 <HAL_UART_Transmit_IT+0x120>)
 800a642:	679a      	str	r2, [r3, #120]	; 0x78
 800a644:	e002      	b.n	800a64c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4a14      	ldr	r2, [pc, #80]	; (800a69c <HAL_UART_Transmit_IT+0x124>)
 800a64a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	613b      	str	r3, [r7, #16]
   return(result);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66a:	623b      	str	r3, [r7, #32]
 800a66c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	69f9      	ldr	r1, [r7, #28]
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	61bb      	str	r3, [r7, #24]
   return(result);
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e6      	bne.n	800a64c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	e000      	b.n	800a684 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a682:	2302      	movs	r3, #2
  }
}
 800a684:	4618      	mov	r0, r3
 800a686:	3744      	adds	r7, #68	; 0x44
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	0800c2bb 	.word	0x0800c2bb
 800a694:	0800c1db 	.word	0x0800c1db
 800a698:	0800c119 	.word	0x0800c119
 800a69c:	0800c061 	.word	0x0800c061

0800a6a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	; 0x28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d137      	bne.n	800a728 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <HAL_UART_Receive_IT+0x24>
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e030      	b.n	800a72a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a18      	ldr	r2, [pc, #96]	; (800a734 <HAL_UART_Receive_IT+0x94>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d01f      	beq.n	800a718 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	e853 3f00 	ldrex	r3, [r3]
 800a6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a704:	623b      	str	r3, [r7, #32]
 800a706:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	69f9      	ldr	r1, [r7, #28]
 800a70a:	6a3a      	ldr	r2, [r7, #32]
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	61bb      	str	r3, [r7, #24]
   return(result);
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e6      	bne.n	800a6e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	461a      	mov	r2, r3
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f001 fb00 	bl	800bd24 <UART_Start_Receive_IT>
 800a724:	4603      	mov	r3, r0
 800a726:	e000      	b.n	800a72a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a728:	2302      	movs	r3, #2
  }
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3728      	adds	r7, #40	; 0x28
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	58000c00 	.word	0x58000c00

0800a738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b0ba      	sub	sp, #232	; 0xe8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a75e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a762:	f640 030f 	movw	r3, #2063	; 0x80f
 800a766:	4013      	ands	r3, r2
 800a768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a76c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11b      	bne.n	800a7ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a778:	f003 0320 	and.w	r3, r3, #32
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d015      	beq.n	800a7ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a784:	f003 0320 	and.w	r3, r3, #32
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d105      	bne.n	800a798 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d009      	beq.n	800a7ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8377 	beq.w	800ae90 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	4798      	blx	r3
      }
      return;
 800a7aa:	e371      	b.n	800ae90 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8123 	beq.w	800a9fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a7ba:	4b8d      	ldr	r3, [pc, #564]	; (800a9f0 <HAL_UART_IRQHandler+0x2b8>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a7c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a7c6:	4b8b      	ldr	r3, [pc, #556]	; (800a9f4 <HAL_UART_IRQHandler+0x2bc>)
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 8116 	beq.w	800a9fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d011      	beq.n	800a800 <HAL_UART_IRQHandler+0xc8>
 800a7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f043 0201 	orr.w	r2, r3, #1
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d011      	beq.n	800a830 <HAL_UART_IRQHandler+0xf8>
 800a80c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2202      	movs	r2, #2
 800a81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a826:	f043 0204 	orr.w	r2, r3, #4
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d011      	beq.n	800a860 <HAL_UART_IRQHandler+0x128>
 800a83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2204      	movs	r2, #4
 800a84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a856:	f043 0202 	orr.w	r2, r3, #2
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a864:	f003 0308 	and.w	r3, r3, #8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d017      	beq.n	800a89c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a870:	f003 0320 	and.w	r3, r3, #32
 800a874:	2b00      	cmp	r3, #0
 800a876:	d105      	bne.n	800a884 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a878:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a87c:	4b5c      	ldr	r3, [pc, #368]	; (800a9f0 <HAL_UART_IRQHandler+0x2b8>)
 800a87e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2208      	movs	r2, #8
 800a88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a892:	f043 0208 	orr.w	r2, r3, #8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <HAL_UART_IRQHandler+0x196>
 800a8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c4:	f043 0220 	orr.w	r2, r3, #32
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 82dd 	beq.w	800ae94 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8de:	f003 0320 	and.w	r3, r3, #32
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d013      	beq.n	800a90e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a922:	2b40      	cmp	r3, #64	; 0x40
 800a924:	d005      	beq.n	800a932 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a92a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d054      	beq.n	800a9dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 fb18 	bl	800bf68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d146      	bne.n	800a9d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a95c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a97e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a98a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1d9      	bne.n	800a946 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d017      	beq.n	800a9cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <HAL_UART_IRQHandler+0x2c0>)
 800a9a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7f8 fbb5 	bl	800311c <HAL_DMA_Abort_IT>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d019      	beq.n	800a9ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ca:	e00f      	b.n	800a9ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fa77 	bl	800aec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9d2:	e00b      	b.n	800a9ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fa73 	bl	800aec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9da:	e007      	b.n	800a9ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fa6f 	bl	800aec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a9ea:	e253      	b.n	800ae94 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ec:	bf00      	nop
    return;
 800a9ee:	e251      	b.n	800ae94 <HAL_UART_IRQHandler+0x75c>
 800a9f0:	10000001 	.word	0x10000001
 800a9f4:	04000120 	.word	0x04000120
 800a9f8:	0800c035 	.word	0x0800c035

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	f040 81e7 	bne.w	800add4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0a:	f003 0310 	and.w	r3, r3, #16
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 81e0 	beq.w	800add4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 81d9 	beq.w	800add4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2210      	movs	r2, #16
 800aa28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa34:	2b40      	cmp	r3, #64	; 0x40
 800aa36:	f040 8151 	bne.w	800acdc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a96      	ldr	r2, [pc, #600]	; (800ac9c <HAL_UART_IRQHandler+0x564>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d068      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a93      	ldr	r2, [pc, #588]	; (800aca0 <HAL_UART_IRQHandler+0x568>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d061      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a91      	ldr	r2, [pc, #580]	; (800aca4 <HAL_UART_IRQHandler+0x56c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d05a      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a8e      	ldr	r2, [pc, #568]	; (800aca8 <HAL_UART_IRQHandler+0x570>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d053      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a8c      	ldr	r2, [pc, #560]	; (800acac <HAL_UART_IRQHandler+0x574>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d04c      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a89      	ldr	r2, [pc, #548]	; (800acb0 <HAL_UART_IRQHandler+0x578>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d045      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a87      	ldr	r2, [pc, #540]	; (800acb4 <HAL_UART_IRQHandler+0x57c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d03e      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a84      	ldr	r2, [pc, #528]	; (800acb8 <HAL_UART_IRQHandler+0x580>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d037      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a82      	ldr	r2, [pc, #520]	; (800acbc <HAL_UART_IRQHandler+0x584>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d030      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a7f      	ldr	r2, [pc, #508]	; (800acc0 <HAL_UART_IRQHandler+0x588>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d029      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a7d      	ldr	r2, [pc, #500]	; (800acc4 <HAL_UART_IRQHandler+0x58c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d022      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a7a      	ldr	r2, [pc, #488]	; (800acc8 <HAL_UART_IRQHandler+0x590>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01b      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a78      	ldr	r2, [pc, #480]	; (800accc <HAL_UART_IRQHandler+0x594>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d014      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a75      	ldr	r2, [pc, #468]	; (800acd0 <HAL_UART_IRQHandler+0x598>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00d      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a73      	ldr	r2, [pc, #460]	; (800acd4 <HAL_UART_IRQHandler+0x59c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d006      	beq.n	800ab1a <HAL_UART_IRQHandler+0x3e2>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a70      	ldr	r2, [pc, #448]	; (800acd8 <HAL_UART_IRQHandler+0x5a0>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d106      	bne.n	800ab28 <HAL_UART_IRQHandler+0x3f0>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	e005      	b.n	800ab34 <HAL_UART_IRQHandler+0x3fc>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 81ab 	beq.w	800ae98 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	f080 81a3 	bcs.w	800ae98 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab68:	f000 8087 	beq.w	800ac7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1da      	bne.n	800ab6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800abc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3308      	adds	r3, #8
 800abd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800abda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800abde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800abec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e1      	bne.n	800abb6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3308      	adds	r3, #8
 800abf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e3      	bne.n	800abf2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac48:	f023 0310 	bic.w	r3, r3, #16
 800ac4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e4      	bne.n	800ac38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f7 ff33 	bl	8002ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f91d 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac9a:	e0fd      	b.n	800ae98 <HAL_UART_IRQHandler+0x760>
 800ac9c:	40020010 	.word	0x40020010
 800aca0:	40020028 	.word	0x40020028
 800aca4:	40020040 	.word	0x40020040
 800aca8:	40020058 	.word	0x40020058
 800acac:	40020070 	.word	0x40020070
 800acb0:	40020088 	.word	0x40020088
 800acb4:	400200a0 	.word	0x400200a0
 800acb8:	400200b8 	.word	0x400200b8
 800acbc:	40020410 	.word	0x40020410
 800acc0:	40020428 	.word	0x40020428
 800acc4:	40020440 	.word	0x40020440
 800acc8:	40020458 	.word	0x40020458
 800accc:	40020470 	.word	0x40020470
 800acd0:	40020488 	.word	0x40020488
 800acd4:	400204a0 	.word	0x400204a0
 800acd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ace8:	b29b      	uxth	r3, r3
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80cf 	beq.w	800ae9c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800acfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80ca 	beq.w	800ae9c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	461a      	mov	r2, r3
 800ad26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e4      	bne.n	800ad08 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4e:	6a3a      	ldr	r2, [r7, #32]
 800ad50:	4b55      	ldr	r3, [pc, #340]	; (800aea8 <HAL_UART_IRQHandler+0x770>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad62:	633a      	str	r2, [r7, #48]	; 0x30
 800ad64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e3      	bne.n	800ad3e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0310 	bic.w	r3, r3, #16
 800ad9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800adac:	61fb      	str	r3, [r7, #28]
 800adae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	69b9      	ldr	r1, [r7, #24]
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	617b      	str	r3, [r7, #20]
   return(result);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e4      	bne.n	800ad8a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2202      	movs	r2, #2
 800adc4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f881 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800add2:	e063      	b.n	800ae9c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800add4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00e      	beq.n	800adfe <HAL_UART_IRQHandler+0x6c6>
 800ade0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ade4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d008      	beq.n	800adfe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800adf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 f81c 	bl	800ce34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adfc:	e051      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d014      	beq.n	800ae34 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d008      	beq.n	800ae34 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d03a      	beq.n	800aea0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
    }
    return;
 800ae32:	e035      	b.n	800aea0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <HAL_UART_IRQHandler+0x71c>
 800ae40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 faa9 	bl	800c3a4 <UART_EndTransmit_IT>
    return;
 800ae52:	e026      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <HAL_UART_IRQHandler+0x73c>
 800ae60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 fff5 	bl	800ce5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae72:	e016      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d010      	beq.n	800aea2 <HAL_UART_IRQHandler+0x76a>
 800ae80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da0c      	bge.n	800aea2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 ffdd 	bl	800ce48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae8e:	e008      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae90:	bf00      	nop
 800ae92:	e006      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
    return;
 800ae94:	bf00      	nop
 800ae96:	e004      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae98:	bf00      	nop
 800ae9a:	e002      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae9c:	bf00      	nop
 800ae9e:	e000      	b.n	800aea2 <HAL_UART_IRQHandler+0x76a>
    return;
 800aea0:	bf00      	nop
  }
}
 800aea2:	37e8      	adds	r7, #232	; 0xe8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	effffffe 	.word	0xeffffffe

0800aeac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aeec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aef0:	b092      	sub	sp, #72	; 0x48
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	431a      	orrs	r2, r3
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	4313      	orrs	r3, r2
 800af12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4bbe      	ldr	r3, [pc, #760]	; (800b214 <UART_SetConfig+0x328>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af24:	430b      	orrs	r3, r1
 800af26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4ab3      	ldr	r2, [pc, #716]	; (800b218 <UART_SetConfig+0x32c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d004      	beq.n	800af58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af54:	4313      	orrs	r3, r2
 800af56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	4baf      	ldr	r3, [pc, #700]	; (800b21c <UART_SetConfig+0x330>)
 800af60:	4013      	ands	r3, r2
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af68:	430b      	orrs	r3, r1
 800af6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	f023 010f 	bic.w	r1, r3, #15
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4aa6      	ldr	r2, [pc, #664]	; (800b220 <UART_SetConfig+0x334>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d177      	bne.n	800b07c <UART_SetConfig+0x190>
 800af8c:	4ba5      	ldr	r3, [pc, #660]	; (800b224 <UART_SetConfig+0x338>)
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af94:	2b28      	cmp	r3, #40	; 0x28
 800af96:	d86d      	bhi.n	800b074 <UART_SetConfig+0x188>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <UART_SetConfig+0xb4>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b045 	.word	0x0800b045
 800afa4:	0800b075 	.word	0x0800b075
 800afa8:	0800b075 	.word	0x0800b075
 800afac:	0800b075 	.word	0x0800b075
 800afb0:	0800b075 	.word	0x0800b075
 800afb4:	0800b075 	.word	0x0800b075
 800afb8:	0800b075 	.word	0x0800b075
 800afbc:	0800b075 	.word	0x0800b075
 800afc0:	0800b04d 	.word	0x0800b04d
 800afc4:	0800b075 	.word	0x0800b075
 800afc8:	0800b075 	.word	0x0800b075
 800afcc:	0800b075 	.word	0x0800b075
 800afd0:	0800b075 	.word	0x0800b075
 800afd4:	0800b075 	.word	0x0800b075
 800afd8:	0800b075 	.word	0x0800b075
 800afdc:	0800b075 	.word	0x0800b075
 800afe0:	0800b055 	.word	0x0800b055
 800afe4:	0800b075 	.word	0x0800b075
 800afe8:	0800b075 	.word	0x0800b075
 800afec:	0800b075 	.word	0x0800b075
 800aff0:	0800b075 	.word	0x0800b075
 800aff4:	0800b075 	.word	0x0800b075
 800aff8:	0800b075 	.word	0x0800b075
 800affc:	0800b075 	.word	0x0800b075
 800b000:	0800b05d 	.word	0x0800b05d
 800b004:	0800b075 	.word	0x0800b075
 800b008:	0800b075 	.word	0x0800b075
 800b00c:	0800b075 	.word	0x0800b075
 800b010:	0800b075 	.word	0x0800b075
 800b014:	0800b075 	.word	0x0800b075
 800b018:	0800b075 	.word	0x0800b075
 800b01c:	0800b075 	.word	0x0800b075
 800b020:	0800b065 	.word	0x0800b065
 800b024:	0800b075 	.word	0x0800b075
 800b028:	0800b075 	.word	0x0800b075
 800b02c:	0800b075 	.word	0x0800b075
 800b030:	0800b075 	.word	0x0800b075
 800b034:	0800b075 	.word	0x0800b075
 800b038:	0800b075 	.word	0x0800b075
 800b03c:	0800b075 	.word	0x0800b075
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04a:	e222      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b052:	e21e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05a:	e21a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e216      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e212      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e20e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b074:	2380      	movs	r3, #128	; 0x80
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e20a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a69      	ldr	r2, [pc, #420]	; (800b228 <UART_SetConfig+0x33c>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d130      	bne.n	800b0e8 <UART_SetConfig+0x1fc>
 800b086:	4b67      	ldr	r3, [pc, #412]	; (800b224 <UART_SetConfig+0x338>)
 800b088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d826      	bhi.n	800b0e0 <UART_SetConfig+0x1f4>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <UART_SetConfig+0x1ac>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b9 	.word	0x0800b0b9
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0d1 	.word	0x0800b0d1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b6:	e1ec      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0be:	e1e8      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c6:	e1e4      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ce:	e1e0      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d6:	e1dc      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0d8:	2340      	movs	r3, #64	; 0x40
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0de:	e1d8      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0e0:	2380      	movs	r3, #128	; 0x80
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e6:	e1d4      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a4f      	ldr	r2, [pc, #316]	; (800b22c <UART_SetConfig+0x340>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d130      	bne.n	800b154 <UART_SetConfig+0x268>
 800b0f2:	4b4c      	ldr	r3, [pc, #304]	; (800b224 <UART_SetConfig+0x338>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d826      	bhi.n	800b14c <UART_SetConfig+0x260>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <UART_SetConfig+0x218>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	2300      	movs	r3, #0
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b122:	e1b6      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b124:	2304      	movs	r3, #4
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12a:	e1b2      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b12c:	2308      	movs	r3, #8
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b132:	e1ae      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b134:	2310      	movs	r3, #16
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13a:	e1aa      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b13c:	2320      	movs	r3, #32
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b142:	e1a6      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b144:	2340      	movs	r3, #64	; 0x40
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14a:	e1a2      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b14c:	2380      	movs	r3, #128	; 0x80
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b152:	e19e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a35      	ldr	r2, [pc, #212]	; (800b230 <UART_SetConfig+0x344>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d130      	bne.n	800b1c0 <UART_SetConfig+0x2d4>
 800b15e:	4b31      	ldr	r3, [pc, #196]	; (800b224 <UART_SetConfig+0x338>)
 800b160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	2b05      	cmp	r3, #5
 800b168:	d826      	bhi.n	800b1b8 <UART_SetConfig+0x2cc>
 800b16a:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <UART_SetConfig+0x284>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b189 	.word	0x0800b189
 800b174:	0800b191 	.word	0x0800b191
 800b178:	0800b199 	.word	0x0800b199
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1b1 	.word	0x0800b1b1
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18e:	e180      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b190:	2304      	movs	r3, #4
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b196:	e17c      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b198:	2308      	movs	r3, #8
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19e:	e178      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1a0:	2310      	movs	r3, #16
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a6:	e174      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1a8:	2320      	movs	r3, #32
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ae:	e170      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1b0:	2340      	movs	r3, #64	; 0x40
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b6:	e16c      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1b8:	2380      	movs	r3, #128	; 0x80
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1be:	e168      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1b      	ldr	r2, [pc, #108]	; (800b234 <UART_SetConfig+0x348>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d142      	bne.n	800b250 <UART_SetConfig+0x364>
 800b1ca:	4b16      	ldr	r3, [pc, #88]	; (800b224 <UART_SetConfig+0x338>)
 800b1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d838      	bhi.n	800b248 <UART_SetConfig+0x35c>
 800b1d6:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <UART_SetConfig+0x2f0>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b1f5 	.word	0x0800b1f5
 800b1e0:	0800b1fd 	.word	0x0800b1fd
 800b1e4:	0800b205 	.word	0x0800b205
 800b1e8:	0800b20d 	.word	0x0800b20d
 800b1ec:	0800b239 	.word	0x0800b239
 800b1f0:	0800b241 	.word	0x0800b241
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e14a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e146      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e142      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e13e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b214:	cfff69f3 	.word	0xcfff69f3
 800b218:	58000c00 	.word	0x58000c00
 800b21c:	11fff4ff 	.word	0x11fff4ff
 800b220:	40011000 	.word	0x40011000
 800b224:	58024400 	.word	0x58024400
 800b228:	40004400 	.word	0x40004400
 800b22c:	40004800 	.word	0x40004800
 800b230:	40004c00 	.word	0x40004c00
 800b234:	40005000 	.word	0x40005000
 800b238:	2320      	movs	r3, #32
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23e:	e128      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b246:	e124      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b248:	2380      	movs	r3, #128	; 0x80
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24e:	e120      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4acb      	ldr	r2, [pc, #812]	; (800b584 <UART_SetConfig+0x698>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d176      	bne.n	800b348 <UART_SetConfig+0x45c>
 800b25a:	4bcb      	ldr	r3, [pc, #812]	; (800b588 <UART_SetConfig+0x69c>)
 800b25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b262:	2b28      	cmp	r3, #40	; 0x28
 800b264:	d86c      	bhi.n	800b340 <UART_SetConfig+0x454>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <UART_SetConfig+0x380>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b311 	.word	0x0800b311
 800b270:	0800b341 	.word	0x0800b341
 800b274:	0800b341 	.word	0x0800b341
 800b278:	0800b341 	.word	0x0800b341
 800b27c:	0800b341 	.word	0x0800b341
 800b280:	0800b341 	.word	0x0800b341
 800b284:	0800b341 	.word	0x0800b341
 800b288:	0800b341 	.word	0x0800b341
 800b28c:	0800b319 	.word	0x0800b319
 800b290:	0800b341 	.word	0x0800b341
 800b294:	0800b341 	.word	0x0800b341
 800b298:	0800b341 	.word	0x0800b341
 800b29c:	0800b341 	.word	0x0800b341
 800b2a0:	0800b341 	.word	0x0800b341
 800b2a4:	0800b341 	.word	0x0800b341
 800b2a8:	0800b341 	.word	0x0800b341
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b341 	.word	0x0800b341
 800b2b4:	0800b341 	.word	0x0800b341
 800b2b8:	0800b341 	.word	0x0800b341
 800b2bc:	0800b341 	.word	0x0800b341
 800b2c0:	0800b341 	.word	0x0800b341
 800b2c4:	0800b341 	.word	0x0800b341
 800b2c8:	0800b341 	.word	0x0800b341
 800b2cc:	0800b329 	.word	0x0800b329
 800b2d0:	0800b341 	.word	0x0800b341
 800b2d4:	0800b341 	.word	0x0800b341
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b341 	.word	0x0800b341
 800b2e0:	0800b341 	.word	0x0800b341
 800b2e4:	0800b341 	.word	0x0800b341
 800b2e8:	0800b341 	.word	0x0800b341
 800b2ec:	0800b331 	.word	0x0800b331
 800b2f0:	0800b341 	.word	0x0800b341
 800b2f4:	0800b341 	.word	0x0800b341
 800b2f8:	0800b341 	.word	0x0800b341
 800b2fc:	0800b341 	.word	0x0800b341
 800b300:	0800b341 	.word	0x0800b341
 800b304:	0800b341 	.word	0x0800b341
 800b308:	0800b341 	.word	0x0800b341
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2301      	movs	r3, #1
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b316:	e0bc      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b31e:	e0b8      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b326:	e0b4      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32e:	e0b0      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b336:	e0ac      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33e:	e0a8      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b346:	e0a4      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a8f      	ldr	r2, [pc, #572]	; (800b58c <UART_SetConfig+0x6a0>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d130      	bne.n	800b3b4 <UART_SetConfig+0x4c8>
 800b352:	4b8d      	ldr	r3, [pc, #564]	; (800b588 <UART_SetConfig+0x69c>)
 800b354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d826      	bhi.n	800b3ac <UART_SetConfig+0x4c0>
 800b35e:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <UART_SetConfig+0x478>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b382:	e086      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38a:	e082      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b392:	e07e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39a:	e07a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b39c:	2320      	movs	r3, #32
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a2:	e076      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3aa:	e072      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b3ac:	2380      	movs	r3, #128	; 0x80
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b2:	e06e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a75      	ldr	r2, [pc, #468]	; (800b590 <UART_SetConfig+0x6a4>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d130      	bne.n	800b420 <UART_SetConfig+0x534>
 800b3be:	4b72      	ldr	r3, [pc, #456]	; (800b588 <UART_SetConfig+0x69c>)
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	2b05      	cmp	r3, #5
 800b3c8:	d826      	bhi.n	800b418 <UART_SetConfig+0x52c>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x4e4>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b3e9 	.word	0x0800b3e9
 800b3d4:	0800b3f1 	.word	0x0800b3f1
 800b3d8:	0800b3f9 	.word	0x0800b3f9
 800b3dc:	0800b401 	.word	0x0800b401
 800b3e0:	0800b409 	.word	0x0800b409
 800b3e4:	0800b411 	.word	0x0800b411
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e050      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b3f0:	2304      	movs	r3, #4
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e04c      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b3f8:	2308      	movs	r3, #8
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e048      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b400:	2310      	movs	r3, #16
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b406:	e044      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b408:	2320      	movs	r3, #32
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40e:	e040      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b416:	e03c      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b418:	2380      	movs	r3, #128	; 0x80
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41e:	e038      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a5b      	ldr	r2, [pc, #364]	; (800b594 <UART_SetConfig+0x6a8>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d130      	bne.n	800b48c <UART_SetConfig+0x5a0>
 800b42a:	4b57      	ldr	r3, [pc, #348]	; (800b588 <UART_SetConfig+0x69c>)
 800b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	2b05      	cmp	r3, #5
 800b434:	d826      	bhi.n	800b484 <UART_SetConfig+0x598>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <UART_SetConfig+0x550>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b455 	.word	0x0800b455
 800b440:	0800b45d 	.word	0x0800b45d
 800b444:	0800b465 	.word	0x0800b465
 800b448:	0800b46d 	.word	0x0800b46d
 800b44c:	0800b475 	.word	0x0800b475
 800b450:	0800b47d 	.word	0x0800b47d
 800b454:	2302      	movs	r3, #2
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e01a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b45c:	2304      	movs	r3, #4
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e016      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b464:	2308      	movs	r3, #8
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46a:	e012      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b46c:	2310      	movs	r3, #16
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b472:	e00e      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b474:	2320      	movs	r3, #32
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47a:	e00a      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b47c:	2340      	movs	r3, #64	; 0x40
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b482:	e006      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b484:	2380      	movs	r3, #128	; 0x80
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48a:	e002      	b.n	800b492 <UART_SetConfig+0x5a6>
 800b48c:	2380      	movs	r3, #128	; 0x80
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a3f      	ldr	r2, [pc, #252]	; (800b594 <UART_SetConfig+0x6a8>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	f040 80f8 	bne.w	800b68e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b49e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	dc46      	bgt.n	800b534 <UART_SetConfig+0x648>
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	f2c0 8082 	blt.w	800b5b0 <UART_SetConfig+0x6c4>
 800b4ac:	3b02      	subs	r3, #2
 800b4ae:	2b1e      	cmp	r3, #30
 800b4b0:	d87e      	bhi.n	800b5b0 <UART_SetConfig+0x6c4>
 800b4b2:	a201      	add	r2, pc, #4	; (adr r2, 800b4b8 <UART_SetConfig+0x5cc>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b53b 	.word	0x0800b53b
 800b4bc:	0800b5b1 	.word	0x0800b5b1
 800b4c0:	0800b543 	.word	0x0800b543
 800b4c4:	0800b5b1 	.word	0x0800b5b1
 800b4c8:	0800b5b1 	.word	0x0800b5b1
 800b4cc:	0800b5b1 	.word	0x0800b5b1
 800b4d0:	0800b553 	.word	0x0800b553
 800b4d4:	0800b5b1 	.word	0x0800b5b1
 800b4d8:	0800b5b1 	.word	0x0800b5b1
 800b4dc:	0800b5b1 	.word	0x0800b5b1
 800b4e0:	0800b5b1 	.word	0x0800b5b1
 800b4e4:	0800b5b1 	.word	0x0800b5b1
 800b4e8:	0800b5b1 	.word	0x0800b5b1
 800b4ec:	0800b5b1 	.word	0x0800b5b1
 800b4f0:	0800b563 	.word	0x0800b563
 800b4f4:	0800b5b1 	.word	0x0800b5b1
 800b4f8:	0800b5b1 	.word	0x0800b5b1
 800b4fc:	0800b5b1 	.word	0x0800b5b1
 800b500:	0800b5b1 	.word	0x0800b5b1
 800b504:	0800b5b1 	.word	0x0800b5b1
 800b508:	0800b5b1 	.word	0x0800b5b1
 800b50c:	0800b5b1 	.word	0x0800b5b1
 800b510:	0800b5b1 	.word	0x0800b5b1
 800b514:	0800b5b1 	.word	0x0800b5b1
 800b518:	0800b5b1 	.word	0x0800b5b1
 800b51c:	0800b5b1 	.word	0x0800b5b1
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5a3 	.word	0x0800b5a3
 800b534:	2b40      	cmp	r3, #64	; 0x40
 800b536:	d037      	beq.n	800b5a8 <UART_SetConfig+0x6bc>
 800b538:	e03a      	b.n	800b5b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b53a:	f7fc faeb 	bl	8007b14 <HAL_RCCEx_GetD3PCLK1Freq>
 800b53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b540:	e03c      	b.n	800b5bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b546:	4618      	mov	r0, r3
 800b548:	f7fc fafa 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b550:	e034      	b.n	800b5bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b552:	f107 0318 	add.w	r3, r7, #24
 800b556:	4618      	mov	r0, r3
 800b558:	f7fc fc46 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b560:	e02c      	b.n	800b5bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <UART_SetConfig+0x69c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0320 	and.w	r3, r3, #32
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d016      	beq.n	800b59c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b56e:	4b06      	ldr	r3, [pc, #24]	; (800b588 <UART_SetConfig+0x69c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	08db      	lsrs	r3, r3, #3
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	4a07      	ldr	r2, [pc, #28]	; (800b598 <UART_SetConfig+0x6ac>)
 800b57a:	fa22 f303 	lsr.w	r3, r2, r3
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b580:	e01c      	b.n	800b5bc <UART_SetConfig+0x6d0>
 800b582:	bf00      	nop
 800b584:	40011400 	.word	0x40011400
 800b588:	58024400 	.word	0x58024400
 800b58c:	40007800 	.word	0x40007800
 800b590:	40007c00 	.word	0x40007c00
 800b594:	58000c00 	.word	0x58000c00
 800b598:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b59c:	4b9d      	ldr	r3, [pc, #628]	; (800b814 <UART_SetConfig+0x928>)
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a0:	e00c      	b.n	800b5bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5a2:	4b9d      	ldr	r3, [pc, #628]	; (800b818 <UART_SetConfig+0x92c>)
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a6:	e009      	b.n	800b5bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ae:	e005      	b.n	800b5bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 81de 	beq.w	800b980 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	4a94      	ldr	r2, [pc, #592]	; (800b81c <UART_SetConfig+0x930>)
 800b5ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	4413      	add	r3, r2
 800b5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d305      	bcc.n	800b5f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b5fa:	e1c1      	b.n	800b980 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fe:	2200      	movs	r2, #0
 800b600:	60bb      	str	r3, [r7, #8]
 800b602:	60fa      	str	r2, [r7, #12]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	4a84      	ldr	r2, [pc, #528]	; (800b81c <UART_SetConfig+0x930>)
 800b60a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2200      	movs	r2, #0
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	607a      	str	r2, [r7, #4]
 800b616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b61a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b61e:	f7f4 ffdf 	bl	80005e0 <__aeabi_uldivmod>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4610      	mov	r0, r2
 800b628:	4619      	mov	r1, r3
 800b62a:	f04f 0200 	mov.w	r2, #0
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	020b      	lsls	r3, r1, #8
 800b634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b638:	0202      	lsls	r2, r0, #8
 800b63a:	6979      	ldr	r1, [r7, #20]
 800b63c:	6849      	ldr	r1, [r1, #4]
 800b63e:	0849      	lsrs	r1, r1, #1
 800b640:	2000      	movs	r0, #0
 800b642:	460c      	mov	r4, r1
 800b644:	4605      	mov	r5, r0
 800b646:	eb12 0804 	adds.w	r8, r2, r4
 800b64a:	eb43 0905 	adc.w	r9, r3, r5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	469a      	mov	sl, r3
 800b656:	4693      	mov	fp, r2
 800b658:	4652      	mov	r2, sl
 800b65a:	465b      	mov	r3, fp
 800b65c:	4640      	mov	r0, r8
 800b65e:	4649      	mov	r1, r9
 800b660:	f7f4 ffbe 	bl	80005e0 <__aeabi_uldivmod>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4613      	mov	r3, r2
 800b66a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b672:	d308      	bcc.n	800b686 <UART_SetConfig+0x79a>
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b67a:	d204      	bcs.n	800b686 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b682:	60da      	str	r2, [r3, #12]
 800b684:	e17c      	b.n	800b980 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b68c:	e178      	b.n	800b980 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b696:	f040 80c5 	bne.w	800b824 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b69a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	dc48      	bgt.n	800b734 <UART_SetConfig+0x848>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	db7b      	blt.n	800b79e <UART_SetConfig+0x8b2>
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	d879      	bhi.n	800b79e <UART_SetConfig+0x8b2>
 800b6aa:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <UART_SetConfig+0x7c4>)
 800b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b0:	0800b73b 	.word	0x0800b73b
 800b6b4:	0800b743 	.word	0x0800b743
 800b6b8:	0800b79f 	.word	0x0800b79f
 800b6bc:	0800b79f 	.word	0x0800b79f
 800b6c0:	0800b74b 	.word	0x0800b74b
 800b6c4:	0800b79f 	.word	0x0800b79f
 800b6c8:	0800b79f 	.word	0x0800b79f
 800b6cc:	0800b79f 	.word	0x0800b79f
 800b6d0:	0800b75b 	.word	0x0800b75b
 800b6d4:	0800b79f 	.word	0x0800b79f
 800b6d8:	0800b79f 	.word	0x0800b79f
 800b6dc:	0800b79f 	.word	0x0800b79f
 800b6e0:	0800b79f 	.word	0x0800b79f
 800b6e4:	0800b79f 	.word	0x0800b79f
 800b6e8:	0800b79f 	.word	0x0800b79f
 800b6ec:	0800b79f 	.word	0x0800b79f
 800b6f0:	0800b76b 	.word	0x0800b76b
 800b6f4:	0800b79f 	.word	0x0800b79f
 800b6f8:	0800b79f 	.word	0x0800b79f
 800b6fc:	0800b79f 	.word	0x0800b79f
 800b700:	0800b79f 	.word	0x0800b79f
 800b704:	0800b79f 	.word	0x0800b79f
 800b708:	0800b79f 	.word	0x0800b79f
 800b70c:	0800b79f 	.word	0x0800b79f
 800b710:	0800b79f 	.word	0x0800b79f
 800b714:	0800b79f 	.word	0x0800b79f
 800b718:	0800b79f 	.word	0x0800b79f
 800b71c:	0800b79f 	.word	0x0800b79f
 800b720:	0800b79f 	.word	0x0800b79f
 800b724:	0800b79f 	.word	0x0800b79f
 800b728:	0800b79f 	.word	0x0800b79f
 800b72c:	0800b79f 	.word	0x0800b79f
 800b730:	0800b791 	.word	0x0800b791
 800b734:	2b40      	cmp	r3, #64	; 0x40
 800b736:	d02e      	beq.n	800b796 <UART_SetConfig+0x8aa>
 800b738:	e031      	b.n	800b79e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b73a:	f7fa f9f3 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800b73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b740:	e033      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b742:	f7fa fa05 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 800b746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b748:	e02f      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fc f9f6 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b758:	e027      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b75a:	f107 0318 	add.w	r3, r7, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fc fb42 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b768:	e01f      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b76a:	4b2d      	ldr	r3, [pc, #180]	; (800b820 <UART_SetConfig+0x934>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0320 	and.w	r3, r3, #32
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b776:	4b2a      	ldr	r3, [pc, #168]	; (800b820 <UART_SetConfig+0x934>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	08db      	lsrs	r3, r3, #3
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	4a24      	ldr	r2, [pc, #144]	; (800b814 <UART_SetConfig+0x928>)
 800b782:	fa22 f303 	lsr.w	r3, r2, r3
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b788:	e00f      	b.n	800b7aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b78a:	4b22      	ldr	r3, [pc, #136]	; (800b814 <UART_SetConfig+0x928>)
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b78e:	e00c      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b790:	4b21      	ldr	r3, [pc, #132]	; (800b818 <UART_SetConfig+0x92c>)
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b794:	e009      	b.n	800b7aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b79c:	e005      	b.n	800b7aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 80e7 	beq.w	800b980 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	4a19      	ldr	r2, [pc, #100]	; (800b81c <UART_SetConfig+0x930>)
 800b7b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c4:	005a      	lsls	r2, r3, #1
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	085b      	lsrs	r3, r3, #1
 800b7cc:	441a      	add	r2, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	2b0f      	cmp	r3, #15
 800b7dc:	d916      	bls.n	800b80c <UART_SetConfig+0x920>
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e4:	d212      	bcs.n	800b80c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f023 030f 	bic.w	r3, r3, #15
 800b7ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	085b      	lsrs	r3, r3, #1
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7fe:	4313      	orrs	r3, r2
 800b800:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	e0b9      	b.n	800b980 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b812:	e0b5      	b.n	800b980 <UART_SetConfig+0xa94>
 800b814:	03d09000 	.word	0x03d09000
 800b818:	003d0900 	.word	0x003d0900
 800b81c:	0801bc60 	.word	0x0801bc60
 800b820:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b824:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b828:	2b20      	cmp	r3, #32
 800b82a:	dc49      	bgt.n	800b8c0 <UART_SetConfig+0x9d4>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	db7c      	blt.n	800b92a <UART_SetConfig+0xa3e>
 800b830:	2b20      	cmp	r3, #32
 800b832:	d87a      	bhi.n	800b92a <UART_SetConfig+0xa3e>
 800b834:	a201      	add	r2, pc, #4	; (adr r2, 800b83c <UART_SetConfig+0x950>)
 800b836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83a:	bf00      	nop
 800b83c:	0800b8c7 	.word	0x0800b8c7
 800b840:	0800b8cf 	.word	0x0800b8cf
 800b844:	0800b92b 	.word	0x0800b92b
 800b848:	0800b92b 	.word	0x0800b92b
 800b84c:	0800b8d7 	.word	0x0800b8d7
 800b850:	0800b92b 	.word	0x0800b92b
 800b854:	0800b92b 	.word	0x0800b92b
 800b858:	0800b92b 	.word	0x0800b92b
 800b85c:	0800b8e7 	.word	0x0800b8e7
 800b860:	0800b92b 	.word	0x0800b92b
 800b864:	0800b92b 	.word	0x0800b92b
 800b868:	0800b92b 	.word	0x0800b92b
 800b86c:	0800b92b 	.word	0x0800b92b
 800b870:	0800b92b 	.word	0x0800b92b
 800b874:	0800b92b 	.word	0x0800b92b
 800b878:	0800b92b 	.word	0x0800b92b
 800b87c:	0800b8f7 	.word	0x0800b8f7
 800b880:	0800b92b 	.word	0x0800b92b
 800b884:	0800b92b 	.word	0x0800b92b
 800b888:	0800b92b 	.word	0x0800b92b
 800b88c:	0800b92b 	.word	0x0800b92b
 800b890:	0800b92b 	.word	0x0800b92b
 800b894:	0800b92b 	.word	0x0800b92b
 800b898:	0800b92b 	.word	0x0800b92b
 800b89c:	0800b92b 	.word	0x0800b92b
 800b8a0:	0800b92b 	.word	0x0800b92b
 800b8a4:	0800b92b 	.word	0x0800b92b
 800b8a8:	0800b92b 	.word	0x0800b92b
 800b8ac:	0800b92b 	.word	0x0800b92b
 800b8b0:	0800b92b 	.word	0x0800b92b
 800b8b4:	0800b92b 	.word	0x0800b92b
 800b8b8:	0800b92b 	.word	0x0800b92b
 800b8bc:	0800b91d 	.word	0x0800b91d
 800b8c0:	2b40      	cmp	r3, #64	; 0x40
 800b8c2:	d02e      	beq.n	800b922 <UART_SetConfig+0xa36>
 800b8c4:	e031      	b.n	800b92a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8c6:	f7fa f92d 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800b8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8cc:	e033      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ce:	f7fa f93f 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 800b8d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8d4:	e02f      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fc f930 	bl	8007b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e4:	e027      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8e6:	f107 0318 	add.w	r3, r7, #24
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fc fa7c 	bl	8007de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f4:	e01f      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f6:	4b2d      	ldr	r3, [pc, #180]	; (800b9ac <UART_SetConfig+0xac0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0320 	and.w	r3, r3, #32
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b902:	4b2a      	ldr	r3, [pc, #168]	; (800b9ac <UART_SetConfig+0xac0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	08db      	lsrs	r3, r3, #3
 800b908:	f003 0303 	and.w	r3, r3, #3
 800b90c:	4a28      	ldr	r2, [pc, #160]	; (800b9b0 <UART_SetConfig+0xac4>)
 800b90e:	fa22 f303 	lsr.w	r3, r2, r3
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b914:	e00f      	b.n	800b936 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b916:	4b26      	ldr	r3, [pc, #152]	; (800b9b0 <UART_SetConfig+0xac4>)
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b91a:	e00c      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b91c:	4b25      	ldr	r3, [pc, #148]	; (800b9b4 <UART_SetConfig+0xac8>)
 800b91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b920:	e009      	b.n	800b936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b928:	e005      	b.n	800b936 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b934:	bf00      	nop
    }

    if (pclk != 0U)
 800b936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d021      	beq.n	800b980 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	4a1d      	ldr	r2, [pc, #116]	; (800b9b8 <UART_SetConfig+0xacc>)
 800b942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b946:	461a      	mov	r2, r3
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	441a      	add	r2, r3
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	2b0f      	cmp	r3, #15
 800b964:	d909      	bls.n	800b97a <UART_SetConfig+0xa8e>
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96c:	d205      	bcs.n	800b97a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	b29a      	uxth	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	60da      	str	r2, [r3, #12]
 800b978:	e002      	b.n	800b980 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2201      	movs	r2, #1
 800b984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2200      	movs	r2, #0
 800b994:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2200      	movs	r2, #0
 800b99a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b99c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3748      	adds	r7, #72	; 0x48
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9aa:	bf00      	nop
 800b9ac:	58024400 	.word	0x58024400
 800b9b0:	03d09000 	.word	0x03d09000
 800b9b4:	003d0900 	.word	0x003d0900
 800b9b8:	0801bc60 	.word	0x0801bc60

0800b9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00a      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00a      	beq.n	800ba2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01a      	beq.n	800bad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baba:	d10a      	bne.n	800bad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	605a      	str	r2, [r3, #4]
  }
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b098      	sub	sp, #96	; 0x60
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb10:	f7f6 fe6c 	bl	80027ec <HAL_GetTick>
 800bb14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0308 	and.w	r3, r3, #8
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d12f      	bne.n	800bb84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f88e 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d022      	beq.n	800bb84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb52:	653b      	str	r3, [r7, #80]	; 0x50
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e6      	bne.n	800bb3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e063      	b.n	800bc4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	d149      	bne.n	800bc26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f857 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d03c      	beq.n	800bc26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbca:	633b      	str	r3, [r7, #48]	; 0x30
 800bbcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e6      	bne.n	800bbac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	e853 3f00 	ldrex	r3, [r3]
 800bbec:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f023 0301 	bic.w	r3, r3, #1
 800bbf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbfe:	61fa      	str	r2, [r7, #28]
 800bc00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	69b9      	ldr	r1, [r7, #24]
 800bc04:	69fa      	ldr	r2, [r7, #28]
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e5      	bne.n	800bbde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e012      	b.n	800bc4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2220      	movs	r2, #32
 800bc32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3758      	adds	r7, #88	; 0x58
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	4613      	mov	r3, r2
 800bc62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc64:	e049      	b.n	800bcfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d045      	beq.n	800bcfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc6e:	f7f6 fdbd 	bl	80027ec <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d302      	bcc.n	800bc84 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e048      	b.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d031      	beq.n	800bcfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d110      	bne.n	800bcc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f95b 	bl	800bf68 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2208      	movs	r2, #8
 800bcb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e029      	b.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcd4:	d111      	bne.n	800bcfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f941 	bl	800bf68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e00f      	b.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69da      	ldr	r2, [r3, #28]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4013      	ands	r3, r2
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	bf0c      	ite	eq
 800bd0a:	2301      	moveq	r3, #1
 800bd0c:	2300      	movne	r3, #0
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	461a      	mov	r2, r3
 800bd12:	79fb      	ldrb	r3, [r7, #7]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d0a6      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
	...

0800bd24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b0a3      	sub	sp, #140	; 0x8c
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	88fa      	ldrh	r2, [r7, #6]
 800bd44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d10e      	bne.n	800bd76 <UART_Start_Receive_IT+0x52>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d105      	bne.n	800bd6c <UART_Start_Receive_IT+0x48>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd6a:	e02d      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd74:	e028      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10d      	bne.n	800bd9a <UART_Start_Receive_IT+0x76>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d104      	bne.n	800bd90 <UART_Start_Receive_IT+0x6c>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	22ff      	movs	r2, #255	; 0xff
 800bd8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd8e:	e01b      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	227f      	movs	r2, #127	; 0x7f
 800bd94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd98:	e016      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bda2:	d10d      	bne.n	800bdc0 <UART_Start_Receive_IT+0x9c>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d104      	bne.n	800bdb6 <UART_Start_Receive_IT+0x92>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	227f      	movs	r2, #127	; 0x7f
 800bdb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdb4:	e008      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	223f      	movs	r2, #63	; 0x3f
 800bdba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdbe:	e003      	b.n	800bdc8 <UART_Start_Receive_IT+0xa4>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2222      	movs	r2, #34	; 0x22
 800bdd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3308      	adds	r3, #8
 800bdde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bde2:	e853 3f00 	ldrex	r3, [r3]
 800bde6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bde8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bdfc:	673a      	str	r2, [r7, #112]	; 0x70
 800bdfe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800be02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be04:	e841 2300 	strex	r3, r2, [r1]
 800be08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800be0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e3      	bne.n	800bdd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be18:	d14f      	bne.n	800beba <UART_Start_Receive_IT+0x196>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be20:	88fa      	ldrh	r2, [r7, #6]
 800be22:	429a      	cmp	r2, r3
 800be24:	d349      	bcc.n	800beba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be2e:	d107      	bne.n	800be40 <UART_Start_Receive_IT+0x11c>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d103      	bne.n	800be40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4a47      	ldr	r2, [pc, #284]	; (800bf58 <UART_Start_Receive_IT+0x234>)
 800be3c:	675a      	str	r2, [r3, #116]	; 0x74
 800be3e:	e002      	b.n	800be46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a46      	ldr	r2, [pc, #280]	; (800bf5c <UART_Start_Receive_IT+0x238>)
 800be44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d01a      	beq.n	800be84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e4      	bne.n	800be4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3308      	adds	r3, #8
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3308      	adds	r3, #8
 800bea2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bea4:	64ba      	str	r2, [r7, #72]	; 0x48
 800bea6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800beb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e5      	bne.n	800be84 <UART_Start_Receive_IT+0x160>
 800beb8:	e046      	b.n	800bf48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec2:	d107      	bne.n	800bed4 <UART_Start_Receive_IT+0x1b0>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4a24      	ldr	r2, [pc, #144]	; (800bf60 <UART_Start_Receive_IT+0x23c>)
 800bed0:	675a      	str	r2, [r3, #116]	; 0x74
 800bed2:	e002      	b.n	800beda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4a23      	ldr	r2, [pc, #140]	; (800bf64 <UART_Start_Receive_IT+0x240>)
 800bed8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d019      	beq.n	800bf16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	e853 3f00 	ldrex	r3, [r3]
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bef6:	677b      	str	r3, [r7, #116]	; 0x74
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf00:	637b      	str	r3, [r7, #52]	; 0x34
 800bf02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf08:	e841 2300 	strex	r3, r2, [r1]
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e6      	bne.n	800bee2 <UART_Start_Receive_IT+0x1be>
 800bf14:	e018      	b.n	800bf48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	613b      	str	r3, [r7, #16]
   return(result);
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f043 0320 	orr.w	r3, r3, #32
 800bf2a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf34:	623b      	str	r3, [r7, #32]
 800bf36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	69f9      	ldr	r1, [r7, #28]
 800bf3a:	6a3a      	ldr	r2, [r7, #32]
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e6      	bne.n	800bf16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	378c      	adds	r7, #140	; 0x8c
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	0800cacd 	.word	0x0800cacd
 800bf5c:	0800c76d 	.word	0x0800c76d
 800bf60:	0800c5b5 	.word	0x0800c5b5
 800bf64:	0800c3fd 	.word	0x0800c3fd

0800bf68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b095      	sub	sp, #84	; 0x54
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf8e:	643b      	str	r3, [r7, #64]	; 0x40
 800bf90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e6      	bne.n	800bf70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	e853 3f00 	ldrex	r3, [r3]
 800bfb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	4b1e      	ldr	r3, [pc, #120]	; (800c030 <UART_EndRxTransfer+0xc8>)
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfca:	e841 2300 	strex	r3, r2, [r1]
 800bfce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e5      	bne.n	800bfa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d118      	bne.n	800c010 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	e853 3f00 	ldrex	r3, [r3]
 800bfea:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f023 0310 	bic.w	r3, r3, #16
 800bff2:	647b      	str	r3, [r7, #68]	; 0x44
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	461a      	mov	r2, r3
 800bffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6979      	ldr	r1, [r7, #20]
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	e841 2300 	strex	r3, r2, [r1]
 800c008:	613b      	str	r3, [r7, #16]
   return(result);
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e6      	bne.n	800bfde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c024:	bf00      	nop
 800c026:	3754      	adds	r7, #84	; 0x54
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	effffffe 	.word	0xeffffffe

0800c034 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7fe ff34 	bl	800aec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c060:	b480      	push	{r7}
 800c062:	b08f      	sub	sp, #60	; 0x3c
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c06e:	2b21      	cmp	r3, #33	; 0x21
 800c070:	d14c      	bne.n	800c10c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d132      	bne.n	800c0e4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	e853 3f00 	ldrex	r3, [r3]
 800c08a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c092:	637b      	str	r3, [r7, #52]	; 0x34
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c09e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0a4:	e841 2300 	strex	r3, r2, [r1]
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e6      	bne.n	800c07e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c4:	633b      	str	r3, [r7, #48]	; 0x30
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	61bb      	str	r3, [r7, #24]
 800c0d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d2:	6979      	ldr	r1, [r7, #20]
 800c0d4:	69ba      	ldr	r2, [r7, #24]
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	613b      	str	r3, [r7, #16]
   return(result);
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1e6      	bne.n	800c0b0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c0e2:	e013      	b.n	800c10c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e8:	781a      	ldrb	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c100:	b29b      	uxth	r3, r3
 800c102:	3b01      	subs	r3, #1
 800c104:	b29a      	uxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c10c:	bf00      	nop
 800c10e:	373c      	adds	r7, #60	; 0x3c
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c118:	b480      	push	{r7}
 800c11a:	b091      	sub	sp, #68	; 0x44
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c126:	2b21      	cmp	r3, #33	; 0x21
 800c128:	d151      	bne.n	800c1ce <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c130:	b29b      	uxth	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d132      	bne.n	800c19c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	623b      	str	r3, [r7, #32]
   return(result);
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c14a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	633b      	str	r3, [r7, #48]	; 0x30
 800c156:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	60fb      	str	r3, [r7, #12]
   return(result);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c186:	61fb      	str	r3, [r7, #28]
 800c188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	69b9      	ldr	r1, [r7, #24]
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	617b      	str	r3, [r7, #20]
   return(result);
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e6      	bne.n	800c168 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c19a:	e018      	b.n	800c1ce <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1b0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b6:	1c9a      	adds	r2, r3, #2
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c1ce:	bf00      	nop
 800c1d0:	3744      	adds	r7, #68	; 0x44
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1da:	b480      	push	{r7}
 800c1dc:	b091      	sub	sp, #68	; 0x44
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e8:	2b21      	cmp	r3, #33	; 0x21
 800c1ea:	d160      	bne.n	800c2ae <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c1f4:	e057      	b.n	800c2a6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d133      	bne.n	800c26a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	e853 3f00 	ldrex	r3, [r3]
 800c210:	623b      	str	r3, [r7, #32]
   return(result);
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c218:	63bb      	str	r3, [r7, #56]	; 0x38
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3308      	adds	r3, #8
 800c220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c222:	633a      	str	r2, [r7, #48]	; 0x30
 800c224:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1e5      	bne.n	800c202 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	60fb      	str	r3, [r7, #12]
   return(result);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24a:	637b      	str	r3, [r7, #52]	; 0x34
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c258:	69b9      	ldr	r1, [r7, #24]
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	e841 2300 	strex	r3, r2, [r1]
 800c260:	617b      	str	r3, [r7, #20]
   return(result);
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1e6      	bne.n	800c236 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c268:	e021      	b.n	800c2ae <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c274:	2b00      	cmp	r3, #0
 800c276:	d013      	beq.n	800c2a0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27c:	781a      	ldrb	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c294:	b29b      	uxth	r3, r3
 800c296:	3b01      	subs	r3, #1
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c2a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c2a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1a4      	bne.n	800c1f6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c2ac:	e7ff      	b.n	800c2ae <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c2ae:	bf00      	nop
 800c2b0:	3744      	adds	r7, #68	; 0x44
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b091      	sub	sp, #68	; 0x44
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c8:	2b21      	cmp	r3, #33	; 0x21
 800c2ca:	d165      	bne.n	800c398 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c2d4:	e05c      	b.n	800c390 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d133      	bne.n	800c34a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c302:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e5      	bne.n	800c2e2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	60bb      	str	r3, [r7, #8]
   return(result);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32a:	633b      	str	r3, [r7, #48]	; 0x30
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	61bb      	str	r3, [r7, #24]
 800c336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	6979      	ldr	r1, [r7, #20]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	613b      	str	r3, [r7, #16]
   return(result);
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e6      	bne.n	800c316 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c348:	e026      	b.n	800c398 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c354:	2b00      	cmp	r3, #0
 800c356:	d018      	beq.n	800c38a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c35c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c36c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c372:	1c9a      	adds	r2, r3, #2
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c38a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c38c:	3b01      	subs	r3, #1
 800c38e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c392:	2b00      	cmp	r3, #0
 800c394:	d19f      	bne.n	800c2d6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c396:	e7ff      	b.n	800c398 <UART_TxISR_16BIT_FIFOEN+0xde>
 800c398:	bf00      	nop
 800c39a:	3744      	adds	r7, #68	; 0x44
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b088      	sub	sp, #32
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	61bb      	str	r3, [r7, #24]
 800c3cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ce:	6979      	ldr	r1, [r7, #20]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	e841 2300 	strex	r3, r2, [r1]
 800c3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1e6      	bne.n	800c3ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7fe fd5d 	bl	800aeac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f2:	bf00      	nop
 800c3f4:	3720      	adds	r7, #32
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b09c      	sub	sp, #112	; 0x70
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c40a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c414:	2b22      	cmp	r3, #34	; 0x22
 800c416:	f040 80be 	bne.w	800c596 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c424:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c428:	b2d9      	uxtb	r1, r3
 800c42a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c434:	400a      	ands	r2, r1
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f040 80a1 	bne.w	800c5a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c46c:	e853 3f00 	ldrex	r3, [r3]
 800c470:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c478:	66bb      	str	r3, [r7, #104]	; 0x68
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c482:	65bb      	str	r3, [r7, #88]	; 0x58
 800c484:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c48a:	e841 2300 	strex	r3, r2, [r1]
 800c48e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1e6      	bne.n	800c464 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3308      	adds	r3, #8
 800c49c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	f023 0301 	bic.w	r3, r3, #1
 800c4ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4b6:	647a      	str	r2, [r7, #68]	; 0x44
 800c4b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4be:	e841 2300 	strex	r3, r2, [r1]
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e5      	bne.n	800c496 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a33      	ldr	r2, [pc, #204]	; (800c5b0 <UART_RxISR_8BIT+0x1b4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d01f      	beq.n	800c528 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d018      	beq.n	800c528 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	623b      	str	r3, [r7, #32]
   return(result);
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c50a:	663b      	str	r3, [r7, #96]	; 0x60
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	461a      	mov	r2, r3
 800c512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c514:	633b      	str	r3, [r7, #48]	; 0x30
 800c516:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e6      	bne.n	800c4f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d12e      	bne.n	800c58e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	60fb      	str	r3, [r7, #12]
   return(result);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0310 	bic.w	r3, r3, #16
 800c54a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	69b9      	ldr	r1, [r7, #24]
 800c55a:	69fa      	ldr	r2, [r7, #28]
 800c55c:	e841 2300 	strex	r3, r2, [r1]
 800c560:	617b      	str	r3, [r7, #20]
   return(result);
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e6      	bne.n	800c536 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	f003 0310 	and.w	r3, r3, #16
 800c572:	2b10      	cmp	r3, #16
 800c574:	d103      	bne.n	800c57e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2210      	movs	r2, #16
 800c57c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fe fca4 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c58c:	e00b      	b.n	800c5a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7f5 fab0 	bl	8001af4 <HAL_UART_RxCpltCallback>
}
 800c594:	e007      	b.n	800c5a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	699a      	ldr	r2, [r3, #24]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f042 0208 	orr.w	r2, r2, #8
 800c5a4:	619a      	str	r2, [r3, #24]
}
 800c5a6:	bf00      	nop
 800c5a8:	3770      	adds	r7, #112	; 0x70
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	58000c00 	.word	0x58000c00

0800c5b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b09c      	sub	sp, #112	; 0x70
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5cc:	2b22      	cmp	r3, #34	; 0x22
 800c5ce:	f040 80be 	bne.w	800c74e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c5e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c5e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f6:	1c9a      	adds	r2, r3, #2
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c602:	b29b      	uxth	r3, r3
 800c604:	3b01      	subs	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c614:	b29b      	uxth	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	f040 80a1 	bne.w	800c75e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c624:	e853 3f00 	ldrex	r3, [r3]
 800c628:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c62c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c630:	667b      	str	r3, [r7, #100]	; 0x64
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c63a:	657b      	str	r3, [r7, #84]	; 0x54
 800c63c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c642:	e841 2300 	strex	r3, r2, [r1]
 800c646:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1e6      	bne.n	800c61c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	3308      	adds	r3, #8
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	f023 0301 	bic.w	r3, r3, #1
 800c664:	663b      	str	r3, [r7, #96]	; 0x60
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3308      	adds	r3, #8
 800c66c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c66e:	643a      	str	r2, [r7, #64]	; 0x40
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e5      	bne.n	800c64e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2220      	movs	r2, #32
 800c686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a33      	ldr	r2, [pc, #204]	; (800c768 <UART_RxISR_16BIT+0x1b4>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d01f      	beq.n	800c6e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d018      	beq.n	800c6e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	e853 3f00 	ldrex	r3, [r3]
 800c6ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d4:	e841 2300 	strex	r3, r2, [r1]
 800c6d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e6      	bne.n	800c6ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d12e      	bne.n	800c746 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	e853 3f00 	ldrex	r3, [r3]
 800c6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f023 0310 	bic.w	r3, r3, #16
 800c702:	65bb      	str	r3, [r7, #88]	; 0x58
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c710:	6979      	ldr	r1, [r7, #20]
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	e841 2300 	strex	r3, r2, [r1]
 800c718:	613b      	str	r3, [r7, #16]
   return(result);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1e6      	bne.n	800c6ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	69db      	ldr	r3, [r3, #28]
 800c726:	f003 0310 	and.w	r3, r3, #16
 800c72a:	2b10      	cmp	r3, #16
 800c72c:	d103      	bne.n	800c736 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2210      	movs	r2, #16
 800c734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7fe fbc8 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c744:	e00b      	b.n	800c75e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7f5 f9d4 	bl	8001af4 <HAL_UART_RxCpltCallback>
}
 800c74c:	e007      	b.n	800c75e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	699a      	ldr	r2, [r3, #24]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f042 0208 	orr.w	r2, r2, #8
 800c75c:	619a      	str	r2, [r3, #24]
}
 800c75e:	bf00      	nop
 800c760:	3770      	adds	r7, #112	; 0x70
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	58000c00 	.word	0x58000c00

0800c76c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b0ac      	sub	sp, #176	; 0xb0
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c77a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7a2:	2b22      	cmp	r3, #34	; 0x22
 800c7a4:	f040 8180 	bne.w	800caa8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7ae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7b2:	e123      	b.n	800c9fc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c7be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c7c2:	b2d9      	uxtb	r1, r3
 800c7c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ce:	400a      	ands	r2, r1
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	2b00      	cmp	r3, #0
 800c804:	d053      	beq.n	800c8ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d011      	beq.n	800c836 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00b      	beq.n	800c836 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2201      	movs	r2, #1
 800c824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c82c:	f043 0201 	orr.w	r2, r3, #1
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d011      	beq.n	800c866 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00b      	beq.n	800c866 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2202      	movs	r2, #2
 800c854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c85c:	f043 0204 	orr.w	r2, r3, #4
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c86a:	f003 0304 	and.w	r3, r3, #4
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d011      	beq.n	800c896 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00b      	beq.n	800c896 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2204      	movs	r2, #4
 800c884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88c:	f043 0202 	orr.w	r2, r3, #2
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d006      	beq.n	800c8ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fe fb0d 	bl	800aec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f040 80a0 	bne.w	800c9fc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8c4:	e853 3f00 	ldrex	r3, [r3]
 800c8c8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8e0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c8e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c8e6:	e841 2300 	strex	r3, r2, [r1]
 800c8ea:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c8ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1e4      	bne.n	800c8bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8fc:	e853 3f00 	ldrex	r3, [r3]
 800c900:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c904:	4b6e      	ldr	r3, [pc, #440]	; (800cac0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c906:	4013      	ands	r3, r2
 800c908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c916:	66ba      	str	r2, [r7, #104]	; 0x68
 800c918:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c91c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c91e:	e841 2300 	strex	r3, r2, [r1]
 800c922:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e3      	bne.n	800c8f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2220      	movs	r2, #32
 800c92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a60      	ldr	r2, [pc, #384]	; (800cac4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d021      	beq.n	800c98c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c952:	2b00      	cmp	r3, #0
 800c954:	d01a      	beq.n	800c98c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c96a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c978:	657b      	str	r3, [r7, #84]	; 0x54
 800c97a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c97e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e4      	bne.n	800c956 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c990:	2b01      	cmp	r3, #1
 800c992:	d130      	bne.n	800c9f6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a2:	e853 3f00 	ldrex	r3, [r3]
 800c9a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	f023 0310 	bic.w	r3, r3, #16
 800c9ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c9be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9c4:	e841 2300 	strex	r3, r2, [r1]
 800c9c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1e4      	bne.n	800c99a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f003 0310 	and.w	r3, r3, #16
 800c9da:	2b10      	cmp	r3, #16
 800c9dc:	d103      	bne.n	800c9e6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2210      	movs	r2, #16
 800c9e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7fe fa70 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
 800c9f4:	e002      	b.n	800c9fc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f5 f87c 	bl	8001af4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d006      	beq.n	800ca12 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ca04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca08:	f003 0320 	and.w	r3, r3, #32
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f47f aed1 	bne.w	800c7b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ca1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d049      	beq.n	800cab8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d242      	bcs.n	800cab8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3308      	adds	r3, #8
 800ca38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3308      	adds	r3, #8
 800ca52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ca56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca5e:	e841 2300 	strex	r3, r2, [r1]
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e3      	bne.n	800ca32 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a16      	ldr	r2, [pc, #88]	; (800cac8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ca6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	e853 3f00 	ldrex	r3, [r3]
 800ca7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f043 0320 	orr.w	r3, r3, #32
 800ca84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca92:	61bb      	str	r3, [r7, #24]
 800ca94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca96:	6979      	ldr	r1, [r7, #20]
 800ca98:	69ba      	ldr	r2, [r7, #24]
 800ca9a:	e841 2300 	strex	r3, r2, [r1]
 800ca9e:	613b      	str	r3, [r7, #16]
   return(result);
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1e4      	bne.n	800ca70 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caa6:	e007      	b.n	800cab8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	699a      	ldr	r2, [r3, #24]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f042 0208 	orr.w	r2, r2, #8
 800cab6:	619a      	str	r2, [r3, #24]
}
 800cab8:	bf00      	nop
 800caba:	37b0      	adds	r7, #176	; 0xb0
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	effffffe 	.word	0xeffffffe
 800cac4:	58000c00 	.word	0x58000c00
 800cac8:	0800c3fd 	.word	0x0800c3fd

0800cacc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b0ae      	sub	sp, #184	; 0xb8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cada:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb02:	2b22      	cmp	r3, #34	; 0x22
 800cb04:	f040 8184 	bne.w	800ce10 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb12:	e127      	b.n	800cd64 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cb26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800cb2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cb2e:	4013      	ands	r3, r2
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb3c:	1c9a      	adds	r2, r3, #2
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cb5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb62:	f003 0307 	and.w	r3, r3, #7
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d053      	beq.n	800cc12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d011      	beq.n	800cb9a <UART_RxISR_16BIT_FIFOEN+0xce>
 800cb76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00b      	beq.n	800cb9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2201      	movs	r2, #1
 800cb88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb90:	f043 0201 	orr.w	r2, r3, #1
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d011      	beq.n	800cbca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00b      	beq.n	800cbca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc0:	f043 0204 	orr.w	r2, r3, #4
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cbce:	f003 0304 	and.w	r3, r3, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d011      	beq.n	800cbfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cbd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00b      	beq.n	800cbfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2204      	movs	r2, #4
 800cbe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbf0:	f043 0202 	orr.w	r2, r3, #2
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d006      	beq.n	800cc12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7fe f95b 	bl	800aec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f040 80a2 	bne.w	800cd64 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc46:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc4e:	e841 2300 	strex	r3, r2, [r1]
 800cc52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1e2      	bne.n	800cc20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc64:	e853 3f00 	ldrex	r3, [r3]
 800cc68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc6c:	4b6e      	ldr	r3, [pc, #440]	; (800ce28 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cc6e:	4013      	ands	r3, r2
 800cc70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cc7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc86:	e841 2300 	strex	r3, r2, [r1]
 800cc8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1e3      	bne.n	800cc5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2220      	movs	r2, #32
 800cc96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a60      	ldr	r2, [pc, #384]	; (800ce2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d021      	beq.n	800ccf4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01a      	beq.n	800ccf4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc6:	e853 3f00 	ldrex	r3, [r3]
 800ccca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cce0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cce2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cce8:	e841 2300 	strex	r3, r2, [r1]
 800ccec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e4      	bne.n	800ccbe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d130      	bne.n	800cd5e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	e853 3f00 	ldrex	r3, [r3]
 800cd0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	f023 0310 	bic.w	r3, r3, #16
 800cd16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd24:	647b      	str	r3, [r7, #68]	; 0x44
 800cd26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e4      	bne.n	800cd02 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	69db      	ldr	r3, [r3, #28]
 800cd3e:	f003 0310 	and.w	r3, r3, #16
 800cd42:	2b10      	cmp	r3, #16
 800cd44:	d103      	bne.n	800cd4e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2210      	movs	r2, #16
 800cd4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd54:	4619      	mov	r1, r3
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7fe f8bc 	bl	800aed4 <HAL_UARTEx_RxEventCallback>
 800cd5c:	e002      	b.n	800cd64 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7f4 fec8 	bl	8001af4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cd6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd70:	f003 0320 	and.w	r3, r3, #32
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f47f aecd 	bne.w	800cb14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d049      	beq.n	800ce20 <UART_RxISR_16BIT_FIFOEN+0x354>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d242      	bcs.n	800ce20 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3308      	adds	r3, #8
 800cda0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	623b      	str	r3, [r7, #32]
   return(result);
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3308      	adds	r3, #8
 800cdba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cdbe:	633a      	str	r2, [r7, #48]	; 0x30
 800cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e3      	bne.n	800cd9a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a16      	ldr	r2, [pc, #88]	; (800ce30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cdd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	e853 3f00 	ldrex	r3, [r3]
 800cde4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f043 0320 	orr.w	r3, r3, #32
 800cdec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdfa:	61fb      	str	r3, [r7, #28]
 800cdfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfe:	69b9      	ldr	r1, [r7, #24]
 800ce00:	69fa      	ldr	r2, [r7, #28]
 800ce02:	e841 2300 	strex	r3, r2, [r1]
 800ce06:	617b      	str	r3, [r7, #20]
   return(result);
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1e4      	bne.n	800cdd8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce0e:	e007      	b.n	800ce20 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f042 0208 	orr.w	r2, r2, #8
 800ce1e:	619a      	str	r2, [r3, #24]
}
 800ce20:	bf00      	nop
 800ce22:	37b8      	adds	r7, #184	; 0xb8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	effffffe 	.word	0xeffffffe
 800ce2c:	58000c00 	.word	0x58000c00
 800ce30:	0800c5b5 	.word	0x0800c5b5

0800ce34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce50:	bf00      	nop
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce64:	bf00      	nop
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d101      	bne.n	800ce86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce82:	2302      	movs	r3, #2
 800ce84:	e027      	b.n	800ced6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2224      	movs	r2, #36	; 0x24
 800ce92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f022 0201 	bic.w	r2, r2, #1
 800ceac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ceb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d101      	bne.n	800cefa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cef6:	2302      	movs	r3, #2
 800cef8:	e02d      	b.n	800cf56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2224      	movs	r2, #36	; 0x24
 800cf06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f022 0201 	bic.w	r2, r2, #1
 800cf20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f850 	bl	800cfdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf72:	2302      	movs	r3, #2
 800cf74:	e02d      	b.n	800cfd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2224      	movs	r2, #36	; 0x24
 800cf82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f022 0201 	bic.w	r2, r2, #1
 800cf9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	430a      	orrs	r2, r1
 800cfb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f812 	bl	800cfdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2220      	movs	r2, #32
 800cfc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
	...

0800cfdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d108      	bne.n	800cffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cffc:	e031      	b.n	800d062 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cffe:	2310      	movs	r3, #16
 800d000:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d002:	2310      	movs	r3, #16
 800d004:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	0e5b      	lsrs	r3, r3, #25
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	0f5b      	lsrs	r3, r3, #29
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	f003 0307 	and.w	r3, r3, #7
 800d024:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	7b3a      	ldrb	r2, [r7, #12]
 800d02a:	4911      	ldr	r1, [pc, #68]	; (800d070 <UARTEx_SetNbDataToProcess+0x94>)
 800d02c:	5c8a      	ldrb	r2, [r1, r2]
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d032:	7b3a      	ldrb	r2, [r7, #12]
 800d034:	490f      	ldr	r1, [pc, #60]	; (800d074 <UARTEx_SetNbDataToProcess+0x98>)
 800d036:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d038:	fb93 f3f2 	sdiv	r3, r3, r2
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	7b7a      	ldrb	r2, [r7, #13]
 800d048:	4909      	ldr	r1, [pc, #36]	; (800d070 <UARTEx_SetNbDataToProcess+0x94>)
 800d04a:	5c8a      	ldrb	r2, [r1, r2]
 800d04c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d050:	7b7a      	ldrb	r2, [r7, #13]
 800d052:	4908      	ldr	r1, [pc, #32]	; (800d074 <UARTEx_SetNbDataToProcess+0x98>)
 800d054:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d056:	fb93 f3f2 	sdiv	r3, r3, r2
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d062:	bf00      	nop
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	0801bc78 	.word	0x0801bc78
 800d074:	0801bc80 	.word	0x0801bc80

0800d078 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d078:	b084      	sub	sp, #16
 800d07a:	b480      	push	{r7}
 800d07c:	b085      	sub	sp, #20
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	f107 001c 	add.w	r0, r7, #28
 800d086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d08e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d090:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d092:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d096:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d09a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d09e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685a      	ldr	r2, [r3, #4]
 800d0aa:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <SDMMC_Init+0x50>)
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	b004      	add	sp, #16
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	ffc02c00 	.word	0xffc02c00

0800d0cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	370c      	adds	r7, #12
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f043 0203 	orr.w	r2, r3, #3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b083      	sub	sp, #12
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f023 0203 	bic.w	r2, r3, #3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 0303 	and.w	r3, r3, #3
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d186:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d18c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4313      	orrs	r3, r2
 800d198:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68da      	ldr	r2, [r3, #12]
 800d19e:	4b06      	ldr	r3, [pc, #24]	; (800d1b8 <SDMMC_SendCommand+0x50>)
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	431a      	orrs	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	fffee0c0 	.word	0xfffee0c0

0800d1bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	b2db      	uxtb	r3, r3
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3314      	adds	r3, #20
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d222:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d228:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d22e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	4313      	orrs	r3, r2
 800d234:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	431a      	orrs	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d246:	2300      	movs	r3, #0

}
 800d248:	4618      	mov	r0, r3
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d262:	2310      	movs	r3, #16
 800d264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d26a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d26c:	2300      	movs	r3, #0
 800d26e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d276:	f107 0308 	add.w	r3, r7, #8
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7ff ff73 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d282:	f241 3288 	movw	r2, #5000	; 0x1388
 800d286:	2110      	movs	r1, #16
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fa5f 	bl	800d74c <SDMMC_GetCmdResp1>
 800d28e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d290:	69fb      	ldr	r3, [r7, #28]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3720      	adds	r7, #32
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b088      	sub	sp, #32
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d2a8:	2311      	movs	r3, #17
 800d2aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2bc:	f107 0308 	add.w	r3, r7, #8
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ff50 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2cc:	2111      	movs	r1, #17
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fa3c 	bl	800d74c <SDMMC_GetCmdResp1>
 800d2d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2d6:	69fb      	ldr	r3, [r7, #28]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3720      	adds	r7, #32
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d2ee:	2312      	movs	r3, #18
 800d2f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d302:	f107 0308 	add.w	r3, r7, #8
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff ff2d 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d30e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d312:	2112      	movs	r1, #18
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fa19 	bl	800d74c <SDMMC_GetCmdResp1>
 800d31a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d31c:	69fb      	ldr	r3, [r7, #28]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3720      	adds	r7, #32
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b088      	sub	sp, #32
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d334:	2318      	movs	r3, #24
 800d336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d33c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d33e:	2300      	movs	r3, #0
 800d340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d348:	f107 0308 	add.w	r3, r7, #8
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff ff0a 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d354:	f241 3288 	movw	r2, #5000	; 0x1388
 800d358:	2118      	movs	r1, #24
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f9f6 	bl	800d74c <SDMMC_GetCmdResp1>
 800d360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d362:	69fb      	ldr	r3, [r7, #28]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3720      	adds	r7, #32
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b088      	sub	sp, #32
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d37a:	2319      	movs	r3, #25
 800d37c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d37e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d384:	2300      	movs	r3, #0
 800d386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d38c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d38e:	f107 0308 	add.w	r3, r7, #8
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fee7 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d39e:	2119      	movs	r1, #25
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f9d3 	bl	800d74c <SDMMC_GetCmdResp1>
 800d3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b088      	sub	sp, #32
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3ec:	f107 0308 	add.w	r3, r7, #8
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff feb8 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d3f8:	4a0b      	ldr	r2, [pc, #44]	; (800d428 <SDMMC_CmdStopTransfer+0x74>)
 800d3fa:	210c      	movs	r1, #12
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f9a5 	bl	800d74c <SDMMC_GetCmdResp1>
 800d402:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d416:	d101      	bne.n	800d41c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d418:	2300      	movs	r3, #0
 800d41a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d41c:	69fb      	ldr	r3, [r7, #28]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3720      	adds	r7, #32
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	05f5e100 	.word	0x05f5e100

0800d42c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b088      	sub	sp, #32
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d43a:	2307      	movs	r3, #7
 800d43c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d43e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d444:	2300      	movs	r3, #0
 800d446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d44c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d44e:	f107 0308 	add.w	r3, r7, #8
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7ff fe87 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d45a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d45e:	2107      	movs	r1, #7
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f973 	bl	800d74c <SDMMC_GetCmdResp1>
 800d466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d468:	69fb      	ldr	r3, [r7, #28]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3720      	adds	r7, #32
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b088      	sub	sp, #32
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d482:	2300      	movs	r3, #0
 800d484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d486:	2300      	movs	r3, #0
 800d488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d48a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d48e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d490:	f107 0308 	add.w	r3, r7, #8
 800d494:	4619      	mov	r1, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff fe66 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fb97 	bl	800dbd0 <SDMMC_GetCmdError>
 800d4a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4a4:	69fb      	ldr	r3, [r7, #28]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3720      	adds	r7, #32
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b088      	sub	sp, #32
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d4b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d4ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d4bc:	2308      	movs	r3, #8
 800d4be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4d0:	f107 0308 	add.w	r3, r7, #8
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fe46 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fb29 	bl	800db34 <SDMMC_GetCmdResp7>
 800d4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b088      	sub	sp, #32
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d4fc:	2337      	movs	r3, #55	; 0x37
 800d4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d500:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d506:	2300      	movs	r3, #0
 800d508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d50a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d50e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d510:	f107 0308 	add.w	r3, r7, #8
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff fe26 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d520:	2137      	movs	r1, #55	; 0x37
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f912 	bl	800d74c <SDMMC_GetCmdResp1>
 800d528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d52a:	69fb      	ldr	r3, [r7, #28]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3720      	adds	r7, #32
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d542:	2329      	movs	r3, #41	; 0x29
 800d544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d54a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff fe03 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fa2e 	bl	800d9c4 <SDMMC_GetCmdResp3>
 800d568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d56a:	69fb      	ldr	r3, [r7, #28]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3720      	adds	r7, #32
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d582:	2306      	movs	r3, #6
 800d584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d58a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d58c:	2300      	movs	r3, #0
 800d58e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d596:	f107 0308 	add.w	r3, r7, #8
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff fde3 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d5a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5a6:	2106      	movs	r1, #6
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f8cf 	bl	800d74c <SDMMC_GetCmdResp1>
 800d5ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b088      	sub	sp, #32
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d5c6:	2333      	movs	r3, #51	; 0x33
 800d5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5da:	f107 0308 	add.w	r3, r7, #8
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff fdc1 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ea:	2133      	movs	r1, #51	; 0x33
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f8ad 	bl	800d74c <SDMMC_GetCmdResp1>
 800d5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b088      	sub	sp, #32
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d60a:	2302      	movs	r3, #2
 800d60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d60e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d614:	2300      	movs	r3, #0
 800d616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d61c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d61e:	f107 0308 	add.w	r3, r7, #8
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fd9f 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f980 	bl	800d930 <SDMMC_GetCmdResp2>
 800d630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d632:	69fb      	ldr	r3, [r7, #28]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d64a:	2309      	movs	r3, #9
 800d64c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d64e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d65c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d65e:	f107 0308 	add.w	r3, r7, #8
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fd7f 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f960 	bl	800d930 <SDMMC_GetCmdResp2>
 800d670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d672:	69fb      	ldr	r3, [r7, #28]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d686:	2300      	movs	r3, #0
 800d688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d68a:	2303      	movs	r3, #3
 800d68c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d68e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d694:	2300      	movs	r3, #0
 800d696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d69c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d69e:	f107 0308 	add.w	r3, r7, #8
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff fd5f 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	2103      	movs	r1, #3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f9c8 	bl	800da44 <SDMMC_GetCmdResp6>
 800d6b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6b6:	69fb      	ldr	r3, [r7, #28]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b088      	sub	sp, #32
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d6ce:	230d      	movs	r3, #13
 800d6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6e2:	f107 0308 	add.w	r3, r7, #8
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff fd3d 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6f2:	210d      	movs	r1, #13
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f829 	bl	800d74c <SDMMC_GetCmdResp1>
 800d6fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3720      	adds	r7, #32
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b088      	sub	sp, #32
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d70e:	2300      	movs	r3, #0
 800d710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d712:	230d      	movs	r3, #13
 800d714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d71c:	2300      	movs	r3, #0
 800d71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d726:	f107 0308 	add.w	r3, r7, #8
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff fd1b 	bl	800d168 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d732:	f241 3288 	movw	r2, #5000	; 0x1388
 800d736:	210d      	movs	r1, #13
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f807 	bl	800d74c <SDMMC_GetCmdResp1>
 800d73e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d740:	69fb      	ldr	r3, [r7, #28]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3720      	adds	r7, #32
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
	...

0800d74c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	460b      	mov	r3, r1
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d75a:	4b70      	ldr	r3, [pc, #448]	; (800d91c <SDMMC_GetCmdResp1+0x1d0>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a70      	ldr	r2, [pc, #448]	; (800d920 <SDMMC_GetCmdResp1+0x1d4>)
 800d760:	fba2 2303 	umull	r2, r3, r2, r3
 800d764:	0a5a      	lsrs	r2, r3, #9
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	fb02 f303 	mul.w	r3, r2, r3
 800d76c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	1e5a      	subs	r2, r3, #1
 800d772:	61fa      	str	r2, [r7, #28]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d77c:	e0c9      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d782:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d784:	69ba      	ldr	r2, [r7, #24]
 800d786:	4b67      	ldr	r3, [pc, #412]	; (800d924 <SDMMC_GetCmdResp1+0x1d8>)
 800d788:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0ef      	beq.n	800d76e <SDMMC_GetCmdResp1+0x22>
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1ea      	bne.n	800d76e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2204      	movs	r2, #4
 800d7a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7aa:	2304      	movs	r3, #4
 800d7ac:	e0b1      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e0a6      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	4a58      	ldr	r2, [pc, #352]	; (800d928 <SDMMC_GetCmdResp1+0x1dc>)
 800d7c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f7ff fcf6 	bl	800d1bc <SDMMC_GetCommandResponse>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	7afb      	ldrb	r3, [r7, #11]
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d001      	beq.n	800d7de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e099      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d7de:	2100      	movs	r1, #0
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7ff fcf8 	bl	800d1d6 <SDMMC_GetResponse>
 800d7e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	4b50      	ldr	r3, [pc, #320]	; (800d92c <SDMMC_GetCmdResp1+0x1e0>)
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e08d      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	da02      	bge.n	800d802 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d7fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d800:	e087      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d80c:	2340      	movs	r3, #64	; 0x40
 800d80e:	e080      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d81a:	2380      	movs	r3, #128	; 0x80
 800d81c:	e079      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d82c:	e071      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d83c:	e069      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d84c:	e061      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d85c:	e059      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d86c:	e051      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d87c:	e049      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d88c:	e041      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d89c:	e039      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d8a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8ac:	e031      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d8b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d8bc:	e029      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d8c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d8cc:	e021      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d8d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d8dc:	e019      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d8e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d8ec:	e011      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d8f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d8fc:	e009      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d908:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d90c:	e001      	b.n	800d912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d912:	4618      	mov	r0, r3
 800d914:	3720      	adds	r7, #32
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	24000000 	.word	0x24000000
 800d920:	10624dd3 	.word	0x10624dd3
 800d924:	00200045 	.word	0x00200045
 800d928:	002000c5 	.word	0x002000c5
 800d92c:	fdffe008 	.word	0xfdffe008

0800d930 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d938:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <SDMMC_GetCmdResp2+0x88>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a1f      	ldr	r2, [pc, #124]	; (800d9bc <SDMMC_GetCmdResp2+0x8c>)
 800d93e:	fba2 2303 	umull	r2, r3, r2, r3
 800d942:	0a5b      	lsrs	r3, r3, #9
 800d944:	f241 3288 	movw	r2, #5000	; 0x1388
 800d948:	fb02 f303 	mul.w	r3, r2, r3
 800d94c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	1e5a      	subs	r2, r3, #1
 800d952:	60fa      	str	r2, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d102      	bne.n	800d95e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d95c:	e026      	b.n	800d9ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d962:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0ef      	beq.n	800d94e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1ea      	bne.n	800d94e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	2b00      	cmp	r3, #0
 800d982:	d004      	beq.n	800d98e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2204      	movs	r2, #4
 800d988:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d98a:	2304      	movs	r3, #4
 800d98c:	e00e      	b.n	800d9ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e003      	b.n	800d9ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <SDMMC_GetCmdResp2+0x90>)
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	24000000 	.word	0x24000000
 800d9bc:	10624dd3 	.word	0x10624dd3
 800d9c0:	002000c5 	.word	0x002000c5

0800d9c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d9cc:	4b1a      	ldr	r3, [pc, #104]	; (800da38 <SDMMC_GetCmdResp3+0x74>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <SDMMC_GetCmdResp3+0x78>)
 800d9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d6:	0a5b      	lsrs	r3, r3, #9
 800d9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9dc:	fb02 f303 	mul.w	r3, r2, r3
 800d9e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	1e5a      	subs	r2, r3, #1
 800d9e6:	60fa      	str	r2, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d102      	bne.n	800d9f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9f0:	e01b      	b.n	800da2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0ef      	beq.n	800d9e2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1ea      	bne.n	800d9e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da10:	f003 0304 	and.w	r3, r3, #4
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2204      	movs	r2, #4
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da1e:	2304      	movs	r3, #4
 800da20:	e003      	b.n	800da2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a06      	ldr	r2, [pc, #24]	; (800da40 <SDMMC_GetCmdResp3+0x7c>)
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3714      	adds	r7, #20
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	24000000 	.word	0x24000000
 800da3c:	10624dd3 	.word	0x10624dd3
 800da40:	002000c5 	.word	0x002000c5

0800da44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	460b      	mov	r3, r1
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da52:	4b35      	ldr	r3, [pc, #212]	; (800db28 <SDMMC_GetCmdResp6+0xe4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a35      	ldr	r2, [pc, #212]	; (800db2c <SDMMC_GetCmdResp6+0xe8>)
 800da58:	fba2 2303 	umull	r2, r3, r2, r3
 800da5c:	0a5b      	lsrs	r3, r3, #9
 800da5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da62:	fb02 f303 	mul.w	r3, r2, r3
 800da66:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	1e5a      	subs	r2, r3, #1
 800da6c:	61fa      	str	r2, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d102      	bne.n	800da78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da76:	e052      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800da84:	2b00      	cmp	r3, #0
 800da86:	d0ef      	beq.n	800da68 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1ea      	bne.n	800da68 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da96:	f003 0304 	and.w	r3, r3, #4
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d004      	beq.n	800daa8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2204      	movs	r2, #4
 800daa2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa4:	2304      	movs	r3, #4
 800daa6:	e03a      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d004      	beq.n	800dabe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2201      	movs	r2, #1
 800dab8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800daba:	2301      	movs	r3, #1
 800dabc:	e02f      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f7ff fb7c 	bl	800d1bc <SDMMC_GetCommandResponse>
 800dac4:	4603      	mov	r3, r0
 800dac6:	461a      	mov	r2, r3
 800dac8:	7afb      	ldrb	r3, [r7, #11]
 800daca:	4293      	cmp	r3, r2
 800dacc:	d001      	beq.n	800dad2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dace:	2301      	movs	r3, #1
 800dad0:	e025      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	4a16      	ldr	r2, [pc, #88]	; (800db30 <SDMMC_GetCmdResp6+0xec>)
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dad8:	2100      	movs	r1, #0
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7ff fb7b 	bl	800d1d6 <SDMMC_GetResponse>
 800dae0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d106      	bne.n	800dafa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e011      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db08:	e009      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db18:	e001      	b.n	800db1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3720      	adds	r7, #32
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	24000000 	.word	0x24000000
 800db2c:	10624dd3 	.word	0x10624dd3
 800db30:	002000c5 	.word	0x002000c5

0800db34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db3c:	4b22      	ldr	r3, [pc, #136]	; (800dbc8 <SDMMC_GetCmdResp7+0x94>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a22      	ldr	r2, [pc, #136]	; (800dbcc <SDMMC_GetCmdResp7+0x98>)
 800db42:	fba2 2303 	umull	r2, r3, r2, r3
 800db46:	0a5b      	lsrs	r3, r3, #9
 800db48:	f241 3288 	movw	r2, #5000	; 0x1388
 800db4c:	fb02 f303 	mul.w	r3, r2, r3
 800db50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	1e5a      	subs	r2, r3, #1
 800db56:	60fa      	str	r2, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d102      	bne.n	800db62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db60:	e02c      	b.n	800dbbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0ef      	beq.n	800db52 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1ea      	bne.n	800db52 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db80:	f003 0304 	and.w	r3, r3, #4
 800db84:	2b00      	cmp	r3, #0
 800db86:	d004      	beq.n	800db92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2204      	movs	r2, #4
 800db8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db8e:	2304      	movs	r3, #4
 800db90:	e014      	b.n	800dbbc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d004      	beq.n	800dba8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e009      	b.n	800dbbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2240      	movs	r2, #64	; 0x40
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbba:	2300      	movs	r3, #0

}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	24000000 	.word	0x24000000
 800dbcc:	10624dd3 	.word	0x10624dd3

0800dbd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <SDMMC_GetCmdError+0x50>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a11      	ldr	r2, [pc, #68]	; (800dc24 <SDMMC_GetCmdError+0x54>)
 800dbde:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe2:	0a5b      	lsrs	r3, r3, #9
 800dbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe8:	fb02 f303 	mul.w	r3, r2, r3
 800dbec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	60fa      	str	r2, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d102      	bne.n	800dbfe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbfc:	e009      	b.n	800dc12 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0f1      	beq.n	800dbee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a06      	ldr	r2, [pc, #24]	; (800dc28 <SDMMC_GetCmdError+0x58>)
 800dc0e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	24000000 	.word	0x24000000
 800dc24:	10624dd3 	.word	0x10624dd3
 800dc28:	002000c5 	.word	0x002000c5

0800dc2c <MX_FileX_Init>:
 * @brief  Application FileX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08e      	sub	sp, #56	; 0x38
 800dc30:	af08      	add	r7, sp, #32
 800dc32:	6078      	str	r0, [r7, #4]
	UINT ret = FX_SUCCESS;
 800dc34:	2300      	movs	r3, #0
 800dc36:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	613b      	str	r3, [r7, #16]
	/* USER CODE BEGIN 0 */

	/* USER CODE END 0 */

	/*Allocate memory for the main thread's stack*/
	ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 800dc3c:	f107 010c 	add.w	r1, r7, #12
 800dc40:	2300      	movs	r3, #0
 800dc42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc46:	6938      	ldr	r0, [r7, #16]
 800dc48:	f00c fe88 	bl	801a95c <_txe_byte_allocate>
 800dc4c:	6178      	str	r0, [r7, #20]

	/* Check FX_APP_THREAD_STACK_SIZE allocation*/
	if (ret != FX_SUCCESS)
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <MX_FileX_Init+0x2c>
	{
		return TX_POOL_ERROR;
 800dc54:	2302      	movs	r3, #2
 800dc56:	e01d      	b.n	800dc94 <MX_FileX_Init+0x68>
	}

	/* Create the main thread.  */
	ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	22b0      	movs	r2, #176	; 0xb0
 800dc5c:	9206      	str	r2, [sp, #24]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	9205      	str	r2, [sp, #20]
 800dc62:	2200      	movs	r2, #0
 800dc64:	9204      	str	r2, [sp, #16]
 800dc66:	220a      	movs	r2, #10
 800dc68:	9203      	str	r2, [sp, #12]
 800dc6a:	220a      	movs	r2, #10
 800dc6c:	9202      	str	r2, [sp, #8]
 800dc6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc72:	9201      	str	r2, [sp, #4]
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	2300      	movs	r3, #0
 800dc78:	4a08      	ldr	r2, [pc, #32]	; (800dc9c <MX_FileX_Init+0x70>)
 800dc7a:	4909      	ldr	r1, [pc, #36]	; (800dca0 <MX_FileX_Init+0x74>)
 800dc7c:	4809      	ldr	r0, [pc, #36]	; (800dca4 <MX_FileX_Init+0x78>)
 800dc7e:	f00d f8b5 	bl	801adec <_txe_thread_create>
 800dc82:	6178      	str	r0, [r7, #20]
			FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

	/* Check main thread creation */
	if (ret != FX_SUCCESS)
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <MX_FileX_Init+0x62>
	{
		return TX_THREAD_ERROR;
 800dc8a:	230e      	movs	r3, #14
 800dc8c:	e002      	b.n	800dc94 <MX_FileX_Init+0x68>
	/* USER CODE BEGIN MX_FileX_Init */

	/* USER CODE END MX_FileX_Init */

	/* Initialize FileX.  */
	fx_system_initialize();
 800dc8e:	f007 fd45 	bl	801571c <_fx_system_initialize>

	/* USER CODE BEGIN MX_FileX_Init 1*/

	/* USER CODE END MX_FileX_Init 1*/

	return ret;
 800dc92:	697b      	ldr	r3, [r7, #20]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3718      	adds	r7, #24
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	0800dca9 	.word	0x0800dca9
 800dca0:	0801bb6c 	.word	0x0801bb6c
 800dca4:	240017a8 	.word	0x240017a8

0800dca8 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 800dca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcaa:	b08d      	sub	sp, #52	; 0x34
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	6078      	str	r0, [r7, #4]
	UINT sd_status = FX_SUCCESS;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	61fb      	str	r3, [r7, #28]
	/* USER CODE BEGIN fx_app_thread_entry 0 */

	// CHAR* place = SRAM2_ADDR;
	// CHAR data[] = "69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ";
	Address = FLASH_USER_START_ADDR;
 800dcb4:	4b71      	ldr	r3, [pc, #452]	; (800de7c <fx_app_thread_entry+0x1d4>)
 800dcb6:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 800dcba:	601a      	str	r2, [r3, #0]
	// ram_adrr =place ;

	/* USER CODE END fx_app_thread_entry 0 */

	/* Open the SD disk driver */
	sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 800dcbc:	f242 43b8 	movw	r3, #9400	; 0x24b8
 800dcc0:	9302      	str	r3, [sp, #8]
 800dcc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	4b6d      	ldr	r3, [pc, #436]	; (800de80 <fx_app_thread_entry+0x1d8>)
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	2300      	movs	r3, #0
 800dcce:	4a6d      	ldr	r2, [pc, #436]	; (800de84 <fx_app_thread_entry+0x1dc>)
 800dcd0:	496d      	ldr	r1, [pc, #436]	; (800de88 <fx_app_thread_entry+0x1e0>)
 800dcd2:	486e      	ldr	r0, [pc, #440]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800dcd4:	f00a f980 	bl	8017fd8 <_fxe_media_open>
 800dcd8:	61f8      	str	r0, [r7, #28]

	/* Check the media open sd_status */
	if (sd_status != FX_SUCCESS)
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d000      	beq.n	800dce2 <fx_app_thread_entry+0x3a>
	{
		/* USER CODE BEGIN SD open error */
		while(1);
 800dce0:	e7fe      	b.n	800dce0 <fx_app_thread_entry+0x38>





	int j=0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	61bb      	str	r3, [r7, #24]
	int f=1;
 800dce6:	2301      	movs	r3, #1
 800dce8:	617b      	str	r3, [r7, #20]
	int f1;
	int f2;
	/* Create a file called STM32.TXT in the root directory.  */

	while(f!=0)
 800dcea:	e172      	b.n	800dfd2 <fx_app_thread_entry+0x32a>
	{
		if (SIM800.mqttServer.connect == 0)
 800dcec:	4b68      	ldr	r3, [pc, #416]	; (800de90 <fx_app_thread_entry+0x1e8>)
 800dcee:	7c9b      	ldrb	r3, [r3, #18]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d104      	bne.n	800dcfe <fx_app_thread_entry+0x56>
		{
			MQTT_Init();
 800dcf4:	f7f3 fb6e 	bl	80013d4 <MQTT_Init>
			sub = 0;
 800dcf8:	4b66      	ldr	r3, [pc, #408]	; (800de94 <fx_app_thread_entry+0x1ec>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	701a      	strb	r2, [r3, #0]
		}
		if (SIM800.mqttServer.connect == 1)
 800dcfe:	4b64      	ldr	r3, [pc, #400]	; (800de90 <fx_app_thread_entry+0x1e8>)
 800dd00:	7c9b      	ldrb	r3, [r3, #18]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	f040 8165 	bne.w	800dfd2 <fx_app_thread_entry+0x32a>
		{
			if(sub == 0)
 800dd08:	4b62      	ldr	r3, [pc, #392]	; (800de94 <fx_app_thread_entry+0x1ec>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 8103 	bne.w	800df18 <fx_app_thread_entry+0x270>
			{
				MQTT_Sub("123456");
 800dd12:	4861      	ldr	r0, [pc, #388]	; (800de98 <fx_app_thread_entry+0x1f0>)
 800dd14:	f7f3 fcec 	bl	80016f0 <MQTT_Sub>
				sub = 1;
 800dd18:	4b5e      	ldr	r3, [pc, #376]	; (800de94 <fx_app_thread_entry+0x1ec>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	701a      	strb	r2, [r3, #0]
				//MQTT_Pub("123456", "connect");
				int status =1;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	613b      	str	r3, [r7, #16]
				while(status==1)
 800dd22:	e0f5      	b.n	800df10 <fx_app_thread_entry+0x268>
				{
					if(SIM800.mqttReceive.newEvent)
 800dd24:	4b5a      	ldr	r3, [pc, #360]	; (800de90 <fx_app_thread_entry+0x1e8>)
 800dd26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d04c      	beq.n	800ddc8 <fx_app_thread_entry+0x120>
					{
						memcpy(rec,SIM800.mqttReceive.payload,64);
 800dd2e:	4a5b      	ldr	r2, [pc, #364]	; (800de9c <fx_app_thread_entry+0x1f4>)
 800dd30:	4b57      	ldr	r3, [pc, #348]	; (800de90 <fx_app_thread_entry+0x1e8>)
 800dd32:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800dd36:	4694      	mov	ip, r2
 800dd38:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800dd3c:	4665      	mov	r5, ip
 800dd3e:	4626      	mov	r6, r4
 800dd40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dd42:	6028      	str	r0, [r5, #0]
 800dd44:	6069      	str	r1, [r5, #4]
 800dd46:	60aa      	str	r2, [r5, #8]
 800dd48:	60eb      	str	r3, [r5, #12]
 800dd4a:	3410      	adds	r4, #16
 800dd4c:	f10c 0c10 	add.w	ip, ip, #16
 800dd50:	4574      	cmp	r4, lr
 800dd52:	d1f3      	bne.n	800dd3c <fx_app_thread_entry+0x94>
						if(strcmp(rec,"new firmware")==0)
 800dd54:	4952      	ldr	r1, [pc, #328]	; (800dea0 <fx_app_thread_entry+0x1f8>)
 800dd56:	4851      	ldr	r0, [pc, #324]	; (800de9c <fx_app_thread_entry+0x1f4>)
 800dd58:	f7f2 fbde 	bl	8000518 <strcmp>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f040 80d6 	bne.w	800df10 <fx_app_thread_entry+0x268>
						{
							fx_file_delete(&sdio_disk,"backup");
 800dd64:	494f      	ldr	r1, [pc, #316]	; (800dea4 <fx_app_thread_entry+0x1fc>)
 800dd66:	4849      	ldr	r0, [pc, #292]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800dd68:	f009 ff64 	bl	8017c34 <_fxe_file_delete>
							fx_file_rename(&sdio_disk,"current firmware","backup");
 800dd6c:	4a4d      	ldr	r2, [pc, #308]	; (800dea4 <fx_app_thread_entry+0x1fc>)
 800dd6e:	494e      	ldr	r1, [pc, #312]	; (800dea8 <fx_app_thread_entry+0x200>)
 800dd70:	4846      	ldr	r0, [pc, #280]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800dd72:	f00a f847 	bl	8017e04 <_fxe_file_rename>
							sd_status =  fx_file_create(&sdio_disk,"current firmware");
 800dd76:	494c      	ldr	r1, [pc, #304]	; (800dea8 <fx_app_thread_entry+0x200>)
 800dd78:	4844      	ldr	r0, [pc, #272]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800dd7a:	f009 ff2d 	bl	8017bd8 <_fxe_file_create>
 800dd7e:	61f8      	str	r0, [r7, #28]

							if (sd_status != FX_SUCCESS)
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <fx_app_thread_entry+0xe8>
							{
								if (sd_status != FX_ALREADY_CREATED)
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	2b0b      	cmp	r3, #11
 800dd8a:	d001      	beq.n	800dd90 <fx_app_thread_entry+0xe8>
								{
									Error_Handler();
 800dd8c:	f7f4 f94c 	bl	8002028 <Error_Handler>
								}
							}
							sd_status =  fx_file_open(&sdio_disk, &fx_file,"current firmware", FX_OPEN_FOR_WRITE);
 800dd90:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	2301      	movs	r3, #1
 800dd98:	4a43      	ldr	r2, [pc, #268]	; (800dea8 <fx_app_thread_entry+0x200>)
 800dd9a:	4944      	ldr	r1, [pc, #272]	; (800deac <fx_app_thread_entry+0x204>)
 800dd9c:	483b      	ldr	r0, [pc, #236]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800dd9e:	f009 ff77 	bl	8017c90 <_fxe_file_open>
 800dda2:	61f8      	str	r0, [r7, #28]

							if (sd_status != FX_SUCCESS)
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <fx_app_thread_entry+0x106>
							{
								Error_Handler();
 800ddaa:	f7f4 f93d 	bl	8002028 <Error_Handler>
							}
							MQTT_Pub("123456", "ready");
 800ddae:	4940      	ldr	r1, [pc, #256]	; (800deb0 <fx_app_thread_entry+0x208>)
 800ddb0:	4839      	ldr	r0, [pc, #228]	; (800de98 <fx_app_thread_entry+0x1f0>)
 800ddb2:	f7f3 fc2f 	bl	8001614 <MQTT_Pub>
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ddbc:	483d      	ldr	r0, [pc, #244]	; (800deb4 <fx_app_thread_entry+0x20c>)
 800ddbe:	f7f6 fe7f 	bl	8004ac0 <HAL_GPIO_WritePin>
							status = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	613b      	str	r3, [r7, #16]
 800ddc6:	e0a3      	b.n	800df10 <fx_app_thread_entry+0x268>
						}

					}
					else
					{
						err++;
 800ddc8:	4b3b      	ldr	r3, [pc, #236]	; (800deb8 <fx_app_thread_entry+0x210>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	4a3a      	ldr	r2, [pc, #232]	; (800deb8 <fx_app_thread_entry+0x210>)
 800ddd0:	6013      	str	r3, [r2, #0]
						if(err > 30000000)
 800ddd2:	4b39      	ldr	r3, [pc, #228]	; (800deb8 <fx_app_thread_entry+0x210>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a39      	ldr	r2, [pc, #228]	; (800debc <fx_app_thread_entry+0x214>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	f340 8099 	ble.w	800df10 <fx_app_thread_entry+0x268>
						{
							MQTT_Pub("123456", "load backup");
 800ddde:	4938      	ldr	r1, [pc, #224]	; (800dec0 <fx_app_thread_entry+0x218>)
 800dde0:	482d      	ldr	r0, [pc, #180]	; (800de98 <fx_app_thread_entry+0x1f0>)
 800dde2:	f7f3 fc17 	bl	8001614 <MQTT_Pub>
							sd_status =  fx_file_create(&sdio_disk,"backup");
 800dde6:	492f      	ldr	r1, [pc, #188]	; (800dea4 <fx_app_thread_entry+0x1fc>)
 800dde8:	4828      	ldr	r0, [pc, #160]	; (800de8c <fx_app_thread_entry+0x1e4>)
 800ddea:	f009 fef5 	bl	8017bd8 <_fxe_file_create>
 800ddee:	61f8      	str	r0, [r7, #28]

							if (sd_status != FX_SUCCESS)
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d004      	beq.n	800de00 <fx_app_thread_entry+0x158>
							{
								if (sd_status != FX_ALREADY_CREATED)
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	2b0b      	cmp	r3, #11
 800ddfa:	d001      	beq.n	800de00 <fx_app_thread_entry+0x158>
								{
									Error_Handler();
 800ddfc:	f7f4 f914 	bl	8002028 <Error_Handler>
								}
							}
							sd_status = load("backup");
 800de00:	4828      	ldr	r0, [pc, #160]	; (800dea4 <fx_app_thread_entry+0x1fc>)
 800de02:	f000 f977 	bl	800e0f4 <load>
 800de06:	61f8      	str	r0, [r7, #28]
							if (sd_status != FX_SUCCESS)
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <fx_app_thread_entry+0x16a>
							{
								Error_Handler();
 800de0e:	f7f4 f90b 	bl	8002028 <Error_Handler>
							}

							HAL_FLASH_Unlock();
 800de12:	f7f5 fc5b 	bl	80036cc <HAL_FLASH_Unlock>

							HAL_FLASH_OB_Unlock();
 800de16:	f7f5 fcbd 	bl	8003794 <HAL_FLASH_OB_Unlock>
							HAL_FLASHEx_OBGetConfig(&OBInit);
 800de1a:	482a      	ldr	r0, [pc, #168]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de1c:	f7f5 ffce 	bl	8003dbc <HAL_FLASHEx_OBGetConfig>

							OBInit.Banks     = FLASH_BANK_1;
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de22:	2201      	movs	r2, #1
 800de24:	61da      	str	r2, [r3, #28]
							HAL_FLASHEx_OBGetConfig(&OBInit);
 800de26:	4827      	ldr	r0, [pc, #156]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de28:	f7f5 ffc8 	bl	8003dbc <HAL_FLASHEx_OBGetConfig>

							if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 800de2c:	4b25      	ldr	r3, [pc, #148]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	2b00      	cmp	r3, #0
 800de32:	db4b      	blt.n	800decc <fx_app_thread_entry+0x224>
							{
								OBInit.OptionType = OPTIONBYTE_USER;
 800de34:	4b23      	ldr	r3, [pc, #140]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de36:	2204      	movs	r2, #4
 800de38:	601a      	str	r2, [r3, #0]
								OBInit.USERType   = OB_USER_SWAP_BANK;
 800de3a:	4b22      	ldr	r3, [pc, #136]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de40:	615a      	str	r2, [r3, #20]
								OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 800de42:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de48:	619a      	str	r2, [r3, #24]
								HAL_FLASHEx_OBProgram(&OBInit);
 800de4a:	481e      	ldr	r0, [pc, #120]	; (800dec4 <fx_app_thread_entry+0x21c>)
 800de4c:	f7f5 ff12 	bl	8003c74 <HAL_FLASHEx_OBProgram>

								HAL_FLASH_OB_Launch();
 800de50:	f7f5 fcc2 	bl	80037d8 <HAL_FLASH_OB_Launch>

								HAL_NVIC_SystemReset();
 800de54:	f7f4 fe3f 	bl	8002ad6 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800de58:	f3bf 8f4f 	dsb	sy
}
 800de5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800de5e:	f3bf 8f6f 	isb	sy
}
 800de62:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800de64:	4b18      	ldr	r3, [pc, #96]	; (800dec8 <fx_app_thread_entry+0x220>)
 800de66:	2200      	movs	r2, #0
 800de68:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800de6c:	f3bf 8f4f 	dsb	sy
}
 800de70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800de72:	f3bf 8f6f 	isb	sy
}
 800de76:	bf00      	nop
}
 800de78:	bf00      	nop
 800de7a:	e049      	b.n	800df10 <fx_app_thread_entry+0x268>
 800de7c:	24001740 	.word	0x24001740
 800de80:	24001860 	.word	0x24001860
 800de84:	0800e3d1 	.word	0x0800e3d1
 800de88:	0801bb80 	.word	0x0801bb80
 800de8c:	24001a60 	.word	0x24001a60
 800de90:	240014bc 	.word	0x240014bc
 800de94:	24001748 	.word	0x24001748
 800de98:	0801bb90 	.word	0x0801bb90
 800de9c:	24001574 	.word	0x24001574
 800dea0:	0801bb98 	.word	0x0801bb98
 800dea4:	0801bba8 	.word	0x0801bba8
 800dea8:	0801bbb0 	.word	0x0801bbb0
 800deac:	24003f18 	.word	0x24003f18
 800deb0:	0801bbc4 	.word	0x0801bbc4
 800deb4:	58021400 	.word	0x58021400
 800deb8:	2400174c 	.word	0x2400174c
 800debc:	01c9c380 	.word	0x01c9c380
 800dec0:	0801bbcc 	.word	0x0801bbcc
 800dec4:	24001764 	.word	0x24001764
 800dec8:	e000ed00 	.word	0xe000ed00
								SCB_InvalidateICache();
							}
							else
							{

								OBInit.OptionType = OPTIONBYTE_USER;
 800decc:	4b7f      	ldr	r3, [pc, #508]	; (800e0cc <fx_app_thread_entry+0x424>)
 800dece:	2204      	movs	r2, #4
 800ded0:	601a      	str	r2, [r3, #0]
								OBInit.USERType = OB_USER_SWAP_BANK;
 800ded2:	4b7e      	ldr	r3, [pc, #504]	; (800e0cc <fx_app_thread_entry+0x424>)
 800ded4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ded8:	615a      	str	r2, [r3, #20]
								OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 800deda:	4b7c      	ldr	r3, [pc, #496]	; (800e0cc <fx_app_thread_entry+0x424>)
 800dedc:	2200      	movs	r2, #0
 800dede:	619a      	str	r2, [r3, #24]
								HAL_FLASHEx_OBProgram(&OBInit);
 800dee0:	487a      	ldr	r0, [pc, #488]	; (800e0cc <fx_app_thread_entry+0x424>)
 800dee2:	f7f5 fec7 	bl	8003c74 <HAL_FLASHEx_OBProgram>

								HAL_FLASH_OB_Launch();
 800dee6:	f7f5 fc77 	bl	80037d8 <HAL_FLASH_OB_Launch>

								HAL_NVIC_SystemReset();
 800deea:	f7f4 fdf4 	bl	8002ad6 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800deee:	f3bf 8f4f 	dsb	sy
}
 800def2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800def4:	f3bf 8f6f 	isb	sy
}
 800def8:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800defa:	4b75      	ldr	r3, [pc, #468]	; (800e0d0 <fx_app_thread_entry+0x428>)
 800defc:	2200      	movs	r2, #0
 800defe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800df02:	f3bf 8f4f 	dsb	sy
}
 800df06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df08:	f3bf 8f6f 	isb	sy
}
 800df0c:	bf00      	nop
}
 800df0e:	bf00      	nop
				while(status==1)
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	2b01      	cmp	r3, #1
 800df14:	f43f af06 	beq.w	800dd24 <fx_app_thread_entry+0x7c>
					}
				}
			}


			if(SIM800.mqttReceive.newEvent)
 800df18:	4b6e      	ldr	r3, [pc, #440]	; (800e0d4 <fx_app_thread_entry+0x42c>)
 800df1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d057      	beq.n	800dfd2 <fx_app_thread_entry+0x32a>
			{

				memcpy(rec,SIM800.mqttReceive.payload,64);
 800df22:	4a6d      	ldr	r2, [pc, #436]	; (800e0d8 <fx_app_thread_entry+0x430>)
 800df24:	4b6b      	ldr	r3, [pc, #428]	; (800e0d4 <fx_app_thread_entry+0x42c>)
 800df26:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800df2a:	4694      	mov	ip, r2
 800df2c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800df30:	4665      	mov	r5, ip
 800df32:	4626      	mov	r6, r4
 800df34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800df36:	6028      	str	r0, [r5, #0]
 800df38:	6069      	str	r1, [r5, #4]
 800df3a:	60aa      	str	r2, [r5, #8]
 800df3c:	60eb      	str	r3, [r5, #12]
 800df3e:	3410      	adds	r4, #16
 800df40:	f10c 0c10 	add.w	ip, ip, #16
 800df44:	4574      	cmp	r4, lr
 800df46:	d1f3      	bne.n	800df30 <fx_app_thread_entry+0x288>
				sd_status =  fx_file_seek(&fx_file,64*j);
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	019b      	lsls	r3, r3, #6
 800df4c:	4619      	mov	r1, r3
 800df4e:	4863      	ldr	r0, [pc, #396]	; (800e0dc <fx_app_thread_entry+0x434>)
 800df50:	f009 ff88 	bl	8017e64 <_fxe_file_seek>
 800df54:	61f8      	str	r0, [r7, #28]

				if (sd_status != FX_SUCCESS)
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <fx_app_thread_entry+0x2b8>
				{
					Error_Handler();
 800df5c:	f7f4 f864 	bl	8002028 <Error_Handler>
				}
				f=strcmp(rec,"fin");
 800df60:	495f      	ldr	r1, [pc, #380]	; (800e0e0 <fx_app_thread_entry+0x438>)
 800df62:	485d      	ldr	r0, [pc, #372]	; (800e0d8 <fx_app_thread_entry+0x430>)
 800df64:	f7f2 fad8 	bl	8000518 <strcmp>
 800df68:	6178      	str	r0, [r7, #20]
				f1=strcmp(rec,"ready");
 800df6a:	495e      	ldr	r1, [pc, #376]	; (800e0e4 <fx_app_thread_entry+0x43c>)
 800df6c:	485a      	ldr	r0, [pc, #360]	; (800e0d8 <fx_app_thread_entry+0x430>)
 800df6e:	f7f2 fad3 	bl	8000518 <strcmp>
 800df72:	60f8      	str	r0, [r7, #12]
				f2=strcmp(rec,"new firmware");
 800df74:	495c      	ldr	r1, [pc, #368]	; (800e0e8 <fx_app_thread_entry+0x440>)
 800df76:	4858      	ldr	r0, [pc, #352]	; (800e0d8 <fx_app_thread_entry+0x430>)
 800df78:	f7f2 face 	bl	8000518 <strcmp>
 800df7c:	60b8      	str	r0, [r7, #8]
				if((f!=0)&(f1!=0)&(f2!=0))
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	bf14      	ite	ne
 800df90:	2301      	movne	r3, #1
 800df92:	2300      	moveq	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	4013      	ands	r3, r2
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	461a      	mov	r2, r3
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	bf14      	ite	ne
 800dfa2:	2301      	movne	r3, #1
 800dfa4:	2300      	moveq	r3, #0
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d008      	beq.n	800dfc0 <fx_app_thread_entry+0x318>
				{
					sd_status =  fx_file_write(&fx_file, rec, sizeof(rec));
 800dfae:	2240      	movs	r2, #64	; 0x40
 800dfb0:	4949      	ldr	r1, [pc, #292]	; (800e0d8 <fx_app_thread_entry+0x430>)
 800dfb2:	484a      	ldr	r0, [pc, #296]	; (800e0dc <fx_app_thread_entry+0x434>)
 800dfb4:	f009 ff84 	bl	8017ec0 <_fxe_file_write>
 800dfb8:	61f8      	str	r0, [r7, #28]
					j++;
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	61bb      	str	r3, [r7, #24]
				}

				if (sd_status != FX_SUCCESS)
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <fx_app_thread_entry+0x322>
				{
					Error_Handler();
 800dfc6:	f7f4 f82f 	bl	8002028 <Error_Handler>
				}

				SIM800.mqttReceive.newEvent = 0;
 800dfca:	4b42      	ldr	r3, [pc, #264]	; (800e0d4 <fx_app_thread_entry+0x42c>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	while(f!=0)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f47f ae89 	bne.w	800dcec <fx_app_thread_entry+0x44>
	}




	sd_status =  fx_file_close(&fx_file);
 800dfda:	4840      	ldr	r0, [pc, #256]	; (800e0dc <fx_app_thread_entry+0x434>)
 800dfdc:	f009 fdd0 	bl	8017b80 <_fxe_file_close>
 800dfe0:	61f8      	str	r0, [r7, #28]

	if (sd_status != FX_SUCCESS)
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <fx_app_thread_entry+0x344>
	{
		Error_Handler();
 800dfe8:	f7f4 f81e 	bl	8002028 <Error_Handler>
	}

	sd_status = fx_media_flush(&sdio_disk);
 800dfec:	483f      	ldr	r0, [pc, #252]	; (800e0ec <fx_app_thread_entry+0x444>)
 800dfee:	f009 ffc7 	bl	8017f80 <_fxe_media_flush>
 800dff2:	61f8      	str	r0, [r7, #28]

	if (sd_status != FX_SUCCESS)
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <fx_app_thread_entry+0x356>
	{
		Error_Handler();
 800dffa:	f7f4 f815 	bl	8002028 <Error_Handler>
	}




	sd_status = load("current firmware");
 800dffe:	483c      	ldr	r0, [pc, #240]	; (800e0f0 <fx_app_thread_entry+0x448>)
 800e000:	f000 f878 	bl	800e0f4 <load>
 800e004:	61f8      	str	r0, [r7, #28]
	if (sd_status != FX_SUCCESS)
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <fx_app_thread_entry+0x368>
	{
		Error_Handler();
 800e00c:	f7f4 f80c 	bl	8002028 <Error_Handler>
	}

	HAL_FLASH_Unlock();
 800e010:	f7f5 fb5c 	bl	80036cc <HAL_FLASH_Unlock>

	HAL_FLASH_OB_Unlock();
 800e014:	f7f5 fbbe 	bl	8003794 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800e018:	482c      	ldr	r0, [pc, #176]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e01a:	f7f5 fecf 	bl	8003dbc <HAL_FLASHEx_OBGetConfig>

	OBInit.Banks     = FLASH_BANK_1;
 800e01e:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e020:	2201      	movs	r2, #1
 800e022:	61da      	str	r2, [r3, #28]
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800e024:	4829      	ldr	r0, [pc, #164]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e026:	f7f5 fec9 	bl	8003dbc <HAL_FLASHEx_OBGetConfig>

	if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 800e02a:	4b28      	ldr	r3, [pc, #160]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	db22      	blt.n	800e078 <fx_app_thread_entry+0x3d0>
	{
		OBInit.OptionType = OPTIONBYTE_USER;
 800e032:	4b26      	ldr	r3, [pc, #152]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e034:	2204      	movs	r2, #4
 800e036:	601a      	str	r2, [r3, #0]
		OBInit.USERType   = OB_USER_SWAP_BANK;
 800e038:	4b24      	ldr	r3, [pc, #144]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e03a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e03e:	615a      	str	r2, [r3, #20]
		OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 800e040:	4b22      	ldr	r3, [pc, #136]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e046:	619a      	str	r2, [r3, #24]
		HAL_FLASHEx_OBProgram(&OBInit);
 800e048:	4820      	ldr	r0, [pc, #128]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e04a:	f7f5 fe13 	bl	8003c74 <HAL_FLASHEx_OBProgram>

		HAL_FLASH_OB_Launch();
 800e04e:	f7f5 fbc3 	bl	80037d8 <HAL_FLASH_OB_Launch>

		HAL_NVIC_SystemReset();
 800e052:	f7f4 fd40 	bl	8002ad6 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800e056:	f3bf 8f4f 	dsb	sy
}
 800e05a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e05c:	f3bf 8f6f 	isb	sy
}
 800e060:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800e062:	4b1b      	ldr	r3, [pc, #108]	; (800e0d0 <fx_app_thread_entry+0x428>)
 800e064:	2200      	movs	r2, #0
 800e066:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e06a:	f3bf 8f4f 	dsb	sy
}
 800e06e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e070:	f3bf 8f6f 	isb	sy
}
 800e074:	bf00      	nop
}
 800e076:	e021      	b.n	800e0bc <fx_app_thread_entry+0x414>
		SCB_InvalidateICache();
	}
	else
	{

		OBInit.OptionType = OPTIONBYTE_USER;
 800e078:	4b14      	ldr	r3, [pc, #80]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e07a:	2204      	movs	r2, #4
 800e07c:	601a      	str	r2, [r3, #0]
		OBInit.USERType = OB_USER_SWAP_BANK;
 800e07e:	4b13      	ldr	r3, [pc, #76]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e084:	615a      	str	r2, [r3, #20]
		OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 800e086:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e088:	2200      	movs	r2, #0
 800e08a:	619a      	str	r2, [r3, #24]
		HAL_FLASHEx_OBProgram(&OBInit);
 800e08c:	480f      	ldr	r0, [pc, #60]	; (800e0cc <fx_app_thread_entry+0x424>)
 800e08e:	f7f5 fdf1 	bl	8003c74 <HAL_FLASHEx_OBProgram>

		HAL_FLASH_OB_Launch();
 800e092:	f7f5 fba1 	bl	80037d8 <HAL_FLASH_OB_Launch>

		HAL_NVIC_SystemReset();
 800e096:	f7f4 fd1e 	bl	8002ad6 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800e09a:	f3bf 8f4f 	dsb	sy
}
 800e09e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e0a0:	f3bf 8f6f 	isb	sy
}
 800e0a4:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800e0a6:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <fx_app_thread_entry+0x428>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e0ae:	f3bf 8f4f 	dsb	sy
}
 800e0b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e0b4:	f3bf 8f6f 	isb	sy
}
 800e0b8:	bf00      	nop
}
 800e0ba:	bf00      	nop

		SCB_InvalidateICache();
	}
	tx_thread_sleep(40);
 800e0bc:	2028      	movs	r0, #40	; 0x28
 800e0be:	f00b fe35 	bl	8019d2c <_tx_thread_sleep>


	/* USER CODE END fx_app_thread_entry 1 */
}
 800e0c2:	bf00      	nop
 800e0c4:	3724      	adds	r7, #36	; 0x24
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	24001764 	.word	0x24001764
 800e0d0:	e000ed00 	.word	0xe000ed00
 800e0d4:	240014bc 	.word	0x240014bc
 800e0d8:	24001574 	.word	0x24001574
 800e0dc:	24003f18 	.word	0x24003f18
 800e0e0:	0801bbd8 	.word	0x0801bbd8
 800e0e4:	0801bbc4 	.word	0x0801bbc4
 800e0e8:	0801bb98 	.word	0x0801bb98
 800e0ec:	24001a60 	.word	0x24001a60
 800e0f0:	0801bbb0 	.word	0x0801bbb0

0800e0f4 <load>:
/* USER CODE BEGIN 1 */



UINT load(CHAR * file_name)
{
 800e0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0f8:	b08b      	sub	sp, #44	; 0x2c
 800e0fa:	af02      	add	r7, sp, #8
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	466b      	mov	r3, sp
 800e100:	461e      	mov	r6, r3
	int k =0;
 800e102:	2300      	movs	r3, #0
 800e104:	61fb      	str	r3, [r7, #28]
	ULONG bytes_read;
	ULONG offset=32;
 800e106:	2320      	movs	r3, #32
 800e108:	617b      	str	r3, [r7, #20]
	// int j=0;
	CHAR read_buffer[offset];
 800e10a:	6979      	ldr	r1, [r7, #20]
 800e10c:	460b      	mov	r3, r1
 800e10e:	3b01      	subs	r3, #1
 800e110:	613b      	str	r3, [r7, #16]
 800e112:	2300      	movs	r3, #0
 800e114:	4688      	mov	r8, r1
 800e116:	4699      	mov	r9, r3
 800e118:	f04f 0200 	mov.w	r2, #0
 800e11c:	f04f 0300 	mov.w	r3, #0
 800e120:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e124:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e128:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e12c:	2300      	movs	r3, #0
 800e12e:	460c      	mov	r4, r1
 800e130:	461d      	mov	r5, r3
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	f04f 0300 	mov.w	r3, #0
 800e13a:	00eb      	lsls	r3, r5, #3
 800e13c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e140:	00e2      	lsls	r2, r4, #3
 800e142:	1dcb      	adds	r3, r1, #7
 800e144:	08db      	lsrs	r3, r3, #3
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	ebad 0d03 	sub.w	sp, sp, r3
 800e14c:	ab02      	add	r3, sp, #8
 800e14e:	3300      	adds	r3, #0
 800e150:	60fb      	str	r3, [r7, #12]
	UINT sd_status;
	sd_status =  fx_file_open(&sdio_disk, &fx_file, file_name, FX_OPEN_FOR_READ);
 800e152:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	2300      	movs	r3, #0
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	493e      	ldr	r1, [pc, #248]	; (800e258 <load+0x164>)
 800e15e:	483f      	ldr	r0, [pc, #252]	; (800e25c <load+0x168>)
 800e160:	f009 fd96 	bl	8017c90 <_fxe_file_open>
 800e164:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <load+0x7c>
	{
		Error_Handler();
 800e16c:	f7f3 ff5c 	bl	8002028 <Error_Handler>
	}
	HAL_FLASH_Unlock();
 800e170:	f7f5 faac 	bl	80036cc <HAL_FLASH_Unlock>


	FirstSector = GetSector(FLASH_USER_START_ADDR);
 800e174:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 800e178:	f7f3 fe7e 	bl	8001e78 <GetSector>
 800e17c:	4603      	mov	r3, r0
 800e17e:	4a38      	ldr	r2, [pc, #224]	; (800e260 <load+0x16c>)
 800e180:	6013      	str	r3, [r2, #0]
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800e182:	4838      	ldr	r0, [pc, #224]	; (800e264 <load+0x170>)
 800e184:	f7f3 fe78 	bl	8001e78 <GetSector>
 800e188:	4602      	mov	r2, r0
 800e18a:	4b35      	ldr	r3, [pc, #212]	; (800e260 <load+0x16c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	3301      	adds	r3, #1
 800e192:	4a35      	ldr	r2, [pc, #212]	; (800e268 <load+0x174>)
 800e194:	6013      	str	r3, [r2, #0]

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800e196:	4b35      	ldr	r3, [pc, #212]	; (800e26c <load+0x178>)
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800e19c:	4b33      	ldr	r3, [pc, #204]	; (800e26c <load+0x178>)
 800e19e:	2220      	movs	r2, #32
 800e1a0:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 800e1a2:	4b32      	ldr	r3, [pc, #200]	; (800e26c <load+0x178>)
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 800e1a8:	4b2d      	ldr	r3, [pc, #180]	; (800e260 <load+0x16c>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a2f      	ldr	r2, [pc, #188]	; (800e26c <load+0x178>)
 800e1ae:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 800e1b0:	4b2d      	ldr	r3, [pc, #180]	; (800e268 <load+0x174>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a2d      	ldr	r2, [pc, #180]	; (800e26c <load+0x178>)
 800e1b6:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800e1b8:	492d      	ldr	r1, [pc, #180]	; (800e270 <load+0x17c>)
 800e1ba:	482c      	ldr	r0, [pc, #176]	; (800e26c <load+0x178>)
 800e1bc:	f7f5 fc90 	bl	8003ae0 <HAL_FLASHEx_Erase>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02a      	beq.n	800e21c <load+0x128>
	{

		while (1)
 800e1c6:	e7fe      	b.n	800e1c6 <load+0xd2>
		}
	}
	while(sd_status != FX_END_OF_FILE)
	{

		sd_status =  fx_file_seek(&fx_file,k*offset);
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	fb02 f303 	mul.w	r3, r2, r3
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4821      	ldr	r0, [pc, #132]	; (800e258 <load+0x164>)
 800e1d4:	f009 fe46 	bl	8017e64 <_fxe_file_seek>
 800e1d8:	61b8      	str	r0, [r7, #24]
		if (sd_status != FX_SUCCESS)
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d001      	beq.n	800e1e4 <load+0xf0>
		{
			Error_Handler();
 800e1e0:	f7f3 ff22 	bl	8002028 <Error_Handler>
		}


		sd_status =  fx_file_read(&fx_file, read_buffer,32, &bytes_read);
 800e1e4:	f107 0308 	add.w	r3, r7, #8
 800e1e8:	2220      	movs	r2, #32
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	481a      	ldr	r0, [pc, #104]	; (800e258 <load+0x164>)
 800e1ee:	f009 fdd1 	bl	8017d94 <_fxe_file_read>
 800e1f2:	61b8      	str	r0, [r7, #24]




		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)read_buffer)) == HAL_OK)
 800e1f4:	4b1f      	ldr	r3, [pc, #124]	; (800e274 <load+0x180>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f7f5 f9d3 	bl	80035a8 <HAL_FLASH_Program>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d105      	bne.n	800e214 <load+0x120>
		{
			Address = Address + 32; // increment for the next Flash word
 800e208:	4b1a      	ldr	r3, [pc, #104]	; (800e274 <load+0x180>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3320      	adds	r3, #32
 800e20e:	4a19      	ldr	r2, [pc, #100]	; (800e274 <load+0x180>)
 800e210:	6013      	str	r3, [r2, #0]
 800e212:	e000      	b.n	800e216 <load+0x122>
			//ram_adrr = ram_adrr +32;
		}
		else
		{
			while (1)
 800e214:	e7fe      	b.n	800e214 <load+0x120>
			{
				//BSP_LED_On(LED3);
			}
		}
		k++;
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	3301      	adds	r3, #1
 800e21a:	61fb      	str	r3, [r7, #28]
	while(sd_status != FX_END_OF_FILE)
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	2b09      	cmp	r3, #9
 800e220:	d1d2      	bne.n	800e1c8 <load+0xd4>

	}
	HAL_FLASH_Lock();
 800e222:	f7f5 fa8d 	bl	8003740 <HAL_FLASH_Lock>



	sd_status =  fx_file_close(&fx_file);
 800e226:	480c      	ldr	r0, [pc, #48]	; (800e258 <load+0x164>)
 800e228:	f009 fcaa 	bl	8017b80 <_fxe_file_close>
 800e22c:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <load+0x144>
	{
		Error_Handler();
 800e234:	f7f3 fef8 	bl	8002028 <Error_Handler>
	}

	sd_status =  fx_media_close(&sdio_disk);
 800e238:	4808      	ldr	r0, [pc, #32]	; (800e25c <load+0x168>)
 800e23a:	f009 fe75 	bl	8017f28 <_fxe_media_close>
 800e23e:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <load+0x156>
	{
		Error_Handler();
 800e246:	f7f3 feef 	bl	8002028 <Error_Handler>
	}
	return(sd_status);
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	46b5      	mov	sp, r6
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3724      	adds	r7, #36	; 0x24
 800e252:	46bd      	mov	sp, r7
 800e254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e258:	24003f18 	.word	0x24003f18
 800e25c:	24001a60 	.word	0x24001a60
 800e260:	24001738 	.word	0x24001738
 800e264:	0813ffff 	.word	0x0813ffff
 800e268:	2400173c 	.word	0x2400173c
 800e26c:	24001750 	.word	0x24001750
 800e270:	24001744 	.word	0x24001744
 800e274:	24001740 	.word	0x24001740

0800e278 <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDMMC1_SD_Init();
 800e284:	f7f3 fed6 	bl	8002034 <MX_SDMMC1_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 800e288:	68fb      	ldr	r3, [r7, #12]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */
#if (FX_STM32_SD_INIT == 1)
  if(HAL_SD_DeInit(&hsd1) != HAL_OK)
 800e2a0:	4806      	ldr	r0, [pc, #24]	; (800e2bc <fx_stm32_sd_deinit+0x28>)
 800e2a2:	f7fa fadf 	bl	8008864 <HAL_SD_DeInit>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	60fb      	str	r3, [r7, #12]
#endif
  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	240015b4 	.word	0x240015b4

0800e2c0 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 800e2cc:	4806      	ldr	r0, [pc, #24]	; (800e2e8 <fx_stm32_sd_get_status+0x28>)
 800e2ce:	f7fb f985 	bl	80095dc <HAL_SD_GetCardState>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b04      	cmp	r3, #4
 800e2d6:	d001      	beq.n	800e2dc <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	240015b4 	.word	0x240015b4

0800e2ec <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	68b9      	ldr	r1, [r7, #8]
 800e304:	4806      	ldr	r0, [pc, #24]	; (800e320 <fx_stm32_sd_read_blocks+0x34>)
 800e306:	f7fa fad3 	bl	80088b0 <HAL_SD_ReadBlocks_DMA>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 800e310:	2301      	movs	r3, #1
 800e312:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 800e314:	697b      	ldr	r3, [r7, #20]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3718      	adds	r7, #24
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	240015b4 	.word	0x240015b4

0800e324 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	68b9      	ldr	r1, [r7, #8]
 800e33c:	4806      	ldr	r0, [pc, #24]	; (800e358 <fx_stm32_sd_write_blocks+0x34>)
 800e33e:	f7fa fb5f 	bl	8008a00 <HAL_SD_WriteBlocks_DMA>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 800e348:	2301      	movs	r3, #1
 800e34a:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 800e34c:	697b      	ldr	r3, [r7, #20]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3718      	adds	r7, #24
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	240015b4 	.word	0x240015b4

0800e35c <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 800e364:	4803      	ldr	r0, [pc, #12]	; (800e374 <HAL_SD_TxCpltCallback+0x18>)
 800e366:	f00c fd23 	bl	801adb0 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	240040f8 	.word	0x240040f8

0800e378 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800e380:	4803      	ldr	r0, [pc, #12]	; (800e390 <HAL_SD_RxCpltCallback+0x18>)
 800e382:	f00c fd15 	bl	801adb0 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	24004114 	.word	0x24004114

0800e394 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 800e39c:	f00c f826 	bl	801a3ec <_tx_time_get>
 800e3a0:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e3a2:	e007      	b.n	800e3b4 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff ff8b 	bl	800e2c0 <fx_stm32_sd_get_status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d101      	bne.n	800e3b4 <check_sd_status+0x20>
    {
      return 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e008      	b.n	800e3c6 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e3b4:	f00c f81a 	bl	801a3ec <_tx_time_get>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3c2:	d3ef      	bcc.n	800e3a4 <check_sd_status+0x10>
    }
  }

  return 1;
 800e3c4:	2301      	movs	r3, #1
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 800e3d8:	4b8e      	ldr	r3, [pc, #568]	; (800e614 <fx_stm32_sd_driver+0x244>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d10a      	bne.n	800e3f6 <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	f7ff ffd7 	bl	800e394 <check_sd_status>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2290      	movs	r2, #144	; 0x90
 800e3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e3f4:	e10a      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fc:	f003 0303 	and.w	r3, r3, #3
 800e400:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e408:	2b08      	cmp	r3, #8
 800e40a:	f200 80f5 	bhi.w	800e5f8 <fx_stm32_sd_driver+0x228>
 800e40e:	a201      	add	r2, pc, #4	; (adr r2, 800e414 <fx_stm32_sd_driver+0x44>)
 800e410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e414:	0800e4cf 	.word	0x0800e4cf
 800e418:	0800e503 	.word	0x0800e503
 800e41c:	0800e535 	.word	0x0800e535
 800e420:	0800e53f 	.word	0x0800e53f
 800e424:	0800e439 	.word	0x0800e439
 800e428:	0800e549 	.word	0x0800e549
 800e42c:	0800e5f9 	.word	0x0800e5f9
 800e430:	0800e5dd 	.word	0x0800e5dd
 800e434:	0800e499 	.word	0x0800e499
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 800e440:	231c      	movs	r3, #28
 800e442:	2200      	movs	r2, #0
 800e444:	4974      	ldr	r1, [pc, #464]	; (800e618 <fx_stm32_sd_driver+0x248>)
 800e446:	4875      	ldr	r0, [pc, #468]	; (800e61c <fx_stm32_sd_driver+0x24c>)
 800e448:	f00c fb9c 	bl	801ab84 <_txe_semaphore_create>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d108      	bne.n	800e464 <fx_stm32_sd_driver+0x94>
 800e452:	231c      	movs	r3, #28
 800e454:	2200      	movs	r2, #0
 800e456:	4972      	ldr	r1, [pc, #456]	; (800e620 <fx_stm32_sd_driver+0x250>)
 800e458:	4872      	ldr	r0, [pc, #456]	; (800e624 <fx_stm32_sd_driver+0x254>)
 800e45a:	f00c fb93 	bl	801ab84 <_txe_semaphore_create>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d003      	beq.n	800e46c <fx_stm32_sd_driver+0x9c>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2290      	movs	r2, #144	; 0x90
 800e468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 800e46c:	4b69      	ldr	r3, [pc, #420]	; (800e614 <fx_stm32_sd_driver+0x244>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	f040 80c6 	bne.w	800e602 <fx_stm32_sd_driver+0x232>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 800e476:	2000      	movs	r0, #0
 800e478:	f7ff fefe 	bl	800e278 <fx_stm32_sd_init>
 800e47c:	4603      	mov	r3, r0
 800e47e:	613b      	str	r3, [r7, #16]

        if (status == 0)
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d103      	bne.n	800e48e <fx_stm32_sd_driver+0xbe>
        {
          is_initialized = 1;
 800e486:	4b63      	ldr	r3, [pc, #396]	; (800e614 <fx_stm32_sd_driver+0x244>)
 800e488:	2201      	movs	r2, #1
 800e48a:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 800e48c:	e0b9      	b.n	800e602 <fx_stm32_sd_driver+0x232>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2290      	movs	r2, #144	; 0x90
 800e492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e496:	e0b4      	b.n	800e602 <fx_stm32_sd_driver+0x232>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      status = fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE);
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	f7ff fef7 	bl	800e294 <fx_stm32_sd_deinit>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	613b      	str	r3, [r7, #16]

      if (status != 0)
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d004      	beq.n	800e4ba <fx_stm32_sd_driver+0xea>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2290      	movs	r2, #144	; 0x90
 800e4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e4b8:	e002      	b.n	800e4c0 <fx_stm32_sd_driver+0xf0>
      }
      else
      {
        is_initialized = 0;
 800e4ba:	4b56      	ldr	r3, [pc, #344]	; (800e614 <fx_stm32_sd_driver+0x244>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	601a      	str	r2, [r3, #0]
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 800e4c0:	4856      	ldr	r0, [pc, #344]	; (800e61c <fx_stm32_sd_driver+0x24c>)
 800e4c2:	f00c fbf5 	bl	801acb0 <_txe_semaphore_delete>
 800e4c6:	4857      	ldr	r0, [pc, #348]	; (800e624 <fx_stm32_sd_driver+0x254>)
 800e4c8:	f00c fbf2 	bl	801acb0 <_txe_semaphore_delete>

      break;
 800e4cc:	e09e      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2290      	movs	r2, #144	; 0x90
 800e4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e0:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f89c 	bl	800e628 <sd_read_data>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f040 8087 	bne.w	800e606 <fx_stm32_sd_driver+0x236>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e500:	e081      	b.n	800e606 <fx_stm32_sd_driver+0x236>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2290      	movs	r2, #144	; 0x90
 800e506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e514:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f940 	bl	800e7a4 <sd_write_data>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d16f      	bne.n	800e60a <fx_stm32_sd_driver+0x23a>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e532:	e06a      	b.n	800e60a <fx_stm32_sd_driver+0x23a>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e53c:	e066      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 800e546:	e061      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2100      	movs	r1, #0
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f868 	bl	800e628 <sd_read_data>
 800e558:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d004      	beq.n	800e56a <fx_stm32_sd_driver+0x19a>
      {
        media_ptr->fx_media_driver_status = status;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800e568:	e050      	b.n	800e60c <fx_stm32_sd_driver+0x23c>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800e574:	f107 0308 	add.w	r3, r7, #8
 800e578:	f107 020c 	add.w	r2, r7, #12
 800e57c:	2100      	movs	r1, #0
 800e57e:	f006 ff7b 	bl	8015478 <_fx_partition_offset_calculate>
 800e582:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d004      	beq.n	800e594 <fx_stm32_sd_driver+0x1c4>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2290      	movs	r2, #144	; 0x90
 800e58e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800e592:	e03b      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d01b      	beq.n	800e5d2 <fx_stm32_sd_driver+0x202>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800e59a:	2000      	movs	r0, #0
 800e59c:	f7ff fefa 	bl	800e394 <check_sd_status>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d004      	beq.n	800e5b0 <fx_stm32_sd_driver+0x1e0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2290      	movs	r2, #144	; 0x90
 800e5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800e5ae:	e02d      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e5b0:	68f9      	ldr	r1, [r7, #12]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f834 	bl	800e628 <sd_read_data>
 800e5c0:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <fx_stm32_sd_driver+0x202>
        {
          media_ptr->fx_media_driver_status = status;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800e5d0:	e01c      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e5da:	e017      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f8dc 	bl	800e7a4 <sd_write_data>
 800e5ec:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 800e5f6:	e009      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2290      	movs	r2, #144	; 0x90
 800e5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e600:	e004      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
      break;
 800e602:	bf00      	nop
 800e604:	e002      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
      break;
 800e606:	bf00      	nop
 800e608:	e000      	b.n	800e60c <fx_stm32_sd_driver+0x23c>
      break;
 800e60a:	bf00      	nop
    }
  }
}
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	24004340 	.word	0x24004340
 800e618:	0801bbdc 	.word	0x0801bbdc
 800e61c:	24004114 	.word	0x24004114
 800e620:	0801bbf8 	.word	0x0801bbf8
 800e624:	240040f8 	.word	0x240040f8

0800e628 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b090      	sub	sp, #64	; 0x40
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d061      	beq.n	800e704 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e646:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 800e648:	2300      	movs	r3, #0
 800e64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e64c:	e04c      	b.n	800e6e8 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	1c53      	adds	r3, r2, #1
 800e652:	60bb      	str	r3, [r7, #8]
 800e654:	2301      	movs	r3, #1
 800e656:	4950      	ldr	r1, [pc, #320]	; (800e798 <sd_read_data+0x170>)
 800e658:	2000      	movs	r0, #0
 800e65a:	f7ff fe47 	bl	800e2ec <fx_stm32_sd_read_blocks>
 800e65e:	4603      	mov	r3, r0
 800e660:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 800e668:	2390      	movs	r3, #144	; 0x90
 800e66a:	e090      	b.n	800e78e <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800e66c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e670:	484a      	ldr	r0, [pc, #296]	; (800e79c <sd_read_data+0x174>)
 800e672:	f00c fb5b 	bl	801ad2c <_txe_semaphore_get>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d001      	beq.n	800e680 <sd_read_data+0x58>
 800e67c:	2390      	movs	r3, #144	; 0x90
 800e67e:	e086      	b.n	800e78e <sd_read_data+0x166>
 800e680:	4b45      	ldr	r3, [pc, #276]	; (800e798 <sd_read_data+0x170>)
 800e682:	633b      	str	r3, [r7, #48]	; 0x30
 800e684:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e688:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dd1d      	ble.n	800e6cc <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	f003 021f 	and.w	r2, r3, #31
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	4413      	add	r3, r2
 800e69a:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800e6a0:	f3bf 8f4f 	dsb	sy
}
 800e6a4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e6a6:	4a3e      	ldr	r2, [pc, #248]	; (800e7a0 <sd_read_data+0x178>)
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	3320      	adds	r3, #32
 800e6b2:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	3b20      	subs	r3, #32
 800e6b8:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dcf2      	bgt.n	800e6a6 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800e6c0:	f3bf 8f4f 	dsb	sy
}
 800e6c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e6c6:	f3bf 8f6f 	isb	sy
}
 800e6ca:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800e6cc:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e6ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6d4:	4830      	ldr	r0, [pc, #192]	; (800e798 <sd_read_data+0x170>)
 800e6d6:	f009 fa43 	bl	8017b60 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800e6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e6e0:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 800e6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d8ae      	bhi.n	800e64e <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 800e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d102      	bne.n	800e6fe <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6fc:	e046      	b.n	800e78c <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800e6fe:	2321      	movs	r3, #33	; 0x21
 800e700:	63bb      	str	r3, [r7, #56]	; 0x38
 800e702:	e043      	b.n	800e78c <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	68ba      	ldr	r2, [r7, #8]
 800e70e:	2000      	movs	r0, #0
 800e710:	f7ff fdec 	bl	800e2ec <fx_stm32_sd_read_blocks>
 800e714:	4603      	mov	r3, r0
 800e716:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 800e71e:	2390      	movs	r3, #144	; 0x90
 800e720:	e035      	b.n	800e78e <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800e722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e726:	481d      	ldr	r0, [pc, #116]	; (800e79c <sd_read_data+0x174>)
 800e728:	f00c fb00 	bl	801ad2c <_txe_semaphore_get>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <sd_read_data+0x10e>
 800e732:	2390      	movs	r3, #144	; 0x90
 800e734:	e02b      	b.n	800e78e <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	025b      	lsls	r3, r3, #9
 800e740:	623a      	str	r2, [r7, #32]
 800e742:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	2b00      	cmp	r3, #0
 800e748:	dd1d      	ble.n	800e786 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	f003 021f 	and.w	r2, r3, #31
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	4413      	add	r3, r2
 800e754:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e75a:	f3bf 8f4f 	dsb	sy
}
 800e75e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e760:	4a0f      	ldr	r2, [pc, #60]	; (800e7a0 <sd_read_data+0x178>)
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	3320      	adds	r3, #32
 800e76c:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	3b20      	subs	r3, #32
 800e772:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	2b00      	cmp	r3, #0
 800e778:	dcf2      	bgt.n	800e760 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 800e77a:	f3bf 8f4f 	dsb	sy
}
 800e77e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e780:	f3bf 8f6f 	isb	sy
}
 800e784:	bf00      	nop
}
 800e786:	bf00      	nop
#endif

    status = FX_SUCCESS;
 800e788:	2300      	movs	r3, #0
 800e78a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3740      	adds	r7, #64	; 0x40
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	24004140 	.word	0x24004140
 800e79c:	24004114 	.word	0x24004114
 800e7a0:	e000ed00 	.word	0xe000ed00

0800e7a4 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b090      	sub	sp, #64	; 0x40
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d061      	beq.n	800e880 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7c2:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7c8:	e04c      	b.n	800e864 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e7ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7ce:	4951      	ldr	r1, [pc, #324]	; (800e914 <sd_write_data+0x170>)
 800e7d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7d2:	f009 f9c5 	bl	8017b60 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800e7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7de:	4b4d      	ldr	r3, [pc, #308]	; (800e914 <sd_write_data+0x170>)
 800e7e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800e7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	dd1d      	ble.n	800e82a <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	f003 021f 	and.w	r2, r3, #31
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	4413      	add	r3, r2
 800e7f8:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800e7fe:	f3bf 8f4f 	dsb	sy
}
 800e802:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e804:	4a44      	ldr	r2, [pc, #272]	; (800e918 <sd_write_data+0x174>)
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	3320      	adds	r3, #32
 800e810:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	3b20      	subs	r3, #32
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	dcf2      	bgt.n	800e804 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800e81e:	f3bf 8f4f 	dsb	sy
}
 800e822:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e824:	f3bf 8f6f 	isb	sy
}
 800e828:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800e82a:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	1c53      	adds	r3, r2, #1
 800e830:	60bb      	str	r3, [r7, #8]
 800e832:	2301      	movs	r3, #1
 800e834:	4937      	ldr	r1, [pc, #220]	; (800e914 <sd_write_data+0x170>)
 800e836:	2000      	movs	r0, #0
 800e838:	f7ff fd74 	bl	800e324 <fx_stm32_sd_write_blocks>
 800e83c:	4603      	mov	r3, r0
 800e83e:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800e840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 800e846:	2390      	movs	r3, #144	; 0x90
 800e848:	e05f      	b.n	800e90a <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800e84a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e84e:	4833      	ldr	r0, [pc, #204]	; (800e91c <sd_write_data+0x178>)
 800e850:	f00c fa6c 	bl	801ad2c <_txe_semaphore_get>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <sd_write_data+0xba>
 800e85a:	2390      	movs	r3, #144	; 0x90
 800e85c:	e055      	b.n	800e90a <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 800e85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e860:	3301      	adds	r3, #1
 800e862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d8ae      	bhi.n	800e7ca <sd_write_data+0x26>
    }

    if (i == num_sectors)
 800e86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d102      	bne.n	800e87a <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 800e874:	2300      	movs	r3, #0
 800e876:	63bb      	str	r3, [r7, #56]	; 0x38
 800e878:	e046      	b.n	800e908 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800e87a:	2321      	movs	r3, #33	; 0x21
 800e87c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e87e:	e043      	b.n	800e908 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	025b      	lsls	r3, r3, #9
 800e88a:	623a      	str	r2, [r7, #32]
 800e88c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	2b00      	cmp	r3, #0
 800e892:	dd1d      	ble.n	800e8d0 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	f003 021f 	and.w	r2, r3, #31
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	4413      	add	r3, r2
 800e89e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e8a4:	f3bf 8f4f 	dsb	sy
}
 800e8a8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e8aa:	4a1b      	ldr	r2, [pc, #108]	; (800e918 <sd_write_data+0x174>)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	3320      	adds	r3, #32
 800e8b6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	3b20      	subs	r3, #32
 800e8bc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dcf2      	bgt.n	800e8aa <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 800e8c4:	f3bf 8f4f 	dsb	sy
}
 800e8c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e8ca:	f3bf 8f6f 	isb	sy
}
 800e8ce:	bf00      	nop
}
 800e8d0:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	2000      	movs	r0, #0
 800e8de:	f7ff fd21 	bl	800e324 <fx_stm32_sd_write_blocks>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 800e8ec:	2390      	movs	r3, #144	; 0x90
 800e8ee:	e00c      	b.n	800e90a <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800e8f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8f4:	4809      	ldr	r0, [pc, #36]	; (800e91c <sd_write_data+0x178>)
 800e8f6:	f00c fa19 	bl	801ad2c <_txe_semaphore_get>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <sd_write_data+0x160>
 800e900:	2390      	movs	r3, #144	; 0x90
 800e902:	e002      	b.n	800e90a <sd_write_data+0x166>

    status = FX_SUCCESS;
 800e904:	2300      	movs	r3, #0
 800e906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3740      	adds	r7, #64	; 0x40
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	24004140 	.word	0x24004140
 800e918:	e000ed00 	.word	0xe000ed00
 800e91c:	240040f8 	.word	0x240040f8

0800e920 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800e920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e924:	b09e      	sub	sp, #120	; 0x78
 800e926:	af04      	add	r7, sp, #16
 800e928:	61f8      	str	r0, [r7, #28]
 800e92a:	61b9      	str	r1, [r7, #24]
 800e92c:	617a      	str	r2, [r7, #20]
 800e92e:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 800e948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94a:	015b      	lsls	r3, r3, #5
 800e94c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <_fx_directory_entry_read+0x3e>
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 80a1 	beq.w	800eaa0 <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800e962:	69fa      	ldr	r2, [r7, #28]
 800e964:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e966:	fb02 f303 	mul.w	r3, r2, r3
 800e96a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d101      	bne.n	800e976 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800e972:	2302      	movs	r3, #2
 800e974:	e355      	b.n	800f022 <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800e976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e97e:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800e980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e984:	fbb3 f2f2 	udiv	r2, r3, r2
 800e988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e98a:	fb01 f202 	mul.w	r2, r1, r2
 800e98e:	1a9b      	subs	r3, r3, r2
 800e990:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e998:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d028      	beq.n	800e9f6 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d01e      	beq.n	800e9ea <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800e9b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d319      	bcc.n	800e9ea <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800e9c2:	4299      	cmp	r1, r3
 800e9c4:	bf08      	it	eq
 800e9c6:	4290      	cmpeq	r0, r2
 800e9c8:	d10f      	bne.n	800e9ea <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d109      	bne.n	800e9ea <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9da:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e0:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	651a      	str	r2, [r3, #80]	; 0x50
 800e9e8:	e00a      	b.n	800ea00 <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ee:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	667b      	str	r3, [r7, #100]	; 0x64
 800e9f4:	e024      	b.n	800ea40 <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9fa:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800ea00:	e01e      	b.n	800ea40 <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800ea02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d907      	bls.n	800ea18 <_fx_directory_entry_read+0xf8>
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea0e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ea12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d301      	bcc.n	800ea1c <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 800ea18:	2308      	movs	r3, #8
 800ea1a:	e302      	b.n	800f022 <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ea1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea20:	461a      	mov	r2, r3
 800ea22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea24:	69f8      	ldr	r0, [r7, #28]
 800ea26:	f007 f891 	bl	8015b4c <_fx_utility_FAT_entry_read>
 800ea2a:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 800ea2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800ea32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea34:	e2f5      	b.n	800f022 <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800ea3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800ea40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d3dc      	bcc.n	800ea02 <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ea4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4e:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ea50:	69f9      	ldr	r1, [r7, #28]
 800ea52:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ea54:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ea58:	4413      	add	r3, r2
 800ea5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea5c:	4413      	add	r3, r2
 800ea5e:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ea60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea62:	2200      	movs	r2, #0
 800ea64:	60bb      	str	r3, [r7, #8]
 800ea66:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ea6c:	2203      	movs	r2, #3
 800ea6e:	9202      	str	r2, [sp, #8]
 800ea70:	2201      	movs	r2, #1
 800ea72:	9201      	str	r2, [sp, #4]
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea7a:	69f8      	ldr	r0, [r7, #28]
 800ea7c:	f008 fc74 	bl	8017368 <_fx_utility_logical_sector_read>
 800ea80:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800ea82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 800ea88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea8a:	e2ca      	b.n	800f022 <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea92:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea96:	fb01 f202 	mul.w	r2, r1, r2
 800ea9a:	1a9b      	subs	r3, r3, r2
 800ea9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ea9e:	e02f      	b.n	800eb00 <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaa6:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800eaae:	4413      	add	r3, r2
 800eab0:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800eab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab4:	2200      	movs	r2, #0
 800eab6:	603b      	str	r3, [r7, #0]
 800eab8:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800eabe:	2203      	movs	r2, #3
 800eac0:	9202      	str	r2, [sp, #8]
 800eac2:	2201      	movs	r2, #1
 800eac4:	9201      	str	r2, [sp, #4]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eacc:	69f8      	ldr	r0, [r7, #28]
 800eace:	f008 fc4b 	bl	8017368 <_fx_utility_logical_sector_read>
 800ead2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800ead4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	e2a1      	b.n	800f022 <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800eade:	2300      	movs	r3, #0
 800eae0:	657b      	str	r3, [r7, #84]	; 0x54
 800eae2:	2300      	movs	r3, #0
 800eae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae8:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf0:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800eaf6:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800eafa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	689a      	ldr	r2, [r3, #8]
 800eb04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb06:	4413      	add	r3, r2
 800eb08:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 800eb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4698      	mov	r8, r3
 800eb10:	4691      	mov	r9, r2
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb1c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	2200      	movs	r2, #0
 800eb22:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2200      	movs	r2, #0
 800eb28:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800eb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb36:	330b      	adds	r3, #11
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b0f      	cmp	r3, #15
 800eb3c:	f040 8129 	bne.w	800ed92 <_fx_directory_entry_read+0x472>
 800eb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	2be5      	cmp	r3, #229	; 0xe5
 800eb46:	f000 8124 	beq.w	800ed92 <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 800eb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	f003 021f 	and.w	r2, r3, #31
 800eb52:	4613      	mov	r3, r2
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	4413      	add	r3, r2
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	3b0d      	subs	r3, #13
 800eb5e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800eb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f003 031f 	and.w	r3, r3, #31
 800eb68:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 800eb6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb6c:	2bfe      	cmp	r3, #254	; 0xfe
 800eb6e:	d908      	bls.n	800eb82 <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800eb70:	2301      	movs	r3, #1
 800eb72:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800eb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	f003 021f 	and.w	r2, r3, #31
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	619a      	str	r2, [r3, #24]
 800eb80:	e015      	b.n	800ebae <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	3304      	adds	r3, #4
 800eb86:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 800eb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb8a:	330e      	adds	r3, #14
 800eb8c:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb94:	4413      	add	r3, r2
 800eb96:	2200      	movs	r2, #0
 800eb98:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 800eb9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800eba0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d202      	bcs.n	800ebae <_fx_directory_entry_read+0x28e>
 800eba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebaa:	2bff      	cmp	r3, #255	; 0xff
 800ebac:	d9ef      	bls.n	800eb8e <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800ebae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	f003 031f 	and.w	r3, r3, #31
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 800ebba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d168      	bne.n	800ec92 <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	667b      	str	r3, [r7, #100]	; 0x64
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	663b      	str	r3, [r7, #96]	; 0x60
 800ebc8:	e060      	b.n	800ec8c <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 800ebca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebcc:	2b0b      	cmp	r3, #11
 800ebce:	d057      	beq.n	800ec80 <_fx_directory_entry_read+0x360>
 800ebd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebd2:	2b1a      	cmp	r3, #26
 800ebd4:	d054      	beq.n	800ec80 <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 800ebd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebd8:	2b0d      	cmp	r3, #13
 800ebda:	d102      	bne.n	800ebe2 <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 800ebdc:	230c      	movs	r3, #12
 800ebde:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800ebe0:	e051      	b.n	800ec86 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800ebe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebe8:	4413      	add	r3, r2
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d014      	beq.n	800ec1a <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800ebf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebf6:	4413      	add	r3, r2
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2bff      	cmp	r3, #255	; 0xff
 800ebfc:	d105      	bne.n	800ec0a <_fx_directory_entry_read+0x2ea>
 800ebfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec02:	4413      	add	r3, r2
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2bff      	cmp	r3, #255	; 0xff
 800ec08:	d007      	beq.n	800ec1a <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec12:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 800ec1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec1e:	4413      	add	r3, r2
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d02e      	beq.n	800ec84 <_fx_directory_entry_read+0x364>
 800ec26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec2a:	4413      	add	r3, r2
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	2bff      	cmp	r3, #255	; 0xff
 800ec30:	d028      	beq.n	800ec84 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800ec32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec34:	4613      	mov	r3, r2
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	4413      	add	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	441a      	add	r2, r3
 800ec3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec40:	4413      	add	r3, r2
 800ec42:	2bfe      	cmp	r3, #254	; 0xfe
 800ec44:	d908      	bls.n	800ec58 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800ec46:	2301      	movs	r3, #1
 800ec48:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec4e:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800ec56:	e01c      	b.n	800ec92 <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 800ec58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec5c:	18d1      	adds	r1, r2, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	6818      	ldr	r0, [r3, #0]
 800ec62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec64:	4613      	mov	r3, r2
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	441a      	add	r2, r3
 800ec6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec70:	4413      	add	r3, r2
 800ec72:	4403      	add	r3, r0
 800ec74:	780a      	ldrb	r2, [r1, #0]
 800ec76:	701a      	strb	r2, [r3, #0]

                    j++;
 800ec78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	663b      	str	r3, [r7, #96]	; 0x60
 800ec7e:	e002      	b.n	800ec86 <_fx_directory_entry_read+0x366>
                        continue;
 800ec80:	bf00      	nop
 800ec82:	e000      	b.n	800ec86 <_fx_directory_entry_read+0x366>
                        continue;
 800ec84:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800ec86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec88:	3302      	adds	r3, #2
 800ec8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ec8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec8e:	2b1f      	cmp	r3, #31
 800ec90:	d99b      	bls.n	800ebca <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800ec92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec94:	f103 0220 	add.w	r2, r3, #32
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d365      	bcc.n	800ed6c <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <_fx_directory_entry_read+0x38e>
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d038      	beq.n	800ed20 <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d206      	bcs.n	800ecc8 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800ecba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800ecc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ecc6:	e038      	b.n	800ed3a <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ecc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eccc:	461a      	mov	r2, r3
 800ecce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ecd0:	69f8      	ldr	r0, [r7, #28]
 800ecd2:	f006 ff3b 	bl	8015b4c <_fx_utility_FAT_entry_read>
 800ecd6:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800ecde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece0:	e19f      	b.n	800f022 <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800ece6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d907      	bls.n	800ecfc <_fx_directory_entry_read+0x3dc>
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ecf2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ecf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d301      	bcc.n	800ed00 <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800ecfc:	2308      	movs	r3, #8
 800ecfe:	e190      	b.n	800f022 <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 800ed00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed02:	3301      	adds	r3, #1
 800ed04:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ed0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed10:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ed12:	69f9      	ldr	r1, [r7, #28]
 800ed14:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ed16:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ed1a:	4413      	add	r3, r2
 800ed1c:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ed1e:	e00c      	b.n	800ed3a <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 800ed20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed22:	3301      	adds	r3, #1
 800ed24:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed2e:	4413      	add	r3, r2
 800ed30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d301      	bcc.n	800ed3a <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800ed36:	2308      	movs	r3, #8
 800ed38:	e173      	b.n	800f022 <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ed3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	469a      	mov	sl, r3
 800ed40:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ed46:	2203      	movs	r2, #3
 800ed48:	9202      	str	r2, [sp, #8]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	9201      	str	r2, [sp, #4]
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	4652      	mov	r2, sl
 800ed52:	465b      	mov	r3, fp
 800ed54:	69f8      	ldr	r0, [r7, #28]
 800ed56:	f008 fb07 	bl	8017368 <_fx_utility_logical_sector_read>
 800ed5a:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 800ed5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800ed62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed64:	e15d      	b.n	800f022 <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	647b      	str	r3, [r7, #68]	; 0x44
 800ed6a:	e002      	b.n	800ed72 <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 800ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6e:	3320      	adds	r3, #32
 800ed70:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	689a      	ldr	r2, [r3, #8]
 800ed76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed78:	4413      	add	r3, r2
 800ed7a:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	3301      	adds	r3, #1
 800ed80:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f47f af12 	bne.w	800ebae <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	615a      	str	r2, [r3, #20]
 800ed90:	e001      	b.n	800ed96 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800ed92:	2301      	movs	r3, #1
 800ed94:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800ed96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d102      	bne.n	800eda2 <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800eda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda4:	2200      	movs	r2, #0
 800eda6:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800edac:	2300      	movs	r3, #0
 800edae:	667b      	str	r3, [r7, #100]	; 0x64
 800edb0:	2300      	movs	r3, #0
 800edb2:	663b      	str	r3, [r7, #96]	; 0x60
 800edb4:	e03d      	b.n	800ee32 <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800edb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edba:	4413      	add	r3, r2
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d03b      	beq.n	800ee3a <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800edc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edc6:	4413      	add	r3, r2
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b2e      	cmp	r3, #46	; 0x2e
 800edcc:	d101      	bne.n	800edd2 <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800edce:	2302      	movs	r3, #2
 800edd0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800edd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edd6:	4413      	add	r3, r2
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	2b20      	cmp	r3, #32
 800eddc:	d105      	bne.n	800edea <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800edde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d122      	bne.n	800ee2a <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 800ede4:	2301      	movs	r3, #1
 800ede6:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 800ede8:	e01f      	b.n	800ee2a <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 800edea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edec:	2b08      	cmp	r3, #8
 800edee:	d104      	bne.n	800edfa <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800edf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d101      	bne.n	800edfa <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 800edf6:	2301      	movs	r3, #1
 800edf8:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 800edfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d108      	bne.n	800ee12 <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 800ee00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	663a      	str	r2, [r7, #96]	; 0x60
 800ee06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee08:	4413      	add	r3, r2
 800ee0a:	222e      	movs	r2, #46	; 0x2e
 800ee0c:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 800ee0e:	2302      	movs	r3, #2
 800ee10:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 800ee12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee16:	441a      	add	r2, r3
 800ee18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee1c:	440b      	add	r3, r1
 800ee1e:	7812      	ldrb	r2, [r2, #0]
 800ee20:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 800ee22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee24:	3301      	adds	r3, #1
 800ee26:	663b      	str	r3, [r7, #96]	; 0x60
 800ee28:	e000      	b.n	800ee2c <_fx_directory_entry_read+0x50c>
            continue;
 800ee2a:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800ee2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee2e:	3301      	adds	r3, #1
 800ee30:	667b      	str	r3, [r7, #100]	; 0x64
 800ee32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee34:	2b0a      	cmp	r3, #10
 800ee36:	d9be      	bls.n	800edb6 <_fx_directory_entry_read+0x496>
 800ee38:	e000      	b.n	800ee3c <_fx_directory_entry_read+0x51c>
            break;
 800ee3a:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	695b      	ldr	r3, [r3, #20]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00a      	beq.n	800ee5a <_fx_directory_entry_read+0x53a>
 800ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2be5      	cmp	r3, #229	; 0xe5
 800ee4a:	d106      	bne.n	800ee5a <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	22e5      	movs	r2, #229	; 0xe5
 800ee52:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800ee54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee56:	2200      	movs	r2, #0
 800ee58:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 800ee5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d114      	bne.n	800ee8c <_fx_directory_entry_read+0x56c>
 800ee62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b20      	cmp	r3, #32
 800ee68:	d110      	bne.n	800ee8c <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	663b      	str	r3, [r7, #96]	; 0x60
 800ee6e:	e00a      	b.n	800ee86 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800ee70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee74:	441a      	add	r2, r3
 800ee76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee7a:	440b      	add	r3, r1
 800ee7c:	7812      	ldrb	r2, [r2, #0]
 800ee7e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ee80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee82:	3301      	adds	r3, #1
 800ee84:	663b      	str	r3, [r7, #96]	; 0x60
 800ee86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee88:	2b0a      	cmp	r3, #10
 800ee8a:	d9f1      	bls.n	800ee70 <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 800ee8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee90:	4413      	add	r3, r2
 800ee92:	2200      	movs	r2, #0
 800ee94:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800ee96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee98:	330b      	adds	r3, #11
 800ee9a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 800ee9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	643a      	str	r2, [r7, #64]	; 0x40
 800eea2:	781a      	ldrb	r2, [r3, #0]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 800eea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	643a      	str	r2, [r7, #64]	; 0x40
 800eeae:	781a      	ldrb	r2, [r3, #0]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 800eeb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d02a      	beq.n	800ef10 <_fx_directory_entry_read+0x5f0>
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	7f5b      	ldrb	r3, [r3, #29]
 800eebe:	f003 0308 	and.w	r3, r3, #8
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d024      	beq.n	800ef10 <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800eec6:	2300      	movs	r3, #0
 800eec8:	663b      	str	r3, [r7, #96]	; 0x60
 800eeca:	e018      	b.n	800eefe <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800eecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eed0:	4413      	add	r3, r2
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	2b40      	cmp	r3, #64	; 0x40
 800eed6:	d90f      	bls.n	800eef8 <_fx_directory_entry_read+0x5d8>
 800eed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eeda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eedc:	4413      	add	r3, r2
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2b5a      	cmp	r3, #90	; 0x5a
 800eee2:	d809      	bhi.n	800eef8 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800eee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eee8:	4413      	add	r3, r2
 800eeea:	781a      	ldrb	r2, [r3, #0]
 800eeec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eeee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eef0:	440b      	add	r3, r1
 800eef2:	3220      	adds	r2, #32
 800eef4:	b2d2      	uxtb	r2, r2
 800eef6:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800eef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eefa:	3301      	adds	r3, #1
 800eefc:	663b      	str	r3, [r7, #96]	; 0x60
 800eefe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef00:	2b0b      	cmp	r3, #11
 800ef02:	d805      	bhi.n	800ef10 <_fx_directory_entry_read+0x5f0>
 800ef04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1dd      	bne.n	800eecc <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 800ef10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef12:	1c5a      	adds	r2, r3, #1
 800ef14:	643a      	str	r2, [r7, #64]	; 0x40
 800ef16:	781a      	ldrb	r2, [r3, #0]
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 800ef1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef1e:	f006 fdaf 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef22:	4602      	mov	r2, r0
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef2a:	3302      	adds	r3, #2
 800ef2c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 800ef2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef30:	f006 fda6 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef34:	4602      	mov	r2, r0
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef3c:	3302      	adds	r3, #2
 800ef3e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 800ef40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef42:	f006 fd9d 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef46:	4602      	mov	r2, r0
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4e:	3302      	adds	r3, #2
 800ef50:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00b      	beq.n	800ef72 <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800ef5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef5c:	f006 fd90 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef60:	4602      	mov	r2, r0
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef6a:	041a      	lsls	r2, r3, #16
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	635a      	str	r2, [r3, #52]	; 0x34
 800ef70:	e002      	b.n	800ef78 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	2200      	movs	r2, #0
 800ef76:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef7a:	3302      	adds	r3, #2
 800ef7c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800ef7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef80:	f006 fd7e 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef84:	4602      	mov	r2, r0
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8c:	3302      	adds	r3, #2
 800ef8e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800ef90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef92:	f006 fd75 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800ef96:	4602      	mov	r2, r0
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800ef9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9e:	3302      	adds	r3, #2
 800efa0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800efa2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800efa4:	f006 fd6c 	bl	8015a80 <_fx_utility_16_unsigned_read>
 800efa8:	4602      	mov	r2, r0
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efae:	441a      	add	r2, r3
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800efb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb6:	3302      	adds	r3, #2
 800efb8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800efba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800efbc:	f006 fd88 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2200      	movs	r2, #0
 800efc4:	461c      	mov	r4, r3
 800efc6:	4615      	mov	r5, r2
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	2200      	movs	r2, #0
 800efd2:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	2200      	movs	r2, #0
 800efd8:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800efda:	6939      	ldr	r1, [r7, #16]
 800efdc:	f04f 0200 	mov.w	r2, #0
 800efe0:	f04f 0300 	mov.w	r3, #0
 800efe4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	2200      	movs	r2, #0
 800efec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff8:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00f      	beq.n	800f020 <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f004:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f00a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f012:	69b9      	ldr	r1, [r7, #24]
 800f014:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3768      	adds	r7, #104	; 0x68
 800f026:	46bd      	mov	sp, r7
 800f028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f02c <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800f02c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f030:	b0a2      	sub	sp, #136	; 0x88
 800f032:	af04      	add	r7, sp, #16
 800f034:	6178      	str	r0, [r7, #20]
 800f036:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800f03e:	1c5a      	adds	r2, r3, #1
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	2be5      	cmp	r3, #229	; 0xe5
 800f04e:	d109      	bne.n	800f064 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800f054:	2be5      	cmp	r3, #229	; 0xe5
 800f056:	d105      	bne.n	800f064 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800f058:	2301      	movs	r3, #1
 800f05a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	2200      	movs	r2, #0
 800f060:	711a      	strb	r2, [r3, #4]
 800f062:	e001      	b.n	800f068 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800f064:	2300      	movs	r3, #0
 800f066:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f06c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f074:	4613      	mov	r3, r2
 800f076:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f07c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f07e:	429a      	cmp	r2, r3
 800f080:	d316      	bcc.n	800f0b0 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f088:	1ad2      	subs	r2, r2, r3
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f092:	3302      	adds	r3, #2
 800f094:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800f09e:	6979      	ldr	r1, [r7, #20]
 800f0a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f0a2:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f0a6:	4413      	add	r3, r2
 800f0a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ae:	e003      	b.n	800f0b8 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	9302      	str	r3, [sp, #8]
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	9200      	str	r2, [sp, #0]
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	6978      	ldr	r0, [r7, #20]
 800f0d2:	f008 f949 	bl	8017368 <_fx_utility_logical_sector_read>
 800f0d6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800f0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	f000 bdda 	b.w	800fc98 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0f0:	4413      	add	r3, r2
 800f0f2:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 83cc 	beq.w	800f896 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800f0fe:	2300      	movs	r3, #0
 800f100:	653b      	str	r3, [r7, #80]	; 0x50
 800f102:	2300      	movs	r3, #0
 800f104:	667b      	str	r3, [r7, #100]	; 0x64
 800f106:	2300      	movs	r3, #0
 800f108:	64bb      	str	r3, [r7, #72]	; 0x48
 800f10a:	2300      	movs	r3, #0
 800f10c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f10e:	e02c      	b.n	800f16a <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f116:	4413      	add	r3, r2
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b2e      	cmp	r3, #46	; 0x2e
 800f11c:	d108      	bne.n	800f130 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800f11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f120:	2b00      	cmp	r3, #0
 800f122:	d01e      	beq.n	800f162 <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800f124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f126:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800f128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12a:	3301      	adds	r3, #1
 800f12c:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800f12e:	e019      	b.n	800f164 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f136:	4413      	add	r3, r2
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2b20      	cmp	r3, #32
 800f13c:	d012      	beq.n	800f164 <_fx_directory_entry_write+0x138>
 800f13e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f140:	2b07      	cmp	r3, #7
 800f142:	d80f      	bhi.n	800f164 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f14a:	4413      	add	r3, r2
 800f14c:	7819      	ldrb	r1, [r3, #0]
 800f14e:	f107 021c 	add.w	r2, r7, #28
 800f152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f154:	4413      	add	r3, r2
 800f156:	460a      	mov	r2, r1
 800f158:	701a      	strb	r2, [r3, #0]
                i++;
 800f15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f15c:	3301      	adds	r3, #1
 800f15e:	667b      	str	r3, [r7, #100]	; 0x64
 800f160:	e000      	b.n	800f164 <_fx_directory_entry_write+0x138>
                    continue;
 800f162:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800f164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f166:	3301      	adds	r3, #1
 800f168:	653b      	str	r3, [r7, #80]	; 0x50
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f170:	4413      	add	r3, r2
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1cb      	bne.n	800f110 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800f178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f17a:	663b      	str	r3, [r7, #96]	; 0x60
 800f17c:	e008      	b.n	800f190 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800f17e:	f107 021c 	add.w	r2, r7, #28
 800f182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f184:	4413      	add	r3, r2
 800f186:	2220      	movs	r2, #32
 800f188:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800f18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f18c:	3301      	adds	r3, #1
 800f18e:	663b      	str	r3, [r7, #96]	; 0x60
 800f190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f192:	2b0a      	cmp	r3, #10
 800f194:	d9f3      	bls.n	800f17e <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800f196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d03e      	beq.n	800f21a <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a2:	4413      	add	r3, r2
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d008      	beq.n	800f1bc <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1b0:	1c59      	adds	r1, r3, #1
 800f1b2:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1b4:	4413      	add	r3, r2
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1c2:	4413      	add	r3, r2
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d008      	beq.n	800f1dc <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1d0:	1c59      	adds	r1, r3, #1
 800f1d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1d4:	4413      	add	r3, r2
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e2:	4413      	add	r3, r2
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1f0:	1c59      	adds	r1, r3, #1
 800f1f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1f4:	4413      	add	r3, r2
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800f1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1fe:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800f200:	e008      	b.n	800f214 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800f202:	f107 021c 	add.w	r2, r7, #28
 800f206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f208:	4413      	add	r3, r2
 800f20a:	2220      	movs	r2, #32
 800f20c:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800f20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f210:	3301      	adds	r3, #1
 800f212:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f216:	2b07      	cmp	r3, #7
 800f218:	d9f3      	bls.n	800f202 <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800f21a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f21c:	4b8e      	ldr	r3, [pc, #568]	; (800f458 <_fx_directory_entry_write+0x42c>)
 800f21e:	fba3 2301 	umull	r2, r3, r3, r1
 800f222:	089a      	lsrs	r2, r3, #2
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	1aca      	subs	r2, r1, r3
 800f230:	2a00      	cmp	r2, #0
 800f232:	d106      	bne.n	800f242 <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800f234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f236:	4a88      	ldr	r2, [pc, #544]	; (800f458 <_fx_directory_entry_write+0x42c>)
 800f238:	fba2 2303 	umull	r2, r3, r2, r3
 800f23c:	089b      	lsrs	r3, r3, #2
 800f23e:	657b      	str	r3, [r7, #84]	; 0x54
 800f240:	e006      	b.n	800f250 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800f242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f244:	4a84      	ldr	r2, [pc, #528]	; (800f458 <_fx_directory_entry_write+0x42c>)
 800f246:	fba2 2303 	umull	r2, r3, r2, r3
 800f24a:	089b      	lsrs	r3, r3, #2
 800f24c:	3301      	adds	r3, #1
 800f24e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800f250:	2301      	movs	r3, #1
 800f252:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800f254:	2300      	movs	r3, #0
 800f256:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800f258:	2300      	movs	r3, #0
 800f25a:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800f25c:	e03f      	b.n	800f2de <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800f25e:	f107 021c 	add.w	r2, r7, #28
 800f262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f264:	4413      	add	r3, r2
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	2b20      	cmp	r3, #32
 800f26a:	d116      	bne.n	800f29a <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f272:	4413      	add	r3, r2
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d035      	beq.n	800f2e6 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f280:	4413      	add	r3, r2
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b2e      	cmp	r3, #46	; 0x2e
 800f286:	d002      	beq.n	800f28e <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800f288:	2300      	movs	r3, #0
 800f28a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800f28c:	e02c      	b.n	800f2e8 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800f28e:	2308      	movs	r3, #8
 800f290:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800f292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f294:	3301      	adds	r3, #1
 800f296:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800f298:	e021      	b.n	800f2de <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800f29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d109      	bne.n	800f2b4 <_fx_directory_entry_write+0x288>
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2a6:	4413      	add	r3, r2
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f2ac:	d102      	bne.n	800f2b4 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800f2ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800f2b4:	f107 021c 	add.w	r2, r7, #28
 800f2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2ba:	4413      	add	r3, r2
 800f2bc:	781a      	ldrb	r2, [r3, #0]
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	6819      	ldr	r1, [r3, #0]
 800f2c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2c4:	440b      	add	r3, r1
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d002      	beq.n	800f2d2 <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800f2d0:	e00a      	b.n	800f2e8 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800f2d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800f2d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2da:	3301      	adds	r3, #1
 800f2dc:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800f2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2e0:	2b0a      	cmp	r3, #10
 800f2e2:	d9bc      	bls.n	800f25e <_fx_directory_entry_write+0x232>
 800f2e4:	e000      	b.n	800f2e8 <_fx_directory_entry_write+0x2bc>
                    break;
 800f2e6:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800f2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d005      	beq.n	800f2fa <_fx_directory_entry_write+0x2ce>
 800f2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f2f2:	2b20      	cmp	r3, #32
 800f2f4:	d101      	bne.n	800f2fa <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f300:	4413      	add	r3, r2
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800f308:	2300      	movs	r3, #0
 800f30a:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800f30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d15a      	bne.n	800f3c8 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f316:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800f31e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f320:	2b03      	cmp	r3, #3
 800f322:	d901      	bls.n	800f328 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800f324:	2303      	movs	r3, #3
 800f326:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800f328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	667a      	str	r2, [r7, #100]	; 0x64
 800f32e:	3368      	adds	r3, #104	; 0x68
 800f330:	f107 0210 	add.w	r2, r7, #16
 800f334:	4413      	add	r3, r2
 800f336:	227e      	movs	r2, #126	; 0x7e
 800f338:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800f33c:	2300      	movs	r3, #0
 800f33e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f340:	e03f      	b.n	800f3c2 <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800f342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f344:	2b00      	cmp	r3, #0
 800f346:	d105      	bne.n	800f354 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	0b1b      	lsrs	r3, r3, #12
 800f34c:	f003 030f 	and.w	r3, r3, #15
 800f350:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f352:	e015      	b.n	800f380 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800f354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f356:	2b01      	cmp	r3, #1
 800f358:	d105      	bne.n	800f366 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	0a1b      	lsrs	r3, r3, #8
 800f35e:	f003 030f 	and.w	r3, r3, #15
 800f362:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f364:	e00c      	b.n	800f380 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800f366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d105      	bne.n	800f378 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	091b      	lsrs	r3, r3, #4
 800f370:	f003 030f 	and.w	r3, r3, #15
 800f374:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f376:	e003      	b.n	800f380 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	f003 030f 	and.w	r3, r3, #15
 800f37e:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800f380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f382:	2b09      	cmp	r3, #9
 800f384:	d90d      	bls.n	800f3a2 <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800f386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f38c:	1c59      	adds	r1, r3, #1
 800f38e:	6679      	str	r1, [r7, #100]	; 0x64
 800f390:	3237      	adds	r2, #55	; 0x37
 800f392:	b2d2      	uxtb	r2, r2
 800f394:	3368      	adds	r3, #104	; 0x68
 800f396:	f107 0110 	add.w	r1, r7, #16
 800f39a:	440b      	add	r3, r1
 800f39c:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800f3a0:	e00c      	b.n	800f3bc <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800f3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3a8:	1c59      	adds	r1, r3, #1
 800f3aa:	6679      	str	r1, [r7, #100]	; 0x64
 800f3ac:	3230      	adds	r2, #48	; 0x30
 800f3ae:	b2d2      	uxtb	r2, r2
 800f3b0:	3368      	adds	r3, #104	; 0x68
 800f3b2:	f107 0110 	add.w	r1, r7, #16
 800f3b6:	440b      	add	r3, r1
 800f3b8:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800f3bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3be:	3301      	adds	r3, #1
 800f3c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d9bc      	bls.n	800f342 <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800f3ce:	7f3b      	ldrb	r3, [r7, #28]
 800f3d0:	2be5      	cmp	r3, #229	; 0xe5
 800f3d2:	d104      	bne.n	800f3de <_fx_directory_entry_write+0x3b2>
 800f3d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d101      	bne.n	800f3de <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800f3da:	238f      	movs	r3, #143	; 0x8f
 800f3dc:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800f3de:	2300      	movs	r3, #0
 800f3e0:	667b      	str	r3, [r7, #100]	; 0x64
 800f3e2:	e01d      	b.n	800f420 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800f3e4:	f107 021c 	add.w	r2, r7, #28
 800f3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3ea:	4413      	add	r3, r2
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800f3f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f3f6:	2b60      	cmp	r3, #96	; 0x60
 800f3f8:	d908      	bls.n	800f40c <_fx_directory_entry_write+0x3e0>
 800f3fa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f3fe:	2b7a      	cmp	r3, #122	; 0x7a
 800f400:	d804      	bhi.n	800f40c <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800f402:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f406:	3b20      	subs	r3, #32
 800f408:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800f40c:	f107 021c 	add.w	r2, r7, #28
 800f410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f412:	4413      	add	r3, r2
 800f414:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800f418:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800f41a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f41c:	3301      	adds	r3, #1
 800f41e:	667b      	str	r3, [r7, #100]	; 0x64
 800f420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f422:	2b0a      	cmp	r3, #10
 800f424:	d9de      	bls.n	800f3e4 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	791b      	ldrb	r3, [r3, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 8095 	beq.w	800f55a <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f430:	2300      	movs	r3, #0
 800f432:	667b      	str	r3, [r7, #100]	; 0x64
 800f434:	e008      	b.n	800f448 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800f436:	f107 021c 	add.w	r2, r7, #28
 800f43a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f43c:	4413      	add	r3, r2
 800f43e:	2220      	movs	r2, #32
 800f440:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f444:	3301      	adds	r3, #1
 800f446:	667b      	str	r3, [r7, #100]	; 0x64
 800f448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f44a:	2b0a      	cmp	r3, #10
 800f44c:	d9f3      	bls.n	800f436 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800f44e:	2300      	movs	r3, #0
 800f450:	667b      	str	r3, [r7, #100]	; 0x64
 800f452:	2300      	movs	r3, #0
 800f454:	663b      	str	r3, [r7, #96]	; 0x60
 800f456:	e023      	b.n	800f4a0 <_fx_directory_entry_write+0x474>
 800f458:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800f45c:	693a      	ldr	r2, [r7, #16]
 800f45e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f460:	4413      	add	r3, r2
 800f462:	3304      	adds	r3, #4
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b2e      	cmp	r3, #46	; 0x2e
 800f468:	d01e      	beq.n	800f4a8 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f46e:	4413      	add	r3, r2
 800f470:	3304      	adds	r3, #4
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d019      	beq.n	800f4ac <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800f478:	693a      	ldr	r2, [r7, #16]
 800f47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f47c:	4413      	add	r3, r2
 800f47e:	3304      	adds	r3, #4
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800f486:	f107 021c 	add.w	r2, r7, #28
 800f48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f48c:	4413      	add	r3, r2
 800f48e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800f492:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800f494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f496:	3301      	adds	r3, #1
 800f498:	667b      	str	r3, [r7, #100]	; 0x64
 800f49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f49c:	3301      	adds	r3, #1
 800f49e:	663b      	str	r3, [r7, #96]	; 0x60
 800f4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4a2:	2b07      	cmp	r3, #7
 800f4a4:	d9da      	bls.n	800f45c <_fx_directory_entry_write+0x430>
 800f4a6:	e002      	b.n	800f4ae <_fx_directory_entry_write+0x482>
                    break;
 800f4a8:	bf00      	nop
 800f4aa:	e000      	b.n	800f4ae <_fx_directory_entry_write+0x482>
                    break;
 800f4ac:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4b2:	4413      	add	r3, r2
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d025      	beq.n	800f508 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800f4bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4be:	3301      	adds	r3, #1
 800f4c0:	667b      	str	r3, [r7, #100]	; 0x64
 800f4c2:	2308      	movs	r3, #8
 800f4c4:	663b      	str	r3, [r7, #96]	; 0x60
 800f4c6:	e01a      	b.n	800f4fe <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800f4c8:	693a      	ldr	r2, [r7, #16]
 800f4ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4cc:	4413      	add	r3, r2
 800f4ce:	3304      	adds	r3, #4
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d017      	beq.n	800f506 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4da:	4413      	add	r3, r2
 800f4dc:	3304      	adds	r3, #4
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800f4e4:	f107 021c 	add.w	r2, r7, #28
 800f4e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800f4f0:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800f4f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	667b      	str	r3, [r7, #100]	; 0x64
 800f4f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	663b      	str	r3, [r7, #96]	; 0x60
 800f4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f500:	2b0a      	cmp	r3, #10
 800f502:	d9e1      	bls.n	800f4c8 <_fx_directory_entry_write+0x49c>
 800f504:	e000      	b.n	800f508 <_fx_directory_entry_write+0x4dc>
                        break;
 800f506:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800f508:	2300      	movs	r3, #0
 800f50a:	663b      	str	r3, [r7, #96]	; 0x60
 800f50c:	e01d      	b.n	800f54a <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800f50e:	f107 021c 	add.w	r2, r7, #28
 800f512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800f51c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f520:	2b60      	cmp	r3, #96	; 0x60
 800f522:	d908      	bls.n	800f536 <_fx_directory_entry_write+0x50a>
 800f524:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f528:	2b7a      	cmp	r3, #122	; 0x7a
 800f52a:	d804      	bhi.n	800f536 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800f52c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800f530:	3b20      	subs	r3, #32
 800f532:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800f536:	f107 021c 	add.w	r2, r7, #28
 800f53a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f53c:	4413      	add	r3, r2
 800f53e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800f542:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800f544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f546:	3301      	adds	r3, #1
 800f548:	663b      	str	r3, [r7, #96]	; 0x60
 800f54a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f54c:	2b0a      	cmp	r3, #10
 800f54e:	d9de      	bls.n	800f50e <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800f550:	7f3b      	ldrb	r3, [r7, #28]
 800f552:	2be5      	cmp	r3, #229	; 0xe5
 800f554:	d101      	bne.n	800f55a <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800f556:	238f      	movs	r3, #143	; 0x8f
 800f558:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f55a:	2300      	movs	r3, #0
 800f55c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f560:	2300      	movs	r3, #0
 800f562:	667b      	str	r3, [r7, #100]	; 0x64
 800f564:	e016      	b.n	800f594 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800f566:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f56a:	01db      	lsls	r3, r3, #7
 800f56c:	b25a      	sxtb	r2, r3
 800f56e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f572:	085b      	lsrs	r3, r3, #1
 800f574:	b2db      	uxtb	r3, r3
 800f576:	b25b      	sxtb	r3, r3
 800f578:	4313      	orrs	r3, r2
 800f57a:	b25b      	sxtb	r3, r3
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	f107 011c 	add.w	r1, r7, #28
 800f582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f584:	440b      	add	r3, r1
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	4413      	add	r3, r2
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f58e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f590:	3301      	adds	r3, #1
 800f592:	667b      	str	r3, [r7, #100]	; 0x64
 800f594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f596:	2b0a      	cmp	r3, #10
 800f598:	d9e5      	bls.n	800f566 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800f59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5a6:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800f5a8:	e0f3      	b.n	800f792 <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800f5b0:	7f3b      	ldrb	r3, [r7, #28]
 800f5b2:	2be5      	cmp	r3, #229	; 0xe5
 800f5b4:	d102      	bne.n	800f5bc <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800f5b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5b8:	22e5      	movs	r2, #229	; 0xe5
 800f5ba:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800f5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5be:	330b      	adds	r3, #11
 800f5c0:	220f      	movs	r2, #15
 800f5c2:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800f5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5c6:	330c      	adds	r3, #12
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800f5cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5ce:	330d      	adds	r3, #13
 800f5d0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800f5d4:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800f5d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5d8:	331a      	adds	r3, #26
 800f5da:	2200      	movs	r2, #0
 800f5dc:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800f5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5e0:	331b      	adds	r3, #27
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	667b      	str	r3, [r7, #100]	; 0x64
 800f5ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	005b      	lsls	r3, r3, #1
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	3b0d      	subs	r3, #13
 800f5f8:	663b      	str	r3, [r7, #96]	; 0x60
 800f5fa:	e03e      	b.n	800f67a <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800f5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5fe:	2b0b      	cmp	r3, #11
 800f600:	d037      	beq.n	800f672 <_fx_directory_entry_write+0x646>
 800f602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f604:	2b1a      	cmp	r3, #26
 800f606:	d034      	beq.n	800f672 <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800f608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f60a:	2b0d      	cmp	r3, #13
 800f60c:	d102      	bne.n	800f614 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800f60e:	230c      	movs	r3, #12
 800f610:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800f612:	e02f      	b.n	800f674 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800f614:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00d      	beq.n	800f638 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800f61c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f61e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f620:	4413      	add	r3, r2
 800f622:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800f626:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800f628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f62a:	3301      	adds	r3, #1
 800f62c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f62e:	4413      	add	r3, r2
 800f630:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800f634:	701a      	strb	r2, [r3, #0]
 800f636:	e00e      	b.n	800f656 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f63e:	441a      	add	r2, r3
 800f640:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f644:	440b      	add	r3, r1
 800f646:	7812      	ldrb	r2, [r2, #0]
 800f648:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800f64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f64c:	3301      	adds	r3, #1
 800f64e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f650:	4413      	add	r3, r2
 800f652:	2200      	movs	r2, #0
 800f654:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f65c:	4413      	add	r3, r2
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d102      	bne.n	800f66a <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800f664:	23ff      	movs	r3, #255	; 0xff
 800f666:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800f66a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f66c:	3301      	adds	r3, #1
 800f66e:	663b      	str	r3, [r7, #96]	; 0x60
 800f670:	e000      	b.n	800f674 <_fx_directory_entry_write+0x648>
                    continue;
 800f672:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800f674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f676:	3302      	adds	r3, #2
 800f678:	667b      	str	r3, [r7, #100]	; 0x64
 800f67a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f67c:	2b1f      	cmp	r3, #31
 800f67e:	d9bd      	bls.n	800f5fc <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800f680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f682:	3320      	adds	r3, #32
 800f684:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800f686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f688:	3320      	adds	r3, #32
 800f68a:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f692:	429a      	cmp	r2, r3
 800f694:	d376      	bcc.n	800f784 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800f696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f698:	2200      	movs	r2, #0
 800f69a:	60bb      	str	r3, [r7, #8]
 800f69c:	60fa      	str	r2, [r7, #12]
 800f69e:	2303      	movs	r3, #3
 800f6a0:	9302      	str	r3, [sp, #8]
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6a8:	9300      	str	r3, [sp, #0]
 800f6aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6ae:	6978      	ldr	r0, [r7, #20]
 800f6b0:	f008 f8ee 	bl	8017890 <_fx_utility_logical_sector_write>
 800f6b4:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800f6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6be:	e2eb      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d335      	bcc.n	800f736 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d206      	bcs.n	800f6e4 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800f6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d8:	3301      	adds	r3, #1
 800f6da:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6de:	3301      	adds	r3, #1
 800f6e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6e2:	e032      	b.n	800f74a <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800f6e4:	f107 0318 	add.w	r3, r7, #24
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6ec:	6978      	ldr	r0, [r7, #20]
 800f6ee:	f006 fa2d 	bl	8015b4c <_fx_utility_FAT_entry_read>
 800f6f2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d001      	beq.n	800f6fe <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	e2cc      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	2b01      	cmp	r3, #1
 800f706:	d907      	bls.n	800f718 <_fx_directory_entry_write+0x6ec>
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f70e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800f712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f714:	429a      	cmp	r2, r3
 800f716:	d301      	bcc.n	800f71c <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800f718:	2308      	movs	r3, #8
 800f71a:	e2bd      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800f728:	6979      	ldr	r1, [r7, #20]
 800f72a:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f72c:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f730:	4413      	add	r3, r2
 800f732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f734:	e009      	b.n	800f74a <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800f736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f738:	3301      	adds	r3, #1
 800f73a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f742:	429a      	cmp	r2, r3
 800f744:	d301      	bcc.n	800f74a <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800f746:	2308      	movs	r3, #8
 800f748:	e2a6      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800f74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74c:	2200      	movs	r2, #0
 800f74e:	603b      	str	r3, [r7, #0]
 800f750:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800f756:	2203      	movs	r2, #3
 800f758:	9202      	str	r2, [sp, #8]
 800f75a:	2201      	movs	r2, #1
 800f75c:	9201      	str	r2, [sp, #4]
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f764:	6978      	ldr	r0, [r7, #20]
 800f766:	f007 fdff 	bl	8017368 <_fx_utility_logical_sector_read>
 800f76a:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800f772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f774:	e290      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800f77c:	2300      	movs	r3, #0
 800f77e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800f780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f782:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800f784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f786:	3b01      	subs	r3, #1
 800f788:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800f78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f790:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800f792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f794:	2b00      	cmp	r3, #0
 800f796:	f47f af08 	bne.w	800f5aa <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	791b      	ldrb	r3, [r3, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d116      	bne.n	800f7d0 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	667b      	str	r3, [r7, #100]	; 0x64
 800f7a6:	e00f      	b.n	800f7c8 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800f7a8:	f107 021c 	add.w	r2, r7, #28
 800f7ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7ae:	4413      	add	r3, r2
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800f7b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7b8:	1c5a      	adds	r2, r3, #1
 800f7ba:	677a      	str	r2, [r7, #116]	; 0x74
 800f7bc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800f7c0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800f7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	667b      	str	r3, [r7, #100]	; 0x64
 800f7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7ca:	2b0a      	cmp	r3, #10
 800f7cc:	d9ec      	bls.n	800f7a8 <_fx_directory_entry_write+0x77c>
 800f7ce:	e1a5      	b.n	800fb1c <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	667b      	str	r3, [r7, #100]	; 0x64
 800f7d4:	e007      	b.n	800f7e6 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800f7d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f7d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7da:	4413      	add	r3, r2
 800f7dc:	2220      	movs	r2, #32
 800f7de:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800f7e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	667b      	str	r3, [r7, #100]	; 0x64
 800f7e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7e8:	2b0a      	cmp	r3, #10
 800f7ea:	d9f4      	bls.n	800f7d6 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	667b      	str	r3, [r7, #100]	; 0x64
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	663b      	str	r3, [r7, #96]	; 0x60
 800f7f4:	e01c      	b.n	800f830 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800f7f6:	693a      	ldr	r2, [r7, #16]
 800f7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7fa:	4413      	add	r3, r2
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b2e      	cmp	r3, #46	; 0x2e
 800f802:	d019      	beq.n	800f838 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800f804:	693a      	ldr	r2, [r7, #16]
 800f806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f808:	4413      	add	r3, r2
 800f80a:	3304      	adds	r3, #4
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d014      	beq.n	800f83c <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800f812:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f816:	4413      	add	r3, r2
 800f818:	6939      	ldr	r1, [r7, #16]
 800f81a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f81c:	440a      	add	r2, r1
 800f81e:	3204      	adds	r2, #4
 800f820:	7812      	ldrb	r2, [r2, #0]
 800f822:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800f824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f826:	3301      	adds	r3, #1
 800f828:	667b      	str	r3, [r7, #100]	; 0x64
 800f82a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f82c:	3301      	adds	r3, #1
 800f82e:	663b      	str	r3, [r7, #96]	; 0x60
 800f830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f832:	2b07      	cmp	r3, #7
 800f834:	d9df      	bls.n	800f7f6 <_fx_directory_entry_write+0x7ca>
 800f836:	e002      	b.n	800f83e <_fx_directory_entry_write+0x812>
                    break;
 800f838:	bf00      	nop
 800f83a:	e000      	b.n	800f83e <_fx_directory_entry_write+0x812>
                    break;
 800f83c:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f842:	4413      	add	r3, r2
 800f844:	3304      	adds	r3, #4
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d020      	beq.n	800f88e <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800f84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f84e:	3301      	adds	r3, #1
 800f850:	667b      	str	r3, [r7, #100]	; 0x64
 800f852:	2308      	movs	r3, #8
 800f854:	663b      	str	r3, [r7, #96]	; 0x60
 800f856:	e015      	b.n	800f884 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f85c:	4413      	add	r3, r2
 800f85e:	3304      	adds	r3, #4
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d012      	beq.n	800f88c <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800f866:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f86a:	4413      	add	r3, r2
 800f86c:	6939      	ldr	r1, [r7, #16]
 800f86e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f870:	440a      	add	r2, r1
 800f872:	3204      	adds	r2, #4
 800f874:	7812      	ldrb	r2, [r2, #0]
 800f876:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800f878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f87a:	3301      	adds	r3, #1
 800f87c:	667b      	str	r3, [r7, #100]	; 0x64
 800f87e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f880:	3301      	adds	r3, #1
 800f882:	663b      	str	r3, [r7, #96]	; 0x60
 800f884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f886:	2b0a      	cmp	r3, #10
 800f888:	d9e6      	bls.n	800f858 <_fx_directory_entry_write+0x82c>
 800f88a:	e000      	b.n	800f88e <_fx_directory_entry_write+0x862>
                        break;
 800f88c:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800f88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f890:	330b      	adds	r3, #11
 800f892:	677b      	str	r3, [r7, #116]	; 0x74
 800f894:	e142      	b.n	800fb1c <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 80a1 	beq.w	800f9e2 <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	f040 8096 	bne.w	800f9e2 <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	663b      	str	r3, [r7, #96]	; 0x60
 800f8ba:	e08c      	b.n	800f9d6 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	2be5      	cmp	r3, #229	; 0xe5
 800f8c4:	d102      	bne.n	800f8cc <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800f8c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8c8:	22e5      	movs	r2, #229	; 0xe5
 800f8ca:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800f8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ce:	3320      	adds	r3, #32
 800f8d0:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800f8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d4:	3320      	adds	r3, #32
 800f8d6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d376      	bcc.n	800f9d0 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800f8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4698      	mov	r8, r3
 800f8e8:	4691      	mov	r9, r2
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	9302      	str	r3, [sp, #8]
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	4642      	mov	r2, r8
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	6978      	ldr	r0, [r7, #20]
 800f8fc:	f007 ffc8 	bl	8017890 <_fx_utility_logical_sector_write>
 800f900:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	2b00      	cmp	r3, #0
 800f906:	d001      	beq.n	800f90c <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	e1c5      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f912:	429a      	cmp	r2, r3
 800f914:	d335      	bcc.n	800f982 <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f91a:	3b01      	subs	r3, #1
 800f91c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f91e:	429a      	cmp	r2, r3
 800f920:	d206      	bcs.n	800f930 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800f922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f924:	3301      	adds	r3, #1
 800f926:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	3301      	adds	r3, #1
 800f92c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f92e:	e032      	b.n	800f996 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800f930:	f107 0318 	add.w	r3, r7, #24
 800f934:	461a      	mov	r2, r3
 800f936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f938:	6978      	ldr	r0, [r7, #20]
 800f93a:	f006 f907 	bl	8015b4c <_fx_utility_FAT_entry_read>
 800f93e:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	2b00      	cmp	r3, #0
 800f944:	d001      	beq.n	800f94a <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	e1a6      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800f94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f950:	2b01      	cmp	r3, #1
 800f952:	d907      	bls.n	800f964 <_fx_directory_entry_write+0x938>
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f95a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800f95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f960:	429a      	cmp	r2, r3
 800f962:	d301      	bcc.n	800f968 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800f964:	2308      	movs	r3, #8
 800f966:	e197      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800f968:	2300      	movs	r3, #0
 800f96a:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f972:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800f974:	6979      	ldr	r1, [r7, #20]
 800f976:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800f978:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800f97c:	4413      	add	r3, r2
 800f97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f980:	e009      	b.n	800f996 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800f982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f984:	3301      	adds	r3, #1
 800f986:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f98e:	429a      	cmp	r2, r3
 800f990:	d301      	bcc.n	800f996 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800f992:	2308      	movs	r3, #8
 800f994:	e180      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800f996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f998:	2200      	movs	r2, #0
 800f99a:	469a      	mov	sl, r3
 800f99c:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800f9a2:	2203      	movs	r2, #3
 800f9a4:	9202      	str	r2, [sp, #8]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	9201      	str	r2, [sp, #4]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	4652      	mov	r2, sl
 800f9ae:	465b      	mov	r3, fp
 800f9b0:	6978      	ldr	r0, [r7, #20]
 800f9b2:	f007 fcd9 	bl	8017368 <_fx_utility_logical_sector_read>
 800f9b6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	e16a      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800f9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9ce:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800f9d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	663b      	str	r3, [r7, #96]	; 0x60
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	f4ff af6d 	bcc.w	800f8bc <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	663b      	str	r3, [r7, #96]	; 0x60
 800f9e6:	e007      	b.n	800f9f8 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800f9e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9ec:	4413      	add	r3, r2
 800f9ee:	2220      	movs	r2, #32
 800f9f0:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800f9f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	663b      	str	r3, [r7, #96]	; 0x60
 800f9f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9fa:	2b0a      	cmp	r3, #10
 800f9fc:	d9f4      	bls.n	800f9e8 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800f9fe:	2300      	movs	r3, #0
 800fa00:	667b      	str	r3, [r7, #100]	; 0x64
 800fa02:	e007      	b.n	800fa14 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800fa04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fa06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa08:	4413      	add	r3, r2
 800fa0a:	222e      	movs	r2, #46	; 0x2e
 800fa0c:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800fa0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa10:	3301      	adds	r3, #1
 800fa12:	667b      	str	r3, [r7, #100]	; 0x64
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa1a:	4413      	add	r3, r2
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	2b2e      	cmp	r3, #46	; 0x2e
 800fa20:	d0f0      	beq.n	800fa04 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa28:	4413      	add	r3, r2
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d039      	beq.n	800faa4 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800fa30:	2300      	movs	r3, #0
 800fa32:	667b      	str	r3, [r7, #100]	; 0x64
 800fa34:	2300      	movs	r3, #0
 800fa36:	663b      	str	r3, [r7, #96]	; 0x60
 800fa38:	e02d      	b.n	800fa96 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b2e      	cmp	r3, #46	; 0x2e
 800fa46:	d02a      	beq.n	800fa9e <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa4e:	4413      	add	r3, r2
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d025      	beq.n	800faa2 <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa5c:	4413      	add	r3, r2
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800fa64:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800fa68:	2b60      	cmp	r3, #96	; 0x60
 800fa6a:	d908      	bls.n	800fa7e <_fx_directory_entry_write+0xa52>
 800fa6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800fa70:	2b7a      	cmp	r3, #122	; 0x7a
 800fa72:	d804      	bhi.n	800fa7e <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800fa74:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800fa78:	3b20      	subs	r3, #32
 800fa7a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800fa7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fa80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa82:	4413      	add	r3, r2
 800fa84:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800fa88:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800fa8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	667b      	str	r3, [r7, #100]	; 0x64
 800fa90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa92:	3301      	adds	r3, #1
 800fa94:	663b      	str	r3, [r7, #96]	; 0x60
 800fa96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa98:	2b07      	cmp	r3, #7
 800fa9a:	d9ce      	bls.n	800fa3a <_fx_directory_entry_write+0xa0e>
 800fa9c:	e002      	b.n	800faa4 <_fx_directory_entry_write+0xa78>
                    break;
 800fa9e:	bf00      	nop
 800faa0:	e000      	b.n	800faa4 <_fx_directory_entry_write+0xa78>
                    break;
 800faa2:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faaa:	4413      	add	r3, r2
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d031      	beq.n	800fb16 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800fab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab4:	3301      	adds	r3, #1
 800fab6:	667b      	str	r3, [r7, #100]	; 0x64
 800fab8:	2308      	movs	r3, #8
 800faba:	663b      	str	r3, [r7, #96]	; 0x60
 800fabc:	e026      	b.n	800fb0c <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac4:	4413      	add	r3, r2
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d023      	beq.n	800fb14 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fad2:	4413      	add	r3, r2
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800fada:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800fade:	2b60      	cmp	r3, #96	; 0x60
 800fae0:	d908      	bls.n	800faf4 <_fx_directory_entry_write+0xac8>
 800fae2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800fae6:	2b7a      	cmp	r3, #122	; 0x7a
 800fae8:	d804      	bhi.n	800faf4 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800faea:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800faee:	3b20      	subs	r3, #32
 800faf0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800faf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800faf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faf8:	4413      	add	r3, r2
 800fafa:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800fafe:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800fb00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb02:	3301      	adds	r3, #1
 800fb04:	667b      	str	r3, [r7, #100]	; 0x64
 800fb06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb08:	3301      	adds	r3, #1
 800fb0a:	663b      	str	r3, [r7, #96]	; 0x60
 800fb0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb0e:	2b0a      	cmp	r3, #10
 800fb10:	d9d5      	bls.n	800fabe <_fx_directory_entry_write+0xa92>
 800fb12:	e000      	b.n	800fb16 <_fx_directory_entry_write+0xaea>
                    break;
 800fb14:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800fb16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb18:	330b      	adds	r3, #11
 800fb1a:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800fb1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	677a      	str	r2, [r7, #116]	; 0x74
 800fb22:	693a      	ldr	r2, [r7, #16]
 800fb24:	7f12      	ldrb	r2, [r2, #28]
 800fb26:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800fb28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb2a:	1c5a      	adds	r2, r3, #1
 800fb2c:	677a      	str	r2, [r7, #116]	; 0x74
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	7f52      	ldrb	r2, [r2, #29]
 800fb32:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800fb34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb36:	1c5a      	adds	r2, r3, #1
 800fb38:	677a      	str	r2, [r7, #116]	; 0x74
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	7f92      	ldrb	r2, [r2, #30]
 800fb3e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	4619      	mov	r1, r3
 800fb46:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fb48:	f005 ffad 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fb4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb4e:	3302      	adds	r3, #2
 800fb50:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	4619      	mov	r1, r3
 800fb58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fb5a:	f005 ffa4 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fb5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb60:	3302      	adds	r3, #2
 800fb62:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb68:	4619      	mov	r1, r3
 800fb6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fb6c:	f005 ff9b 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fb70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb72:	3302      	adds	r3, #2
 800fb74:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d008      	beq.n	800fb90 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb82:	0c1b      	lsrs	r3, r3, #16
 800fb84:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800fb86:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fb88:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fb8a:	f005 ff8c 	bl	8015aa6 <_fx_utility_16_unsigned_write>
 800fb8e:	e003      	b.n	800fb98 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800fb90:	2100      	movs	r1, #0
 800fb92:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fb94:	f005 ff87 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fb98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb9a:	3302      	adds	r3, #2
 800fb9c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba2:	4619      	mov	r1, r3
 800fba4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fba6:	f005 ff7e 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fbaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbac:	3302      	adds	r3, #2
 800fbae:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fbb8:	f005 ff75 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fbbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbbe:	3302      	adds	r3, #2
 800fbc0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fbca:	f005 ff6c 	bl	8015aa6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800fbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fbda:	4613      	mov	r3, r2
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fbe0:	f005 ff93 	bl	8015b0a <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800fbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	461c      	mov	r4, r3
 800fbea:	4615      	mov	r5, r2
 800fbec:	2303      	movs	r3, #3
 800fbee:	9302      	str	r3, [sp, #8]
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	9301      	str	r3, [sp, #4]
 800fbf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	462b      	mov	r3, r5
 800fbfc:	6978      	ldr	r0, [r7, #20]
 800fbfe:	f007 fe47 	bl	8017890 <_fx_utility_logical_sector_write>
 800fc02:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	e044      	b.n	800fc98 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d03e      	beq.n	800fc96 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800fc24:	4299      	cmp	r1, r3
 800fc26:	bf08      	it	eq
 800fc28:	4290      	cmpeq	r0, r2
 800fc2a:	d134      	bne.n	800fc96 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d12d      	bne.n	800fc96 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fc4a:	6979      	ldr	r1, [r7, #20]
 800fc4c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	7f1a      	ldrb	r2, [r3, #28]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	7f5a      	ldrb	r2, [r3, #29]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	7f9a      	ldrb	r2, [r3, #30]
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	6a1a      	ldr	r2, [r3, #32]
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3778      	adds	r7, #120	; 0x78
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fca2:	bf00      	nop

0800fca4 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800fca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fca8:	b0a8      	sub	sp, #160	; 0xa0
 800fcaa:	af04      	add	r7, sp, #16
 800fcac:	6278      	str	r0, [r7, #36]	; 0x24
 800fcae:	6239      	str	r1, [r7, #32]
 800fcb0:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800fcc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcc6:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	2200      	movs	r2, #0
 800fccc:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	2b2e      	cmp	r3, #46	; 0x2e
 800fcd6:	d108      	bne.n	800fcea <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	2b2e      	cmp	r3, #46	; 0x2e
 800fce2:	d102      	bne.n	800fcea <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800fce4:	230c      	movs	r3, #12
 800fce6:	f000 bc17 	b.w	8010518 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800fcea:	2300      	movs	r3, #0
 800fcec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fcf6:	e13d      	b.n	800ff74 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd00:	4413      	add	r3, r2
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b40      	cmp	r3, #64	; 0x40
 800fd06:	d908      	bls.n	800fd1a <_fx_directory_free_search+0x76>
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd10:	4413      	add	r3, r2
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b5a      	cmp	r3, #90	; 0x5a
 800fd16:	f240 8121 	bls.w	800ff5c <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd22:	4413      	add	r3, r2
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	2b2f      	cmp	r3, #47	; 0x2f
 800fd28:	d908      	bls.n	800fd3c <_fx_directory_free_search+0x98>
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd32:	4413      	add	r3, r2
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b39      	cmp	r3, #57	; 0x39
 800fd38:	f240 8112 	bls.w	800ff60 <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd44:	4413      	add	r3, r2
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b60      	cmp	r3, #96	; 0x60
 800fd4a:	d90b      	bls.n	800fd64 <_fx_directory_free_search+0xc0>
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd54:	4413      	add	r3, r2
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b7a      	cmp	r3, #122	; 0x7a
 800fd5a:	d803      	bhi.n	800fd64 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	615a      	str	r2, [r3, #20]
 800fd62:	e102      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd6c:	4413      	add	r3, r2
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	2b20      	cmp	r3, #32
 800fd72:	d103      	bne.n	800fd7c <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	2201      	movs	r2, #1
 800fd78:	615a      	str	r2, [r3, #20]
 800fd7a:	e0f6      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd84:	4413      	add	r3, r2
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b2e      	cmp	r3, #46	; 0x2e
 800fd8a:	d114      	bne.n	800fdb6 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800fd8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10c      	bne.n	800fdae <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800fd94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800fd9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f040 80e2 	bne.w	800ff6a <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	615a      	str	r2, [r3, #20]
 800fdac:	e0dd      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	615a      	str	r2, [r3, #20]
 800fdb4:	e0d9      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdbe:	4413      	add	r3, r2
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2be5      	cmp	r3, #229	; 0xe5
 800fdc4:	d103      	bne.n	800fdce <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	615a      	str	r2, [r3, #20]
 800fdcc:	e0cd      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdd6:	4413      	add	r3, r2
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	b25b      	sxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f2c0 80c1 	blt.w	800ff64 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdea:	4413      	add	r3, r2
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2b7e      	cmp	r3, #126	; 0x7e
 800fdf0:	f000 80ba 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdfc:	4413      	add	r3, r2
 800fdfe:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800fe00:	2b2d      	cmp	r3, #45	; 0x2d
 800fe02:	f000 80b1 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe0e:	4413      	add	r3, r2
 800fe10:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800fe12:	2b5f      	cmp	r3, #95	; 0x5f
 800fe14:	f000 80a8 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe20:	4413      	add	r3, r2
 800fe22:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800fe24:	2b7d      	cmp	r3, #125	; 0x7d
 800fe26:	f000 809f 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe32:	4413      	add	r3, r2
 800fe34:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800fe36:	2b7b      	cmp	r3, #123	; 0x7b
 800fe38:	f000 8096 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe44:	4413      	add	r3, r2
 800fe46:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800fe48:	2b28      	cmp	r3, #40	; 0x28
 800fe4a:	f000 808d 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe56:	4413      	add	r3, r2
 800fe58:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800fe5a:	2b29      	cmp	r3, #41	; 0x29
 800fe5c:	f000 8084 	beq.w	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe68:	4413      	add	r3, r2
 800fe6a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800fe6c:	2b60      	cmp	r3, #96	; 0x60
 800fe6e:	d07b      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe78:	4413      	add	r3, r2
 800fe7a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800fe7c:	2b27      	cmp	r3, #39	; 0x27
 800fe7e:	d073      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe88:	4413      	add	r3, r2
 800fe8a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800fe8c:	2b21      	cmp	r3, #33	; 0x21
 800fe8e:	d06b      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe98:	4413      	add	r3, r2
 800fe9a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800fe9c:	2b23      	cmp	r3, #35	; 0x23
 800fe9e:	d063      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fea8:	4413      	add	r3, r2
 800feaa:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800feac:	2b24      	cmp	r3, #36	; 0x24
 800feae:	d05b      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feb8:	4413      	add	r3, r2
 800feba:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800febc:	2b26      	cmp	r3, #38	; 0x26
 800febe:	d053      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fec8:	4413      	add	r3, r2
 800feca:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800fecc:	2b40      	cmp	r3, #64	; 0x40
 800fece:	d04b      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed8:	4413      	add	r3, r2
 800feda:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800fedc:	2b5e      	cmp	r3, #94	; 0x5e
 800fede:	d043      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fee8:	4413      	add	r3, r2
 800feea:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800feec:	2b25      	cmp	r3, #37	; 0x25
 800feee:	d03b      	beq.n	800ff68 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fef8:	4413      	add	r3, r2
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b2b      	cmp	r3, #43	; 0x2b
 800fefe:	d027      	beq.n	800ff50 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff08:	4413      	add	r3, r2
 800ff0a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800ff0c:	2b2c      	cmp	r3, #44	; 0x2c
 800ff0e:	d01f      	beq.n	800ff50 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff18:	4413      	add	r3, r2
 800ff1a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ff1c:	2b3b      	cmp	r3, #59	; 0x3b
 800ff1e:	d017      	beq.n	800ff50 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff28:	4413      	add	r3, r2
 800ff2a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ff2c:	2b3d      	cmp	r3, #61	; 0x3d
 800ff2e:	d00f      	beq.n	800ff50 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff38:	4413      	add	r3, r2
 800ff3a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ff3c:	2b5b      	cmp	r3, #91	; 0x5b
 800ff3e:	d007      	beq.n	800ff50 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff48:	4413      	add	r3, r2
 800ff4a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ff4c:	2b5d      	cmp	r3, #93	; 0x5d
 800ff4e:	d103      	bne.n	800ff58 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2201      	movs	r2, #1
 800ff54:	615a      	str	r2, [r3, #20]
 800ff56:	e008      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800ff58:	230c      	movs	r3, #12
 800ff5a:	e2dd      	b.n	8010518 <_fx_directory_free_search+0x874>
            continue;
 800ff5c:	bf00      	nop
 800ff5e:	e004      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
            continue;
 800ff60:	bf00      	nop
 800ff62:	e002      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
            continue;
 800ff64:	bf00      	nop
 800ff66:	e000      	b.n	800ff6a <_fx_directory_free_search+0x2c6>
            continue;
 800ff68:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ff6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff6e:	3301      	adds	r3, #1
 800ff70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff7c:	4413      	add	r3, r2
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f47f aeb9 	bne.w	800fcf8 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800ff86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d009      	beq.n	800ffa2 <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800ff8e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	2b04      	cmp	r3, #4
 800ff9a:	d902      	bls.n	800ffa2 <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800ffa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffa6:	2b0c      	cmp	r3, #12
 800ffa8:	d818      	bhi.n	800ffdc <_fx_directory_free_search+0x338>
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	695b      	ldr	r3, [r3, #20]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d114      	bne.n	800ffdc <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800ffb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffbc:	2b08      	cmp	r3, #8
 800ffbe:	d806      	bhi.n	800ffce <_fx_directory_free_search+0x32a>
 800ffc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ffc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	2b08      	cmp	r3, #8
 800ffcc:	d928      	bls.n	8010020 <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800ffda:	e021      	b.n	8010020 <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800ffdc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ffe0:	4b95      	ldr	r3, [pc, #596]	; (8010238 <_fx_directory_free_search+0x594>)
 800ffe2:	fba3 2301 	umull	r2, r3, r3, r1
 800ffe6:	089a      	lsrs	r2, r3, #2
 800ffe8:	4613      	mov	r3, r2
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	4413      	add	r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4413      	add	r3, r2
 800fff2:	1aca      	subs	r2, r1, r3
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	d109      	bne.n	801000c <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800fff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fffc:	4a8e      	ldr	r2, [pc, #568]	; (8010238 <_fx_directory_free_search+0x594>)
 800fffe:	fba2 2303 	umull	r2, r3, r2, r3
 8010002:	089b      	lsrs	r3, r3, #2
 8010004:	3301      	adds	r3, #1
 8010006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801000a:	e00a      	b.n	8010022 <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 801000c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010010:	4a89      	ldr	r2, [pc, #548]	; (8010238 <_fx_directory_free_search+0x594>)
 8010012:	fba2 2303 	umull	r2, r3, r2, r3
 8010016:	089b      	lsrs	r3, r3, #2
 8010018:	3302      	adds	r3, #2
 801001a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801001e:	e000      	b.n	8010022 <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 8010020:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00c      	beq.n	8010046 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 801002c:	6a3b      	ldr	r3, [r7, #32]
 801002e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010032:	4613      	mov	r3, r2
 8010034:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 8010036:	6a3b      	ldr	r3, [r7, #32]
 8010038:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 801003a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801003c:	2200      	movs	r2, #0
 801003e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 8010040:	2302      	movs	r3, #2
 8010042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010044:	e006      	b.n	8010054 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801004a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 801004c:	2300      	movs	r3, #0
 801004e:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 8010050:	2300      	movs	r3, #0
 8010052:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 8010054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010056:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 8010058:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010062:	f7fe fc5d 	bl	800e920 <_fx_directory_entry_read>
 8010066:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 8010068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <_fx_directory_free_search+0x3ce>
        {
            return(status);
 801006e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010070:	e252      	b.n	8010518 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2be5      	cmp	r3, #229	; 0xe5
 801007a:	d103      	bne.n	8010084 <_fx_directory_free_search+0x3e0>
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	791b      	ldrb	r3, [r3, #4]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d004      	beq.n	801008e <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 801008a:	2b00      	cmp	r3, #0
 801008c:	d16b      	bne.n	8010166 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 801008e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010092:	2b01      	cmp	r3, #1
 8010094:	d91a      	bls.n	80100cc <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d115      	bne.n	80100cc <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	2200      	movs	r2, #0
 80100a4:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	23e5      	movs	r3, #229	; 0xe5
 80100ac:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	1c5a      	adds	r2, r3, #1
 80100b4:	2300      	movs	r3, #0
 80100b6:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 80100b8:	69f9      	ldr	r1, [r7, #28]
 80100ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100bc:	f7fe ffb6 	bl	800f02c <_fx_directory_entry_write>
 80100c0:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 80100c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 80100c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ca:	e225      	b.n	8010518 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 80100cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d109      	bne.n	80100e8 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 80100d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d6:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80100de:	4613      	mov	r3, r2
 80100e0:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100e6:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 80100e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	3301      	adds	r3, #1
 80100f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d838      	bhi.n	801016a <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 80100f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100fa:	2200      	movs	r2, #0
 80100fc:	461c      	mov	r4, r3
 80100fe:	4615      	mov	r5, r2
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801010a:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	2200      	movs	r2, #0
 8010110:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	2200      	movs	r2, #0
 8010116:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010118:	f3ef 8310 	mrs	r3, PRIMASK
 801011c:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8010120:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010122:	b672      	cpsid	i
#endif
    return(int_posture);
 8010124:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 8010126:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8010128:	4b44      	ldr	r3, [pc, #272]	; (801023c <_fx_directory_free_search+0x598>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8010130:	4b43      	ldr	r3, [pc, #268]	; (8010240 <_fx_directory_free_search+0x59c>)
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8010138:	4b41      	ldr	r3, [pc, #260]	; (8010240 <_fx_directory_free_search+0x59c>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	629a      	str	r2, [r3, #40]	; 0x28
 8010140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010142:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010146:	f383 8810 	msr	PRIMASK, r3
}
 801014a:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 801014c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010150:	2b01      	cmp	r3, #1
 8010152:	d103      	bne.n	801015c <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	2200      	movs	r2, #0
 8010158:	615a      	str	r2, [r3, #20]
 801015a:	e002      	b.n	8010162 <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	2201      	movs	r2, #1
 8010160:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 8010162:	2300      	movs	r3, #0
 8010164:	e1d8      	b.n	8010518 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 8010166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010168:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 801016a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016c:	3301      	adds	r3, #1
 801016e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010174:	429a      	cmp	r2, r3
 8010176:	f200 81c9 	bhi.w	801050c <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 801017a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801017e:	015a      	lsls	r2, r3, #5
 8010180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010184:	4413      	add	r3, r2
 8010186:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 8010188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 801018c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010190:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010198:	4413      	add	r3, r2
 801019a:	1e5a      	subs	r2, r3, #1
 801019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80101a4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 80101a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d104      	bne.n	80101b6 <_fx_directory_free_search+0x512>
 80101ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 81ab 	beq.w	801050c <_fx_directory_free_search+0x868>
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101bc:	429a      	cmp	r2, r3
 80101be:	f200 81a5 	bhi.w	801050c <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ca:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101d6:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 80101d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101da:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 80101dc:	e10b      	b.n	80103f6 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 80101de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101e0:	3b01      	subs	r3, #1
 80101e2:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 80101e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 80101ea:	230a      	movs	r3, #10
 80101ec:	e194      	b.n	8010518 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 80101ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101f2:	461a      	mov	r2, r3
 80101f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80101f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101f8:	f005 fca8 	bl	8015b4c <_fx_utility_FAT_entry_read>
 80101fc:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 80101fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 8010204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010206:	e187      	b.n	8010518 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 8010208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801020a:	3b01      	subs	r3, #1
 801020c:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	2b00      	cmp	r3, #0
 8010212:	d117      	bne.n	8010244 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8010214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010216:	1c5a      	adds	r2, r3, #1
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010220:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8010224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010228:	3302      	adds	r3, #2
 801022a:	429a      	cmp	r2, r3
 801022c:	d316      	bcc.n	801025c <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 801022e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010230:	2202      	movs	r2, #2
 8010232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 8010236:	e011      	b.n	801025c <_fx_directory_free_search+0x5b8>
 8010238:	4ec4ec4f 	.word	0x4ec4ec4f
 801023c:	24004350 	.word	0x24004350
 8010240:	2400434c 	.word	0x2400434c
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 8010244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010246:	3301      	adds	r3, #1
 8010248:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801024e:	3302      	adds	r3, #2
 8010250:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010252:	429a      	cmp	r2, r3
 8010254:	d3c6      	bcc.n	80101e4 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 8010256:	2302      	movs	r3, #2
 8010258:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 801025a:	e7c3      	b.n	80101e4 <_fx_directory_free_search+0x540>
                            break;
 801025c:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8010262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010264:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 801026a:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 801026e:	440b      	add	r3, r1
 8010270:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010276:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8010278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801027a:	2200      	movs	r2, #0
 801027c:	613b      	str	r3, [r7, #16]
 801027e:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8010284:	2303      	movs	r3, #3
 8010286:	9302      	str	r3, [sp, #8]
 8010288:	2301      	movs	r3, #1
 801028a:	9301      	str	r3, [sp, #4]
 801028c:	9200      	str	r2, [sp, #0]
 801028e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010294:	f007 f868 	bl	8017368 <_fx_utility_logical_sector_read>
 8010298:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 801029a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 80102a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102a2:	e139      	b.n	8010518 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 80102b2:	e00d      	b.n	80102d0 <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 80102b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 80102bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80102c0:	3304      	adds	r3, #4
 80102c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 80102c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102ca:	3304      	adds	r3, #4
 80102cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80102d8:	429a      	cmp	r2, r3
 80102da:	d3eb      	bcc.n	80102b4 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80102dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102de:	2200      	movs	r2, #0
 80102e0:	60bb      	str	r3, [r7, #8]
 80102e2:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80102e8:	2303      	movs	r3, #3
 80102ea:	9302      	str	r3, [sp, #8]
 80102ec:	2301      	movs	r3, #1
 80102ee:	9301      	str	r3, [sp, #4]
 80102f0:	9200      	str	r2, [sp, #0]
 80102f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80102f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102f8:	f007 faca 	bl	8017890 <_fx_utility_logical_sector_write>
 80102fc:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 80102fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 8010304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010306:	e107      	b.n	8010518 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 8010308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801030a:	2b01      	cmp	r3, #1
 801030c:	d95a      	bls.n	80103c4 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 801030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010310:	3301      	adds	r3, #1
 8010312:	2200      	movs	r2, #0
 8010314:	603b      	str	r3, [r7, #0]
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031a:	3b01      	subs	r3, #1
 801031c:	2200      	movs	r2, #0
 801031e:	4698      	mov	r8, r3
 8010320:	4691      	mov	r9, r2
 8010322:	2301      	movs	r3, #1
 8010324:	9302      	str	r3, [sp, #8]
 8010326:	e9cd 8900 	strd	r8, r9, [sp]
 801032a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801032e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010330:	f006 fe04 	bl	8016f3c <_fx_utility_logical_sector_flush>
 8010334:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 8010336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 801033c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801033e:	e0eb      	b.n	8010518 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 8010340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010342:	3b01      	subs	r3, #1
 8010344:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 8010346:	e03a      	b.n	80103be <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 8010348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801034e:	1c5a      	adds	r2, r3, #1
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010358:	2201      	movs	r2, #1
 801035a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	2290      	movs	r2, #144	; 0x90
 8010362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	689a      	ldr	r2, [r3, #8]
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8010370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010374:	441a      	add	r2, r3
 8010376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	2201      	movs	r2, #1
 8010380:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8010384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010386:	2203      	movs	r2, #3
 8010388:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038e:	2201      	movs	r2, #1
 8010390:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801039a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801039c:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a0:	2200      	movs	r2, #0
 80103a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d003      	beq.n	80103b8 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103b6:	e0af      	b.n	8010518 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 80103b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ba:	3b01      	subs	r3, #1
 80103bc:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 80103be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1c1      	bne.n	8010348 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 80103c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d101      	bne.n	80103ce <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 80103ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103cc:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 80103ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00a      	beq.n	80103ea <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 80103d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80103d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103da:	f005 fde0 	bl	8015f9e <_fx_utility_FAT_entry_write>
 80103de:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 80103e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d001      	beq.n	80103ea <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 80103e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103e8:	e096      	b.n	8010518 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 80103ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103ec:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103f4:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 80103f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f47f aef0 	bne.w	80101de <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010404:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8010408:	461a      	mov	r2, r3
 801040a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801040c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801040e:	f005 fdc6 	bl	8015f9e <_fx_utility_FAT_entry_write>
 8010412:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8010414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 801041a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801041c:	e07c      	b.n	8010518 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 801041e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010420:	2b00      	cmp	r3, #0
 8010422:	d003      	beq.n	801042c <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 8010424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010428:	673b      	str	r3, [r7, #112]	; 0x70
 801042a:	e002      	b.n	8010432 <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 801042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010430:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 8010432:	2300      	movs	r3, #0
 8010434:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 8010436:	2300      	movs	r3, #0
 8010438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 801043c:	e024      	b.n	8010488 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 801043e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010442:	461a      	mov	r2, r3
 8010444:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010448:	f005 fb80 	bl	8015b4c <_fx_utility_FAT_entry_read>
 801044c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 801044e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010452:	3301      	adds	r3, #1
 8010454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 8010458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 801045e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010460:	e05a      	b.n	8010518 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 8010462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010464:	2b01      	cmp	r3, #1
 8010466:	d909      	bls.n	801047c <_fx_directory_free_search+0x7d8>
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801046c:	429a      	cmp	r2, r3
 801046e:	d005      	beq.n	801047c <_fx_directory_free_search+0x7d8>
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010474:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010478:	429a      	cmp	r2, r3
 801047a:	d901      	bls.n	8010480 <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 801047c:	2303      	movs	r3, #3
 801047e:	e04b      	b.n	8010518 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 8010480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010482:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801048e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8010492:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010494:	429a      	cmp	r2, r3
 8010496:	d3d2      	bcc.n	801043e <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801049c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801049e:	1ad2      	subs	r2, r2, r3
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104aa:	fb03 f202 	mul.w	r2, r3, r2
 80104ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b2:	fb02 f303 	mul.w	r3, r2, r3
 80104b6:	095b      	lsrs	r3, r3, #5
 80104b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104ba:	4413      	add	r3, r2
 80104bc:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	2be5      	cmp	r3, #229	; 0xe5
 80104c6:	d103      	bne.n	80104d0 <_fx_directory_free_search+0x82c>
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	791b      	ldrb	r3, [r3, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 80104d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104d2:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 80104d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104d6:	2200      	movs	r2, #0
 80104d8:	469a      	mov	sl, r3
 80104da:	4693      	mov	fp, r2
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d005      	beq.n	80104f6 <_fx_directory_free_search+0x852>
 80104ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d102      	bne.n	80104f6 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 80104f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104f4:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 80104f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80104fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104fc:	f005 fd4f 	bl	8015f9e <_fx_utility_FAT_entry_write>
 8010500:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8010502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010504:	2b00      	cmp	r3, #0
 8010506:	d001      	beq.n	801050c <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 8010508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801050a:	e005      	b.n	8010518 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010510:	429a      	cmp	r2, r3
 8010512:	f63f ada1 	bhi.w	8010058 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 8010516:	230a      	movs	r3, #10
}
 8010518:	4618      	mov	r0, r3
 801051a:	3790      	adds	r7, #144	; 0x90
 801051c:	46bd      	mov	sp, r7
 801051e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010522:	bf00      	nop

08010524 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2200      	movs	r2, #0
 8010532:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	2b5c      	cmp	r3, #92	; 0x5c
 801053a:	d003      	beq.n	8010544 <_fx_directory_name_extract+0x20>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b2f      	cmp	r3, #47	; 0x2f
 8010542:	d106      	bne.n	8010552 <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	3301      	adds	r3, #1
 8010548:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 801054a:	e002      	b.n	8010552 <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	3301      	adds	r3, #1
 8010550:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2b20      	cmp	r3, #32
 8010558:	d0f8      	beq.n	801054c <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 801055a:	2300      	movs	r3, #0
 801055c:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 801055e:	e015      	b.n	801058c <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b5c      	cmp	r3, #92	; 0x5c
 8010566:	d017      	beq.n	8010598 <_fx_directory_name_extract+0x74>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	2b2f      	cmp	r3, #47	; 0x2f
 801056e:	d013      	beq.n	8010598 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2bff      	cmp	r3, #255	; 0xff
 8010574:	d00f      	beq.n	8010596 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	440a      	add	r2, r1
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	3301      	adds	r3, #1
 801058a:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1e5      	bne.n	8010560 <_fx_directory_name_extract+0x3c>
 8010594:	e000      	b.n	8010598 <_fx_directory_name_extract+0x74>
            break;
 8010596:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 8010598:	683a      	ldr	r2, [r7, #0]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	2200      	movs	r2, #0
 80105a0:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3b01      	subs	r3, #1
 80105ac:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 80105ae:	e007      	b.n	80105c0 <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	4413      	add	r3, r2
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3b01      	subs	r3, #1
 80105be:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	4413      	add	r3, r2
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b20      	cmp	r3, #32
 80105ca:	d0f1      	beq.n	80105b0 <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d101      	bne.n	80105d8 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 80105d8:	687b      	ldr	r3, [r7, #4]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
	...

080105e8 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 80105e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80105ec:	b0c0      	sub	sp, #256	; 0x100
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80105f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80105f4:	627a      	str	r2, [r7, #36]	; 0x24
 80105f6:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 80105f8:	2300      	movs	r3, #0
 80105fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 80105fe:	2300      	movs	r3, #0
 8010600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 8010604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010614:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801061e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d003      	beq.n	8010630 <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 8010628:	6a3b      	ldr	r3, [r7, #32]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	2300      	movs	r3, #0
 801062e:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2b5c      	cmp	r3, #92	; 0x5c
 8010636:	d003      	beq.n	8010640 <_fx_directory_search+0x58>
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	2b2f      	cmp	r3, #47	; 0x2f
 801063e:	d103      	bne.n	8010648 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 8010640:	2300      	movs	r3, #0
 8010642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010646:	e044      	b.n	80106d2 <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 8010648:	4bab      	ldr	r3, [pc, #684]	; (80108f8 <_fx_directory_search+0x310>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010650:	2b00      	cmp	r3, #0
 8010652:	d022      	beq.n	801069a <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 8010654:	4ba8      	ldr	r3, [pc, #672]	; (80108f8 <_fx_directory_search+0x310>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d016      	beq.n	8010692 <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 8010664:	4ba4      	ldr	r3, [pc, #656]	; (80108f8 <_fx_directory_search+0x310>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801066c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010670:	4619      	mov	r1, r3
 8010672:	2370      	movs	r3, #112	; 0x70
 8010674:	461a      	mov	r2, r3
 8010676:	f00a fd49 	bl	801b10c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 801067a:	4b9f      	ldr	r3, [pc, #636]	; (80108f8 <_fx_directory_search+0x310>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010682:	3370      	adds	r3, #112	; 0x70
 8010684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 8010688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801068c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010690:	e01f      	b.n	80106d2 <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 8010692:	2300      	movs	r3, #0
 8010694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010698:	e01b      	b.n	80106d2 <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d012      	beq.n	80106cc <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80106a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80106ac:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 80106b0:	2370      	movs	r3, #112	; 0x70
 80106b2:	461a      	mov	r2, r3
 80106b4:	f00a fd2a 	bl	801b10c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80106be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 80106c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80106ca:	e002      	b.n	80106d2 <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 80106cc:	2300      	movs	r3, #0
 80106ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 80106d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d4:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f000 81b9 	beq.w	8010a50 <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 80106de:	2300      	movs	r3, #0
 80106e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b5c      	cmp	r3, #92	; 0x5c
 80106ea:	d02d      	beq.n	8010748 <_fx_directory_search+0x160>
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b2f      	cmp	r3, #47	; 0x2f
 80106f2:	d14c      	bne.n	801078e <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 80106f4:	e028      	b.n	8010748 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 80106f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106fc:	4413      	add	r3, r2
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 8010704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801070a:	4413      	add	r3, r2
 801070c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 8010716:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 801071a:	2b5c      	cmp	r3, #92	; 0x5c
 801071c:	d102      	bne.n	8010724 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 801071e:	232f      	movs	r3, #47	; 0x2f
 8010720:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 8010724:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8010728:	2b5c      	cmp	r3, #92	; 0x5c
 801072a:	d102      	bne.n	8010732 <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 801072c:	232f      	movs	r3, #47	; 0x2f
 801072e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 8010732:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8010736:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801073a:	429a      	cmp	r2, r3
 801073c:	d110      	bne.n	8010760 <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 801073e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010742:	3301      	adds	r3, #1
 8010744:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8010748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801074c:	2bfe      	cmp	r3, #254	; 0xfe
 801074e:	d808      	bhi.n	8010762 <_fx_directory_search+0x17a>
 8010750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010756:	4413      	add	r3, r2
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d1cb      	bne.n	80106f6 <_fx_directory_search+0x10e>
 801075e:	e000      	b.n	8010762 <_fx_directory_search+0x17a>
                    break;
 8010760:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8010762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010768:	4413      	add	r3, r2
 801076a:	7819      	ldrb	r1, [r3, #0]
 801076c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801076e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010772:	4413      	add	r3, r2
 8010774:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	4299      	cmp	r1, r3
 801077c:	d003      	beq.n	8010786 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 801077e:	2300      	movs	r3, #0
 8010780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8010784:	e0cf      	b.n	8010926 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 8010786:	2301      	movs	r3, #1
 8010788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 801078c:	e0cb      	b.n	8010926 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 801078e:	2301      	movs	r3, #1
 8010790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 8010794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010798:	2b00      	cmp	r3, #0
 801079a:	d043      	beq.n	8010824 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 801079c:	e029      	b.n	80107f2 <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 801079e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107a4:	4413      	add	r3, r2
 80107a6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 80107b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80107b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107b8:	4413      	add	r3, r2
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 80107c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80107c4:	2b5c      	cmp	r3, #92	; 0x5c
 80107c6:	d102      	bne.n	80107ce <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 80107c8:	232f      	movs	r3, #47	; 0x2f
 80107ca:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 80107ce:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80107d2:	2b5c      	cmp	r3, #92	; 0x5c
 80107d4:	d102      	bne.n	80107dc <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 80107d6:	232f      	movs	r3, #47	; 0x2f
 80107d8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 80107dc:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80107e0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d111      	bne.n	801080c <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80107e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107ec:	3301      	adds	r3, #1
 80107ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80107f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107f6:	2bfe      	cmp	r3, #254	; 0xfe
 80107f8:	d809      	bhi.n	801080e <_fx_directory_search+0x226>
 80107fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80107fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010802:	4413      	add	r3, r2
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1c9      	bne.n	801079e <_fx_directory_search+0x1b6>
 801080a:	e000      	b.n	801080e <_fx_directory_search+0x226>
                        break;
 801080c:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 801080e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010816:	4413      	add	r3, r2
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d002      	beq.n	8010824 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 801081e:	2300      	movs	r3, #0
 8010820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 8010824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010828:	2b00      	cmp	r3, #0
 801082a:	d07c      	beq.n	8010926 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 801082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801082e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010832:	4413      	add	r3, r2
 8010834:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	2b5c      	cmp	r3, #92	; 0x5c
 801083c:	d00c      	beq.n	8010858 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 801083e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010844:	4413      	add	r3, r2
 8010846:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801084a:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 801084c:	2b2f      	cmp	r3, #47	; 0x2f
 801084e:	d003      	beq.n	8010858 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 8010850:	2300      	movs	r3, #0
 8010852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010856:	e004      	b.n	8010862 <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 8010858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801085c:	3301      	adds	r3, #1
 801085e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 8010862:	2300      	movs	r3, #0
 8010864:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8010868:	e02d      	b.n	80108c6 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 801086a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801086c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010870:	4413      	add	r3, r2
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 8010878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801087a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801087e:	4413      	add	r3, r2
 8010880:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 801088a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 801088e:	2b5c      	cmp	r3, #92	; 0x5c
 8010890:	d102      	bne.n	8010898 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 8010892:	232f      	movs	r3, #47	; 0x2f
 8010894:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 8010898:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801089c:	2b5c      	cmp	r3, #92	; 0x5c
 801089e:	d102      	bne.n	80108a6 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 80108a0:	232f      	movs	r3, #47	; 0x2f
 80108a2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 80108a6:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80108aa:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d119      	bne.n	80108e6 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80108b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108b6:	3301      	adds	r3, #1
 80108b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 80108bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80108c0:	3301      	adds	r3, #1
 80108c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 80108c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108ca:	2bfe      	cmp	r3, #254	; 0xfe
 80108cc:	d80c      	bhi.n	80108e8 <_fx_directory_search+0x300>
 80108ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80108d4:	4413      	add	r3, r2
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d005      	beq.n	80108e8 <_fx_directory_search+0x300>
 80108dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1c2      	bne.n	801086a <_fx_directory_search+0x282>
 80108e4:	e000      	b.n	80108e8 <_fx_directory_search+0x300>
                        break;
 80108e6:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 80108e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108ec:	2bff      	cmp	r3, #255	; 0xff
 80108ee:	d905      	bls.n	80108fc <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 80108f0:	2300      	movs	r3, #0
 80108f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80108f6:	e016      	b.n	8010926 <_fx_directory_search+0x33e>
 80108f8:	240043cc 	.word	0x240043cc
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 80108fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010900:	2b00      	cmp	r3, #0
 8010902:	d010      	beq.n	8010926 <_fx_directory_search+0x33e>
 8010904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801090a:	4413      	add	r3, r2
 801090c:	7819      	ldrb	r1, [r3, #0]
 801090e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010914:	4413      	add	r3, r2
 8010916:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	4299      	cmp	r1, r3
 801091e:	d002      	beq.n	8010926 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 8010920:	2300      	movs	r3, #0
 8010922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 8010926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 8090 	beq.w	8010a50 <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 8010938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093c:	4610      	mov	r0, r2
 801093e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8010942:	2270      	movs	r2, #112	; 0x70
 8010944:	4619      	mov	r1, r3
 8010946:	f00a fbe1 	bl	801b10c <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010950:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8010952:	2300      	movs	r3, #0
 8010954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010958:	e01d      	b.n	8010996 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 801095a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801095e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010962:	4413      	add	r3, r2
 8010964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010966:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801096a:	440a      	add	r2, r1
 801096c:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8010970:	7812      	ldrb	r2, [r2, #0]
 8010972:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 8010974:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d103      	bne.n	801098c <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8010984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010988:	2bfe      	cmp	r3, #254	; 0xfe
 801098a:	d909      	bls.n	80109a0 <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 801098c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010990:	3301      	adds	r3, #1
 8010992:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801099a:	2bff      	cmp	r3, #255	; 0xff
 801099c:	d9dd      	bls.n	801095a <_fx_directory_search+0x372>
 801099e:	e000      	b.n	80109a2 <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 80109a0:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d041      	beq.n	8010a2c <_fx_directory_search+0x444>
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d03c      	beq.n	8010a2c <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 80109ba:	6a3a      	ldr	r2, [r7, #32]
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	4610      	mov	r0, r2
 80109c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80109c4:	2270      	movs	r2, #112	; 0x70
 80109c6:	4619      	mov	r1, r3
 80109c8:	f00a fba0 	bl	801b10c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80109d2:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 80109d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80109de:	2300      	movs	r3, #0
 80109e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80109e4:	e01c      	b.n	8010a20 <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80109e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80109ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109ee:	441a      	add	r2, r3
 80109f0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80109f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109f8:	440b      	add	r3, r1
 80109fa:	7812      	ldrb	r2, [r2, #0]
 80109fc:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 80109fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a06:	4413      	add	r3, r2
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d103      	bne.n	8010a16 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8010a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a12:	2bfe      	cmp	r3, #254	; 0xfe
 8010a14:	d909      	bls.n	8010a2a <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8010a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a24:	2bff      	cmp	r3, #255	; 0xff
 8010a26:	d9de      	bls.n	80109e6 <_fx_directory_search+0x3fe>
 8010a28:	e000      	b.n	8010a2c <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 8010a2a:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 8010a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 8010a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010a3c:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8010a44:	1c5a      	adds	r2, r3, #1
 8010a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a48:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	e2ff      	b.n	8011050 <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8010a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a52:	2300      	movs	r3, #0
 8010a54:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 8010a58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d003      	beq.n	8010a68 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 8010a60:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8010a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a66:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8010a68:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8010a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a6e:	f7ff fd59 	bl	8010524 <_fx_directory_name_extract>
 8010a72:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8010a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 80be 	beq.w	8010bfa <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8010a7e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010a82:	2300      	movs	r3, #0
 8010a84:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 8010a86:	2300      	movs	r3, #0
 8010a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 8010a8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8010a96:	e02b      	b.n	8010af0 <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 8010a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8010aa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8010aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aae:	f005 f84d 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8010ab2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 8010ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 8010abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ac2:	e2c5      	b.n	8011050 <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 8010ac4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d90b      	bls.n	8010ae4 <_fx_directory_search+0x4fc>
 8010acc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010ad0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d005      	beq.n	8010ae4 <_fx_directory_search+0x4fc>
 8010ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d201      	bcs.n	8010ae8 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e2b3      	b.n	8011050 <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 8010ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010af6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8010afa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d3ca      	bcc.n	8010a98 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8010b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b06:	2200      	movs	r2, #0
 8010b08:	469a      	mov	sl, r3
 8010b0a:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b10:	2200      	movs	r2, #0
 8010b12:	613b      	str	r3, [r7, #16]
 8010b14:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8010b16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	fb03 f20b 	mul.w	r2, r3, fp
 8010b20:	460b      	mov	r3, r1
 8010b22:	fb0a f303 	mul.w	r3, sl, r3
 8010b26:	4413      	add	r3, r2
 8010b28:	4602      	mov	r2, r0
 8010b2a:	fbaa 4502 	umull	r4, r5, sl, r2
 8010b2e:	442b      	add	r3, r5
 8010b30:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8010b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b36:	2200      	movs	r2, #0
 8010b38:	60bb      	str	r3, [r7, #8]
 8010b3a:	60fa      	str	r2, [r7, #12]
 8010b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010b40:	4603      	mov	r3, r0
 8010b42:	fb03 f205 	mul.w	r2, r3, r5
 8010b46:	460b      	mov	r3, r1
 8010b48:	fb04 f303 	mul.w	r3, r4, r3
 8010b4c:	4413      	add	r3, r2
 8010b4e:	4602      	mov	r2, r0
 8010b50:	fba4 8902 	umull	r8, r9, r4, r2
 8010b54:	444b      	add	r3, r9
 8010b56:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8010b58:	f04f 0200 	mov.w	r2, #0
 8010b5c:	f04f 0300 	mov.w	r3, #0
 8010b60:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8010b64:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 8010b68:	ea4f 1359 	mov.w	r3, r9, lsr #5
 8010b6c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8010b70:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8010b74:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010b78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 8010b7c:	6a3b      	ldr	r3, [r7, #32]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d046      	beq.n	8010c10 <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 8010b8a:	6a3a      	ldr	r2, [r7, #32]
 8010b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b90:	4610      	mov	r0, r2
 8010b92:	4619      	mov	r1, r3
 8010b94:	2370      	movs	r3, #112	; 0x70
 8010b96:	461a      	mov	r2, r3
 8010b98:	f00a fab8 	bl	801b10c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8010b9c:	6a3a      	ldr	r2, [r7, #32]
 8010b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010ba2:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 8010ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010bb4:	e01c      	b.n	8010bf0 <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 8010bb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bbe:	18d1      	adds	r1, r2, r3
 8010bc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bc8:	441a      	add	r2, r3
 8010bca:	780b      	ldrb	r3, [r1, #0]
 8010bcc:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 8010bce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bd6:	4413      	add	r3, r2
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d103      	bne.n	8010be6 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8010bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010be2:	2bfe      	cmp	r3, #254	; 0xfe
 8010be4:	d913      	bls.n	8010c0e <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8010be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bea:	3301      	adds	r3, #1
 8010bec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bf4:	2bff      	cmp	r3, #255	; 0xff
 8010bf6:	d9de      	bls.n	8010bb6 <_fx_directory_search+0x5ce>
 8010bf8:	e00a      	b.n	8010c10 <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8010bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bfe:	2200      	movs	r2, #0
 8010c00:	603b      	str	r3, [r7, #0]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c08:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010c0c:	e000      	b.n	8010c10 <_fx_directory_search+0x628>
                            break;
 8010c0e:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 8010c16:	2300      	movs	r3, #0
 8010c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 8010c1c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8010c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c28:	f7fd fe7a 	bl	800e920 <_fx_directory_entry_read>
 8010c2c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 8010c30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c34:	3301      	adds	r3, #1
 8010c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 8010c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d002      	beq.n	8010c48 <_fx_directory_search+0x660>
            {
                return(status);
 8010c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c46:	e203      	b.n	8011050 <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 8010c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 80c6 	beq.w	8010de0 <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 8010c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c56:	7f1b      	ldrb	r3, [r3, #28]
 8010c58:	f003 0308 	and.w	r3, r3, #8
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f040 80a9 	bne.w	8010db4 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 8010c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	2be5      	cmp	r3, #229	; 0xe5
 8010c6a:	d104      	bne.n	8010c76 <_fx_directory_search+0x68e>
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	791b      	ldrb	r3, [r3, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f000 80a1 	beq.w	8010db8 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 8010c76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 8010c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 8010c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8010c9a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8010c9e:	2b60      	cmp	r3, #96	; 0x60
 8010ca0:	d908      	bls.n	8010cb4 <_fx_directory_search+0x6cc>
 8010ca2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8010ca6:	2b7a      	cmp	r3, #122	; 0x7a
 8010ca8:	d804      	bhi.n	8010cb4 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 8010caa:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8010cae:	3b20      	subs	r3, #32
 8010cb0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8010cb4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010cb8:	2b60      	cmp	r3, #96	; 0x60
 8010cba:	d908      	bls.n	8010cce <_fx_directory_search+0x6e6>
 8010cbc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010cc0:	2b7a      	cmp	r3, #122	; 0x7a
 8010cc2:	d804      	bhi.n	8010cce <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8010cc4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010cc8:	3b20      	subs	r3, #32
 8010cca:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 8010cce:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8010cd2:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d10f      	bne.n	8010cfa <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 8010cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010cde:	3301      	adds	r3, #1
 8010ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 8010ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ce8:	3301      	adds	r3, #1
 8010cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 8010cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1c6      	bne.n	8010c86 <_fx_directory_search+0x69e>
 8010cf8:	e000      	b.n	8010cfc <_fx_directory_search+0x714>
                    break;
 8010cfa:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8010cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10b      	bne.n	8010d1e <_fx_directory_search+0x736>
 8010d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d0a:	781a      	ldrb	r2, [r3, #0]
 8010d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d103      	bne.n	8010d1e <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 8010d16:	2301      	movs	r3, #1
 8010d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010d1c:	e04d      	b.n	8010dba <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	791b      	ldrb	r3, [r3, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d049      	beq.n	8010dba <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 8010d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	3304      	adds	r3, #4
 8010d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 8010d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 8010d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8010d4a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010d4e:	2b60      	cmp	r3, #96	; 0x60
 8010d50:	d908      	bls.n	8010d64 <_fx_directory_search+0x77c>
 8010d52:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010d56:	2b7a      	cmp	r3, #122	; 0x7a
 8010d58:	d804      	bhi.n	8010d64 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8010d5a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010d5e:	3b20      	subs	r3, #32
 8010d60:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 8010d64:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8010d68:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d10f      	bne.n	8010d90 <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 8010d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d74:	3301      	adds	r3, #1
 8010d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 8010d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d7e:	3301      	adds	r3, #1
 8010d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 8010d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1d3      	bne.n	8010d36 <_fx_directory_search+0x74e>
 8010d8e:	e000      	b.n	8010d92 <_fx_directory_search+0x7aa>
                        break;
 8010d90:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8010d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10e      	bne.n	8010dba <_fx_directory_search+0x7d2>
 8010d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010da0:	781a      	ldrb	r2, [r3, #0]
 8010da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d106      	bne.n	8010dba <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 8010dac:	2301      	movs	r3, #1
 8010dae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010db2:	e002      	b.n	8010dba <_fx_directory_search+0x7d2>
                continue;
 8010db4:	bf00      	nop
 8010db6:	e000      	b.n	8010dba <_fx_directory_search+0x7d2>
                continue;
 8010db8:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 8010dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	61bb      	str	r3, [r7, #24]
 8010dc2:	61fa      	str	r2, [r7, #28]
 8010dc4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010dc8:	69b9      	ldr	r1, [r7, #24]
 8010dca:	4291      	cmp	r1, r2
 8010dcc:	69f9      	ldr	r1, [r7, #28]
 8010dce:	eb71 0303 	sbcs.w	r3, r1, r3
 8010dd2:	d206      	bcs.n	8010de2 <_fx_directory_search+0x7fa>
 8010dd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	f43f af1f 	beq.w	8010c1c <_fx_directory_search+0x634>
 8010dde:	e000      	b.n	8010de2 <_fx_directory_search+0x7fa>
                break;
 8010de0:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 8010de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 8010dea:	2304      	movs	r3, #4
 8010dec:	e130      	b.n	8011050 <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8010dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df0:	7f1b      	ldrb	r3, [r3, #28]
 8010df2:	f003 0310 	and.w	r3, r3, #16
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d04f      	beq.n	8010e9a <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010e00:	4619      	mov	r1, r3
 8010e02:	2370      	movs	r3, #112	; 0x70
 8010e04:	461a      	mov	r2, r3
 8010e06:	f00a f981 	bl	801b10c <memcpy>
            search_dir_ptr =  &search_dir;
 8010e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8010e12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010e16:	2300      	movs	r3, #0
 8010e18:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 8010e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d13f      	bne.n	8010ea4 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8010e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 8010e2e:	6a3b      	ldr	r3, [r7, #32]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d02e      	beq.n	8010e92 <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 8010e3c:	6a3a      	ldr	r2, [r7, #32]
 8010e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e42:	4610      	mov	r0, r2
 8010e44:	4619      	mov	r1, r3
 8010e46:	2370      	movs	r3, #112	; 0x70
 8010e48:	461a      	mov	r2, r3
 8010e4a:	f00a f95f 	bl	801b10c <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8010e4e:	6a3a      	ldr	r2, [r7, #32]
 8010e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010e54:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 8010e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8010e60:	2300      	movs	r3, #0
 8010e62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e66:	e010      	b.n	8010e8a <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 8010e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e70:	18d1      	adds	r1, r2, r3
 8010e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e7a:	441a      	add	r2, r3
 8010e7c:	780b      	ldrb	r3, [r1, #0]
 8010e7e:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8010e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e84:	3301      	adds	r3, #1
 8010e86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e8e:	2bff      	cmp	r3, #255	; 0xff
 8010e90:	d9ea      	bls.n	8010e68 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e98:	e004      	b.n	8010ea4 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d001      	beq.n	8010ea4 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 8010ea0:	2304      	movs	r3, #4
 8010ea2:	e0d5      	b.n	8011050 <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f47f add6 	bne.w	8010a58 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8010eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	2b5c      	cmp	r3, #92	; 0x5c
 8010eba:	d028      	beq.n	8010f0e <_fx_directory_search+0x926>
 8010ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	2b2f      	cmp	r3, #47	; 0x2f
 8010ec4:	d023      	beq.n	8010f0e <_fx_directory_search+0x926>
 8010ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d01f      	beq.n	8010f0e <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8010ece:	e012      	b.n	8010ef6 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8010ed0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ed8:	4413      	add	r3, r2
 8010eda:	7819      	ldrb	r1, [r3, #0]
 8010edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010ee8:	460a      	mov	r2, r1
 8010eea:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 8010eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8010ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010efa:	2bfe      	cmp	r3, #254	; 0xfe
 8010efc:	d807      	bhi.n	8010f0e <_fx_directory_search+0x926>
 8010efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f06:	4413      	add	r3, r2
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1e0      	bne.n	8010ed0 <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 8010f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b5c      	cmp	r3, #92	; 0x5c
 8010f16:	d012      	beq.n	8010f3e <_fx_directory_search+0x956>
 8010f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	2b2f      	cmp	r3, #47	; 0x2f
 8010f20:	d00d      	beq.n	8010f3e <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 8010f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f26:	2bfe      	cmp	r3, #254	; 0xfe
 8010f28:	d809      	bhi.n	8010f3e <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 8010f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f2e:	1c5a      	adds	r2, r3, #1
 8010f30:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f36:	4413      	add	r3, r2
 8010f38:	222f      	movs	r2, #47	; 0x2f
 8010f3a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8010f44:	e017      	b.n	8010f76 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8010f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010f4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f4e:	4413      	add	r3, r2
 8010f50:	7819      	ldrb	r1, [r3, #0]
 8010f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f58:	4413      	add	r3, r2
 8010f5a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010f5e:	460a      	mov	r2, r1
 8010f60:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 8010f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f66:	3301      	adds	r3, #1
 8010f68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 8010f6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f70:	3301      	adds	r3, #1
 8010f72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8010f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f7a:	2bff      	cmp	r3, #255	; 0xff
 8010f7c:	d807      	bhi.n	8010f8e <_fx_directory_search+0x9a6>
 8010f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f86:	4413      	add	r3, r2
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1db      	bne.n	8010f46 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 8010f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f92:	2bff      	cmp	r3, #255	; 0xff
 8010f94:	d808      	bhi.n	8010fa8 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8010f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f9c:	4413      	add	r3, r2
 8010f9e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	701a      	strb	r2, [r3, #0]
 8010fa6:	e003      	b.n	8010fb0 <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 8010fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d00e      	beq.n	8010fd6 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010fbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	2270      	movs	r2, #112	; 0x70
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f00a f8a0 	bl	801b10c <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8010fd4:	e003      	b.n	8010fde <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 8010fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fe2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	2270      	movs	r2, #112	; 0x70
 8010fea:	4618      	mov	r0, r3
 8010fec:	f00a f88e 	bl	801b10c <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 8010ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff2:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011002:	e01e      	b.n	8011042 <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801100c:	4413      	add	r3, r2
 801100e:	7819      	ldrb	r1, [r3, #0]
 8011010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011012:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011016:	4413      	add	r3, r2
 8011018:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 801101c:	460a      	mov	r2, r1
 801101e:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011028:	4413      	add	r3, r2
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d103      	bne.n	8011038 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8011030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011034:	2bfe      	cmp	r3, #254	; 0xfe
 8011036:	d909      	bls.n	801104c <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8011038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801103c:	3301      	adds	r3, #1
 801103e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011046:	2bff      	cmp	r3, #255	; 0xff
 8011048:	d9dc      	bls.n	8011004 <_fx_directory_search+0xa1c>
 801104a:	e000      	b.n	801104e <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 801104c:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011056:	46bd      	mov	sp, r7
 8011058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801105c <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b088      	sub	sp, #32
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	4a49      	ldr	r2, [pc, #292]	; (8011190 <_fx_file_close+0x134>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d001      	beq.n	8011072 <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 801106e:	2307      	movs	r3, #7
 8011070:	e08a      	b.n	8011188 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011076:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801107e:	1c5a      	adds	r2, r3, #1
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4a42      	ldr	r2, [pc, #264]	; (8011194 <_fx_file_close+0x138>)
 801108c:	4293      	cmp	r3, r2
 801108e:	d001      	beq.n	8011094 <_fx_file_close+0x38>
 8011090:	2311      	movs	r3, #17
 8011092:	e079      	b.n	8011188 <_fx_file_close+0x12c>
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801109a:	f04f 31ff 	mov.w	r1, #4294967295
 801109e:	4618      	mov	r0, r3
 80110a0:	f007 fd4e 	bl	8018b40 <_tx_mutex_get>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <_fx_file_close+0x52>
 80110aa:	2311      	movs	r3, #17
 80110ac:	e06c      	b.n	8011188 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d104      	bne.n	80110c2 <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80110c0:	e014      	b.n	80110ec <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 80110ca:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 80110d4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d104      	bne.n	80110ec <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80110f2:	1e5a      	subs	r2, r3, #1
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a26      	ldr	r2, [pc, #152]	; (8011198 <_fx_file_close+0x13c>)
 80110fe:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	689b      	ldr	r3, [r3, #8]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d138      	bne.n	801117a <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 801110c:	2b00      	cmp	r3, #0
 801110e:	d034      	beq.n	801117a <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011110:	f3ef 8310 	mrs	r3, PRIMASK
 8011114:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011116:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8011118:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801111a:	b672      	cpsid	i
    return(int_posture);
 801111c:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 801111e:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8011120:	4b1e      	ldr	r3, [pc, #120]	; (801119c <_fx_file_close+0x140>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 801112a:	4b1d      	ldr	r3, [pc, #116]	; (80111a0 <_fx_file_close+0x144>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8011134:	4b1a      	ldr	r3, [pc, #104]	; (80111a0 <_fx_file_close+0x144>)
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	f383 8810 	msr	PRIMASK, r3
}
 8011148:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8011150:	6879      	ldr	r1, [r7, #4]
 8011152:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3368      	adds	r3, #104	; 0x68
 801115a:	4619      	mov	r1, r3
 801115c:	69f8      	ldr	r0, [r7, #28]
 801115e:	f7fd ff65 	bl	800f02c <_fx_directory_entry_write>
 8011162:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d007      	beq.n	801117a <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011170:	4618      	mov	r0, r3
 8011172:	f007 ff5d 	bl	8019030 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	e006      	b.n	8011188 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011180:	4618      	mov	r0, r3
 8011182:	f007 ff55 	bl	8019030 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3720      	adds	r7, #32
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	46494c45 	.word	0x46494c45
 8011194:	4d454449 	.word	0x4d454449
 8011198:	46494c43 	.word	0x46494c43
 801119c:	24004350 	.word	0x24004350
 80111a0:	2400434c 	.word	0x2400434c

080111a4 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 80111a4:	b590      	push	{r4, r7, lr}
 80111a6:	b0c5      	sub	sp, #276	; 0x114
 80111a8:	af02      	add	r7, sp, #8
 80111aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111b2:	6018      	str	r0, [r3, #0]
 80111b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111bc:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 80111be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80111cc:	1c5a      	adds	r2, r3, #1
 80111ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 80111dc:	2300      	movs	r3, #0
 80111de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 80111e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 80111f0:	e020      	b.n	8011234 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 80111f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b5c      	cmp	r3, #92	; 0x5c
 80111fa:	d004      	beq.n	8011206 <_fx_file_create+0x62>
 80111fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	2b2f      	cmp	r3, #47	; 0x2f
 8011204:	d103      	bne.n	801120e <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8011206:	2300      	movs	r3, #0
 8011208:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801120c:	e00d      	b.n	801122a <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 801120e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b20      	cmp	r3, #32
 8011216:	d103      	bne.n	8011220 <_fx_file_create+0x7c>
 8011218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801121c:	2b00      	cmp	r3, #0
 801121e:	d004      	beq.n	801122a <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 8011220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011224:	3301      	adds	r3, #1
 8011226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 801122a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801122e:	3301      	adds	r3, #1
 8011230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 8011234:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1d9      	bne.n	80111f2 <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 801123e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011242:	2b00      	cmp	r3, #0
 8011244:	d003      	beq.n	801124e <_fx_file_create+0xaa>
 8011246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801124a:	2bff      	cmp	r3, #255	; 0xff
 801124c:	d901      	bls.n	8011252 <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 801124e:	230c      	movs	r3, #12
 8011250:	e10a      	b.n	8011468 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8011252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8011260:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011264:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8011266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8011274:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8011278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8011280:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 8011282:	2300      	movs	r3, #0
 8011284:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 8011288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801128c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8011290:	2200      	movs	r2, #0
 8011292:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8011294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4a74      	ldr	r2, [pc, #464]	; (8011474 <_fx_file_create+0x2d0>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d001      	beq.n	80112aa <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80112a6:	2311      	movs	r3, #17
 80112a8:	e0de      	b.n	8011468 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80112aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a6f      	ldr	r2, [pc, #444]	; (8011474 <_fx_file_create+0x2d0>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d001      	beq.n	80112c0 <_fx_file_create+0x11c>
 80112bc:	2311      	movs	r3, #17
 80112be:	e0d3      	b.n	8011468 <_fx_file_create+0x2c4>
 80112c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80112ce:	f04f 31ff 	mov.w	r1, #4294967295
 80112d2:	4618      	mov	r0, r3
 80112d4:	f007 fc34 	bl	8018b40 <_tx_mutex_get>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <_fx_file_create+0x13e>
 80112de:	2311      	movs	r3, #17
 80112e0:	e0c2      	b.n	8011468 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 80112e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00b      	beq.n	801130c <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80112f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011302:	4618      	mov	r0, r3
 8011304:	f007 fe94 	bl	8019030 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8011308:	2323      	movs	r3, #35	; 0x23
 801130a:	e0ad      	b.n	8011468 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 801130c:	f107 0408 	add.w	r4, r7, #8
 8011310:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011318:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 801131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011320:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8011324:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	4623      	mov	r3, r4
 801132c:	6809      	ldr	r1, [r1, #0]
 801132e:	6800      	ldr	r0, [r0, #0]
 8011330:	f7ff f95a 	bl	80105e8 <_fx_directory_search>
 8011334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 8011338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801133c:	2b00      	cmp	r3, #0
 801133e:	d10b      	bne.n	8011358 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8011340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801134e:	4618      	mov	r0, r3
 8011350:	f007 fe6e 	bl	8019030 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 8011354:	230b      	movs	r3, #11
 8011356:	e087      	b.n	8011468 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 8011358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801135c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801135e:	4611      	mov	r1, r2
 8011360:	4618      	mov	r0, r3
 8011362:	f7ff f8df 	bl	8010524 <_fx_directory_name_extract>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00b      	beq.n	8011384 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801136c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801137a:	4618      	mov	r0, r3
 801137c:	f007 fe58 	bl	8019030 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 8011380:	230d      	movs	r3, #13
 8011382:	e071      	b.n	8011468 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 8011384:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011388:	f107 0108 	add.w	r1, r7, #8
 801138c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7fe fc85 	bl	800fca4 <_fx_directory_free_search>
 801139a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 801139e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00c      	beq.n	80113c0 <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80113a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80113b4:	4618      	mov	r0, r3
 80113b6:	f007 fe3b 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 80113ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113be:	e053      	b.n	8011468 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 80113c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80113c6:	4611      	mov	r1, r2
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff f8ab 	bl	8010524 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113ce:	f3ef 8310 	mrs	r3, PRIMASK
 80113d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 80113d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 80113da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 80113de:	b672      	cpsid	i
    return(int_posture);
 80113e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 80113e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 80113e8:	4b23      	ldr	r3, [pc, #140]	; (8011478 <_fx_file_create+0x2d4>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 80113f0:	4b22      	ldr	r3, [pc, #136]	; (801147c <_fx_file_create+0x2d8>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80113f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80113fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011404:	f383 8810 	msr	PRIMASK, r3
}
 8011408:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 801140a:	2320      	movs	r3, #32
 801140c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 8011410:	f04f 0200 	mov.w	r2, #0
 8011414:	f04f 0300 	mov.w	r3, #0
 8011418:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 801141c:	2300      	movs	r3, #0
 801141e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8011422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	2b2e      	cmp	r3, #46	; 0x2e
 8011428:	d106      	bne.n	8011438 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 801142a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801142e:	f043 0302 	orr.w	r3, r3, #2
 8011432:	b2db      	uxtb	r3, r3
 8011434:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8011438:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801143c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011444:	4611      	mov	r1, r2
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f7fd fdf0 	bl	800f02c <_fx_directory_entry_write>
 801144c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 8011450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801145e:	4618      	mov	r0, r3
 8011460:	f007 fde6 	bl	8019030 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 8011464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 8011468:	4618      	mov	r0, r3
 801146a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 801146e:	46bd      	mov	sp, r7
 8011470:	bd90      	pop	{r4, r7, pc}
 8011472:	bf00      	nop
 8011474:	4d454449 	.word	0x4d454449
 8011478:	24004350 	.word	0x24004350
 801147c:	2400434c 	.word	0x2400434c

08011480 <_fx_file_delete>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_delete(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b0a8      	sub	sp, #160	; 0xa0
 8011484:	af02      	add	r7, sp, #8
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_deletes++;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
#endif

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801149e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80114a2:	60bb      	str	r3, [r7, #8]

    /* Clear the short name string.  */
    dir_entry.fx_dir_entry_short_name[0] =  0;
 80114a4:	2300      	movs	r3, #0
 80114a6:	733b      	strb	r3, [r7, #12]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a8e      	ldr	r2, [pc, #568]	; (80116e8 <_fx_file_delete+0x268>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d001      	beq.n	80114b6 <_fx_file_delete+0x36>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80114b2:	2311      	movs	r3, #17
 80114b4:	e113      	b.n	80116de <_fx_file_delete+0x25e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_DELETE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4a8b      	ldr	r2, [pc, #556]	; (80116e8 <_fx_file_delete+0x268>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d001      	beq.n	80114c4 <_fx_file_delete+0x44>
 80114c0:	2311      	movs	r3, #17
 80114c2:	e10c      	b.n	80116de <_fx_file_delete+0x25e>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80114ca:	f04f 31ff 	mov.w	r1, #4294967295
 80114ce:	4618      	mov	r0, r3
 80114d0:	f007 fb36 	bl	8018b40 <_tx_mutex_get>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <_fx_file_delete+0x5e>
 80114da:	2311      	movs	r3, #17
 80114dc:	e0ff      	b.n	80116de <_fx_file_delete+0x25e>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d007      	beq.n	80114f8 <_fx_file_delete+0x78>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80114ee:	4618      	mov	r0, r3
 80114f0:	f007 fd9e 	bl	8019030 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 80114f4:	2323      	movs	r3, #35	; 0x23
 80114f6:	e0f2      	b.n	80116de <_fx_file_delete+0x25e>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, FX_NULL, FX_NULL);
 80114f8:	f107 0208 	add.w	r2, r7, #8
 80114fc:	2300      	movs	r3, #0
 80114fe:	9300      	str	r3, [sp, #0]
 8011500:	2300      	movs	r3, #0
 8011502:	6839      	ldr	r1, [r7, #0]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f7ff f86f 	bl	80105e8 <_fx_directory_search>
 801150a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 801150e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011512:	2b00      	cmp	r3, #0
 8011514:	d008      	beq.n	8011528 <_fx_file_delete+0xa8>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801151c:	4618      	mov	r0, r3
 801151e:	f007 fd87 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8011522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011526:	e0da      	b.n	80116de <_fx_file_delete+0x25e>
        not_a_file_attr = FX_DIRECTORY;
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8011528:	2318      	movs	r3, #24
 801152a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Check to make sure the found entry is a file.  */
    if (dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 801152e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8011532:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011536:	4013      	ands	r3, r2
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d007      	beq.n	801154e <_fx_file_delete+0xce>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011544:	4618      	mov	r0, r3
 8011546:	f007 fd73 	bl	8019030 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 801154a:	2305      	movs	r3, #5
 801154c:	e0c7      	b.n	80116de <_fx_file_delete+0x25e>
    }

    /* Check if the entry is read only */
    if (dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 801154e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011552:	f003 0301 	and.w	r3, r3, #1
 8011556:	2b00      	cmp	r3, #0
 8011558:	d007      	beq.n	801156a <_fx_file_delete+0xea>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011560:	4618      	mov	r0, r3
 8011562:	f007 fd65 	bl	8019030 <_tx_mutex_put>

        /* Return the not a directory error code.  */
        return(FX_WRITE_PROTECT);
 8011566:	2323      	movs	r3, #35	; 0x23
 8011568:	e0b9      	b.n	80116de <_fx_file_delete+0x25e>
    }

    /* Search the opened files to see if this file is currently
       opened.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801157a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    while (open_count)
 801157e:	e022      	b.n	80115c6 <_fx_file_delete+0x146>
    {

        /* Look at each opened file to see if the same file is opened.  */
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 8011580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011584:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8011588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801158c:	4299      	cmp	r1, r3
 801158e:	bf08      	it	eq
 8011590:	4290      	cmpeq	r0, r2
 8011592:	d10e      	bne.n	80115b2 <_fx_file_delete+0x132>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset))
 8011594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011598:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801159c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 801159e:	429a      	cmp	r2, r3
 80115a0:	d107      	bne.n	80115b2 <_fx_file_delete+0x132>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80115a8:	4618      	mov	r0, r3
 80115aa:	f007 fd41 	bl	8019030 <_tx_mutex_put>

            /* The file is currently open.  */
            return(FX_ACCESS_ERROR);
 80115ae:	2306      	movs	r3, #6
 80115b0:	e095      	b.n	80116de <_fx_file_delete+0x25e>
        }

        /* Adjust the pointer and decrement the search count.  */
        search_ptr =  search_ptr -> fx_file_opened_next;
 80115b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80115b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        open_count--;
 80115bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115c0:	3b01      	subs	r3, #1
 80115c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (open_count)
 80115c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1d8      	bne.n	8011580 <_fx_file_delete+0x100>
    }

    /* Pickup the starting cluster of the file.  */
    cluster =           dir_entry.fx_dir_entry_cluster;
 80115ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    /* At this point, make the directory entry invalid in order to delete the file.  */

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the directory search saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

    /* Mark the directory entry as available, while leaving the other
       information for the sake of posterity.  */
    dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	22e5      	movs	r2, #229	; 0xe5
 80115e0:	701a      	strb	r2, [r3, #0]
    dir_entry.fx_dir_entry_short_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80115e2:	23e5      	movs	r3, #229	; 0xe5
 80115e4:	733b      	strb	r3, [r7, #12]
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_DELETE);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 80115e6:	f107 0308 	add.w	r3, r7, #8
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7fd fd1d 	bl	800f02c <_fx_directory_entry_write>
 80115f2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Determine if the write was successful.  */
    if (status != FX_SUCCESS)
 80115f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d008      	beq.n	8011610 <_fx_file_delete+0x190>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011604:	4618      	mov	r0, r3
 8011606:	f007 fd13 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 801160a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801160e:	e066      	b.n	80116de <_fx_file_delete+0x25e>
    }

    /* Now that the directory entry is no longer valid and pointing at the chain of clusters,
       walk the chain of allocated FAT entries and mark each of them as free.  */
    cluster_count =     0;
 8011610:	2300      	movs	r3, #0
 8011612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Follow the link of FAT entries.  */
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8011616:	e046      	b.n	80116a6 <_fx_file_delete+0x226>
        {

            /* Increment the number of clusters.  */
            cluster_count++;
 8011618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801161c:	3301      	adds	r3, #1
 801161e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8011622:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011626:	461a      	mov	r2, r3
 8011628:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f004 fa8d 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8011632:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8011636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801163a:	2b00      	cmp	r3, #0
 801163c:	d008      	beq.n	8011650 <_fx_file_delete+0x1d0>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011644:	4618      	mov	r0, r3
 8011646:	f007 fcf3 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 801164a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801164e:	e046      	b.n	80116de <_fx_file_delete+0x25e>
                }
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8011650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011652:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011656:	429a      	cmp	r2, r3
 8011658:	d005      	beq.n	8011666 <_fx_file_delete+0x1e6>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801165e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011662:	429a      	cmp	r2, r3
 8011664:	d907      	bls.n	8011676 <_fx_file_delete+0x1f6>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801166c:	4618      	mov	r0, r3
 801166e:	f007 fcdf 	bl	8019030 <_tx_mutex_put>

                /* Return the bad status.  */
                return(FX_FAT_READ_ERROR);
 8011672:	2303      	movs	r3, #3
 8011674:	e033      	b.n	80116de <_fx_file_delete+0x25e>
            if (!(dir_entry.fx_dir_entry_dont_use_fat & 1))
            {
#endif /* FX_ENABLE_EXFAT */

                /* Make the current cluster available.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 8011676:	2200      	movs	r2, #0
 8011678:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f004 fc8e 	bl	8015f9e <_fx_utility_FAT_entry_write>
 8011682:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8011686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801168a:	2b00      	cmp	r3, #0
 801168c:	d008      	beq.n	80116a0 <_fx_file_delete+0x220>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011694:	4618      	mov	r0, r3
 8011696:	f007 fccb 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 801169a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801169e:	e01e      	b.n	80116de <_fx_file_delete+0x25e>
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Setup for the next cluster.  */
            cluster =  contents;
 80116a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80116a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d908      	bls.n	80116c0 <_fx_file_delete+0x240>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80116b4:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80116b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80116bc:	429a      	cmp	r2, r3
 80116be:	d3ab      	bcc.n	8011618 <_fx_file_delete+0x198>
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Update the free clusters in the media control block.  */
    media_ptr -> fx_media_available_clusters =
        media_ptr -> fx_media_available_clusters + cluster_count;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80116c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116c8:	441a      	add	r2, r3
    media_ptr -> fx_media_available_clusters =
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	67da      	str	r2, [r3, #124]	; 0x7c
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80116d4:	4618      	mov	r0, r3
 80116d6:	f007 fcab 	bl	8019030 <_tx_mutex_put>

    /* File delete is complete, return status.  */
    return(status);
 80116da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3798      	adds	r7, #152	; 0x98
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	4d454449 	.word	0x4d454449

080116ec <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 80116ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116f0:	b0c2      	sub	sp, #264	; 0x108
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80116f8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 80116fc:	2300      	movs	r3, #0
 80116fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8011702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	4bcf      	ldr	r3, [pc, #828]	; (8011a48 <_fx_file_extended_seek+0x35c>)
 801170a:	429a      	cmp	r2, r3
 801170c:	d001      	beq.n	8011712 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 801170e:	2307      	movs	r3, #7
 8011710:	e2b4      	b.n	8011c7c <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8011712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 801171c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011720:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801172a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 801172e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011734:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8011738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	4bc3      	ldr	r3, [pc, #780]	; (8011a4c <_fx_file_extended_seek+0x360>)
 8011740:	429a      	cmp	r2, r3
 8011742:	d001      	beq.n	8011748 <_fx_file_extended_seek+0x5c>
 8011744:	2311      	movs	r3, #17
 8011746:	e299      	b.n	8011c7c <_fx_file_extended_seek+0x590>
 8011748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801174c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011750:	f04f 31ff 	mov.w	r1, #4294967295
 8011754:	4618      	mov	r0, r3
 8011756:	f007 f9f3 	bl	8018b40 <_tx_mutex_get>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <_fx_file_extended_seek+0x78>
 8011760:	2311      	movs	r3, #17
 8011762:	e28b      	b.n	8011c7c <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 8011764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011768:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 801176c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011770:	428b      	cmp	r3, r1
 8011772:	bf08      	it	eq
 8011774:	4282      	cmpeq	r2, r0
 8011776:	d108      	bne.n	801178a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8011778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801177c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011780:	4618      	mov	r0, r3
 8011782:	f007 fc55 	bl	8019030 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 8011786:	2300      	movs	r3, #0
 8011788:	e278      	b.n	8011c7c <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801178a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801178e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8011790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8011796:	fb02 f303 	mul.w	r3, r2, r3
 801179a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 801179e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d108      	bne.n	80117b8 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80117a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80117ae:	4618      	mov	r0, r3
 80117b0:	f007 fc3e 	bl	8019030 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 80117b4:	2302      	movs	r3, #2
 80117b6:	e261      	b.n	8011c7c <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 80117b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117bc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80117c0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80117c4:	4290      	cmp	r0, r2
 80117c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80117ca:	d205      	bcs.n	80117d8 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 80117cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117d0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80117d4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 80117d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80117dc:	699b      	ldr	r3, [r3, #24]
 80117de:	2200      	movs	r2, #0
 80117e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80117e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80117e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80117ec:	2200      	movs	r2, #0
 80117ee:	469a      	mov	sl, r3
 80117f0:	4693      	mov	fp, r2
 80117f2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80117f6:	460b      	mov	r3, r1
 80117f8:	fb0a f203 	mul.w	r2, sl, r3
 80117fc:	4603      	mov	r3, r0
 80117fe:	fb03 f30b 	mul.w	r3, r3, fp
 8011802:	4413      	add	r3, r2
 8011804:	4602      	mov	r2, r0
 8011806:	fba2 450a 	umull	r4, r5, r2, sl
 801180a:	442b      	add	r3, r5
 801180c:	461d      	mov	r5, r3
 801180e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011812:	42a2      	cmp	r2, r4
 8011814:	41ab      	sbcs	r3, r5
 8011816:	f0c0 8155 	bcc.w	8011ac4 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 801181a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011820:	2200      	movs	r2, #0
 8011822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011826:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801182a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801182e:	2200      	movs	r2, #0
 8011830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011834:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011838:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801183c:	462b      	mov	r3, r5
 801183e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8011842:	4652      	mov	r2, sl
 8011844:	fb02 f203 	mul.w	r2, r2, r3
 8011848:	465b      	mov	r3, fp
 801184a:	4621      	mov	r1, r4
 801184c:	fb01 f303 	mul.w	r3, r1, r3
 8011850:	4413      	add	r3, r2
 8011852:	4622      	mov	r2, r4
 8011854:	4651      	mov	r1, sl
 8011856:	fba2 8901 	umull	r8, r9, r2, r1
 801185a:	444b      	add	r3, r9
 801185c:	4699      	mov	r9, r3
 801185e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011862:	4590      	cmp	r8, r2
 8011864:	eb79 0303 	sbcs.w	r3, r9, r3
 8011868:	d225      	bcs.n	80118b6 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 801186a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 8011874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801187a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801187e:	fb02 f303 	mul.w	r3, r2, r3
 8011882:	2200      	movs	r2, #0
 8011884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011888:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 801188c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011890:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8011894:	4621      	mov	r1, r4
 8011896:	1a51      	subs	r1, r2, r1
 8011898:	6139      	str	r1, [r7, #16]
 801189a:	4629      	mov	r1, r5
 801189c:	eb63 0301 	sbc.w	r3, r3, r1
 80118a0:	617b      	str	r3, [r7, #20]
 80118a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80118a6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 80118aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80118b4:	e0b7      	b.n	8011a26 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80118b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118ba:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 80118bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118c0:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80118c2:	4413      	add	r3, r2
 80118c4:	3b01      	subs	r3, #1
 80118c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 80118ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118ce:	699b      	ldr	r3, [r3, #24]
 80118d0:	1e5a      	subs	r2, r3, #1
 80118d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80118d6:	fb02 f303 	mul.w	r3, r2, r3
 80118da:	2200      	movs	r2, #0
 80118dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80118e0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 80118e4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80118e8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80118ec:	4621      	mov	r1, r4
 80118ee:	1a51      	subs	r1, r2, r1
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	4629      	mov	r1, r5
 80118f4:	eb63 0301 	sbc.w	r3, r3, r1
 80118f8:	60fb      	str	r3, [r7, #12]
 80118fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80118fe:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 8011902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	3b01      	subs	r3, #1
 801190a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 801190e:	e08a      	b.n	8011a26 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8011910:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011914:	3301      	adds	r3, #1
 8011916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 801191a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801191e:	461a      	mov	r2, r3
 8011920:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8011924:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011928:	f004 f910 	bl	8015b4c <_fx_utility_FAT_entry_read>
 801192c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8011930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011934:	2b00      	cmp	r3, #0
 8011936:	d009      	beq.n	801194c <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8011938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801193c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011940:	4618      	mov	r0, r3
 8011942:	f007 fb75 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8011946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801194a:	e197      	b.n	8011c7c <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 801194c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 8011954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 801195c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011960:	2200      	movs	r2, #0
 8011962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011966:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801196a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801196e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8011972:	4621      	mov	r1, r4
 8011974:	4291      	cmp	r1, r2
 8011976:	4629      	mov	r1, r5
 8011978:	eb71 0303 	sbcs.w	r3, r1, r3
 801197c:	d216      	bcs.n	80119ac <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 801197e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011982:	2200      	movs	r2, #0
 8011984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011988:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801198c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8011990:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011994:	4621      	mov	r1, r4
 8011996:	1a51      	subs	r1, r2, r1
 8011998:	6039      	str	r1, [r7, #0]
 801199a:	4629      	mov	r1, r5
 801199c:	eb63 0301 	sbc.w	r3, r3, r1
 80119a0:	607b      	str	r3, [r7, #4]
 80119a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80119a6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 80119aa:	e03c      	b.n	8011a26 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 80119ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80119b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80119b4:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 80119b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119ba:	1e5a      	subs	r2, r3, #1
 80119bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80119c0:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 80119c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80119c6:	2200      	movs	r2, #0
 80119c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80119cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80119d0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80119d4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80119d8:	4621      	mov	r1, r4
 80119da:	4628      	mov	r0, r5
 80119dc:	4283      	cmp	r3, r0
 80119de:	bf08      	it	eq
 80119e0:	428a      	cmpeq	r2, r1
 80119e2:	d135      	bne.n	8011a50 <_fx_file_extended_seek+0x364>
 80119e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d931      	bls.n	8011a50 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80119ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80119f4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80119f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d227      	bcs.n	8011a50 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8011a00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a08:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 8011a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a10:	1c5a      	adds	r2, r3, #1
 8011a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a16:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8011a18:	f04f 0200 	mov.w	r2, #0
 8011a1c:	f04f 0300 	mov.w	r3, #0
 8011a20:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 8011a24:	e014      	b.n	8011a50 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8011a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d911      	bls.n	8011a52 <_fx_file_extended_seek+0x366>
 8011a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011a36:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8011a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	f4ff af66 	bcc.w	8011910 <_fx_file_extended_seek+0x224>
 8011a44:	e005      	b.n	8011a52 <_fx_file_extended_seek+0x366>
 8011a46:	bf00      	nop
 8011a48:	46494c45 	.word	0x46494c45
 8011a4c:	4d454449 	.word	0x4d454449
                    break;
 8011a50:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 8011a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a56:	2200      	movs	r2, #0
 8011a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011a5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011a60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a64:	2200      	movs	r2, #0
 8011a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a68:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011a6a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011a6e:	462b      	mov	r3, r5
 8011a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011a74:	4642      	mov	r2, r8
 8011a76:	fb02 f203 	mul.w	r2, r2, r3
 8011a7a:	464b      	mov	r3, r9
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	fb01 f303 	mul.w	r3, r1, r3
 8011a82:	4413      	add	r3, r2
 8011a84:	4622      	mov	r2, r4
 8011a86:	4641      	mov	r1, r8
 8011a88:	fba2 1201 	umull	r1, r2, r2, r1
 8011a8c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8011a90:	460a      	mov	r2, r1
 8011a92:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8011a96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011a9a:	4413      	add	r3, r2
 8011a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011aa0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011aa4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8011aa8:	4621      	mov	r1, r4
 8011aaa:	4291      	cmp	r1, r2
 8011aac:	4629      	mov	r1, r5
 8011aae:	4199      	sbcs	r1, r3
 8011ab0:	d22f      	bcs.n	8011b12 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 8011ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ab6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011aba:	4618      	mov	r0, r3
 8011abc:	f007 fab8 	bl	8019030 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 8011ac0:	2308      	movs	r3, #8
 8011ac2:	e0db      	b.n	8011c7c <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 8011ac4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011ac8:	2200      	movs	r2, #0
 8011aca:	673b      	str	r3, [r7, #112]	; 0x70
 8011acc:	677a      	str	r2, [r7, #116]	; 0x74
 8011ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011ad2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8011ad6:	f7ee fd83 	bl	80005e0 <__aeabi_uldivmod>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ae2:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 8011ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ae8:	695a      	ldr	r2, [r3, #20]
 8011aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011af0:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 8011af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011af6:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 8011af8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011afc:	2200      	movs	r2, #0
 8011afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011b02:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8011b06:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011b0a:	f7ee fd69 	bl	80005e0 <__aeabi_uldivmod>
 8011b0e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 8011b12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b16:	2200      	movs	r2, #0
 8011b18:	663b      	str	r3, [r7, #96]	; 0x60
 8011b1a:	667a      	str	r2, [r7, #100]	; 0x64
 8011b1c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8011b20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011b24:	4621      	mov	r1, r4
 8011b26:	4628      	mov	r0, r5
 8011b28:	4283      	cmp	r3, r0
 8011b2a:	bf08      	it	eq
 8011b2c:	428a      	cmpeq	r2, r1
 8011b2e:	d151      	bne.n	8011bd4 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8011b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b3a:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011b3c:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8011b3e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8011b42:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011b44:	fb01 f303 	mul.w	r3, r1, r3
 8011b48:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011b4a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8011b4e:	1e51      	subs	r1, r2, #1
 8011b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8011b52:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b5e:	2200      	movs	r2, #0
 8011b60:	653b      	str	r3, [r7, #80]	; 0x50
 8011b62:	657a      	str	r2, [r7, #84]	; 0x54
 8011b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011b68:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8011b6c:	f7ee fd38 	bl	80005e0 <__aeabi_uldivmod>
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011b74:	4613      	mov	r3, r2
 8011b76:	4423      	add	r3, r4
 8011b78:	2200      	movs	r2, #0
 8011b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8011b86:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011b8a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8011b8e:	1e51      	subs	r1, r2, #1
 8011b90:	6439      	str	r1, [r7, #64]	; 0x40
 8011b92:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011b96:	647b      	str	r3, [r7, #68]	; 0x44
 8011b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ba2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011ba8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8011bac:	f7ee fd18 	bl	80005e0 <__aeabi_uldivmod>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bb8:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8011bba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011bbe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011bc2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8011bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8011bd2:	e04b      	b.n	8011c6c <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8011bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bde:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011be0:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8011be2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8011be6:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011be8:	fb01 f303 	mul.w	r3, r1, r3
 8011bec:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8011bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8011bfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011bfe:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8011c02:	f7ee fced 	bl	80005e0 <__aeabi_uldivmod>
 8011c06:	4602      	mov	r2, r0
 8011c08:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	4423      	add	r3, r4
 8011c0e:	2200      	movs	r2, #0
 8011c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011c1c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c26:	2200      	movs	r2, #0
 8011c28:	623b      	str	r3, [r7, #32]
 8011c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8011c2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011c30:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8011c34:	f7ee fcd4 	bl	80005e0 <__aeabi_uldivmod>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c40:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8011c42:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011c46:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8011c4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c54:	2200      	movs	r2, #0
 8011c56:	61bb      	str	r3, [r7, #24]
 8011c58:	61fa      	str	r2, [r7, #28]
 8011c5a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8011c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011c62:	f7ee fcbd 	bl	80005e0 <__aeabi_uldivmod>
 8011c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8011c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c70:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011c74:	4618      	mov	r0, r3
 8011c76:	f007 f9db 	bl	8019030 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011c82:	46bd      	mov	sp, r7
 8011c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011c88 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8011c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c8c:	b0e8      	sub	sp, #416	; 0x1a0
 8011c8e:	af02      	add	r7, sp, #8
 8011c90:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8011c94:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8011c98:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8011c9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8011ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	4bd9      	ldr	r3, [pc, #868]	; (8012014 <_fx_file_open+0x38c>)
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d002      	beq.n	8011cb8 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8011cb2:	2311      	movs	r3, #17
 8011cb4:	f000 bcc4 	b.w	8012640 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 8011cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011cbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8011cc0:	1c5a      	adds	r2, r3, #1
 8011cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011cc6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 8011cca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 8011cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d006      	beq.n	8011cec <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 8011cde:	4bce      	ldr	r3, [pc, #824]	; (8012018 <_fx_file_open+0x390>)
 8011ce0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8011ce4:	2318      	movs	r3, #24
 8011ce6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8011cea:	e006      	b.n	8011cfa <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 8011cec:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8011cf0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8011cf4:	2318      	movs	r3, #24
 8011cf6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8011cfa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	d106      	bne.n	8011d10 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 8011d02:	2300      	movs	r3, #0
 8011d04:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8011d0e:	e002      	b.n	8011d16 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 8011d10:	2300      	movs	r3, #0
 8011d12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8011d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	4bbd      	ldr	r3, [pc, #756]	; (8012014 <_fx_file_open+0x38c>)
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d002      	beq.n	8011d28 <_fx_file_open+0xa0>
 8011d22:	2311      	movs	r3, #17
 8011d24:	f000 bc8c 	b.w	8012640 <_fx_file_open+0x9b8>
 8011d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011d2c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011d30:	f04f 31ff 	mov.w	r1, #4294967295
 8011d34:	4618      	mov	r0, r3
 8011d36:	f006 ff03 	bl	8018b40 <_tx_mutex_get>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <_fx_file_open+0xbe>
 8011d40:	2311      	movs	r3, #17
 8011d42:	f000 bc7d 	b.w	8012640 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8011d46:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011d4a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8011d4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011d52:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 8011d54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011d58:	2300      	movs	r3, #0
 8011d5a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8011d5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011d62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011d66:	2300      	movs	r3, #0
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8011d70:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8011d74:	f7fe fc38 	bl	80105e8 <_fx_directory_search>
 8011d78:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8011d7c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00a      	beq.n	8011d9a <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8011d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011d88:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f007 f94f 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8011d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011d96:	f000 bc53 	b.w	8012640 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8011d9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011d9e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8011da2:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8011da6:	4013      	ands	r3, r2
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d009      	beq.n	8011dc2 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8011dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011db2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011db6:	4618      	mov	r0, r3
 8011db8:	f007 f93a 	bl	8019030 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 8011dbc:	2305      	movs	r3, #5
 8011dbe:	f000 bc3f 	b.w	8012640 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 8011dc2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d160      	bne.n	8011e8c <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 8011dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d009      	beq.n	8011dea <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8011dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011dda:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011dde:	4618      	mov	r0, r3
 8011de0:	f007 f926 	bl	8019030 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 8011de4:	2323      	movs	r3, #35	; 0x23
 8011de6:	f000 bc2b 	b.w	8012640 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8011dea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011df2:	f003 0301 	and.w	r3, r3, #1
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d009      	beq.n	8011e0e <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8011dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011dfe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011e02:	4618      	mov	r0, r3
 8011e04:	f007 f914 	bl	8019030 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 8011e08:	2306      	movs	r3, #6
 8011e0a:	f000 bc19 	b.w	8012640 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 8011e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011e12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011e16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8011e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011e1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011e22:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 8011e26:	e02d      	b.n	8011e84 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8011e28:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011e2c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8011e30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e34:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8011e38:	4299      	cmp	r1, r3
 8011e3a:	bf08      	it	eq
 8011e3c:	4290      	cmpeq	r0, r2
 8011e3e:	d117      	bne.n	8011e70 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8011e40:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011e44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8011e48:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d10d      	bne.n	8011e70 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 8011e54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011e58:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	d108      	bne.n	8011e70 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8011e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011e62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011e66:	4618      	mov	r0, r3
 8011e68:	f007 f8e2 	bl	8019030 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 8011e6c:	2306      	movs	r3, #6
 8011e6e:	e3e7      	b.n	8012640 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8011e70:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 8011e7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 8011e84:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1cd      	bne.n	8011e28 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8011e8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011e94:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8011e98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e9c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8011ea0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8011ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8011eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8011eb0:	fb02 f303 	mul.w	r3, r2, r3
 8011eb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 8011eb8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8011ec0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d108      	bne.n	8011eda <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8011ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011ecc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f007 f8ad 	bl	8019030 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8011ed6:	2302      	movs	r3, #2
 8011ed8:	e3b2      	b.n	8012640 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 8011eec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8011ef4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f000 8103 	beq.w	8012104 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8011efe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f02:	2200      	movs	r2, #0
 8011f04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8011f08:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8011f0c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8011f10:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011f14:	4621      	mov	r1, r4
 8011f16:	eb11 0a02 	adds.w	sl, r1, r2
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	eb41 0b03 	adc.w	fp, r1, r3
 8011f20:	f11a 33ff 	adds.w	r3, sl, #4294967295
 8011f24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8011f28:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8011f2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011f30:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f34:	2200      	movs	r2, #0
 8011f36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011f3a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8011f3e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8011f42:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8011f46:	f7ee fb4b 	bl	80005e0 <__aeabi_uldivmod>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	4610      	mov	r0, r2
 8011f50:	4619      	mov	r1, r3
 8011f52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f56:	2200      	movs	r2, #0
 8011f58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011f5c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8011f60:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8011f64:	4623      	mov	r3, r4
 8011f66:	fb03 f201 	mul.w	r2, r3, r1
 8011f6a:	462b      	mov	r3, r5
 8011f6c:	fb00 f303 	mul.w	r3, r0, r3
 8011f70:	4413      	add	r3, r2
 8011f72:	4622      	mov	r2, r4
 8011f74:	fba0 8902 	umull	r8, r9, r0, r2
 8011f78:	444b      	add	r3, r9
 8011f7a:	4699      	mov	r9, r3
 8011f7c:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8011f80:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8011f84:	e12f      	b.n	80121e6 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8011f86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8011f90:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8011f94:	461a      	mov	r2, r3
 8011f96:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8011f9a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8011f9e:	f003 fdd5 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8011fa2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8011fa6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d009      	beq.n	8011fc2 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8011fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011fb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f007 f83a 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8011fbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011fc0:	e33e      	b.n	8012640 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8011fc2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8011fc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d006      	beq.n	8011fdc <_fx_file_open+0x354>
 8011fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011fd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d908      	bls.n	8011fee <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8011fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011fe0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f007 f823 	bl	8019030 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 8011fea:	2303      	movs	r3, #3
 8011fec:	e328      	b.n	8012640 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 8011fee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d10f      	bne.n	801201c <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 8011ffc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00e      	beq.n	8012022 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 8012004:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012008:	699b      	ldr	r3, [r3, #24]
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012010:	619a      	str	r2, [r3, #24]
 8012012:	e006      	b.n	8012022 <_fx_file_open+0x39a>
 8012014:	4d454449 	.word	0x4d454449
 8012018:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 8012022:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012026:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 801202a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801202e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8012032:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8012036:	2200      	movs	r2, #0
 8012038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801203c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8012040:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8012044:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8012048:	4641      	mov	r1, r8
 801204a:	4291      	cmp	r1, r2
 801204c:	4649      	mov	r1, r9
 801204e:	eb71 0303 	sbcs.w	r3, r1, r3
 8012052:	d216      	bcs.n	8012082 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8012054:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8012058:	2200      	movs	r2, #0
 801205a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801205e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012062:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8012066:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 801206a:	4641      	mov	r1, r8
 801206c:	1a51      	subs	r1, r2, r1
 801206e:	6039      	str	r1, [r7, #0]
 8012070:	4649      	mov	r1, r9
 8012072:	eb63 0301 	sbc.w	r3, r3, r1
 8012076:	607b      	str	r3, [r7, #4]
 8012078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801207c:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8012080:	e040      	b.n	8012104 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8012082:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012086:	6a1b      	ldr	r3, [r3, #32]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d13b      	bne.n	8012104 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 801208c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012090:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012094:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8012096:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801209a:	1e5a      	subs	r2, r3, #1
 801209c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80120a0:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 80120a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80120a6:	2200      	movs	r2, #0
 80120a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120ac:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80120b0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80120b4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80120b8:	4641      	mov	r1, r8
 80120ba:	4648      	mov	r0, r9
 80120bc:	4283      	cmp	r3, r0
 80120be:	bf08      	it	eq
 80120c0:	428a      	cmpeq	r2, r1
 80120c2:	d11f      	bne.n	8012104 <_fx_file_open+0x47c>
 80120c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d91b      	bls.n	8012104 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80120cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80120d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80120d4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80120d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80120dc:	4293      	cmp	r3, r2
 80120de:	d211      	bcs.n	8012104 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 80120e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80120e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80120e8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 80120ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80120ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80120f6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 80120f8:	f04f 0200 	mov.w	r2, #0
 80120fc:	f04f 0300 	mov.w	r3, #0
 8012100:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8012104:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012108:	2b01      	cmp	r3, #1
 801210a:	d90a      	bls.n	8012122 <_fx_file_open+0x49a>
 801210c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012110:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012114:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8012118:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801211c:	4293      	cmp	r3, r2
 801211e:	f4ff af32 	bcc.w	8011f86 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8012122:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012128:	2200      	movs	r2, #0
 801212a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801212e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 8012132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012138:	2200      	movs	r2, #0
 801213a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801213e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8012142:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 8012146:	464b      	mov	r3, r9
 8012148:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 801214c:	4652      	mov	r2, sl
 801214e:	fb02 f203 	mul.w	r2, r2, r3
 8012152:	465b      	mov	r3, fp
 8012154:	4641      	mov	r1, r8
 8012156:	fb01 f303 	mul.w	r3, r1, r3
 801215a:	4413      	add	r3, r2
 801215c:	4642      	mov	r2, r8
 801215e:	4651      	mov	r1, sl
 8012160:	fba2 4501 	umull	r4, r5, r2, r1
 8012164:	442b      	add	r3, r5
 8012166:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 8012168:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801216c:	2200      	movs	r2, #0
 801216e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012172:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8012176:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801217a:	4603      	mov	r3, r0
 801217c:	fb03 f205 	mul.w	r2, r3, r5
 8012180:	460b      	mov	r3, r1
 8012182:	fb04 f303 	mul.w	r3, r4, r3
 8012186:	4413      	add	r3, r2
 8012188:	4602      	mov	r2, r0
 801218a:	fba4 1202 	umull	r1, r2, r4, r2
 801218e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8012192:	460a      	mov	r2, r1
 8012194:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8012198:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801219c:	4413      	add	r3, r2
 801219e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80121a2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80121a6:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 80121aa:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 80121ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121b2:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80121b6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80121ba:	4282      	cmp	r2, r0
 80121bc:	418b      	sbcs	r3, r1
 80121be:	d309      	bcc.n	80121d4 <_fx_file_open+0x54c>
 80121c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00e      	beq.n	80121e6 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 80121c8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80121cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d908      	bls.n	80121e6 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 80121d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80121d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80121dc:	4618      	mov	r0, r3
 80121de:	f006 ff27 	bl	8019030 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 80121e2:	2308      	movs	r3, #8
 80121e4:	e22c      	b.n	8012640 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 80121e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80121ea:	4baa      	ldr	r3, [pc, #680]	; (8012494 <_fx_file_open+0x80c>)
 80121ec:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 80121ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121f2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80121f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121fa:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 80121fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012204:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 8012206:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801220a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801220e:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8012210:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012214:	2300      	movs	r3, #0
 8012216:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 8012218:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801221c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012220:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8012222:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012226:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801222a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801222e:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 8012230:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012234:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012238:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 801223a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801223e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8012242:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012246:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 801224a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 801224e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8012252:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8012256:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801225a:	2300      	movs	r3, #0
 801225c:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 8012260:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8012264:	2b00      	cmp	r3, #0
 8012266:	d163      	bne.n	8012330 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8012268:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801226c:	695a      	ldr	r2, [r3, #20]
 801226e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012272:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 8012274:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012278:	2200      	movs	r2, #0
 801227a:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801227c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012282:	2200      	movs	r2, #0
 8012284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012288:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 801228c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012290:	695b      	ldr	r3, [r3, #20]
 8012292:	3b02      	subs	r3, #2
 8012294:	2200      	movs	r2, #0
 8012296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801229a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801229e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80122a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122a4:	2200      	movs	r2, #0
 80122a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80122aa:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 80122ae:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80122b2:	462b      	mov	r3, r5
 80122b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80122b8:	4642      	mov	r2, r8
 80122ba:	fb02 f203 	mul.w	r2, r2, r3
 80122be:	464b      	mov	r3, r9
 80122c0:	4621      	mov	r1, r4
 80122c2:	fb01 f303 	mul.w	r3, r1, r3
 80122c6:	4413      	add	r3, r2
 80122c8:	4622      	mov	r2, r4
 80122ca:	4641      	mov	r1, r8
 80122cc:	fba2 1201 	umull	r1, r2, r2, r1
 80122d0:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80122d4:	460a      	mov	r2, r1
 80122d6:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80122da:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80122de:	4413      	add	r3, r2
 80122e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80122e4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80122e8:	4623      	mov	r3, r4
 80122ea:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80122ee:	4602      	mov	r2, r0
 80122f0:	189b      	adds	r3, r3, r2
 80122f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80122f6:	460b      	mov	r3, r1
 80122f8:	462a      	mov	r2, r5
 80122fa:	eb42 0303 	adc.w	r3, r2, r3
 80122fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012302:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012306:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801230a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 801230e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012312:	2200      	movs	r2, #0
 8012314:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 8012316:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801231a:	2200      	movs	r2, #0
 801231c:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 801231e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8012322:	f04f 0200 	mov.w	r2, #0
 8012326:	f04f 0300 	mov.w	r3, #0
 801232a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 801232e:	e140      	b.n	80125b2 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 8012330:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8012334:	2200      	movs	r2, #0
 8012336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801233a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801233e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8012342:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8012346:	4621      	mov	r1, r4
 8012348:	4628      	mov	r0, r5
 801234a:	4283      	cmp	r3, r0
 801234c:	bf08      	it	eq
 801234e:	428a      	cmpeq	r2, r1
 8012350:	f040 80a2 	bne.w	8012498 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012354:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801235a:	2200      	movs	r2, #0
 801235c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012360:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8012364:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012368:	6a1b      	ldr	r3, [r3, #32]
 801236a:	2200      	movs	r2, #0
 801236c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012370:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8012374:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8012378:	460b      	mov	r3, r1
 801237a:	3b02      	subs	r3, #2
 801237c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012380:	4613      	mov	r3, r2
 8012382:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 801238a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012390:	2200      	movs	r2, #0
 8012392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012396:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 801239a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801239e:	462b      	mov	r3, r5
 80123a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80123a4:	4642      	mov	r2, r8
 80123a6:	fb02 f203 	mul.w	r2, r2, r3
 80123aa:	464b      	mov	r3, r9
 80123ac:	4621      	mov	r1, r4
 80123ae:	fb01 f303 	mul.w	r3, r1, r3
 80123b2:	4413      	add	r3, r2
 80123b4:	4622      	mov	r2, r4
 80123b6:	4641      	mov	r1, r8
 80123b8:	fba2 1201 	umull	r1, r2, r2, r1
 80123bc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80123c0:	460a      	mov	r2, r1
 80123c2:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80123c6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80123ca:	4413      	add	r3, r2
 80123cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80123d0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80123d4:	4623      	mov	r3, r4
 80123d6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80123da:	4602      	mov	r2, r0
 80123dc:	189b      	adds	r3, r3, r2
 80123de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123e2:	460b      	mov	r3, r1
 80123e4:	462a      	mov	r2, r5
 80123e6:	eb42 0303 	adc.w	r3, r2, r3
 80123ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 80123ee:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80123f2:	1e51      	subs	r1, r2, #1
 80123f4:	67b9      	str	r1, [r7, #120]	; 0x78
 80123f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80123fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80123fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012402:	2200      	movs	r2, #0
 8012404:	673b      	str	r3, [r7, #112]	; 0x70
 8012406:	677a      	str	r2, [r7, #116]	; 0x74
 8012408:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801240c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8012410:	f7ee f8e6 	bl	80005e0 <__aeabi_uldivmod>
 8012414:	4602      	mov	r2, r0
 8012416:	460b      	mov	r3, r1
 8012418:	2300      	movs	r3, #0
 801241a:	66ba      	str	r2, [r7, #104]	; 0x68
 801241c:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 801241e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8012422:	4623      	mov	r3, r4
 8012424:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012428:	4602      	mov	r2, r0
 801242a:	189b      	adds	r3, r3, r2
 801242c:	663b      	str	r3, [r7, #96]	; 0x60
 801242e:	460b      	mov	r3, r1
 8012430:	462a      	mov	r2, r5
 8012432:	eb42 0303 	adc.w	r3, r2, r3
 8012436:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012438:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801243c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8012440:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8012444:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8012448:	1e51      	subs	r1, r2, #1
 801244a:	65b9      	str	r1, [r7, #88]	; 0x58
 801244c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012458:	2200      	movs	r2, #0
 801245a:	653b      	str	r3, [r7, #80]	; 0x50
 801245c:	657a      	str	r2, [r7, #84]	; 0x54
 801245e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012462:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012466:	f7ee f8bb 	bl	80005e0 <__aeabi_uldivmod>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012472:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8012474:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012478:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 801247c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8012480:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8012484:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801248a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801248e:	631a      	str	r2, [r3, #48]	; 0x30
 8012490:	e08f      	b.n	80125b2 <_fx_file_open+0x92a>
 8012492:	bf00      	nop
 8012494:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801249e:	2200      	movs	r2, #0
 80124a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80124a2:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80124a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80124a8:	6a1b      	ldr	r3, [r3, #32]
 80124aa:	2200      	movs	r2, #0
 80124ac:	643b      	str	r3, [r7, #64]	; 0x40
 80124ae:	647a      	str	r2, [r7, #68]	; 0x44
 80124b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80124b4:	460b      	mov	r3, r1
 80124b6:	3b02      	subs	r3, #2
 80124b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80124ba:	4613      	mov	r3, r2
 80124bc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80124c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80124c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80124c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124c8:	2200      	movs	r2, #0
 80124ca:	633b      	str	r3, [r7, #48]	; 0x30
 80124cc:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80124ce:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80124d2:	462b      	mov	r3, r5
 80124d4:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80124d8:	4642      	mov	r2, r8
 80124da:	fb02 f203 	mul.w	r2, r2, r3
 80124de:	464b      	mov	r3, r9
 80124e0:	4621      	mov	r1, r4
 80124e2:	fb01 f303 	mul.w	r3, r1, r3
 80124e6:	4413      	add	r3, r2
 80124e8:	4622      	mov	r2, r4
 80124ea:	4641      	mov	r1, r8
 80124ec:	fba2 1201 	umull	r1, r2, r2, r1
 80124f0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80124f4:	460a      	mov	r2, r1
 80124f6:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80124fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80124fe:	4413      	add	r3, r2
 8012500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012504:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8012508:	4623      	mov	r3, r4
 801250a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801250e:	4602      	mov	r2, r0
 8012510:	189b      	adds	r3, r3, r2
 8012512:	62bb      	str	r3, [r7, #40]	; 0x28
 8012514:	460b      	mov	r3, r1
 8012516:	462a      	mov	r2, r5
 8012518:	eb42 0303 	adc.w	r3, r2, r3
 801251c:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 801251e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012524:	2200      	movs	r2, #0
 8012526:	623b      	str	r3, [r7, #32]
 8012528:	627a      	str	r2, [r7, #36]	; 0x24
 801252a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801252e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8012532:	f7ee f855 	bl	80005e0 <__aeabi_uldivmod>
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	2300      	movs	r3, #0
 801253c:	61ba      	str	r2, [r7, #24]
 801253e:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8012540:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8012544:	4623      	mov	r3, r4
 8012546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801254a:	4602      	mov	r2, r0
 801254c:	189b      	adds	r3, r3, r2
 801254e:	613b      	str	r3, [r7, #16]
 8012550:	460b      	mov	r3, r1
 8012552:	462a      	mov	r2, r5
 8012554:	eb42 0303 	adc.w	r3, r2, r3
 8012558:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801255a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801255e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012562:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8012566:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801256c:	2200      	movs	r2, #0
 801256e:	60bb      	str	r3, [r7, #8]
 8012570:	60fa      	str	r2, [r7, #12]
 8012572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012576:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 801257a:	f7ee f831 	bl	80005e0 <__aeabi_uldivmod>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012586:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8012588:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801258c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8012590:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8012594:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8012598:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801259c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80125a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80125a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80125a6:	fb01 f202 	mul.w	r2, r1, r2
 80125aa:	1a9a      	subs	r2, r3, r2
 80125ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80125b0:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 80125b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80125b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d01f      	beq.n	80125fe <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 80125be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80125c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80125c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 80125cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80125d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80125d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80125d8:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 80125da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80125de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80125e2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 80125e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80125e8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80125ec:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 80125ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80125f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80125f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80125fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80125fc:	e00f      	b.n	801261e <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 80125fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012602:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012606:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 801260a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801260e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012612:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 8012614:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012618:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801261c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 801261e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012622:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012626:	1c5a      	adds	r2, r3, #1
 8012628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801262c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 8012630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012634:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012638:	4618      	mov	r0, r3
 801263a:	f006 fcf9 	bl	8019030 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8012646:	46bd      	mov	sp, r7
 8012648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801264c <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 801264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012650:	b0aa      	sub	sp, #168	; 0xa8
 8012652:	af04      	add	r7, sp, #16
 8012654:	66f8      	str	r0, [r7, #108]	; 0x6c
 8012656:	66b9      	str	r1, [r7, #104]	; 0x68
 8012658:	667a      	str	r2, [r7, #100]	; 0x64
 801265a:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 801265c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	4b9d      	ldr	r3, [pc, #628]	; (80128d8 <_fx_file_read+0x28c>)
 8012662:	429a      	cmp	r2, r3
 8012664:	d001      	beq.n	801266a <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8012666:	2307      	movs	r3, #7
 8012668:	e28d      	b.n	8012b86 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 801266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801266e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 8012670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012672:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8012676:	1c5a      	adds	r2, r3, #1
 8012678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801267a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 801267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012682:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8012684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	4b94      	ldr	r3, [pc, #592]	; (80128dc <_fx_file_read+0x290>)
 801268a:	429a      	cmp	r2, r3
 801268c:	d001      	beq.n	8012692 <_fx_file_read+0x46>
 801268e:	2311      	movs	r3, #17
 8012690:	e279      	b.n	8012b86 <_fx_file_read+0x53a>
 8012692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012694:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012698:	f04f 31ff 	mov.w	r1, #4294967295
 801269c:	4618      	mov	r0, r3
 801269e:	f006 fa4f 	bl	8018b40 <_tx_mutex_get>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <_fx_file_read+0x60>
 80126a8:	2311      	movs	r3, #17
 80126aa:	e26c      	b.n	8012b86 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 80126ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 80126b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126b4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 80126b8:	4290      	cmp	r0, r2
 80126ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80126be:	d30a      	bcc.n	80126d6 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80126c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126c2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80126c6:	4618      	mov	r0, r3
 80126c8:	f006 fcb2 	bl	8019030 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 80126cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 80126d2:	2309      	movs	r3, #9
 80126d4:	e257      	b.n	8012b86 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 80126d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80126d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 80126dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126de:	2200      	movs	r2, #0
 80126e0:	4698      	mov	r8, r3
 80126e2:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 80126e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126e6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80126ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80126f0:	1a84      	subs	r4, r0, r2
 80126f2:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 80126f6:	4544      	cmp	r4, r8
 80126f8:	eb75 0309 	sbcs.w	r3, r5, r9
 80126fc:	d209      	bcs.n	8012712 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 80126fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012700:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8012704:	4611      	mov	r1, r2
 8012706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012708:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801270c:	4613      	mov	r3, r2
 801270e:	1acb      	subs	r3, r1, r3
 8012710:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 8012712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 8012718:	e20a      	b.n	8012b30 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 801271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801271e:	2b00      	cmp	r3, #0
 8012720:	d105      	bne.n	801272e <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8012722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8012726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801272a:	4293      	cmp	r3, r2
 801272c:	d24d      	bcs.n	80127ca <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 801272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012730:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8012734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012736:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 8012738:	2304      	movs	r3, #4
 801273a:	9302      	str	r3, [sp, #8]
 801273c:	2301      	movs	r3, #1
 801273e:	9301      	str	r3, [sp, #4]
 8012740:	9200      	str	r2, [sp, #0]
 8012742:	4602      	mov	r2, r0
 8012744:	460b      	mov	r3, r1
 8012746:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012748:	f004 fe0e 	bl	8017368 <_fx_utility_logical_sector_read>
 801274c:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 801274e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012750:	2b00      	cmp	r3, #0
 8012752:	d007      	beq.n	8012764 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8012754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012756:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801275a:	4618      	mov	r0, r3
 801275c:	f006 fc68 	bl	8019030 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8012760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012762:	e210      	b.n	8012b86 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8012764:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 8012768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 8012772:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801277a:	429a      	cmp	r2, r3
 801277c:	d903      	bls.n	8012786 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 801277e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 8012786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012788:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 801278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 801278e:	4413      	add	r3, r2
 8012790:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012794:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8012798:	4618      	mov	r0, r3
 801279a:	f005 f9e1 	bl	8017b60 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 801279e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127a6:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 80127a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127aa:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 80127ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80127b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 80127ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80127be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127c2:	4413      	add	r3, r2
 80127c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80127c8:	e108      	b.n	80129dc <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80127ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80127d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80127d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80127da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127dc:	6a1b      	ldr	r3, [r3, #32]
 80127de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127e6:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80127e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80127ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80127f6:	e033      	b.n	8012860 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80127f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80127fc:	461a      	mov	r2, r3
 80127fe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012802:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012804:	f003 f9a2 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8012808:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 801280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801280c:	2b00      	cmp	r3, #0
 801280e:	d10a      	bne.n	8012826 <_fx_file_read+0x1da>
 8012810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012812:	2b01      	cmp	r3, #1
 8012814:	d907      	bls.n	8012826 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8012816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012818:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801281c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8012820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8012822:	429a      	cmp	r2, r3
 8012824:	d20c      	bcs.n	8012840 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 8012826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012828:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801282c:	4618      	mov	r0, r3
 801282e:	f006 fbff 	bl	8019030 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8012832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012834:	2b00      	cmp	r3, #0
 8012836:	d001      	beq.n	801283c <_fx_file_read+0x1f0>
                        {
                            return(status);
 8012838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801283a:	e1a4      	b.n	8012b86 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 801283c:	2308      	movs	r3, #8
 801283e:	e1a2      	b.n	8012b86 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 8012840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012848:	429a      	cmp	r2, r3
 801284a:	d110      	bne.n	801286e <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 801284c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801284e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8012852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801285a:	4413      	add	r3, r2
 801285c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012860:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012868:	429a      	cmp	r2, r3
 801286a:	d3c5      	bcc.n	80127f8 <_fx_file_read+0x1ac>
 801286c:	e000      	b.n	8012870 <_fx_file_read+0x224>
                        break;
 801286e:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 8012870:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012878:	429a      	cmp	r2, r3
 801287a:	d203      	bcs.n	8012884 <_fx_file_read+0x238>
            {
                sectors = i;
 801287c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 8012884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012888:	2b01      	cmp	r3, #1
 801288a:	d129      	bne.n	80128e0 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 801288c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801288e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8012892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012894:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 8012896:	2304      	movs	r3, #4
 8012898:	9302      	str	r3, [sp, #8]
 801289a:	2301      	movs	r3, #1
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	9200      	str	r2, [sp, #0]
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80128a6:	f004 fd5f 	bl	8017368 <_fx_utility_logical_sector_read>
 80128aa:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 80128ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d007      	beq.n	80128c2 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 80128b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80128b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80128b8:	4618      	mov	r0, r3
 80128ba:	f006 fbb9 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 80128be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128c0:	e161      	b.n	8012b86 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80128c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80128c4:	6898      	ldr	r0, [r3, #8]
 80128c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80128c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ca:	461a      	mov	r2, r3
 80128cc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80128d0:	f005 f946 	bl	8017b60 <_fx_utility_memory_copy>
 80128d4:	e02f      	b.n	8012936 <_fx_file_read+0x2ea>
 80128d6:	bf00      	nop
 80128d8:	46494c45 	.word	0x46494c45
 80128dc:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 80128e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128e2:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80128e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80128e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80128ec:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80128f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128f2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80128f6:	2304      	movs	r3, #4
 80128f8:	9302      	str	r3, [sp, #8]
 80128fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128fe:	9301      	str	r3, [sp, #4]
 8012900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	4602      	mov	r2, r0
 8012908:	460b      	mov	r3, r1
 801290a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801290c:	f004 fd2c 	bl	8017368 <_fx_utility_logical_sector_read>
 8012910:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 8012912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012914:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012918:	461a      	mov	r2, r3
 801291a:	2300      	movs	r3, #0
 801291c:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 8012920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012922:	2b00      	cmp	r3, #0
 8012924:	d007      	beq.n	8012936 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8012926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012928:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801292c:	4618      	mov	r0, r3
 801292e:	f006 fb7f 	bl	8019030 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8012932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012934:	e127      	b.n	8012b86 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 8012936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012938:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 801293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012940:	3b01      	subs	r3, #1
 8012942:	2200      	movs	r2, #0
 8012944:	65bb      	str	r3, [r7, #88]	; 0x58
 8012946:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 8012948:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801294c:	4623      	mov	r3, r4
 801294e:	18c3      	adds	r3, r0, r3
 8012950:	653b      	str	r3, [r7, #80]	; 0x50
 8012952:	462b      	mov	r3, r5
 8012954:	eb41 0303 	adc.w	r3, r1, r3
 8012958:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 801295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801295c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8012960:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8012964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012966:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8012968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801296a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801296c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012970:	4413      	add	r3, r2
 8012972:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8012974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8012978:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 801297c:	18ca      	adds	r2, r1, r3
 801297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012980:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 8012982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012986:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801298a:	4413      	add	r3, r2
 801298c:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 801298e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012992:	fbb1 f3f2 	udiv	r3, r1, r2
 8012996:	fb02 f303 	mul.w	r3, r2, r3
 801299a:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 801299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801299e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 80129a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 80129a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129a6:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 80129a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80129ae:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80129b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129b8:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 80129bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129c0:	1a9b      	subs	r3, r3, r2
 80129c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80129c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129ce:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 80129d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80129d6:	4413      	add	r3, r2
 80129d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 80129dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 80129e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 80129e4:	429a      	cmp	r2, r3
 80129e6:	f0c0 80a3 	bcc.w	8012b30 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 80129ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d11a      	bne.n	8012a28 <_fx_file_read+0x3dc>
 80129f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129f4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80129f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80129fa:	2000      	movs	r0, #0
 80129fc:	64b9      	str	r1, [r7, #72]	; 0x48
 80129fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012a00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8012a04:	4621      	mov	r1, r4
 8012a06:	1851      	adds	r1, r2, r1
 8012a08:	6439      	str	r1, [r7, #64]	; 0x40
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	414b      	adcs	r3, r1
 8012a0e:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 8012a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a12:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 8012a16:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8012a1a:	4621      	mov	r1, r4
 8012a1c:	4291      	cmp	r1, r2
 8012a1e:	4629      	mov	r1, r5
 8012a20:	eb71 0303 	sbcs.w	r3, r1, r3
 8012a24:	f080 808a 	bcs.w	8012b3c <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 8012a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a2c:	1c5a      	adds	r2, r3, #1
 8012a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 8012a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 8012a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d368      	bcc.n	8012b10 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8012a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a40:	6a19      	ldr	r1, [r3, #32]
 8012a42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012a46:	461a      	mov	r2, r3
 8012a48:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012a4a:	f003 f87f 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8012a4e:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8012a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d10a      	bne.n	8012a6c <_fx_file_read+0x420>
 8012a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	d907      	bls.n	8012a6c <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8012a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012a62:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8012a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d20c      	bcs.n	8012a86 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 8012a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a6e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012a72:	4618      	mov	r0, r3
 8012a74:	f006 fadc 	bl	8019030 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8012a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <_fx_file_read+0x436>
                        {
                            return(status);
 8012a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a80:	e081      	b.n	8012b86 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8012a82:	2308      	movs	r3, #8
 8012a84:	e07f      	b.n	8012b86 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 8012a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a8a:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 8012a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a94:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8012aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8012aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8012aa8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8012aac:	460b      	mov	r3, r1
 8012aae:	3b02      	subs	r3, #2
 8012ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8012aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012abe:	2200      	movs	r2, #0
 8012ac0:	623b      	str	r3, [r7, #32]
 8012ac2:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8012ac4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8012ac8:	462b      	mov	r3, r5
 8012aca:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012ace:	4642      	mov	r2, r8
 8012ad0:	fb02 f203 	mul.w	r2, r2, r3
 8012ad4:	464b      	mov	r3, r9
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	fb01 f303 	mul.w	r3, r1, r3
 8012adc:	4413      	add	r3, r2
 8012ade:	4622      	mov	r2, r4
 8012ae0:	4641      	mov	r1, r8
 8012ae2:	fba2 ab01 	umull	sl, fp, r2, r1
 8012ae6:	445b      	add	r3, fp
 8012ae8:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012aea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8012aee:	460b      	mov	r3, r1
 8012af0:	eb13 030a 	adds.w	r3, r3, sl
 8012af4:	61bb      	str	r3, [r7, #24]
 8012af6:	4613      	mov	r3, r2
 8012af8:	eb43 030b 	adc.w	r3, r3, fp
 8012afc:	61fb      	str	r3, [r7, #28]
 8012afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012b04:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 8012b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	6393      	str	r3, [r2, #56]	; 0x38
 8012b0e:	e00c      	b.n	8012b2a <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 8012b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8012b16:	1c51      	adds	r1, r2, #1
 8012b18:	6139      	str	r1, [r7, #16]
 8012b1a:	f143 0300 	adc.w	r3, r3, #0
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012b26:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 8012b2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 8012b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f47f adf0 	bne.w	801271a <_fx_file_read+0xce>
 8012b3a:	e000      	b.n	8012b3e <_fx_file_read+0x4f2>
                break;
 8012b3c:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 8012b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8012b44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012b46:	2000      	movs	r0, #0
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012b50:	4621      	mov	r1, r4
 8012b52:	1851      	adds	r1, r2, r1
 8012b54:	6039      	str	r1, [r7, #0]
 8012b56:	4629      	mov	r1, r5
 8012b58:	eb43 0101 	adc.w	r1, r3, r1
 8012b5c:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 8012b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012b64:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 8012b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012b6c:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8012b6e:	4b08      	ldr	r3, [pc, #32]	; (8012b90 <_fx_file_read+0x544>)
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 8012b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b7a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f006 fa56 	bl	8019030 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 8012b84:	2300      	movs	r3, #0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3798      	adds	r7, #152	; 0x98
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012b90:	2400434c 	.word	0x2400434c

08012b94 <_fx_file_rename>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_rename(FX_MEDIA *media_ptr, CHAR *old_file_name, CHAR *new_file_name)
{
 8012b94:	b590      	push	{r4, r7, lr}
 8012b96:	b0e3      	sub	sp, #396	; 0x18c
 8012b98:	af02      	add	r7, sp, #8
 8012b9a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012b9e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012ba2:	6018      	str	r0, [r3, #0]
 8012ba4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012ba8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012bac:	6019      	str	r1, [r3, #0]
 8012bae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012bb6:	601a      	str	r2, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_renames++;
 8012bb8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
#endif

    /* Setup pointers to media name buffers.  */
    old_dir_entry.fx_dir_entry_name =     media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8012bd6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bda:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8012be4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    new_dir_entry.fx_dir_entry_name =     media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8012bec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bf0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8012bfa:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8012bfe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012c06:	601a      	str	r2, [r3, #0]
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 3;
 8012c08:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8012c16:	f503 7240 	add.w	r2, r3, #768	; 0x300
 8012c1a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8012c22:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    old_dir_entry.fx_dir_entry_short_name[0] =     0;
 8012c24:	2300      	movs	r3, #0
 8012c26:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
    new_dir_entry.fx_dir_entry_short_name[0] =     0;
 8012c2a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012c32:	2200      	movs	r2, #0
 8012c34:	711a      	strb	r2, [r3, #4]
    search_directory.fx_dir_entry_short_name[0] =  0;
 8012c36:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8012c3e:	2200      	movs	r2, #0
 8012c40:	711a      	strb	r2, [r3, #4]

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    work_ptr =  (CHAR *)new_file_name;
 8012c48:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012c4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    while (*work_ptr)
 8012c56:	e020      	b.n	8012c9a <_fx_file_rename+0x106>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8012c58:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	2b5c      	cmp	r3, #92	; 0x5c
 8012c60:	d004      	beq.n	8012c6c <_fx_file_rename+0xd8>
 8012c62:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b2f      	cmp	r3, #47	; 0x2f
 8012c6a:	d103      	bne.n	8012c74 <_fx_file_rename+0xe0>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8012c72:	e00d      	b.n	8012c90 <_fx_file_rename+0xfc>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8012c74:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	2b20      	cmp	r3, #32
 8012c7c:	d103      	bne.n	8012c86 <_fx_file_rename+0xf2>
 8012c7e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <_fx_file_rename+0xfc>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 8012c86:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        }

        /* Move to the next character.  */
        work_ptr++;
 8012c90:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c94:	3301      	adds	r3, #1
 8012c96:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    while (*work_ptr)
 8012c9a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1d9      	bne.n	8012c58 <_fx_file_rename+0xc4>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8012ca4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <_fx_file_rename+0x120>
 8012cac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012cb0:	2bff      	cmp	r3, #255	; 0xff
 8012cb2:	d901      	bls.n	8012cb8 <_fx_file_rename+0x124>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 8012cb4:	230c      	movs	r3, #12
 8012cb6:	e26a      	b.n	801318e <_fx_file_rename+0x5fa>
    }

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8012cb8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012cbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a8d      	ldr	r2, [pc, #564]	; (8012efc <_fx_file_rename+0x368>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d001      	beq.n	8012cce <_fx_file_rename+0x13a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8012cca:	2311      	movs	r3, #17
 8012ccc:	e25f      	b.n	801318e <_fx_file_rename+0x5fa>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_RENAME, media_ptr, old_file_name, new_file_name, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8012cce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012cd2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a88      	ldr	r2, [pc, #544]	; (8012efc <_fx_file_rename+0x368>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d001      	beq.n	8012ce4 <_fx_file_rename+0x150>
 8012ce0:	2311      	movs	r3, #17
 8012ce2:	e254      	b.n	801318e <_fx_file_rename+0x5fa>
 8012ce4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012ce8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f005 ff22 	bl	8018b40 <_tx_mutex_get>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d001      	beq.n	8012d06 <_fx_file_rename+0x172>
 8012d02:	2311      	movs	r3, #17
 8012d04:	e243      	b.n	801318e <_fx_file_rename+0x5fa>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8012d06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012d0a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d00b      	beq.n	8012d30 <_fx_file_rename+0x19c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8012d18:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012d1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012d26:	4618      	mov	r0, r3
 8012d28:	f006 f982 	bl	8019030 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8012d2c:	2323      	movs	r3, #35	; 0x23
 8012d2e:	e22e      	b.n	801318e <_fx_file_rename+0x5fa>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, old_file_name, &old_dir_entry, &search_directory, FX_NULL);
 8012d30:	f107 0310 	add.w	r3, r7, #16
 8012d34:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012d38:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8012d3c:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8012d40:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8012d44:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 8012d48:	2400      	movs	r4, #0
 8012d4a:	9400      	str	r4, [sp, #0]
 8012d4c:	6809      	ldr	r1, [r1, #0]
 8012d4e:	6800      	ldr	r0, [r0, #0]
 8012d50:	f7fd fc4a 	bl	80105e8 <_fx_directory_search>
 8012d54:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8012d58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00c      	beq.n	8012d7a <_fx_file_rename+0x1e6>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8012d60:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012d64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f006 f95e 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8012d74:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012d78:	e209      	b.n	801318e <_fx_file_rename+0x5fa>
        not_a_file_attr = FX_DIRECTORY;
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8012d7a:	2318      	movs	r3, #24
 8012d7c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Check to make sure the found entry is a file.  */
    if (old_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8012d80:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8012d84:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8012d88:	4013      	ands	r3, r2
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d00b      	beq.n	8012da8 <_fx_file_rename+0x214>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8012d90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012d94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f006 f946 	bl	8019030 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 8012da4:	2305      	movs	r3, #5
 8012da6:	e1f2      	b.n	801318e <_fx_file_rename+0x5fa>
        new_file_name =  (CHAR *)media_ptr -> fx_media_rename_buffer;
    }
#endif

    /* Search the target directory for the same file name.  */
    status = _fx_directory_search(media_ptr, new_file_name, &new_dir_entry, &search_directory, &new_name_ptr);
 8012da8:	f107 0410 	add.w	r4, r7, #16
 8012dac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8012db0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012db4:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8012db8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012dbc:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8012dc0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	4623      	mov	r3, r4
 8012dc8:	6809      	ldr	r1, [r1, #0]
 8012dca:	6800      	ldr	r0, [r0, #0]
 8012dcc:	f7fd fc0c 	bl	80105e8 <_fx_directory_search>
 8012dd0:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if the name already exists.  */
    if (status == FX_SUCCESS)
 8012dd4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d157      	bne.n	8012e8c <_fx_file_rename+0x2f8>
    {

        /* Determine if the new name simply has an ASCII case change. If so, simply let the processing
           continue.  */
        i =  0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        do
        {

            /* Pickup an old name and new name character and convert to upper case if necessary.  */
            alpha =  old_file_name[i];
 8012de2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012de6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012df0:	4413      	add	r3, r2
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
            if ((alpha >= 'a') && (alpha <= 'z'))
 8012df8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8012dfc:	2b60      	cmp	r3, #96	; 0x60
 8012dfe:	d908      	bls.n	8012e12 <_fx_file_rename+0x27e>
 8012e00:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8012e04:	2b7a      	cmp	r3, #122	; 0x7a
 8012e06:	d804      	bhi.n	8012e12 <_fx_file_rename+0x27e>
            {

                /* Lower case, convert to upper case!  */
                alpha =  (CHAR)((INT)alpha - 0x20);
 8012e08:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8012e0c:	3b20      	subs	r3, #32
 8012e0e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
            }
            beta =   new_file_name[i];
 8012e12:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012e16:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012e1a:	681a      	ldr	r2, [r3, #0]
 8012e1c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012e20:	4413      	add	r3, r2
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
            if ((beta >= 'a') && (beta <= 'z'))
 8012e28:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8012e2c:	2b60      	cmp	r3, #96	; 0x60
 8012e2e:	d908      	bls.n	8012e42 <_fx_file_rename+0x2ae>
 8012e30:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8012e34:	2b7a      	cmp	r3, #122	; 0x7a
 8012e36:	d804      	bhi.n	8012e42 <_fx_file_rename+0x2ae>
            {

                /* Lower case, convert to upper case!  */
                beta = (CHAR)((INT)beta - 0x20);
 8012e38:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8012e3c:	3b20      	subs	r3, #32
 8012e3e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
            }

            /* Now compare the characters.  */
            if ((alpha != beta) || (alpha == 0))
 8012e42:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8012e46:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d10c      	bne.n	8012e68 <_fx_file_rename+0x2d4>
 8012e4e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d008      	beq.n	8012e68 <_fx_file_rename+0x2d4>
                /* Get out of this loop!  */
                break;
            }

            /* Move to next character.  */
            i++;
 8012e56:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        } while (i < (FX_MAXIMUM_PATH-1));
 8012e60:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012e64:	2bfe      	cmp	r3, #254	; 0xfe
 8012e66:	d9bc      	bls.n	8012de2 <_fx_file_rename+0x24e>

        /* Now determine if the names match.  */
        if (alpha != beta)
 8012e68:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8012e6c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d00b      	beq.n	8012e8c <_fx_file_rename+0x2f8>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 8012e74:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012e78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012e82:	4618      	mov	r0, r3
 8012e84:	f006 f8d4 	bl	8019030 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ALREADY_CREATED);
 8012e88:	230b      	movs	r3, #11
 8012e8a:	e180      	b.n	801318e <_fx_file_rename+0x5fa>
        }
    }

    /* Change the file name and look for extra stuff at the end.  */
    if (_fx_directory_name_extract(new_name_ptr, &new_dir_entry.fx_dir_entry_name[0]))
 8012e8c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8012e90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012e94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	f7fd fb41 	bl	8010524 <_fx_directory_name_extract>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d00b      	beq.n	8012ec0 <_fx_file_rename+0x32c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8012ea8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012eac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f006 f8ba 	bl	8019030 <_tx_mutex_put>

        /* Invalid name, return error status.  */
        return(FX_INVALID_NAME);
 8012ebc:	230c      	movs	r3, #12
 8012ebe:	e166      	b.n	801318e <_fx_file_rename+0x5fa>
    }

    /* Search for a free spot in the target directory.  */
    status = _fx_directory_free_search(media_ptr, &search_directory, &new_dir_entry);
 8012ec0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8012ec4:	f107 0110 	add.w	r1, r7, #16
 8012ec8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012ecc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012ed0:	6818      	ldr	r0, [r3, #0]
 8012ed2:	f7fc fee7 	bl	800fca4 <_fx_directory_free_search>
 8012ed6:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if a free spot was found.  */
    if (status != FX_SUCCESS)
 8012eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00e      	beq.n	8012f00 <_fx_file_rename+0x36c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8012ee2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012ee6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f006 f89d 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8012ef6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012efa:	e148      	b.n	801318e <_fx_file_rename+0x5fa>
 8012efc:	4d454449 	.word	0x4d454449
    }

    /* Extract the new file name.  */
    _fx_directory_name_extract(new_name_ptr, &new_dir_entry.fx_dir_entry_name[0]);
 8012f00:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8012f04:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4619      	mov	r1, r3
 8012f10:	4610      	mov	r0, r2
 8012f12:	f7fd fb07 	bl	8010524 <_fx_directory_name_extract>

    /* Determine if a long name is present.  */
    if (new_dir_entry.fx_dir_entry_long_name_present)
 8012f16:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f1e:	695b      	ldr	r3, [r3, #20]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d005      	beq.n	8012f30 <_fx_file_rename+0x39c>
    {

        /* Yes, clear the short file name.  */
        new_dir_entry.fx_dir_entry_short_name[0] =  0;
 8012f24:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	711a      	strb	r2, [r3, #4]
    }

    /* Save the updated directory parameters.  */
    new_dir_entry.fx_dir_entry_attributes =          old_dir_entry.fx_dir_entry_attributes;
 8012f30:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8012f34:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f3c:	771a      	strb	r2, [r3, #28]
    new_dir_entry.fx_dir_entry_cluster    =          old_dir_entry.fx_dir_entry_cluster;
 8012f3e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8012f42:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f4a:	635a      	str	r2, [r3, #52]	; 0x34
    new_dir_entry.fx_dir_entry_file_size  =          old_dir_entry.fx_dir_entry_file_size;
 8012f4c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8012f50:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8012f54:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8012f58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* Save the reserved field.  */
    new_dir_entry.fx_dir_entry_reserved =            old_dir_entry.fx_dir_entry_reserved;
 8012f5c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012f60:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f68:	775a      	strb	r2, [r3, #29]

    /* Set time and date stamps.  */
    new_dir_entry.fx_dir_entry_created_time_ms =     old_dir_entry.fx_dir_entry_created_time_ms;
 8012f6a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8012f6e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f76:	779a      	strb	r2, [r3, #30]
    new_dir_entry.fx_dir_entry_created_time =        old_dir_entry.fx_dir_entry_created_time;
 8012f78:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8012f7c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f84:	621a      	str	r2, [r3, #32]
    new_dir_entry.fx_dir_entry_created_date =        old_dir_entry.fx_dir_entry_created_date;
 8012f86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8012f8a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012f92:	625a      	str	r2, [r3, #36]	; 0x24
    new_dir_entry.fx_dir_entry_last_accessed_date =  old_dir_entry.fx_dir_entry_last_accessed_date;
 8012f94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8012f98:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012f9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fa0:	629a      	str	r2, [r3, #40]	; 0x28
    new_dir_entry.fx_dir_entry_time =                old_dir_entry.fx_dir_entry_time;
 8012fa2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8012fa6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012faa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fae:	62da      	str	r2, [r3, #44]	; 0x2c
    new_dir_entry.fx_dir_entry_date =                old_dir_entry.fx_dir_entry_date;
 8012fb0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8012fb4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fbc:	631a      	str	r2, [r3, #48]	; 0x30
        new_dir_entry.fx_dir_entry_secondary_count =       old_dir_entry.fx_dir_entry_secondary_count;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Is there a leading dot?  */
    if (new_dir_entry.fx_dir_entry_name[0] == '.')
 8012fbe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fc2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	2b2e      	cmp	r3, #46	; 0x2e
 8012fcc:	d10c      	bne.n	8012fe8 <_fx_file_rename+0x454>
    {

        /* Yes, toggle the hidden attribute bit.  */
        new_dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8012fce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fd6:	7f1b      	ldrb	r3, [r3, #28]
 8012fd8:	f043 0302 	orr.w	r3, r3, #2
 8012fdc:	b2da      	uxtb	r2, r3
 8012fde:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fe2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012fe6:	771a      	strb	r2, [r3, #28]
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the directory cache.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8012fe8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        status = _fx_directory_exFAT_entry_write(media_ptr, &new_dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status =  _fx_directory_entry_write(media_ptr, &new_dir_entry);
 8012ff8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8012ffc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013000:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013004:	4611      	mov	r1, r2
 8013006:	6818      	ldr	r0, [r3, #0]
 8013008:	f7fc f810 	bl	800f02c <_fx_directory_entry_write>
 801300c:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Determine if the write was successful.  */
    if (status != FX_SUCCESS)
 8013010:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013014:	2b00      	cmp	r3, #0
 8013016:	d00c      	beq.n	8013032 <_fx_file_rename+0x49e>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8013018:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801301c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013026:	4618      	mov	r0, r3
 8013028:	f006 f802 	bl	8019030 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 801302c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013030:	e0ad      	b.n	801318e <_fx_file_rename+0x5fa>
    }

#ifndef FX_DONT_UPDATE_OPEN_FILES

    /* Search the opened files to update any currently opened files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8013032:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013036:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013040:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8013044:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013048:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013052:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    while (open_count)
 8013056:	e077      	b.n	8013148 <_fx_file_rename+0x5b4>
    {

        /* Look at each opened file to see if it matches the file being renamed.  */
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8013058:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801305c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
             old_dir_entry.fx_dir_entry_log_sector) &&
 8013060:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8013064:	4299      	cmp	r1, r3
 8013066:	bf08      	it	eq
 8013068:	4290      	cmpeq	r0, r2
 801306a:	d163      	bne.n	8013134 <_fx_file_rename+0x5a0>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 801306c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8013070:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
             old_dir_entry.fx_dir_entry_byte_offset))
 8013074:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
             old_dir_entry.fx_dir_entry_log_sector) &&
 8013078:	429a      	cmp	r2, r3
 801307a:	d15b      	bne.n	8013134 <_fx_file_rename+0x5a0>
        {

            /* Yes, the file being renamed is already open.  Update the file's
               information so that it is kept current.  */
            search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      new_dir_entry.fx_dir_entry_cluster;
 801307c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013080:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013086:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801308a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    new_dir_entry.fx_dir_entry_file_size;
 801308e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013092:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013096:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801309a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 801309e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
            search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   new_dir_entry.fx_dir_entry_log_sector;
 80130a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80130a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80130aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80130ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80130b2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
            search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  new_dir_entry.fx_dir_entry_byte_offset;
 80130b6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80130ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80130be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80130c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80130c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Copy the new name into the file's name buffer.  */
            i =  0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            while (i < (FX_MAX_LONG_NAME_LEN - 1))
 80130ce:	e023      	b.n	8013118 <_fx_file_rename+0x584>
            {

                /* Copy byte of the new name.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_name[i] =  new_dir_entry.fx_dir_entry_name[i];
 80130d0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80130d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80130de:	441a      	add	r2, r3
 80130e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80130e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80130e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80130ea:	440b      	add	r3, r1
 80130ec:	7812      	ldrb	r2, [r2, #0]
 80130ee:	701a      	strb	r2, [r3, #0]

                /* Move to the next character.  */
                i++;
 80130f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80130f4:	3301      	adds	r3, #1
 80130f6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                /* Determine if we are at the end of the name.  */
                if (new_dir_entry.fx_dir_entry_name[i] == FX_NULL)
 80130fa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80130fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013108:	4413      	add	r3, r2
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d103      	bne.n	8013118 <_fx_file_rename+0x584>
                {
                
                    /* Determine if we are not at the maximum name size.  */
                    if (i < (FX_MAX_LONG_NAME_LEN - 1))
 8013110:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013114:	2bfe      	cmp	r3, #254	; 0xfe
 8013116:	d904      	bls.n	8013122 <_fx_file_rename+0x58e>
            while (i < (FX_MAX_LONG_NAME_LEN - 1))
 8013118:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801311c:	2bfe      	cmp	r3, #254	; 0xfe
 801311e:	d9d7      	bls.n	80130d0 <_fx_file_rename+0x53c>
 8013120:	e000      	b.n	8013124 <_fx_file_rename+0x590>
                    {
                    
                        /* Get out of the loop.   */
                        break;
 8013122:	bf00      	nop
                    }
                }
            }

            /* Set the NULL termination in the copy of the new name.  */
            search_ptr -> fx_file_dir_entry.fx_dir_entry_name[i] =  FX_NULL;
 8013124:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8013128:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801312a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801312e:	4413      	add	r3, r2
 8013130:	2200      	movs	r2, #0
 8013132:	701a      	strb	r2, [r3, #0]
        }

        /* Adjust the pointer and decrement the search count.  */
        search_ptr =  search_ptr -> fx_file_opened_next;
 8013134:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8013138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801313a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        open_count--;
 801313e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8013142:	3b01      	subs	r3, #1
 8013144:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    while (open_count)
 8013148:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801314c:	2b00      	cmp	r3, #0
 801314e:	d183      	bne.n	8013058 <_fx_file_rename+0x4c4>
    }
#endif

    /* Now we are ready to remove the old directory entry.  */
    old_dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 8013150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013154:	22e5      	movs	r2, #229	; 0xe5
 8013156:	701a      	strb	r2, [r3, #0]
    old_dir_entry.fx_dir_entry_short_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8013158:	23e5      	movs	r3, #229	; 0xe5
 801315a:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
        status = _fx_directory_exFAT_entry_write(media_ptr, &old_dir_entry, UPDATE_DELETE);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status =  _fx_directory_entry_write(media_ptr, &old_dir_entry);
 801315e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8013162:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013166:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801316a:	4611      	mov	r1, r2
 801316c:	6818      	ldr	r0, [r3, #0]
 801316e:	f7fb ff5d 	bl	800f02c <_fx_directory_entry_write>
 8013172:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 8013176:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801317a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013184:	4618      	mov	r0, r3
 8013186:	f005 ff53 	bl	8019030 <_tx_mutex_put>

    /* File rename is complete, return status.  */
    return(status);
 801318a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
}
 801318e:	4618      	mov	r0, r3
 8013190:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8013194:	46bd      	mov	sp, r7
 8013196:	bd90      	pop	{r4, r7, pc}

08013198 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	2000      	movs	r0, #0
 80131a6:	460a      	mov	r2, r1
 80131a8:	4603      	mov	r3, r0
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7fe fa9e 	bl	80116ec <_fx_file_extended_seek>
 80131b0:	4603      	mov	r3, r0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
	...

080131bc <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 80131bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80131c0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80131c4:	af04      	add	r7, sp, #16
 80131c6:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 80131ca:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80131ce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80131d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	4bd9      	ldr	r3, [pc, #868]	; (8013540 <_fx_file_write+0x384>)
 80131da:	429a      	cmp	r2, r3
 80131dc:	d002      	beq.n	80131e4 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 80131de:	2307      	movs	r3, #7
 80131e0:	f000 bf26 	b.w	8014030 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 80131e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80131e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 80131ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80131f6:	1c5a      	adds	r2, r3, #1
 80131f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131fc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8013200:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013204:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013208:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 801320c:	2000      	movs	r0, #0
 801320e:	460c      	mov	r4, r1
 8013210:	4605      	mov	r5, r0
 8013212:	eb12 0804 	adds.w	r8, r2, r4
 8013216:	eb43 0905 	adc.w	r9, r3, r5
 801321a:	f1b9 0f01 	cmp.w	r9, #1
 801321e:	d302      	bcc.n	8013226 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 8013220:	230a      	movs	r3, #10
 8013222:	f000 bf05 	b.w	8014030 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8013226:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	4bc5      	ldr	r3, [pc, #788]	; (8013544 <_fx_file_write+0x388>)
 801322e:	429a      	cmp	r2, r3
 8013230:	d002      	beq.n	8013238 <_fx_file_write+0x7c>
 8013232:	2311      	movs	r3, #17
 8013234:	f000 befc 	b.w	8014030 <_fx_file_write+0xe74>
 8013238:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801323c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013240:	f04f 31ff 	mov.w	r1, #4294967295
 8013244:	4618      	mov	r0, r3
 8013246:	f005 fc7b 	bl	8018b40 <_tx_mutex_get>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d002      	beq.n	8013256 <_fx_file_write+0x9a>
 8013250:	2311      	movs	r3, #17
 8013252:	f000 beed 	b.w	8014030 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8013256:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801325a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801325e:	2b00      	cmp	r3, #0
 8013260:	d009      	beq.n	8013276 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8013262:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013266:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801326a:	4618      	mov	r0, r3
 801326c:	f005 fee0 	bl	8019030 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8013270:	2323      	movs	r3, #35	; 0x23
 8013272:	f000 bedd 	b.w	8014030 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8013276:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801327a:	689b      	ldr	r3, [r3, #8]
 801327c:	2b01      	cmp	r3, #1
 801327e:	d009      	beq.n	8013294 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8013280:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013284:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013288:	4618      	mov	r0, r3
 801328a:	f005 fed1 	bl	8019030 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 801328e:	2306      	movs	r3, #6
 8013290:	f000 bece 	b.w	8014030 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8013294:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 801329a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80132a0:	fb02 f303 	mul.w	r3, r2, r3
 80132a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 80132a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d109      	bne.n	80132c4 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80132b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80132b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80132b8:	4618      	mov	r0, r3
 80132ba:	f005 feb9 	bl	8019030 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 80132be:	2302      	movs	r3, #2
 80132c0:	f000 beb6 	b.w	8014030 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 80132c4:	2300      	movs	r3, #0
 80132c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 80132ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80132ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80132d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80132d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80132da:	ebb0 0a02 	subs.w	sl, r0, r2
 80132de:	eb61 0b03 	sbc.w	fp, r1, r3
 80132e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80132e6:	2200      	movs	r2, #0
 80132e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80132ec:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80132f0:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 80132f4:	460b      	mov	r3, r1
 80132f6:	459a      	cmp	sl, r3
 80132f8:	4613      	mov	r3, r2
 80132fa:	eb7b 0303 	sbcs.w	r3, fp, r3
 80132fe:	f080 82a9 	bcs.w	8013854 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8013302:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8013306:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801330a:	4413      	add	r3, r2
 801330c:	3b01      	subs	r3, #1
 801330e:	2200      	movs	r2, #0
 8013310:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8013314:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8013318:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801331c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8013320:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013324:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8013328:	1a84      	subs	r4, r0, r2
 801332a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 801332e:	eb61 0303 	sbc.w	r3, r1, r3
 8013332:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013336:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 801333a:	4623      	mov	r3, r4
 801333c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013340:	4602      	mov	r2, r0
 8013342:	189b      	adds	r3, r3, r2
 8013344:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8013348:	460b      	mov	r3, r1
 801334a:	462a      	mov	r2, r5
 801334c:	eb42 0303 	adc.w	r3, r2, r3
 8013350:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8013354:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013358:	2200      	movs	r2, #0
 801335a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801335e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8013362:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013366:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801336a:	f7ed f939 	bl	80005e0 <__aeabi_uldivmod>
 801336e:	4602      	mov	r2, r0
 8013370:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8013372:	4613      	mov	r3, r2
 8013374:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 8013378:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801337c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801337e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013382:	4293      	cmp	r3, r2
 8013384:	d909      	bls.n	801339a <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 8013386:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801338a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801338e:	4618      	mov	r0, r3
 8013390:	f005 fe4e 	bl	8019030 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 8013394:	230a      	movs	r3, #10
 8013396:	f000 be4b 	b.w	8014030 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 801339a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801339e:	691a      	ldr	r2, [r3, #16]
 80133a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80133a4:	441a      	add	r2, r3
 80133a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80133aa:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 80133ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80133b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80133b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80133b8:	2200      	movs	r2, #0
 80133ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80133be:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80133c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80133c6:	2200      	movs	r2, #0
 80133c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80133cc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80133d0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80133d4:	464b      	mov	r3, r9
 80133d6:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 80133da:	4652      	mov	r2, sl
 80133dc:	fb02 f203 	mul.w	r2, r2, r3
 80133e0:	465b      	mov	r3, fp
 80133e2:	4644      	mov	r4, r8
 80133e4:	fb04 f303 	mul.w	r3, r4, r3
 80133e8:	4413      	add	r3, r2
 80133ea:	4642      	mov	r2, r8
 80133ec:	4654      	mov	r4, sl
 80133ee:	fba2 4204 	umull	r4, r2, r2, r4
 80133f2:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80133f6:	4622      	mov	r2, r4
 80133f8:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 80133fc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8013400:	4413      	add	r3, r2
 8013402:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8013406:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 801340a:	4623      	mov	r3, r4
 801340c:	18c3      	adds	r3, r0, r3
 801340e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013412:	462b      	mov	r3, r5
 8013414:	eb41 0303 	adc.w	r3, r1, r3
 8013418:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801341c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013420:	2b01      	cmp	r3, #1
 8013422:	d308      	bcc.n	8013436 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 8013424:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8013428:	f04f 32ff 	mov.w	r2, #4294967295
 801342c:	f04f 0300 	mov.w	r3, #0
 8013430:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8013434:	e03d      	b.n	80134b2 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 8013436:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801343a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 801343e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013442:	2200      	movs	r2, #0
 8013444:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013448:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801344c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013450:	2200      	movs	r2, #0
 8013452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013456:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801345a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 801345e:	464b      	mov	r3, r9
 8013460:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 8013464:	4652      	mov	r2, sl
 8013466:	fb02 f203 	mul.w	r2, r2, r3
 801346a:	465b      	mov	r3, fp
 801346c:	4644      	mov	r4, r8
 801346e:	fb04 f303 	mul.w	r3, r4, r3
 8013472:	4413      	add	r3, r2
 8013474:	4642      	mov	r2, r8
 8013476:	4654      	mov	r4, sl
 8013478:	fba2 4204 	umull	r4, r2, r2, r4
 801347c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8013480:	4622      	mov	r2, r4
 8013482:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8013486:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801348a:	4413      	add	r3, r2
 801348c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8013490:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8013494:	4623      	mov	r3, r4
 8013496:	18c3      	adds	r3, r0, r3
 8013498:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801349c:	462b      	mov	r3, r5
 801349e:	eb41 0303 	adc.w	r3, r1, r3
 80134a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 80134a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80134aa:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80134ae:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 80134b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80134b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80134b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80134bc:	1ad2      	subs	r2, r2, r3
 80134be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80134c2:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 80134c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80134c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 80134ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80134d2:	69db      	ldr	r3, [r3, #28]
 80134d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80134d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80134dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 80134e4:	e16f      	b.n	80137c6 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 80134e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80134ea:	3b01      	subs	r3, #1
 80134ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 80134f0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d109      	bne.n	801350c <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 80134f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80134fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013500:	4618      	mov	r0, r3
 8013502:	f005 fd95 	bl	8019030 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 8013506:	230a      	movs	r3, #10
 8013508:	f000 bd92 	b.w	8014030 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 801350c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013510:	461a      	mov	r2, r3
 8013512:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8013516:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 801351a:	f002 fb17 	bl	8015b4c <_fx_utility_FAT_entry_read>
 801351e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 8013522:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013526:	2b00      	cmp	r3, #0
 8013528:	d00e      	beq.n	8013548 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 801352a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801352e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013532:	4618      	mov	r0, r3
 8013534:	f005 fd7c 	bl	8019030 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 8013538:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801353c:	f000 bd78 	b.w	8014030 <_fx_file_write+0xe74>
 8013540:	46494c45 	.word	0x46494c45
 8013544:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 8013548:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801354c:	3b01      	subs	r3, #1
 801354e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 8013552:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d116      	bne.n	8013588 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 801355a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8013568:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801356c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013570:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013576:	3302      	adds	r3, #2
 8013578:	429a      	cmp	r2, r3
 801357a:	d316      	bcc.n	80135aa <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 801357c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013580:	2302      	movs	r3, #2
 8013582:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 8013586:	e010      	b.n	80135aa <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 8013588:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801358c:	3301      	adds	r3, #1
 801358e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8013592:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013598:	1c9a      	adds	r2, r3, #2
 801359a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801359e:	4293      	cmp	r3, r2
 80135a0:	d3a6      	bcc.n	80134f0 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 80135a2:	2302      	movs	r3, #2
 80135a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 80135a8:	e7a2      	b.n	80134f0 <_fx_file_write+0x334>
                        break;
 80135aa:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 80135ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d103      	bne.n	80135bc <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 80135b4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80135b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 80135bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f000 808f 	beq.w	80136e4 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 80135c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80135ca:	69da      	ldr	r2, [r3, #28]
 80135cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d009      	beq.n	80135e8 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 80135d4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80135d8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80135dc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80135e0:	f002 fcdd 	bl	8015f9e <_fx_utility_FAT_entry_write>
 80135e4:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 80135e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00a      	beq.n	8013606 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 80135f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80135f4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80135f8:	4618      	mov	r0, r3
 80135fa:	f005 fd19 	bl	8019030 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 80135fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013602:	f000 bd15 	b.w	8014030 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 8013606:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 801360c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013612:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 8013614:	429a      	cmp	r2, r3
 8013616:	f0c0 80cc 	bcc.w	80137b2 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 801361a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801361e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 8013620:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8013626:	429a      	cmp	r2, r3
 8013628:	f0c0 80c3 	bcc.w	80137b2 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 801362c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013630:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8013634:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 8013636:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801363c:	1c5a      	adds	r2, r3, #1
 801363e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013642:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 8013644:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013648:	2300      	movs	r3, #0
 801364a:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801364c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013652:	2200      	movs	r2, #0
 8013654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013658:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 801365c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8013660:	3b02      	subs	r3, #2
 8013662:	2200      	movs	r2, #0
 8013664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013668:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801366c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013672:	2200      	movs	r2, #0
 8013674:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013678:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 801367c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8013680:	462b      	mov	r3, r5
 8013682:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8013686:	4642      	mov	r2, r8
 8013688:	fb02 f203 	mul.w	r2, r2, r3
 801368c:	464b      	mov	r3, r9
 801368e:	4621      	mov	r1, r4
 8013690:	fb01 f303 	mul.w	r3, r1, r3
 8013694:	4413      	add	r3, r2
 8013696:	4622      	mov	r2, r4
 8013698:	4641      	mov	r1, r8
 801369a:	fba2 1201 	umull	r1, r2, r2, r1
 801369e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80136a2:	460a      	mov	r2, r1
 80136a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80136a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80136ac:	4413      	add	r3, r2
 80136ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80136b2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80136b6:	4623      	mov	r3, r4
 80136b8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80136bc:	4602      	mov	r2, r0
 80136be:	189b      	adds	r3, r3, r2
 80136c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80136c4:	462b      	mov	r3, r5
 80136c6:	460a      	mov	r2, r1
 80136c8:	4153      	adcs	r3, r2
 80136ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80136ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80136d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80136d6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 80136da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80136de:	2300      	movs	r3, #0
 80136e0:	6313      	str	r3, [r2, #48]	; 0x30
 80136e2:	e066      	b.n	80137b2 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 80136e4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80136e8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80136ec:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 80136ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80136f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80136f6:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 80136f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80136fc:	2300      	movs	r3, #0
 80136fe:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013700:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013706:	2200      	movs	r2, #0
 8013708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801370c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8013710:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8013714:	3b02      	subs	r3, #2
 8013716:	2200      	movs	r2, #0
 8013718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801371c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8013720:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013726:	2200      	movs	r2, #0
 8013728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801372c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8013730:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8013734:	462b      	mov	r3, r5
 8013736:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801373a:	4642      	mov	r2, r8
 801373c:	fb02 f203 	mul.w	r2, r2, r3
 8013740:	464b      	mov	r3, r9
 8013742:	4621      	mov	r1, r4
 8013744:	fb01 f303 	mul.w	r3, r1, r3
 8013748:	4413      	add	r3, r2
 801374a:	4622      	mov	r2, r4
 801374c:	4641      	mov	r1, r8
 801374e:	fba2 1201 	umull	r1, r2, r2, r1
 8013752:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8013756:	460a      	mov	r2, r1
 8013758:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 801375c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013760:	4413      	add	r3, r2
 8013762:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013766:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 801376a:	4623      	mov	r3, r4
 801376c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8013770:	4602      	mov	r2, r0
 8013772:	189b      	adds	r3, r3, r2
 8013774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013778:	462b      	mov	r3, r5
 801377a:	460a      	mov	r2, r1
 801377c:	4153      	adcs	r3, r2
 801377e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013782:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013786:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801378a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 801378e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013792:	2300      	movs	r3, #0
 8013794:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 8013796:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 801379a:	f04f 0200 	mov.w	r2, #0
 801379e:	f04f 0300 	mov.w	r3, #0
 80137a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 80137a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80137aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80137ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 80137b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80137b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80137ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80137be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 80137c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f47f ae8b 	bne.w	80134e6 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80137d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80137d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80137d8:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80137dc:	461a      	mov	r2, r3
 80137de:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80137e2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80137e6:	f002 fbda 	bl	8015f9e <_fx_utility_FAT_entry_write>
 80137ea:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 80137ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d00a      	beq.n	801380c <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 80137f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80137fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80137fe:	4618      	mov	r0, r3
 8013800:	f005 fc16 	bl	8019030 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 8013804:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013808:	f000 bc12 	b.w	8014030 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 801380c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013810:	69db      	ldr	r3, [r3, #28]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d019      	beq.n	801384a <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 8013816:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801381a:	69db      	ldr	r3, [r3, #28]
 801381c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013820:	4619      	mov	r1, r3
 8013822:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8013826:	f002 fbba 	bl	8015f9e <_fx_utility_FAT_entry_write>
 801382a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 801382e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013832:	2b00      	cmp	r3, #0
 8013834:	d009      	beq.n	801384a <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 8013836:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801383a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801383e:	4618      	mov	r0, r3
 8013840:	f005 fbf6 	bl	8019030 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 8013844:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013848:	e3f2      	b.n	8014030 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 801384a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801384e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8013852:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 8013854:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 801385a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 8013860:	429a      	cmp	r2, r3
 8013862:	d31b      	bcc.n	801389c <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 8013864:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013868:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801386c:	1c51      	adds	r1, r2, #1
 801386e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8013872:	f143 0300 	adc.w	r3, r3, #0
 8013876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801387a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801387e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013882:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 8013886:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801388c:	1c5a      	adds	r2, r3, #1
 801388e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013892:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 8013894:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013898:	2300      	movs	r3, #0
 801389a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 801389c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80138a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 80138a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80138a8:	2200      	movs	r2, #0
 80138aa:	613b      	str	r3, [r7, #16]
 80138ac:	617a      	str	r2, [r7, #20]
 80138ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80138b2:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 80138b6:	e290      	b.n	8013dda <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80138b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80138bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d111      	bne.n	80138e6 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 80138c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80138c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c8:	2200      	movs	r2, #0
 80138ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80138ce:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80138d2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80138d6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80138da:	4621      	mov	r1, r4
 80138dc:	428a      	cmp	r2, r1
 80138de:	4629      	mov	r1, r5
 80138e0:	418b      	sbcs	r3, r1
 80138e2:	f080 8096 	bcs.w	8013a12 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 80138e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80138ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 80138ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80138f2:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 80138f4:	2304      	movs	r3, #4
 80138f6:	9302      	str	r3, [sp, #8]
 80138f8:	2301      	movs	r3, #1
 80138fa:	9301      	str	r3, [sp, #4]
 80138fc:	9200      	str	r2, [sp, #0]
 80138fe:	4602      	mov	r2, r0
 8013900:	460b      	mov	r3, r1
 8013902:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8013906:	f003 fd2f 	bl	8017368 <_fx_utility_logical_sector_read>
 801390a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 801390e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013912:	2b00      	cmp	r3, #0
 8013914:	d009      	beq.n	801392a <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 8013916:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801391a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801391e:	4618      	mov	r0, r3
 8013920:	f005 fb86 	bl	8019030 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8013924:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013928:	e382      	b.n	8014030 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 801392a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801392e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 8013930:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 801393c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013940:	2200      	movs	r2, #0
 8013942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013946:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801394a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 801394e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013952:	4621      	mov	r1, r4
 8013954:	428a      	cmp	r2, r1
 8013956:	4629      	mov	r1, r5
 8013958:	418b      	sbcs	r3, r1
 801395a:	d203      	bcs.n	8013964 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 801395c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013960:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 8013964:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013968:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 801396a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 8013970:	4413      	add	r3, r2
 8013972:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8013976:	4619      	mov	r1, r3
 8013978:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 801397c:	f004 f8f0 	bl	8017b60 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8013980:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013984:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8013988:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801398c:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 801398e:	2304      	movs	r3, #4
 8013990:	9302      	str	r3, [sp, #8]
 8013992:	2301      	movs	r3, #1
 8013994:	9301      	str	r3, [sp, #4]
 8013996:	9200      	str	r2, [sp, #0]
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80139a0:	f003 ff76 	bl	8017890 <_fx_utility_logical_sector_write>
 80139a4:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 80139a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d009      	beq.n	80139c4 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 80139b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80139b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80139b8:	4618      	mov	r0, r3
 80139ba:	f005 fb39 	bl	8019030 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 80139be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80139c2:	e335      	b.n	8014030 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 80139c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80139c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139ca:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80139ce:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 80139d0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80139d4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 80139d6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80139da:	2200      	movs	r2, #0
 80139dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80139e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80139e4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80139e8:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80139ec:	4621      	mov	r1, r4
 80139ee:	1a51      	subs	r1, r2, r1
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	4629      	mov	r1, r5
 80139f4:	eb63 0301 	sbc.w	r3, r3, r1
 80139f8:	60fb      	str	r3, [r7, #12]
 80139fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80139fe:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 8013a02:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013a06:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013a0a:	4413      	add	r3, r2
 8013a0c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8013a10:	e10d      	b.n	8013c2e <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8013a12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013a22:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8013a26:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8013a2a:	f7ec fdd9 	bl	80005e0 <__aeabi_uldivmod>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	460b      	mov	r3, r1
 8013a32:	4613      	mov	r3, r2
 8013a34:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8013a38:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013a3c:	6a1b      	ldr	r3, [r3, #32]
 8013a3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8013a42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013a46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8013a4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8013a50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8013a56:	1ad3      	subs	r3, r2, r3
 8013a58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8013a5c:	e03f      	b.n	8013ade <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8013a5e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8013a62:	461a      	mov	r2, r3
 8013a64:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8013a68:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8013a6c:	f002 f86e 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8013a70:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8013a74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10d      	bne.n	8013a98 <_fx_file_write+0x8dc>
 8013a7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d909      	bls.n	8013a98 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8013a84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013a8c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8013a90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d20f      	bcs.n	8013ab8 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 8013a98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a9c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f005 fac5 	bl	8019030 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8013aa6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <_fx_file_write+0x8f8>
                        {
                            return(status);
 8013aae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013ab2:	e2bd      	b.n	8014030 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8013ab4:	2308      	movs	r3, #8
 8013ab6:	e2bb      	b.n	8014030 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 8013ab8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013abc:	1c5a      	adds	r2, r3, #1
 8013abe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d112      	bne.n	8013aec <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 8013ac6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013aca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8013ace:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ad4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013ad8:	4413      	add	r3, r2
 8013ada:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8013ade:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8013ae2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d3b9      	bcc.n	8013a5e <_fx_file_write+0x8a2>
 8013aea:	e000      	b.n	8013aee <_fx_file_write+0x932>
                        break;
 8013aec:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 8013aee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8013af2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d203      	bcs.n	8013b02 <_fx_file_write+0x946>
            {
                sectors = i;
 8013afa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013afe:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8013b02:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013b06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8013b0a:	2304      	movs	r3, #4
 8013b0c:	9302      	str	r3, [sp, #8]
 8013b0e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8013b22:	f003 feb5 	bl	8017890 <_fx_utility_logical_sector_write>
 8013b26:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 8013b2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d009      	beq.n	8013b46 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 8013b32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013b36:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f005 fa78 	bl	8019030 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8013b40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013b44:	e274      	b.n	8014030 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 8013b46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013b4a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 8013b4e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013b52:	3b01      	subs	r3, #1
 8013b54:	2200      	movs	r2, #0
 8013b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013b5a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 8013b5e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8013b62:	4623      	mov	r3, r4
 8013b64:	18c3      	adds	r3, r0, r3
 8013b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b6a:	462b      	mov	r3, r5
 8013b6c:	eb41 0303 	adc.w	r3, r1, r3
 8013b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 8013b74:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013b78:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8013b7c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8013b80:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8013b86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013b90:	4413      	add	r3, r2
 8013b92:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8013b94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8013b9a:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8013b9e:	18ca      	adds	r2, r1, r3
 8013ba0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013ba4:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 8013ba6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013bb0:	4413      	add	r3, r2
 8013bb2:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8013bb4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 8013bba:	fbb1 f3f2 	udiv	r3, r1, r2
 8013bbe:	fb02 f303 	mul.w	r3, r2, r3
 8013bc2:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 8013bc4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013bc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 8013bca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 8013bd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013bd4:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 8013bd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013bda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013bde:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8013be0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013be6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013bea:	fb02 f303 	mul.w	r3, r2, r3
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 8013bf8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8013bfc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013c00:	4621      	mov	r1, r4
 8013c02:	1a51      	subs	r1, r2, r1
 8013c04:	6039      	str	r1, [r7, #0]
 8013c06:	4629      	mov	r1, r5
 8013c08:	eb63 0301 	sbc.w	r3, r3, r1
 8013c0c:	607b      	str	r3, [r7, #4]
 8013c0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013c12:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8013c16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c1c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013c20:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 8013c24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8013c28:	4413      	add	r3, r2
 8013c2a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 8013c2e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 8013c34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	f0c0 80cd 	bcc.w	8013dda <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 8013c40:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8013c44:	4313      	orrs	r3, r2
 8013c46:	d11f      	bne.n	8013c88 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 8013c48:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c4c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013c50:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8013c54:	2000      	movs	r0, #0
 8013c56:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8013c5a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8013c5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013c62:	4621      	mov	r1, r4
 8013c64:	1851      	adds	r1, r2, r1
 8013c66:	67b9      	str	r1, [r7, #120]	; 0x78
 8013c68:	4629      	mov	r1, r5
 8013c6a:	414b      	adcs	r3, r1
 8013c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 8013c6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c72:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 8013c76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8013c7a:	4621      	mov	r1, r4
 8013c7c:	4291      	cmp	r1, r2
 8013c7e:	4629      	mov	r1, r5
 8013c80:	eb71 0303 	sbcs.w	r3, r1, r3
 8013c84:	f080 80af 	bcs.w	8013de6 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 8013c88:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c8e:	1c5a      	adds	r2, r3, #1
 8013c90:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 8013c96:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 8013c9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	f0c0 8086 	bcc.w	8013db4 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8013ca8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013cac:	6a19      	ldr	r1, [r3, #32]
 8013cae:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8013cb8:	f001 ff48 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8013cbc:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8013cc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10d      	bne.n	8013ce4 <_fx_file_write+0xb28>
 8013cc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d909      	bls.n	8013ce4 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8013cd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013cd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013cd8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8013cdc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d20f      	bcs.n	8013d04 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 8013ce4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013ce8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8013cec:	4618      	mov	r0, r3
 8013cee:	f005 f99f 	bl	8019030 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8013cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d002      	beq.n	8013d00 <_fx_file_write+0xb44>
                        {
                            return(status);
 8013cfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013cfe:	e197      	b.n	8014030 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8013d00:	2308      	movs	r3, #8
 8013d02:	e195      	b.n	8014030 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 8013d04:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013d08:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013d0c:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 8013d0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d14:	1c5a      	adds	r2, r3, #1
 8013d16:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013d1a:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013d1c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d22:	2200      	movs	r2, #0
 8013d24:	673b      	str	r3, [r7, #112]	; 0x70
 8013d26:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8013d28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013d30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013d32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8013d36:	460b      	mov	r3, r1
 8013d38:	3b02      	subs	r3, #2
 8013d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8013d42:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8013d44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8013d4e:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8013d50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013d54:	462b      	mov	r3, r5
 8013d56:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8013d5a:	4642      	mov	r2, r8
 8013d5c:	fb02 f203 	mul.w	r2, r2, r3
 8013d60:	464b      	mov	r3, r9
 8013d62:	4621      	mov	r1, r4
 8013d64:	fb01 f303 	mul.w	r3, r1, r3
 8013d68:	4413      	add	r3, r2
 8013d6a:	4622      	mov	r2, r4
 8013d6c:	4641      	mov	r1, r8
 8013d6e:	fba2 1201 	umull	r1, r2, r2, r1
 8013d72:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8013d76:	460a      	mov	r2, r1
 8013d78:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8013d7c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8013d80:	4413      	add	r3, r2
 8013d82:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013d86:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8013d8a:	4623      	mov	r3, r4
 8013d8c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8013d90:	4602      	mov	r2, r0
 8013d92:	189b      	adds	r3, r3, r2
 8013d94:	653b      	str	r3, [r7, #80]	; 0x50
 8013d96:	462b      	mov	r3, r5
 8013d98:	460a      	mov	r2, r1
 8013d9a:	4153      	adcs	r3, r2
 8013d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8013d9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013da2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8013da6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 8013daa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013dae:	2300      	movs	r3, #0
 8013db0:	6393      	str	r3, [r2, #56]	; 0x38
 8013db2:	e00e      	b.n	8013dd2 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 8013db4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013db8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8013dbc:	1c51      	adds	r1, r2, #1
 8013dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8013dc0:	f143 0300 	adc.w	r3, r3, #0
 8013dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013dc6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013dca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8013dce:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 8013dd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 8013dda:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8013dde:	4313      	orrs	r3, r2
 8013de0:	f47f ad6a 	bne.w	80138b8 <_fx_file_write+0x6fc>
 8013de4:	e000      	b.n	8013de8 <_fx_file_write+0xc2c>
                break;
 8013de6:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 8013de8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013dec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013df0:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8013df4:	2000      	movs	r0, #0
 8013df6:	6439      	str	r1, [r7, #64]	; 0x40
 8013df8:	6478      	str	r0, [r7, #68]	; 0x44
 8013dfa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013dfe:	4621      	mov	r1, r4
 8013e00:	1851      	adds	r1, r2, r1
 8013e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8013e04:	4629      	mov	r1, r5
 8013e06:	eb43 0101 	adc.w	r1, r3, r1
 8013e0a:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 8013e0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013e14:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 8013e18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e1c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8013e20:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8013e24:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 8013e28:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e2c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 8013e30:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8013e34:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 8013e38:	4290      	cmp	r0, r2
 8013e3a:	eb71 0303 	sbcs.w	r3, r1, r3
 8013e3e:	f080 80de 	bcs.w	8013ffe <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8013e42:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e46:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013e4a:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8013e4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 8013e52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013e56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013e5a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8013e5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013e62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013e66:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 8013e6a:	e0c3      	b.n	8013ff4 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 8013e6c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013e70:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e74:	429a      	cmp	r2, r3
 8013e76:	f000 80b3 	beq.w	8013fe0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8013e7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013e7e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8013e82:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013e86:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 8013e8a:	4299      	cmp	r1, r3
 8013e8c:	bf08      	it	eq
 8013e8e:	4290      	cmpeq	r0, r2
 8013e90:	f040 80a6 	bne.w	8013fe0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8013e94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013e98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 8013e9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	f040 809b 	bne.w	8013fe0 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8013eaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013eae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013eb2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013eb6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8013eba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013ebe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8013ec2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8013eca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013ece:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8013ed2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013ed6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 8013eda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013ede:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8013ee2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013ee6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 8013eea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013eee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8013ef2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8013efa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013efe:	69da      	ldr	r2, [r3, #28]
 8013f00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013f04:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 8013f06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013f0a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8013f0e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013f12:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 8013f16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013f1a:	691b      	ldr	r3, [r3, #16]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d15f      	bne.n	8013fe0 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 8013f20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013f24:	691a      	ldr	r2, [r3, #16]
 8013f26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013f2a:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8013f2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013f30:	695a      	ldr	r2, [r3, #20]
 8013f32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013f36:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 8013f38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013f40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f46:	2200      	movs	r2, #0
 8013f48:	633b      	str	r3, [r7, #48]	; 0x30
 8013f4a:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8013f4c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013f50:	695b      	ldr	r3, [r3, #20]
 8013f52:	3b02      	subs	r3, #2
 8013f54:	2200      	movs	r2, #0
 8013f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f58:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8013f5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f60:	2200      	movs	r2, #0
 8013f62:	623b      	str	r3, [r7, #32]
 8013f64:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8013f66:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8013f6a:	462b      	mov	r3, r5
 8013f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013f70:	4642      	mov	r2, r8
 8013f72:	fb02 f203 	mul.w	r2, r2, r3
 8013f76:	464b      	mov	r3, r9
 8013f78:	4621      	mov	r1, r4
 8013f7a:	fb01 f303 	mul.w	r3, r1, r3
 8013f7e:	4413      	add	r3, r2
 8013f80:	4622      	mov	r2, r4
 8013f82:	4641      	mov	r1, r8
 8013f84:	fba2 1201 	umull	r1, r2, r2, r1
 8013f88:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8013f8c:	460a      	mov	r2, r1
 8013f8e:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8013f92:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8013f96:	4413      	add	r3, r2
 8013f98:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013f9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8013fa0:	4623      	mov	r3, r4
 8013fa2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	189b      	adds	r3, r3, r2
 8013faa:	61bb      	str	r3, [r7, #24]
 8013fac:	462b      	mov	r3, r5
 8013fae:	460a      	mov	r2, r1
 8013fb0:	4153      	adcs	r3, r2
 8013fb2:	61fb      	str	r3, [r7, #28]
 8013fb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013fb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013fbc:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 8013fc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 8013fc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013fcc:	2200      	movs	r2, #0
 8013fce:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 8013fd0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013fd4:	f04f 0200 	mov.w	r2, #0
 8013fd8:	f04f 0300 	mov.w	r3, #0
 8013fdc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8013fe0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fe6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 8013fea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 8013ff4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	f47f af37 	bne.w	8013e6c <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 8013ffe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8014002:	2201      	movs	r2, #1
 8014004:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 8014006:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801400a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801400e:	2b00      	cmp	r3, #0
 8014010:	d006      	beq.n	8014020 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 8014012:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8014016:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801401a:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 801401e:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8014020:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8014024:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014028:	4618      	mov	r0, r3
 801402a:	f005 f801 	bl	8019030 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 801402e:	2300      	movs	r3, #0
}
 8014030:	4618      	mov	r0, r3
 8014032:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8014036:	46bd      	mov	sp, r7
 8014038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801403c <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b088      	sub	sp, #32
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4a3f      	ldr	r2, [pc, #252]	; (8014154 <_fx_media_abort+0x118>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d001      	beq.n	8014060 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 801405c:	2311      	movs	r3, #17
 801405e:	e074      	b.n	801414a <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4a3b      	ldr	r2, [pc, #236]	; (8014154 <_fx_media_abort+0x118>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d001      	beq.n	801406e <_fx_media_abort+0x32>
 801406a:	2311      	movs	r3, #17
 801406c:	e06d      	b.n	801414a <_fx_media_abort+0x10e>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014074:	f04f 31ff 	mov.w	r1, #4294967295
 8014078:	4618      	mov	r0, r3
 801407a:	f004 fd61 	bl	8018b40 <_tx_mutex_get>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d001      	beq.n	8014088 <_fx_media_abort+0x4c>
 8014084:	2311      	movs	r3, #17
 8014086:	e060      	b.n	801414a <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801408e:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014096:	61bb      	str	r3, [r7, #24]
    while (open_count)
 8014098:	e008      	b.n	80140ac <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 801409a:	69bb      	ldr	r3, [r7, #24]
 801409c:	4a2e      	ldr	r2, [pc, #184]	; (8014158 <_fx_media_abort+0x11c>)
 801409e:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140a4:	61bb      	str	r3, [r7, #24]
        open_count--;
 80140a6:	69fb      	ldr	r3, [r7, #28]
 80140a8:	3b01      	subs	r3, #1
 80140aa:	61fb      	str	r3, [r7, #28]
    while (open_count)
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d1f3      	bne.n	801409a <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2203      	movs	r2, #3
 80140b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2290      	movs	r2, #144	; 0x90
 80140be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140cc:	f3ef 8310 	mrs	r3, PRIMASK
 80140d0:	613b      	str	r3, [r7, #16]
    return(posture);
 80140d2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80140d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80140d6:	b672      	cpsid	i
    return(int_posture);
 80140d8:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 80140da:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 80140dc:	4b1f      	ldr	r3, [pc, #124]	; (801415c <_fx_media_abort+0x120>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d103      	bne.n	80140ec <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 80140e4:	4b1e      	ldr	r3, [pc, #120]	; (8014160 <_fx_media_abort+0x124>)
 80140e6:	2200      	movs	r2, #0
 80140e8:	601a      	str	r2, [r3, #0]
 80140ea:	e019      	b.n	8014120 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80140f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8014108:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 801410c:	4b14      	ldr	r3, [pc, #80]	; (8014160 <_fx_media_abort+0x124>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	429a      	cmp	r2, r3
 8014114:	d104      	bne.n	8014120 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801411c:	4a10      	ldr	r2, [pc, #64]	; (8014160 <_fx_media_abort+0x124>)
 801411e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 8014120:	4b0e      	ldr	r3, [pc, #56]	; (801415c <_fx_media_abort+0x120>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	3b01      	subs	r3, #1
 8014126:	4a0d      	ldr	r2, [pc, #52]	; (801415c <_fx_media_abort+0x120>)
 8014128:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4a0d      	ldr	r2, [pc, #52]	; (8014164 <_fx_media_abort+0x128>)
 801412e:	601a      	str	r2, [r3, #0]
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	f383 8810 	msr	PRIMASK, r3
}
 801413a:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014142:	4618      	mov	r0, r3
 8014144:	f004 fc52 	bl	80189ec <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3720      	adds	r7, #32
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	4d454449 	.word	0x4d454449
 8014158:	46494c41 	.word	0x46494c41
 801415c:	24004348 	.word	0x24004348
 8014160:	24004344 	.word	0x24004344
 8014164:	4d454441 	.word	0x4d454441

08014168 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8014168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801416c:	b084      	sub	sp, #16
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014178:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	330b      	adds	r3, #11
 801417e:	4618      	mov	r0, r3
 8014180:	f001 fc7e 	bl	8015a80 <_fx_utility_16_unsigned_read>
 8014184:	4602      	mov	r2, r0
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801418e:	2b00      	cmp	r3, #0
 8014190:	d101      	bne.n	8014196 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 8014192:	2302      	movs	r3, #2
 8014194:	e08c      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	3318      	adds	r3, #24
 801419a:	4618      	mov	r0, r3
 801419c:	f001 fc70 	bl	8015a80 <_fx_utility_16_unsigned_read>
 80141a0:	4602      	mov	r2, r0
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	331a      	adds	r3, #26
 80141aa:	4618      	mov	r0, r3
 80141ac:	f001 fc68 	bl	8015a80 <_fx_utility_16_unsigned_read>
 80141b0:	4602      	mov	r2, r0
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3313      	adds	r3, #19
 80141ba:	4618      	mov	r0, r3
 80141bc:	f001 fc60 	bl	8015a80 <_fx_utility_16_unsigned_read>
 80141c0:	4603      	mov	r3, r0
 80141c2:	2200      	movs	r2, #0
 80141c4:	4698      	mov	r8, r3
 80141c6:	4691      	mov	r9, r2
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80141d4:	4313      	orrs	r3, r2
 80141d6:	d10b      	bne.n	80141f0 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	3320      	adds	r3, #32
 80141dc:	4618      	mov	r0, r3
 80141de:	f001 fc77 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2200      	movs	r2, #0
 80141e6:	461c      	mov	r4, r3
 80141e8:	4615      	mov	r5, r2
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80141f6:	4313      	orrs	r3, r2
 80141f8:	d101      	bne.n	80141fe <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 80141fa:	2302      	movs	r3, #2
 80141fc:	e058      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	330e      	adds	r3, #14
 8014202:	4618      	mov	r0, r3
 8014204:	f001 fc3c 	bl	8015a80 <_fx_utility_16_unsigned_read>
 8014208:	4602      	mov	r2, r0
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 8014216:	2302      	movs	r3, #2
 8014218:	e04a      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	330d      	adds	r3, #13
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	461a      	mov	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801422a:	2b00      	cmp	r3, #0
 801422c:	d101      	bne.n	8014232 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 801422e:	2302      	movs	r3, #2
 8014230:	e03e      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	3316      	adds	r3, #22
 8014236:	4618      	mov	r0, r3
 8014238:	f001 fc22 	bl	8015a80 <_fx_utility_16_unsigned_read>
 801423c:	4602      	mov	r2, r0
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014246:	2b00      	cmp	r3, #0
 8014248:	d107      	bne.n	801425a <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	3324      	adds	r3, #36	; 0x24
 801424e:	4618      	mov	r0, r3
 8014250:	f001 fc3e 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 8014254:	4602      	mov	r2, r0
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 8014262:	2302      	movs	r3, #2
 8014264:	e024      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	3310      	adds	r3, #16
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	461a      	mov	r2, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014276:	2b00      	cmp	r3, #0
 8014278:	d101      	bne.n	801427e <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 801427a:	2301      	movs	r3, #1
 801427c:	e018      	b.n	80142b0 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	331c      	adds	r3, #28
 8014282:	4618      	mov	r0, r3
 8014284:	f001 fc24 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 8014288:	4602      	mov	r2, r0
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	3311      	adds	r3, #17
 8014292:	4618      	mov	r0, r3
 8014294:	f001 fbf4 	bl	8015a80 <_fx_utility_16_unsigned_read>
 8014298:	4602      	mov	r2, r0
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	332c      	adds	r3, #44	; 0x2c
 80142a2:	4618      	mov	r0, r3
 80142a4:	f001 fc14 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80142a8:	4602      	mov	r2, r0
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 80142ae:	2300      	movs	r3, #0
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080142bc <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b092      	sub	sp, #72	; 0x48
 80142c0:	af04      	add	r7, sp, #16
 80142c2:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4aa6      	ldr	r2, [pc, #664]	; (8014564 <_fx_media_close+0x2a8>)
 80142ca:	4293      	cmp	r3, r2
 80142cc:	d001      	beq.n	80142d2 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80142ce:	2311      	movs	r3, #17
 80142d0:	e1c2      	b.n	8014658 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	4aa3      	ldr	r2, [pc, #652]	; (8014564 <_fx_media_close+0x2a8>)
 80142d8:	4293      	cmp	r3, r2
 80142da:	d001      	beq.n	80142e0 <_fx_media_close+0x24>
 80142dc:	2311      	movs	r3, #17
 80142de:	e1bb      	b.n	8014658 <_fx_media_close+0x39c>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80142e6:	f04f 31ff 	mov.w	r1, #4294967295
 80142ea:	4618      	mov	r0, r3
 80142ec:	f004 fc28 	bl	8018b40 <_tx_mutex_get>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <_fx_media_close+0x3e>
 80142f6:	2311      	movs	r3, #17
 80142f8:	e1ae      	b.n	8014658 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014300:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014308:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 801430a:	e046      	b.n	801439a <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 801430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d139      	bne.n	8014388 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 8014314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014316:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8014318:	2b00      	cmp	r3, #0
 801431a:	d035      	beq.n	8014388 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801431c:	f3ef 8310 	mrs	r3, PRIMASK
 8014320:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014322:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014324:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014326:	b672      	cpsid	i
    return(int_posture);
 8014328:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 801432a:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 801432c:	4b8e      	ldr	r3, [pc, #568]	; (8014568 <_fx_media_close+0x2ac>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8014336:	4b8d      	ldr	r3, [pc, #564]	; (801456c <_fx_media_close+0x2b0>)
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014340:	6a3b      	ldr	r3, [r7, #32]
 8014342:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	f383 8810 	msr	PRIMASK, r3
}
 801434a:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 801434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8014352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014354:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8014358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435a:	3368      	adds	r3, #104	; 0x68
 801435c:	4619      	mov	r1, r3
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f7fa fe64 	bl	800f02c <_fx_directory_entry_write>
 8014364:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 8014366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00a      	beq.n	8014382 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014372:	4618      	mov	r0, r3
 8014374:	f004 fe5c 	bl	8019030 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7ff fe5f 	bl	801403c <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 801437e:	2390      	movs	r3, #144	; 0x90
 8014380:	e16a      	b.n	8014658 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 8014382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014384:	2200      	movs	r2, #0
 8014386:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8014388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438a:	4a79      	ldr	r2, [pc, #484]	; (8014570 <_fx_media_close+0x2b4>)
 801438c:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014392:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 8014394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014396:	3b01      	subs	r3, #1
 8014398:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 801439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801439c:	2b00      	cmp	r3, #0
 801439e:	d1b5      	bne.n	801430c <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f001 fef0 	bl	8016186 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f002 fa3e 	bl	8016828 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80143b2:	2100      	movs	r1, #0
 80143b4:	9102      	str	r1, [sp, #8]
 80143b6:	e9cd 2300 	strd	r2, r3, [sp]
 80143ba:	f04f 0201 	mov.w	r2, #1
 80143be:	f04f 0300 	mov.w	r3, #0
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f002 fdba 	bl	8016f3c <_fx_utility_logical_sector_flush>
 80143c8:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 80143ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00a      	beq.n	80143e6 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80143d6:	4618      	mov	r0, r3
 80143d8:	f004 fe2a 	bl	8019030 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff fe2d 	bl	801403c <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 80143e2:	2390      	movs	r3, #144	; 0x90
 80143e4:	e138      	b.n	8014658 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 80ca 	beq.w	8014584 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80143f8:	429a      	cmp	r2, r3
 80143fa:	f000 80c3 	beq.w	8014584 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 8014404:	2b00      	cmp	r3, #0
 8014406:	f040 80bd 	bne.w	8014584 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	69db      	ldr	r3, [r3, #28]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	69d9      	ldr	r1, [r3, #28]
 8014416:	f04f 32ff 	mov.w	r2, #4294967295
 801441a:	f04f 33ff 	mov.w	r3, #4294967295
 801441e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	69db      	ldr	r3, [r3, #28]
 8014426:	2200      	movs	r2, #0
 8014428:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2290      	movs	r2, #144	; 0x90
 8014436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801443e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2201      	movs	r2, #1
 8014450:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2203      	movs	r2, #3
 8014458:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8014462:	1c5a      	adds	r2, r3, #1
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801447a:	2b00      	cmp	r3, #0
 801447c:	d00a      	beq.n	8014494 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014484:	4618      	mov	r0, r3
 8014486:	f004 fdd3 	bl	8019030 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f7ff fdd6 	bl	801403c <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 8014490:	2390      	movs	r3, #144	; 0x90
 8014492:	e0e1      	b.n	8014658 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801449a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 801449c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801449e:	f001 fb17 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80144a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	4a33      	ldr	r2, [pc, #204]	; (8014574 <_fx_media_close+0x2b8>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d16b      	bne.n	8014584 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80144ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80144b2:	4618      	mov	r0, r3
 80144b4:	f001 fb0c 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80144b8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 80144ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144bc:	4a2e      	ldr	r2, [pc, #184]	; (8014578 <_fx_media_close+0x2bc>)
 80144be:	4293      	cmp	r3, r2
 80144c0:	d160      	bne.n	8014584 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 80144c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144cc:	4619      	mov	r1, r3
 80144ce:	4610      	mov	r0, r2
 80144d0:	f001 fb1b 	bl	8015b0a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 80144d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144e0:	4619      	mov	r1, r3
 80144e2:	4610      	mov	r0, r2
 80144e4:	f001 fb11 	bl	8015b0a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2201      	movs	r2, #1
 80144ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2290      	movs	r2, #144	; 0x90
 80144f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2201      	movs	r2, #1
 801450e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2203      	movs	r2, #3
 8014516:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2201      	movs	r2, #1
 801451e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2200      	movs	r2, #0
 801453e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d017      	beq.n	801457c <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014552:	4618      	mov	r0, r3
 8014554:	f004 fd6c 	bl	8019030 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f7ff fd6f 	bl	801403c <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 801455e:	2390      	movs	r3, #144	; 0x90
 8014560:	e07a      	b.n	8014658 <_fx_media_close+0x39c>
 8014562:	bf00      	nop
 8014564:	4d454449 	.word	0x4d454449
 8014568:	24004350 	.word	0x24004350
 801456c:	2400434c 	.word	0x2400434c
 8014570:	46494c43 	.word	0x46494c43
 8014574:	41615252 	.word	0x41615252
 8014578:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2202      	movs	r2, #2
 8014596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2290      	movs	r2, #144	; 0x90
 801459e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2208      	movs	r2, #8
 80145b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2290      	movs	r2, #144	; 0x90
 80145b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145c6:	f3ef 8310 	mrs	r3, PRIMASK
 80145ca:	613b      	str	r3, [r7, #16]
    return(posture);
 80145cc:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80145ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80145d0:	b672      	cpsid	i
    return(int_posture);
 80145d2:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 80145d4:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 80145d6:	4b22      	ldr	r3, [pc, #136]	; (8014660 <_fx_media_close+0x3a4>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d103      	bne.n	80145e6 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 80145de:	4b21      	ldr	r3, [pc, #132]	; (8014664 <_fx_media_close+0x3a8>)
 80145e0:	2200      	movs	r2, #0
 80145e2:	601a      	str	r2, [r3, #0]
 80145e4:	e019      	b.n	801461a <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80145f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8014602:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 8014606:	4b17      	ldr	r3, [pc, #92]	; (8014664 <_fx_media_close+0x3a8>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	429a      	cmp	r2, r3
 801460e:	d104      	bne.n	801461a <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8014616:	4a13      	ldr	r2, [pc, #76]	; (8014664 <_fx_media_close+0x3a8>)
 8014618:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 801461a:	4b11      	ldr	r3, [pc, #68]	; (8014660 <_fx_media_close+0x3a4>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	3b01      	subs	r3, #1
 8014620:	4a0f      	ldr	r2, [pc, #60]	; (8014660 <_fx_media_close+0x3a4>)
 8014622:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	4a10      	ldr	r2, [pc, #64]	; (8014668 <_fx_media_close+0x3ac>)
 8014628:	601a      	str	r2, [r3, #0]
 801462a:	6a3b      	ldr	r3, [r7, #32]
 801462c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	f383 8810 	msr	PRIMASK, r3
}
 8014634:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801463c:	4618      	mov	r0, r3
 801463e:	f004 f9d5 	bl	80189ec <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014648:	2b00      	cmp	r3, #0
 801464a:	d004      	beq.n	8014656 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 8014656:	2300      	movs	r3, #0
}
 8014658:	4618      	mov	r0, r3
 801465a:	3738      	adds	r7, #56	; 0x38
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}
 8014660:	24004348 	.word	0x24004348
 8014664:	24004344 	.word	0x24004344
 8014668:	4d454443 	.word	0x4d454443

0801466c <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b090      	sub	sp, #64	; 0x40
 8014670:	af04      	add	r7, sp, #16
 8014672:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801467a:	1c5a      	adds	r2, r3, #1
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4aa2      	ldr	r2, [pc, #648]	; (8014910 <_fx_media_flush+0x2a4>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d001      	beq.n	8014690 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 801468c:	2311      	movs	r3, #17
 801468e:	e175      	b.n	801497c <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4a9e      	ldr	r2, [pc, #632]	; (8014910 <_fx_media_flush+0x2a4>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d001      	beq.n	801469e <_fx_media_flush+0x32>
 801469a:	2311      	movs	r3, #17
 801469c:	e16e      	b.n	801497c <_fx_media_flush+0x310>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80146a4:	f04f 31ff 	mov.w	r1, #4294967295
 80146a8:	4618      	mov	r0, r3
 80146aa:	f004 fa49 	bl	8018b40 <_tx_mutex_get>
 80146ae:	4603      	mov	r3, r0
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d001      	beq.n	80146b8 <_fx_media_flush+0x4c>
 80146b4:	2311      	movs	r3, #17
 80146b6:	e161      	b.n	801497c <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d007      	beq.n	80146d2 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80146c8:	4618      	mov	r0, r3
 80146ca:	f004 fcb1 	bl	8019030 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 80146ce:	2323      	movs	r3, #35	; 0x23
 80146d0:	e154      	b.n	801497c <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80146d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80146e0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 80146e2:	e040      	b.n	8014766 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80146e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e6:	689b      	ldr	r3, [r3, #8]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d136      	bne.n	801475a <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 80146ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ee:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d032      	beq.n	801475a <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146f4:	f3ef 8310 	mrs	r3, PRIMASK
 80146f8:	613b      	str	r3, [r7, #16]
    return(posture);
 80146fa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80146fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80146fe:	b672      	cpsid	i
    return(int_posture);
 8014700:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 8014702:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8014704:	4b83      	ldr	r3, [pc, #524]	; (8014914 <_fx_media_flush+0x2a8>)
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 801470e:	4b82      	ldr	r3, [pc, #520]	; (8014918 <_fx_media_flush+0x2ac>)
 8014710:	681a      	ldr	r2, [r3, #0]
 8014712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014714:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	f383 8810 	msr	PRIMASK, r3
}
 8014722:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 8014724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014726:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 801472a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801472c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8014730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014732:	3368      	adds	r3, #104	; 0x68
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7fa fc78 	bl	800f02c <_fx_directory_entry_write>
 801473c:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 801473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014740:	2b00      	cmp	r3, #0
 8014742:	d007      	beq.n	8014754 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801474a:	4618      	mov	r0, r3
 801474c:	f004 fc70 	bl	8019030 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 8014750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014752:	e113      	b.n	801497c <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 8014754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014756:	2200      	movs	r2, #0
 8014758:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 801475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801475e:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	3b01      	subs	r3, #1
 8014764:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 8014766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014768:	2b00      	cmp	r3, #0
 801476a:	d1bb      	bne.n	80146e4 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f001 fd0a 	bl	8016186 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f002 f858 	bl	8016828 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801477e:	2100      	movs	r1, #0
 8014780:	9102      	str	r1, [sp, #8]
 8014782:	e9cd 2300 	strd	r2, r3, [sp]
 8014786:	f04f 0201 	mov.w	r2, #1
 801478a:	f04f 0300 	mov.w	r3, #0
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f002 fbd4 	bl	8016f3c <_fx_utility_logical_sector_flush>
 8014794:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 8014796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014798:	2b00      	cmp	r3, #0
 801479a:	d007      	beq.n	80147ac <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80147a2:	4618      	mov	r0, r3
 80147a4:	f004 fc44 	bl	8019030 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 80147a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147aa:	e0e7      	b.n	801497c <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	f000 80bb 	beq.w	801492c <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80147be:	429a      	cmp	r2, r3
 80147c0:	f000 80b4 	beq.w	801492c <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	69db      	ldr	r3, [r3, #28]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	69d9      	ldr	r1, [r3, #28]
 80147d0:	f04f 32ff 	mov.w	r2, #4294967295
 80147d4:	f04f 33ff 	mov.w	r3, #4294967295
 80147d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	69db      	ldr	r3, [r3, #28]
 80147e0:	2200      	movs	r2, #0
 80147e2:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2200      	movs	r2, #0
 80147e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2290      	movs	r2, #144	; 0x90
 80147f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a3a      	ldr	r2, [r7, #32]
 80147f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2201      	movs	r2, #1
 801480a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2203      	movs	r2, #3
 8014812:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014834:	2b00      	cmp	r3, #0
 8014836:	d007      	beq.n	8014848 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801483e:	4618      	mov	r0, r3
 8014840:	f004 fbf6 	bl	8019030 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 8014844:	2390      	movs	r3, #144	; 0x90
 8014846:	e099      	b.n	801497c <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801484e:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8014850:	6a38      	ldr	r0, [r7, #32]
 8014852:	f001 f93d 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 8014856:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	4a30      	ldr	r2, [pc, #192]	; (801491c <_fx_media_flush+0x2b0>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d165      	bne.n	801492c <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014866:	4618      	mov	r0, r3
 8014868:	f001 f932 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 801486c:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	4a2b      	ldr	r2, [pc, #172]	; (8014920 <_fx_media_flush+0x2b4>)
 8014872:	4293      	cmp	r3, r2
 8014874:	d15a      	bne.n	801492c <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014880:	4619      	mov	r1, r3
 8014882:	4610      	mov	r0, r2
 8014884:	f001 f941 	bl	8015b0a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 8014888:	6a3b      	ldr	r3, [r7, #32]
 801488a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014894:	4619      	mov	r1, r3
 8014896:	4610      	mov	r0, r2
 8014898:	f001 f937 	bl	8015b0a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2201      	movs	r2, #1
 80148a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2290      	movs	r2, #144	; 0x90
 80148a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6a3a      	ldr	r2, [r7, #32]
 80148b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2201      	movs	r2, #1
 80148c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2203      	movs	r2, #3
 80148ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2201      	movs	r2, #1
 80148d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80148dc:	1c5a      	adds	r2, r3, #1
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d011      	beq.n	8014924 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014906:	4618      	mov	r0, r3
 8014908:	f004 fb92 	bl	8019030 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 801490c:	2390      	movs	r3, #144	; 0x90
 801490e:	e035      	b.n	801497c <_fx_media_flush+0x310>
 8014910:	4d454449 	.word	0x4d454449
 8014914:	24004350 	.word	0x24004350
 8014918:	2400434c 	.word	0x2400434c
 801491c:	41615252 	.word	0x41615252
 8014920:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2202      	movs	r2, #2
 801493e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2290      	movs	r2, #144	; 0x90
 8014946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801495a:	2b00      	cmp	r3, #0
 801495c:	d007      	beq.n	801496e <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014964:	4618      	mov	r0, r3
 8014966:	f004 fb63 	bl	8019030 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 801496a:	2390      	movs	r3, #144	; 0x90
 801496c:	e006      	b.n	801497c <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014974:	4618      	mov	r0, r3
 8014976:	f004 fb5b 	bl	8019030 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	3730      	adds	r7, #48	; 0x30
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8014984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014988:	b09a      	sub	sp, #104	; 0x68
 801498a:	af04      	add	r7, sp, #16
 801498c:	60f8      	str	r0, [r7, #12]
 801498e:	60b9      	str	r1, [r7, #8]
 8014990:	607a      	str	r2, [r7, #4]
 8014992:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8014994:	4bba      	ldr	r3, [pc, #744]	; (8014c80 <_fx_media_open+0x2fc>)
 8014996:	681a      	ldr	r2, [r3, #0]
 8014998:	4bba      	ldr	r3, [pc, #744]	; (8014c84 <_fx_media_open+0x300>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	431a      	orrs	r2, r3
 801499e:	4bba      	ldr	r3, [pc, #744]	; (8014c88 <_fx_media_open+0x304>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	4313      	orrs	r3, r2
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d003      	beq.n	80149b0 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 80149a8:	4bb8      	ldr	r3, [pc, #736]	; (8014c8c <_fx_media_open+0x308>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d102      	bne.n	80149b6 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 80149b0:	2322      	movs	r3, #34	; 0x22
 80149b2:	f000 bd53 	b.w	801545c <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80149c8:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80149ce:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80149d6:	461a      	mov	r2, r3
 80149d8:	2300      	movs	r3, #0
 80149da:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80149e4:	2200      	movs	r2, #0
 80149e6:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 80149ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149ec:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2200      	movs	r2, #0
 80149f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2200      	movs	r2, #0
 80149fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2200      	movs	r2, #0
 8014a12:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2200      	movs	r2, #0
 8014a22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2200      	movs	r2, #0
 8014a32:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2200      	movs	r2, #0
 8014a42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2200      	movs	r2, #0
 8014a52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2200      	movs	r2, #0
 8014a62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2200      	movs	r2, #0
 8014a72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2200      	movs	r2, #0
 8014a92:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2200      	movs	r2, #0
 8014af2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2200      	movs	r2, #0
 8014afa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2200      	movs	r2, #0
 8014b12:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2200      	movs	r2, #0
 8014b22:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2200      	movs	r2, #0
 8014b32:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2200      	movs	r2, #0
 8014b42:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2200      	movs	r2, #0
 8014b52:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2200      	movs	r2, #0
 8014b62:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2200      	movs	r2, #0
 8014b72:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2204      	movs	r2, #4
 8014bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2290      	movs	r2, #144	; 0x90
 8014bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	683a      	ldr	r2, [r7, #0]
 8014be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2200      	movs	r2, #0
 8014bea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 8014c12:	2390      	movs	r3, #144	; 0x90
 8014c14:	f000 bc22 	b.w	801545c <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2205      	movs	r2, #5
 8014c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2290      	movs	r2, #144	; 0x90
 8014c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2201      	movs	r2, #1
 8014c42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2201      	movs	r2, #1
 8014c4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d016      	beq.n	8014c90 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2208      	movs	r2, #8
 8014c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2290      	movs	r2, #144	; 0x90
 8014c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e3ed      	b.n	801545c <_fx_media_open+0xad8>
 8014c80:	2400435c 	.word	0x2400435c
 8014c84:	24004360 	.word	0x24004360
 8014c88:	24004364 	.word	0x24004364
 8014c8c:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f7ff fa69 	bl	8014168 <_fx_media_boot_info_extract>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00e      	beq.n	8014cba <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2208      	movs	r2, #8
 8014ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	2290      	movs	r2, #144	; 0x90
 8014ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 8014cb6:	2302      	movs	r3, #2
 8014cb8:	e3d0      	b.n	801545c <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014cc0:	3330      	adds	r3, #48	; 0x30
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 fedc 	bl	8015a80 <_fx_utility_16_unsigned_read>
 8014cc8:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d20e      	bcs.n	8014cf2 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	2208      	movs	r2, #8
 8014cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2290      	movs	r2, #144	; 0x90
 8014ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014cea:	68f8      	ldr	r0, [r7, #12]
 8014cec:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 8014cee:	2321      	movs	r3, #33	; 0x21
 8014cf0:	e3b4      	b.n	801545c <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	695b      	ldr	r3, [r3, #20]
 8014d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d08:	d903      	bls.n	8014d12 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d10:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	695b      	ldr	r3, [r3, #20]
 8014d16:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8014d1e:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 8014d20:	e01c      	b.n	8014d5c <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 8014d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d26:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 8014d28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d32:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 8014d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d38:	2200      	movs	r2, #0
 8014d3a:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 8014d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d3e:	2200      	movs	r2, #0
 8014d40:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 8014d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d44:	f103 0218 	add.w	r2, r3, #24
 8014d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d4a:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 8014d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d4e:	3318      	adds	r3, #24
 8014d50:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d58:	4413      	add	r3, r2
 8014d5a:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 8014d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d5e:	1e5a      	subs	r2, r3, #1
 8014d60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1dd      	bne.n	8014d22 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 8014d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d68:	3b18      	subs	r3, #24
 8014d6a:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8014d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d6e:	2200      	movs	r2, #0
 8014d70:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 8014d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d74:	1e5a      	subs	r2, r3, #1
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2200      	movs	r2, #0
 8014d88:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	695b      	ldr	r3, [r3, #20]
 8014d94:	2b0f      	cmp	r3, #15
 8014d96:	d91a      	bls.n	8014dce <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	695a      	ldr	r2, [r3, #20]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	695b      	ldr	r3, [r3, #20]
 8014da0:	3b01      	subs	r3, #1
 8014da2:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	6959      	ldr	r1, [r3, #20]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	695b      	ldr	r3, [r3, #20]
 8014dac:	3b01      	subs	r3, #1
 8014dae:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d10c      	bne.n	8014dce <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2201      	movs	r2, #1
 8014db8:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	695b      	ldr	r3, [r3, #20]
 8014dbe:	089b      	lsrs	r3, r3, #2
 8014dc0:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8014dc8:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 8014dcc:	e002      	b.n	8014dd4 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014dd8:	e023      	b.n	8014e22 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8014dda:	68f9      	ldr	r1, [r7, #12]
 8014ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014dde:	4613      	mov	r3, r2
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	4413      	add	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	440b      	add	r3, r1
 8014de8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014dec:	2200      	movs	r2, #0
 8014dee:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8014df0:	68f9      	ldr	r1, [r7, #12]
 8014df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014df4:	4613      	mov	r3, r2
 8014df6:	005b      	lsls	r3, r3, #1
 8014df8:	4413      	add	r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	440b      	add	r3, r1
 8014dfe:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8014e02:	2200      	movs	r2, #0
 8014e04:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8014e06:	68f9      	ldr	r1, [r7, #12]
 8014e08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	009b      	lsls	r3, r3, #2
 8014e12:	440b      	add	r3, r1
 8014e14:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8014e18:	2200      	movs	r2, #0
 8014e1a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 8014e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1e:	3301      	adds	r3, #1
 8014e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e24:	2b0f      	cmp	r3, #15
 8014e26:	d9d8      	bls.n	8014dda <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8014e28:	2300      	movs	r3, #0
 8014e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e2c:	e009      	b.n	8014e42 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e32:	4413      	add	r3, r2
 8014e34:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8014e38:	2200      	movs	r2, #0
 8014e3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8014e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e3e:	3301      	adds	r3, #1
 8014e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e44:	2b7f      	cmp	r3, #127	; 0x7f
 8014e46:	d9f2      	bls.n	8014e2e <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 8014e50:	68f9      	ldr	r1, [r7, #12]
 8014e52:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 8014e54:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8014e58:	441a      	add	r2, r3
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e62:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8014e68:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8014e6a:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8014e70:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8014e80:	441a      	add	r2, r3
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014e8c:	68f9      	ldr	r1, [r7, #12]
 8014e8e:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8014e90:	2000      	movs	r0, #0
 8014e92:	460c      	mov	r4, r1
 8014e94:	4605      	mov	r5, r0
 8014e96:	ebb2 0804 	subs.w	r8, r2, r4
 8014e9a:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	469a      	mov	sl, r3
 8014ea6:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8014ea8:	4652      	mov	r2, sl
 8014eaa:	465b      	mov	r3, fp
 8014eac:	4640      	mov	r0, r8
 8014eae:	4649      	mov	r1, r9
 8014eb0:	f7eb fb96 	bl	80005e0 <__aeabi_uldivmod>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ec0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d819      	bhi.n	8014efc <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8014ee6:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ef6:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 8014efa:	e037      	b.n	8014f6c <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f00:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d819      	bhi.n	8014f3c <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2200      	movs	r2, #0
 8014f12:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2200      	movs	r2, #0
 8014f18:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f20:	461a      	mov	r2, r3
 8014f22:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8014f26:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f30:	461a      	mov	r2, r3
 8014f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f36:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 8014f3a:	e017      	b.n	8014f6c <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2201      	movs	r2, #1
 8014f46:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f4c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f54:	461a      	mov	r2, r3
 8014f56:	4b95      	ldr	r3, [pc, #596]	; (80151ac <_fx_media_open+0x828>)
 8014f58:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f62:	461a      	mov	r2, r3
 8014f64:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8014f68:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d15f      	bne.n	8015034 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d801      	bhi.n	8014f80 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	e26d      	b.n	801545c <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f88:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 8014f8a:	68f9      	ldr	r1, [r7, #12]
 8014f8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8014f8e:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8014f92:	441a      	add	r2, r3
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fa0:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8014fa2:	f107 0310 	add.w	r3, r7, #16
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014faa:	68f8      	ldr	r0, [r7, #12]
 8014fac:	f000 fdce 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8014fb0:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 8014fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8014fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d00e      	beq.n	8014fdc <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2208      	movs	r2, #8
 8014fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2290      	movs	r2, #144	; 0x90
 8014fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8014fd8:	2303      	movs	r3, #3
 8014fda:	e23f      	b.n	801545c <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d004      	beq.n	8014fee <_fx_media_open+0x66a>
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d90e      	bls.n	801500c <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	2208      	movs	r2, #8
 8014ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2290      	movs	r2, #144	; 0x90
 8014ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8015008:	2303      	movs	r3, #3
 801500a:	e227      	b.n	801545c <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	4a68      	ldr	r2, [pc, #416]	; (80151b0 <_fx_media_open+0x82c>)
 8015010:	4293      	cmp	r3, r2
 8015012:	d802      	bhi.n	801501a <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8015018:	e7c3      	b.n	8014fa2 <_fx_media_open+0x61e>
                break;
 801501a:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015022:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 801502a:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 801502e:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2200      	movs	r2, #0
 8015038:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2200      	movs	r2, #0
 801503e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015046:	2b00      	cmp	r3, #0
 8015048:	f000 808e 	beq.w	8015168 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	69db      	ldr	r3, [r3, #28]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	69d9      	ldr	r1, [r3, #28]
 8015058:	f04f 32ff 	mov.w	r2, #4294967295
 801505c:	f04f 33ff 	mov.w	r3, #4294967295
 8015060:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	69db      	ldr	r3, [r3, #28]
 8015068:	2200      	movs	r2, #0
 801506a:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2200      	movs	r2, #0
 8015070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2290      	movs	r2, #144	; 0x90
 8015078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2201      	movs	r2, #1
 8015092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2203      	movs	r2, #3
 801509a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80150a4:	1c5a      	adds	r2, r3, #1
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d150      	bne.n	8015162 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80150c6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 80150c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80150ca:	f000 fd01 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80150ce:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 80150d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d2:	4a38      	ldr	r2, [pc, #224]	; (80151b4 <_fx_media_open+0x830>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d140      	bne.n	801515a <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80150d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80150de:	4618      	mov	r0, r3
 80150e0:	f000 fcf6 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80150e4:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 80150e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e8:	4a33      	ldr	r2, [pc, #204]	; (80151b8 <_fx_media_open+0x834>)
 80150ea:	4293      	cmp	r3, r2
 80150ec:	d131      	bne.n	8015152 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 80150ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80150f4:	4618      	mov	r0, r3
 80150f6:	f000 fceb 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 80150fa:	4602      	mov	r2, r0
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8015108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801510a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801510e:	4618      	mov	r0, r3
 8015110:	f000 fcde 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 8015114:	4602      	mov	r2, r0
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015124:	429a      	cmp	r2, r3
 8015126:	d80c      	bhi.n	8015142 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015132:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8015134:	429a      	cmp	r2, r3
 8015136:	d804      	bhi.n	8015142 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 801513e:	2b01      	cmp	r3, #1
 8015140:	d812      	bhi.n	8015168 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2200      	movs	r2, #0
 801514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8015150:	e00a      	b.n	8015168 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2200      	movs	r2, #0
 8015156:	669a      	str	r2, [r3, #104]	; 0x68
 8015158:	e006      	b.n	8015168 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	669a      	str	r2, [r3, #104]	; 0x68
 8015160:	e002      	b.n	8015168 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2200      	movs	r2, #0
 8015166:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801516c:	2b00      	cmp	r3, #0
 801516e:	d040      	beq.n	80151f2 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 8015170:	2302      	movs	r3, #2
 8015172:	657b      	str	r3, [r7, #84]	; 0x54
 8015174:	e036      	b.n	80151e4 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8015176:	f107 0310 	add.w	r3, r7, #16
 801517a:	461a      	mov	r2, r3
 801517c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801517e:	68f8      	ldr	r0, [r7, #12]
 8015180:	f000 fce4 	bl	8015b4c <_fx_utility_FAT_entry_read>
 8015184:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8015186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015188:	2b00      	cmp	r3, #0
 801518a:	d017      	beq.n	80151bc <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2208      	movs	r2, #8
 8015190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2290      	movs	r2, #144	; 0x90
 8015198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 80151a6:	2303      	movs	r3, #3
 80151a8:	e158      	b.n	801545c <_fx_media_open+0xad8>
 80151aa:	bf00      	nop
 80151ac:	0ffffff0 	.word	0x0ffffff0
 80151b0:	0fffffef 	.word	0x0fffffef
 80151b4:	41615252 	.word	0x41615252
 80151b8:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d10d      	bne.n	80151de <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80151c6:	1c5a      	adds	r2, r3, #1
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d103      	bne.n	80151de <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80151da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 80151de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151e0:	3301      	adds	r3, #1
 80151e2:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151e8:	3302      	adds	r3, #2
 80151ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d3c2      	bcc.n	8015176 <_fx_media_open+0x7f2>
 80151f0:	e0b4      	b.n	801535c <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f040 80b0 	bne.w	801535c <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015202:	2101      	movs	r1, #1
 8015204:	9102      	str	r1, [sp, #8]
 8015206:	e9cd 2300 	strd	r2, r3, [sp]
 801520a:	f04f 0201 	mov.w	r2, #1
 801520e:	f04f 0300 	mov.w	r3, #0
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f001 fe92 	bl	8016f3c <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801521c:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 801521e:	2300      	movs	r3, #0
 8015220:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8015222:	2300      	movs	r3, #0
 8015224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015226:	e093      	b.n	8015350 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801522c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801522e:	4413      	add	r3, r2
 8015230:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	695b      	ldr	r3, [r3, #20]
 8015240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015242:	429a      	cmp	r2, r3
 8015244:	d902      	bls.n	801524c <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	695b      	ldr	r3, [r3, #20]
 801524a:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2200      	movs	r2, #0
 8015250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2290      	movs	r2, #144	; 0x90
 8015258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	689a      	ldr	r2, [r3, #8]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801526a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015272:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2202      	movs	r2, #2
 801527a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801528e:	2b00      	cmp	r3, #0
 8015290:	d00e      	beq.n	80152b0 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2208      	movs	r2, #8
 8015296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2290      	movs	r2, #144	; 0x90
 801529e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80152a8:	68f8      	ldr	r0, [r7, #12]
 80152aa:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 80152ac:	2303      	movs	r3, #3
 80152ae:	e0d5      	b.n	801545c <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80152b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152b6:	fb02 f303 	mul.w	r3, r2, r3
 80152ba:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 80152bc:	2300      	movs	r3, #0
 80152be:	64bb      	str	r3, [r7, #72]	; 0x48
 80152c0:	e03d      	b.n	801533e <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d009      	beq.n	80152de <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	689a      	ldr	r2, [r3, #8]
 80152ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152d0:	4413      	add	r3, r2
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 80152d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152d8:	3304      	adds	r3, #4
 80152da:	64bb      	str	r3, [r7, #72]	; 0x48
 80152dc:	e011      	b.n	8015302 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	689a      	ldr	r2, [r3, #8]
 80152e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152e4:	4413      	add	r3, r2
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	689a      	ldr	r2, [r3, #8]
 80152ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152f0:	3301      	adds	r3, #1
 80152f2:	4413      	add	r3, r2
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80152f8:	430b      	orrs	r3, r1
 80152fa:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 80152fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152fe:	3302      	adds	r3, #2
 8015300:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d10d      	bne.n	8015324 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801530c:	1c5a      	adds	r2, r3, #1
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015318:	2b00      	cmp	r3, #0
 801531a:	d103      	bne.n	8015324 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 8015324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015326:	3301      	adds	r3, #1
 8015328:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801532e:	3302      	adds	r3, #2
 8015330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015332:	429a      	cmp	r2, r3
 8015334:	d303      	bcc.n	801533e <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801533a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 801533c:	e003      	b.n	8015346 <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 801533e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015342:	429a      	cmp	r2, r3
 8015344:	d3bd      	bcc.n	80152c2 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	695b      	ldr	r3, [r3, #20]
 801534a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801534c:	4413      	add	r3, r2
 801534e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015356:	429a      	cmp	r2, r3
 8015358:	f4ff af66 	bcc.w	8015228 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015362:	2b00      	cmp	r3, #0
 8015364:	d103      	bne.n	801536e <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2202      	movs	r2, #2
 801536a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	2200      	movs	r2, #0
 801537e:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015388:	2200      	movs	r2, #0
 801538a:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2200      	movs	r2, #0
 8015390:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2200      	movs	r2, #0
 8015398:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2200      	movs	r2, #0
 80153a8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2200      	movs	r2, #0
 80153b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80153c2:	2200      	movs	r2, #0
 80153c4:	4928      	ldr	r1, [pc, #160]	; (8015468 <_fx_media_open+0xae4>)
 80153c6:	4618      	mov	r0, r3
 80153c8:	f003 fab6 	bl	8018938 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153cc:	f3ef 8310 	mrs	r3, PRIMASK
 80153d0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80153d2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80153d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80153d6:	b672      	cpsid	i
    return(int_posture);
 80153d8:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 80153da:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	4a23      	ldr	r2, [pc, #140]	; (801546c <_fx_media_open+0xae8>)
 80153e0:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 80153e2:	4b23      	ldr	r3, [pc, #140]	; (8015470 <_fx_media_open+0xaec>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d017      	beq.n	801541a <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 80153ea:	4b21      	ldr	r3, [pc, #132]	; (8015470 <_fx_media_open+0xaec>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80153f2:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 80153f4:	4b1e      	ldr	r3, [pc, #120]	; (8015470 <_fx_media_open+0xaec>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 80153fe:	6a3b      	ldr	r3, [r7, #32]
 8015400:	68fa      	ldr	r2, [r7, #12]
 8015402:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	6a3a      	ldr	r2, [r7, #32]
 801540a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 801540e:	4b18      	ldr	r3, [pc, #96]	; (8015470 <_fx_media_open+0xaec>)
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8015418:	e00a      	b.n	8015430 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 801541a:	4a15      	ldr	r2, [pc, #84]	; (8015470 <_fx_media_open+0xaec>)
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	68fa      	ldr	r2, [r7, #12]
 8015424:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 8015430:	4b10      	ldr	r3, [pc, #64]	; (8015474 <_fx_media_open+0xaf0>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	3301      	adds	r3, #1
 8015436:	4a0f      	ldr	r2, [pc, #60]	; (8015474 <_fx_media_open+0xaf0>)
 8015438:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d004      	beq.n	801544e <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801544a:	68f8      	ldr	r0, [r7, #12]
 801544c:	4798      	blx	r3
 801544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	f383 8810 	msr	PRIMASK, r3
}
 8015458:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3758      	adds	r7, #88	; 0x58
 8015460:	46bd      	mov	sp, r7
 8015462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015466:	bf00      	nop
 8015468:	0801bc14 	.word	0x0801bc14
 801546c:	4d454449 	.word	0x4d454449
 8015470:	24004344 	.word	0x24004344
 8015474:	24004348 	.word	0x24004348

08015478 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 8015478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801547c:	b090      	sub	sp, #64	; 0x40
 801547e:	af00      	add	r7, sp, #0
 8015480:	60f8      	str	r0, [r7, #12]
 8015482:	60b9      	str	r1, [r7, #8]
 8015484:	607a      	str	r2, [r7, #4]
 8015486:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 801548c:	2300      	movs	r3, #0
 801548e:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 8015490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	2be9      	cmp	r3, #233	; 0xe9
 8015496:	d008      	beq.n	80154aa <_fx_partition_offset_calculate+0x32>
 8015498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	2beb      	cmp	r3, #235	; 0xeb
 801549e:	d17d      	bne.n	801559c <_fx_partition_offset_calculate+0x124>
 80154a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154a2:	3302      	adds	r3, #2
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	2b90      	cmp	r3, #144	; 0x90
 80154a8:	d178      	bne.n	801559c <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 80154aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ac:	3316      	adds	r3, #22
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d118      	bne.n	80154e6 <_fx_partition_offset_calculate+0x6e>
 80154b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154b6:	3317      	adds	r3, #23
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d113      	bne.n	80154e6 <_fx_partition_offset_calculate+0x6e>
 80154be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154c0:	3324      	adds	r3, #36	; 0x24
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10e      	bne.n	80154e6 <_fx_partition_offset_calculate+0x6e>
 80154c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ca:	3325      	adds	r3, #37	; 0x25
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <_fx_partition_offset_calculate+0x6e>
 80154d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154d4:	3326      	adds	r3, #38	; 0x26
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d104      	bne.n	80154e6 <_fx_partition_offset_calculate+0x6e>
 80154dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154de:	3327      	adds	r3, #39	; 0x27
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d05a      	beq.n	801559c <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 80154e6:	f04f 0200 	mov.w	r2, #0
 80154ea:	f04f 0300 	mov.w	r3, #0
 80154ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 80154f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154f4:	3313      	adds	r3, #19
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d104      	bne.n	8015506 <_fx_partition_offset_calculate+0x8e>
 80154fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154fe:	3314      	adds	r3, #20
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d00d      	beq.n	8015522 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 8015506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015508:	3314      	adds	r3, #20
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	021b      	lsls	r3, r3, #8
 801550e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015510:	3213      	adds	r2, #19
 8015512:	7812      	ldrb	r2, [r2, #0]
 8015514:	4313      	orrs	r3, r2
 8015516:	2200      	movs	r2, #0
 8015518:	4698      	mov	r8, r3
 801551a:	4691      	mov	r9, r2
 801551c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8015520:	e02a      	b.n	8015578 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 8015522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015524:	3320      	adds	r3, #32
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10e      	bne.n	801554a <_fx_partition_offset_calculate+0xd2>
 801552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801552e:	3321      	adds	r3, #33	; 0x21
 8015530:	781b      	ldrb	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d109      	bne.n	801554a <_fx_partition_offset_calculate+0xd2>
 8015536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015538:	3322      	adds	r3, #34	; 0x22
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d104      	bne.n	801554a <_fx_partition_offset_calculate+0xd2>
 8015540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015542:	3323      	adds	r3, #35	; 0x23
 8015544:	781b      	ldrb	r3, [r3, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d016      	beq.n	8015578 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801554c:	3323      	adds	r3, #35	; 0x23
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8015552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015554:	3322      	adds	r3, #34	; 0x22
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801555a:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 801555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801555e:	3321      	adds	r3, #33	; 0x21
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8015564:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 8015566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015568:	3220      	adds	r2, #32
 801556a:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 801556c:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801556e:	2200      	movs	r2, #0
 8015570:	461c      	mov	r4, r3
 8015572:	4615      	mov	r5, r2
 8015574:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 8015578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801557c:	4313      	orrs	r3, r2
 801557e:	d00d      	beq.n	801559c <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d002      	beq.n	801558c <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2200      	movs	r2, #0
 801558a:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d002      	beq.n	8015598 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 8015592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 8015598:	2300      	movs	r3, #0
 801559a:	e032      	b.n	8015602 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 801559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801559e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	2b55      	cmp	r3, #85	; 0x55
 80155a6:	d105      	bne.n	80155b4 <_fx_partition_offset_calculate+0x13c>
 80155a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	2baa      	cmp	r3, #170	; 0xaa
 80155b2:	d001      	beq.n	80155b8 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 80155b4:	2304      	movs	r3, #4
 80155b6:	e024      	b.n	8015602 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 80155b8:	f107 0110 	add.w	r1, r7, #16
 80155bc:	f107 0014 	add.w	r0, r7, #20
 80155c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155c2:	2200      	movs	r2, #0
 80155c4:	f000 f822 	bl	801560c <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	68ba      	ldr	r2, [r7, #8]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d301      	bcc.n	80155d4 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 80155d0:	2304      	movs	r3, #4
 80155d2:	e016      	b.n	8015602 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d007      	beq.n	80155ea <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	00db      	lsls	r3, r3, #3
 80155de:	3340      	adds	r3, #64	; 0x40
 80155e0:	443b      	add	r3, r7
 80155e2:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d007      	beq.n	8015600 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	00db      	lsls	r3, r3, #3
 80155f4:	3340      	adds	r3, #64	; 0x40
 80155f6:	443b      	add	r3, r7
 80155f8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3740      	adds	r7, #64	; 0x40
 8015606:	46bd      	mov	sp, r7
 8015608:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801560c <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 801560c:	b480      	push	{r7}
 801560e:	b089      	sub	sp, #36	; 0x24
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
 8015618:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 801561a:	2300      	movs	r3, #0
 801561c:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 801561e:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8015622:	61fb      	str	r3, [r7, #28]
 8015624:	e06f      	b.n	8015706 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	3304      	adds	r3, #4
 801562a:	683a      	ldr	r2, [r7, #0]
 801562c:	4413      	add	r3, r2
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d10e      	bne.n	8015652 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	00db      	lsls	r3, r3, #3
 801563a:	68fa      	ldr	r2, [r7, #12]
 801563c:	4413      	add	r3, r2
 801563e:	2200      	movs	r2, #0
 8015640:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	00db      	lsls	r3, r3, #3
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	4413      	add	r3, r2
 801564c:	2200      	movs	r2, #0
 801564e:	605a      	str	r2, [r3, #4]
 8015650:	e051      	b.n	80156f6 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	3308      	adds	r3, #8
 8015656:	683a      	ldr	r2, [r7, #0]
 8015658:	4413      	add	r3, r2
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	3309      	adds	r3, #9
 8015662:	683a      	ldr	r2, [r7, #0]
 8015664:	4413      	add	r3, r2
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	021b      	lsls	r3, r3, #8
 801566a:	697a      	ldr	r2, [r7, #20]
 801566c:	4313      	orrs	r3, r2
 801566e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	330a      	adds	r3, #10
 8015674:	683a      	ldr	r2, [r7, #0]
 8015676:	4413      	add	r3, r2
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	041b      	lsls	r3, r3, #16
 801567c:	697a      	ldr	r2, [r7, #20]
 801567e:	4313      	orrs	r3, r2
 8015680:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	330b      	adds	r3, #11
 8015686:	683a      	ldr	r2, [r7, #0]
 8015688:	4413      	add	r3, r2
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	061b      	lsls	r3, r3, #24
 801568e:	697a      	ldr	r2, [r7, #20]
 8015690:	4313      	orrs	r3, r2
 8015692:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	68fa      	ldr	r2, [r7, #12]
 801569c:	4413      	add	r3, r2
 801569e:	6979      	ldr	r1, [r7, #20]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	440a      	add	r2, r1
 80156a4:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	330c      	adds	r3, #12
 80156aa:	683a      	ldr	r2, [r7, #0]
 80156ac:	4413      	add	r3, r2
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	330d      	adds	r3, #13
 80156b6:	683a      	ldr	r2, [r7, #0]
 80156b8:	4413      	add	r3, r2
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	021b      	lsls	r3, r3, #8
 80156be:	697a      	ldr	r2, [r7, #20]
 80156c0:	4313      	orrs	r3, r2
 80156c2:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	330e      	adds	r3, #14
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	4413      	add	r3, r2
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	041b      	lsls	r3, r3, #16
 80156d0:	697a      	ldr	r2, [r7, #20]
 80156d2:	4313      	orrs	r3, r2
 80156d4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	330f      	adds	r3, #15
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	4413      	add	r3, r2
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	061b      	lsls	r3, r3, #24
 80156e2:	697a      	ldr	r2, [r7, #20]
 80156e4:	4313      	orrs	r3, r2
 80156e6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	68fa      	ldr	r2, [r7, #12]
 80156f0:	4413      	add	r3, r2
 80156f2:	697a      	ldr	r2, [r7, #20]
 80156f4:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	1c5a      	adds	r2, r3, #1
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	3310      	adds	r3, #16
 8015704:	61fb      	str	r3, [r7, #28]
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 801570c:	d98b      	bls.n	8015626 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 801570e:	2300      	movs	r3, #0
}
 8015710:	4618      	mov	r0, r3
 8015712:	3724      	adds	r7, #36	; 0x24
 8015714:	46bd      	mov	sp, r7
 8015716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571a:	4770      	bx	lr

0801571c <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8015722:	4b27      	ldr	r3, [pc, #156]	; (80157c0 <_fx_system_initialize+0xa4>)
 8015724:	2200      	movs	r2, #0
 8015726:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 8015728:	4b26      	ldr	r3, [pc, #152]	; (80157c4 <_fx_system_initialize+0xa8>)
 801572a:	2200      	movs	r2, #0
 801572c:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 801572e:	4b26      	ldr	r3, [pc, #152]	; (80157c8 <_fx_system_initialize+0xac>)
 8015730:	f644 2221 	movw	r2, #18977	; 0x4a21
 8015734:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8015736:	4b25      	ldr	r3, [pc, #148]	; (80157cc <_fx_system_initialize+0xb0>)
 8015738:	2200      	movs	r2, #0
 801573a:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 801573c:	4b24      	ldr	r3, [pc, #144]	; (80157d0 <_fx_system_initialize+0xb4>)
 801573e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015742:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8015744:	4b23      	ldr	r3, [pc, #140]	; (80157d4 <_fx_system_initialize+0xb8>)
 8015746:	2210      	movs	r2, #16
 8015748:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 801574a:	2301      	movs	r3, #1
 801574c:	9302      	str	r3, [sp, #8]
 801574e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015752:	9301      	str	r3, [sp, #4]
 8015754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	4b1f      	ldr	r3, [pc, #124]	; (80157d8 <_fx_system_initialize+0xbc>)
 801575c:	4a1f      	ldr	r2, [pc, #124]	; (80157dc <_fx_system_initialize+0xc0>)
 801575e:	4920      	ldr	r1, [pc, #128]	; (80157e0 <_fx_system_initialize+0xc4>)
 8015760:	4820      	ldr	r0, [pc, #128]	; (80157e4 <_fx_system_initialize+0xc8>)
 8015762:	f004 fe61 	bl	801a428 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 8015766:	4b20      	ldr	r3, [pc, #128]	; (80157e8 <_fx_system_initialize+0xcc>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801576e:	4a1e      	ldr	r2, [pc, #120]	; (80157e8 <_fx_system_initialize+0xcc>)
 8015770:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8015772:	4b1d      	ldr	r3, [pc, #116]	; (80157e8 <_fx_system_initialize+0xcc>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801577a:	4a1b      	ldr	r2, [pc, #108]	; (80157e8 <_fx_system_initialize+0xcc>)
 801577c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 801577e:	4b1b      	ldr	r3, [pc, #108]	; (80157ec <_fx_system_initialize+0xd0>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015786:	4a19      	ldr	r2, [pc, #100]	; (80157ec <_fx_system_initialize+0xd0>)
 8015788:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 801578a:	4b18      	ldr	r3, [pc, #96]	; (80157ec <_fx_system_initialize+0xd0>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015792:	4a16      	ldr	r2, [pc, #88]	; (80157ec <_fx_system_initialize+0xd0>)
 8015794:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8015796:	4b15      	ldr	r3, [pc, #84]	; (80157ec <_fx_system_initialize+0xd0>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f043 0310 	orr.w	r3, r3, #16
 801579e:	4a13      	ldr	r2, [pc, #76]	; (80157ec <_fx_system_initialize+0xd0>)
 80157a0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 80157a2:	4b13      	ldr	r3, [pc, #76]	; (80157f0 <_fx_system_initialize+0xd4>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80157aa:	4a11      	ldr	r2, [pc, #68]	; (80157f0 <_fx_system_initialize+0xd4>)
 80157ac:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 80157ae:	4b10      	ldr	r3, [pc, #64]	; (80157f0 <_fx_system_initialize+0xd4>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 80157b6:	4a0e      	ldr	r2, [pc, #56]	; (80157f0 <_fx_system_initialize+0xd4>)
 80157b8:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 80157ba:	bf00      	nop
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	24004344 	.word	0x24004344
 80157c4:	24004348 	.word	0x24004348
 80157c8:	2400434c 	.word	0x2400434c
 80157cc:	24004350 	.word	0x24004350
 80157d0:	24004354 	.word	0x24004354
 80157d4:	24004358 	.word	0x24004358
 80157d8:	46585359 	.word	0x46585359
 80157dc:	080157f5 	.word	0x080157f5
 80157e0:	0801bc28 	.word	0x0801bc28
 80157e4:	24004368 	.word	0x24004368
 80157e8:	2400435c 	.word	0x2400435c
 80157ec:	24004360 	.word	0x24004360
 80157f0:	24004364 	.word	0x24004364

080157f4 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 80157f4:	b480      	push	{r7}
 80157f6:	b089      	sub	sp, #36	; 0x24
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	4a9c      	ldr	r2, [pc, #624]	; (8015a70 <_fx_system_timer_entry+0x27c>)
 8015800:	4293      	cmp	r3, r2
 8015802:	f040 8130 	bne.w	8015a66 <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8015806:	4b9b      	ldr	r3, [pc, #620]	; (8015a74 <_fx_system_timer_entry+0x280>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f003 031f 	and.w	r3, r3, #31
 801580e:	005b      	lsls	r3, r3, #1
 8015810:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8015812:	4b98      	ldr	r3, [pc, #608]	; (8015a74 <_fx_system_timer_entry+0x280>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	095b      	lsrs	r3, r3, #5
 8015818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801581c:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 801581e:	4b95      	ldr	r3, [pc, #596]	; (8015a74 <_fx_system_timer_entry+0x280>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	0adb      	lsrs	r3, r3, #11
 8015824:	f003 031f 	and.w	r3, r3, #31
 8015828:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 801582a:	4b93      	ldr	r3, [pc, #588]	; (8015a78 <_fx_system_timer_entry+0x284>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f003 031f 	and.w	r3, r3, #31
 8015832:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8015834:	4b90      	ldr	r3, [pc, #576]	; (8015a78 <_fx_system_timer_entry+0x284>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	095b      	lsrs	r3, r3, #5
 801583a:	f003 030f 	and.w	r3, r3, #15
 801583e:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8015840:	4b8d      	ldr	r3, [pc, #564]	; (8015a78 <_fx_system_timer_entry+0x284>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	0a5b      	lsrs	r3, r3, #9
 8015846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801584a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801584e:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	330a      	adds	r3, #10
 8015854:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	2b3b      	cmp	r3, #59	; 0x3b
 801585a:	f240 80eb 	bls.w	8015a34 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	4a86      	ldr	r2, [pc, #536]	; (8015a7c <_fx_system_timer_entry+0x288>)
 8015862:	fba2 2303 	umull	r2, r3, r2, r3
 8015866:	095b      	lsrs	r3, r3, #5
 8015868:	69ba      	ldr	r2, [r7, #24]
 801586a:	4413      	add	r3, r2
 801586c:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 801586e:	69fa      	ldr	r2, [r7, #28]
 8015870:	4b82      	ldr	r3, [pc, #520]	; (8015a7c <_fx_system_timer_entry+0x288>)
 8015872:	fba3 1302 	umull	r1, r3, r3, r2
 8015876:	0959      	lsrs	r1, r3, #5
 8015878:	460b      	mov	r3, r1
 801587a:	011b      	lsls	r3, r3, #4
 801587c:	1a5b      	subs	r3, r3, r1
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	2b3b      	cmp	r3, #59	; 0x3b
 8015888:	f240 80d4 	bls.w	8015a34 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	4a7b      	ldr	r2, [pc, #492]	; (8015a7c <_fx_system_timer_entry+0x288>)
 8015890:	fba2 2303 	umull	r2, r3, r2, r3
 8015894:	095b      	lsrs	r3, r3, #5
 8015896:	697a      	ldr	r2, [r7, #20]
 8015898:	4413      	add	r3, r2
 801589a:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 801589c:	69ba      	ldr	r2, [r7, #24]
 801589e:	4b77      	ldr	r3, [pc, #476]	; (8015a7c <_fx_system_timer_entry+0x288>)
 80158a0:	fba3 1302 	umull	r1, r3, r3, r2
 80158a4:	0959      	lsrs	r1, r3, #5
 80158a6:	460b      	mov	r3, r1
 80158a8:	011b      	lsls	r3, r3, #4
 80158aa:	1a5b      	subs	r3, r3, r1
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	2b17      	cmp	r3, #23
 80158b6:	f240 80bd 	bls.w	8015a34 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 80158ba:	2300      	movs	r3, #0
 80158bc:	617b      	str	r3, [r7, #20]
                    day++;
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	3301      	adds	r3, #1
 80158c2:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	3b01      	subs	r3, #1
 80158c8:	2b0b      	cmp	r3, #11
 80158ca:	f200 80c9 	bhi.w	8015a60 <_fx_system_timer_entry+0x26c>
 80158ce:	a201      	add	r2, pc, #4	; (adr r2, 80158d4 <_fx_system_timer_entry+0xe0>)
 80158d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d4:	08015905 	.word	0x08015905
 80158d8:	08015917 	.word	0x08015917
 80158dc:	08015945 	.word	0x08015945
 80158e0:	08015957 	.word	0x08015957
 80158e4:	08015969 	.word	0x08015969
 80158e8:	0801597b 	.word	0x0801597b
 80158ec:	0801598d 	.word	0x0801598d
 80158f0:	0801599f 	.word	0x0801599f
 80158f4:	080159b1 	.word	0x080159b1
 80158f8:	080159c3 	.word	0x080159c3
 80158fc:	080159d5 	.word	0x080159d5
 8015900:	080159e7 	.word	0x080159e7

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	2b1f      	cmp	r3, #31
 8015908:	d97d      	bls.n	8015a06 <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 801590a:	2301      	movs	r3, #1
 801590c:	613b      	str	r3, [r7, #16]
                            month++;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	3301      	adds	r3, #1
 8015912:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8015914:	e077      	b.n	8015a06 <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	f003 0303 	and.w	r3, r3, #3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d108      	bne.n	8015932 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	2b1d      	cmp	r3, #29
 8015924:	d971      	bls.n	8015a0a <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 8015926:	2301      	movs	r3, #1
 8015928:	613b      	str	r3, [r7, #16]
                                month++;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	3301      	adds	r3, #1
 801592e:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8015930:	e06b      	b.n	8015a0a <_fx_system_timer_entry+0x216>
                            if (day > 28)
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	2b1c      	cmp	r3, #28
 8015936:	d968      	bls.n	8015a0a <_fx_system_timer_entry+0x216>
                                day = 1;
 8015938:	2301      	movs	r3, #1
 801593a:	613b      	str	r3, [r7, #16]
                                month++;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	3301      	adds	r3, #1
 8015940:	60fb      	str	r3, [r7, #12]
                        break;
 8015942:	e062      	b.n	8015a0a <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	2b1f      	cmp	r3, #31
 8015948:	d961      	bls.n	8015a0e <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 801594a:	2301      	movs	r3, #1
 801594c:	613b      	str	r3, [r7, #16]
                            month++;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	3301      	adds	r3, #1
 8015952:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8015954:	e05b      	b.n	8015a0e <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	2b1e      	cmp	r3, #30
 801595a:	d95a      	bls.n	8015a12 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 801595c:	2301      	movs	r3, #1
 801595e:	613b      	str	r3, [r7, #16]
                            month++;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3301      	adds	r3, #1
 8015964:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8015966:	e054      	b.n	8015a12 <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	2b1f      	cmp	r3, #31
 801596c:	d953      	bls.n	8015a16 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 801596e:	2301      	movs	r3, #1
 8015970:	613b      	str	r3, [r7, #16]
                            month++;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	3301      	adds	r3, #1
 8015976:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8015978:	e04d      	b.n	8015a16 <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	2b1e      	cmp	r3, #30
 801597e:	d94c      	bls.n	8015a1a <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 8015980:	2301      	movs	r3, #1
 8015982:	613b      	str	r3, [r7, #16]
                            month++;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3301      	adds	r3, #1
 8015988:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801598a:	e046      	b.n	8015a1a <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	2b1f      	cmp	r3, #31
 8015990:	d945      	bls.n	8015a1e <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8015992:	2301      	movs	r3, #1
 8015994:	613b      	str	r3, [r7, #16]
                            month++;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	3301      	adds	r3, #1
 801599a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801599c:	e03f      	b.n	8015a1e <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	2b1f      	cmp	r3, #31
 80159a2:	d93e      	bls.n	8015a22 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80159a4:	2301      	movs	r3, #1
 80159a6:	613b      	str	r3, [r7, #16]
                            month++;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	3301      	adds	r3, #1
 80159ac:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80159ae:	e038      	b.n	8015a22 <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	2b1e      	cmp	r3, #30
 80159b4:	d937      	bls.n	8015a26 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 80159b6:	2301      	movs	r3, #1
 80159b8:	613b      	str	r3, [r7, #16]
                            month++;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	3301      	adds	r3, #1
 80159be:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80159c0:	e031      	b.n	8015a26 <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	2b1f      	cmp	r3, #31
 80159c6:	d930      	bls.n	8015a2a <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 80159c8:	2301      	movs	r3, #1
 80159ca:	613b      	str	r3, [r7, #16]
                            month++;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	3301      	adds	r3, #1
 80159d0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80159d2:	e02a      	b.n	8015a2a <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	2b1e      	cmp	r3, #30
 80159d8:	d929      	bls.n	8015a2e <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80159da:	2301      	movs	r3, #1
 80159dc:	613b      	str	r3, [r7, #16]
                            month++;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	3301      	adds	r3, #1
 80159e2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80159e4:	e023      	b.n	8015a2e <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	2b1f      	cmp	r3, #31
 80159ea:	d922      	bls.n	8015a32 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80159ec:	2301      	movs	r3, #1
 80159ee:	613b      	str	r3, [r7, #16]
                            month = 1;
 80159f0:	2301      	movs	r3, #1
 80159f2:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	3301      	adds	r3, #1
 80159f8:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	f640 023b 	movw	r2, #2107	; 0x83b
 8015a00:	4293      	cmp	r3, r2
 8015a02:	d82f      	bhi.n	8015a64 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 8015a04:	e015      	b.n	8015a32 <_fx_system_timer_entry+0x23e>
                        break;
 8015a06:	bf00      	nop
 8015a08:	e014      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a0a:	bf00      	nop
 8015a0c:	e012      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a0e:	bf00      	nop
 8015a10:	e010      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a12:	bf00      	nop
 8015a14:	e00e      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a16:	bf00      	nop
 8015a18:	e00c      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a1a:	bf00      	nop
 8015a1c:	e00a      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a1e:	bf00      	nop
 8015a20:	e008      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a22:	bf00      	nop
 8015a24:	e006      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a26:	bf00      	nop
 8015a28:	e004      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a2a:	bf00      	nop
 8015a2c:	e002      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a2e:	bf00      	nop
 8015a30:	e000      	b.n	8015a34 <_fx_system_timer_entry+0x240>
                        break;
 8015a32:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 8015a3a:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8015a40:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8015a46:	4a0c      	ldr	r2, [pc, #48]	; (8015a78 <_fx_system_timer_entry+0x284>)
 8015a48:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8015a52:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8015a54:	69fb      	ldr	r3, [r7, #28]
 8015a56:	085b      	lsrs	r3, r3, #1
 8015a58:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8015a5a:	4a06      	ldr	r2, [pc, #24]	; (8015a74 <_fx_system_timer_entry+0x280>)
 8015a5c:	6013      	str	r3, [r2, #0]
 8015a5e:	e002      	b.n	8015a66 <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 8015a60:	bf00      	nop
 8015a62:	e000      	b.n	8015a66 <_fx_system_timer_entry+0x272>
                                return;
 8015a64:	bf00      	nop
    }
}
 8015a66:	3724      	adds	r7, #36	; 0x24
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr
 8015a70:	46585359 	.word	0x46585359
 8015a74:	24004350 	.word	0x24004350
 8015a78:	2400434c 	.word	0x2400434c
 8015a7c:	88888889 	.word	0x88888889

08015a80 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b085      	sub	sp, #20
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8015a94:	4313      	orrs	r3, r2
 8015a96:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8015a98:	68fb      	ldr	r3, [r7, #12]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3714      	adds	r7, #20
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr

08015aa6 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 8015aa6:	b480      	push	{r7}
 8015aa8:	b083      	sub	sp, #12
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	0a1a      	lsrs	r2, r3, #8
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	3301      	adds	r3, #1
 8015ac0:	b2d2      	uxtb	r2, r2
 8015ac2:	701a      	strb	r2, [r3, #0]
}
 8015ac4:	bf00      	nop
 8015ac6:	370c      	adds	r7, #12
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	3303      	adds	r3, #3
 8015adc:	781b      	ldrb	r3, [r3, #0]
 8015ade:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	3302      	adds	r3, #2
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8015ae8:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	3301      	adds	r3, #1
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8015af2:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8015af8:	4313      	orrs	r3, r2
 8015afa:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8015afc:	68fb      	ldr	r3, [r7, #12]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3714      	adds	r7, #20
 8015b02:	46bd      	mov	sp, r7
 8015b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b08:	4770      	bx	lr

08015b0a <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 8015b0a:	b480      	push	{r7}
 8015b0c:	b083      	sub	sp, #12
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	b2da      	uxtb	r2, r3
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	0a1a      	lsrs	r2, r3, #8
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	3301      	adds	r3, #1
 8015b24:	b2d2      	uxtb	r2, r2
 8015b26:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	0c1a      	lsrs	r2, r3, #16
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	3302      	adds	r3, #2
 8015b30:	b2d2      	uxtb	r2, r2
 8015b32:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	0e1a      	lsrs	r2, r3, #24
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	3303      	adds	r3, #3
 8015b3c:	b2d2      	uxtb	r2, r2
 8015b3e:	701a      	strb	r2, [r3, #0]
}
 8015b40:	bf00      	nop
 8015b42:	370c      	adds	r7, #12
 8015b44:	46bd      	mov	sp, r7
 8015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4a:	4770      	bx	lr

08015b4c <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8015b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015b50:	b098      	sub	sp, #96	; 0x60
 8015b52:	af04      	add	r7, sp, #16
 8015b54:	61f8      	str	r0, [r7, #28]
 8015b56:	61b9      	str	r1, [r7, #24]
 8015b58:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8015b60:	1c5a      	adds	r2, r3, #1
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015b6e:	1c5a      	adds	r2, r3, #1
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8015b76:	69bb      	ldr	r3, [r7, #24]
 8015b78:	f003 0303 	and.w	r3, r3, #3
 8015b7c:	009b      	lsls	r3, r3, #2
 8015b7e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8015b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b82:	4613      	mov	r3, r2
 8015b84:	005b      	lsls	r3, r3, #1
 8015b86:	4413      	add	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8015b8e:	69fa      	ldr	r2, [r7, #28]
 8015b90:	4413      	add	r3, r2
 8015b92:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8015b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	69ba      	ldr	r2, [r7, #24]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d105      	bne.n	8015baa <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8015b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ba0:	685a      	ldr	r2, [r3, #4]
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	e1f4      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8015baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bac:	330c      	adds	r3, #12
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	69ba      	ldr	r2, [r7, #24]
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	d11d      	bne.n	8015bf2 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8015bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bb8:	330c      	adds	r3, #12
 8015bba:	685a      	ldr	r2, [r3, #4]
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8015bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8015bc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8015bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bd0:	4614      	mov	r4, r2
 8015bd2:	330c      	adds	r3, #12
 8015bd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8015bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bde:	330c      	adds	r3, #12
 8015be0:	461c      	mov	r4, r3
 8015be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8015bee:	2300      	movs	r3, #0
 8015bf0:	e1d0      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8015bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bf4:	3318      	adds	r3, #24
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	69ba      	ldr	r2, [r7, #24]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d127      	bne.n	8015c4e <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8015bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c00:	3318      	adds	r3, #24
 8015c02:	685a      	ldr	r2, [r3, #4]
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8015c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8015c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c18:	4614      	mov	r4, r2
 8015c1a:	3318      	adds	r3, #24
 8015c1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8015c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c26:	f103 0218 	add.w	r2, r3, #24
 8015c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c2c:	4614      	mov	r4, r2
 8015c2e:	330c      	adds	r3, #12
 8015c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8015c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c3a:	330c      	adds	r3, #12
 8015c3c:	461c      	mov	r4, r3
 8015c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	e1a2      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8015c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c50:	3324      	adds	r3, #36	; 0x24
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	69ba      	ldr	r2, [r7, #24]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d131      	bne.n	8015cbe <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8015c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c5c:	3324      	adds	r3, #36	; 0x24
 8015c5e:	685a      	ldr	r2, [r3, #4]
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8015c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8015c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c74:	4614      	mov	r4, r2
 8015c76:	3324      	adds	r3, #36	; 0x24
 8015c78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8015c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c82:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8015c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c88:	4614      	mov	r4, r2
 8015c8a:	3318      	adds	r3, #24
 8015c8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8015c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c96:	f103 0218 	add.w	r2, r3, #24
 8015c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c9c:	4614      	mov	r4, r2
 8015c9e:	330c      	adds	r3, #12
 8015ca0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8015ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015caa:	330c      	adds	r3, #12
 8015cac:	461c      	mov	r4, r3
 8015cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8015cba:	2300      	movs	r3, #0
 8015cbc:	e16a      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8015cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cc0:	1cda      	adds	r2, r3, #3
 8015cc2:	69f9      	ldr	r1, [r7, #28]
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	005b      	lsls	r3, r3, #1
 8015cc8:	4413      	add	r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	440b      	add	r3, r1
 8015cce:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d008      	beq.n	8015cea <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8015cd8:	69f8      	ldr	r0, [r7, #28]
 8015cda:	f000 fa54 	bl	8016186 <_fx_utility_FAT_flush>
 8015cde:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8015ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d001      	beq.n	8015cea <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 8015ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ce8:	e154      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015cf0:	1e5a      	subs	r2, r3, #1
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8015cf8:	69fb      	ldr	r3, [r7, #28]
 8015cfa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8015cfe:	1c5a      	adds	r2, r3, #1
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	f000 80a7 	beq.w	8015e5e <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8015d10:	69bb      	ldr	r3, [r7, #24]
 8015d12:	005a      	lsls	r2, r3, #1
 8015d14:	69bb      	ldr	r3, [r7, #24]
 8015d16:	4413      	add	r3, r2
 8015d18:	085b      	lsrs	r3, r3, #1
 8015d1a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d22:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8015d26:	69fb      	ldr	r3, [r7, #28]
 8015d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015d2a:	4413      	add	r3, r2
 8015d2c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d30:	2200      	movs	r2, #0
 8015d32:	60bb      	str	r3, [r7, #8]
 8015d34:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015d3a:	2202      	movs	r2, #2
 8015d3c:	9202      	str	r2, [sp, #8]
 8015d3e:	2201      	movs	r2, #1
 8015d40:	9201      	str	r2, [sp, #4]
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015d48:	69f8      	ldr	r0, [r7, #28]
 8015d4a:	f001 fb0d 	bl	8017368 <_fx_utility_logical_sector_read>
 8015d4e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8015d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d001      	beq.n	8015d5a <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 8015d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d58:	e11c      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d60:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8015d62:	69fa      	ldr	r2, [r7, #28]
 8015d64:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8015d66:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8015d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d6c:	1ad3      	subs	r3, r2, r3
 8015d6e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	689a      	ldr	r2, [r3, #8]
 8015d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d76:	4413      	add	r3, r2
 8015d78:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 8015d7a:	69bb      	ldr	r3, [r7, #24]
 8015d7c:	f003 0301 	and.w	r3, r3, #1
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d030      	beq.n	8015de6 <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8015d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	091b      	lsrs	r3, r3, #4
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 8015d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d90:	3301      	adds	r3, #1
 8015d92:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8015d94:	69fb      	ldr	r3, [r7, #28]
 8015d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d98:	3b01      	subs	r3, #1
 8015d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d11b      	bne.n	8015dd8 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8015da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015da2:	3301      	adds	r3, #1
 8015da4:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015da8:	2200      	movs	r2, #0
 8015daa:	603b      	str	r3, [r7, #0]
 8015dac:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8015dae:	69fb      	ldr	r3, [r7, #28]
 8015db0:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015db2:	2202      	movs	r2, #2
 8015db4:	9202      	str	r2, [sp, #8]
 8015db6:	2201      	movs	r2, #1
 8015db8:	9201      	str	r2, [sp, #4]
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015dc0:	69f8      	ldr	r0, [r7, #28]
 8015dc2:	f001 fad1 	bl	8017368 <_fx_utility_logical_sector_read>
 8015dc6:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8015dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d001      	beq.n	8015dd2 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 8015dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dd0:	e0e0      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	689b      	ldr	r3, [r3, #8]
 8015dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8015dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	011b      	lsls	r3, r3, #4
 8015dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015de0:	4313      	orrs	r3, r2
 8015de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8015de4:	e02f      	b.n	8015e46 <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 8015de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8015dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dee:	3301      	adds	r3, #1
 8015df0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8015df2:	69fb      	ldr	r3, [r7, #28]
 8015df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015df6:	3b01      	subs	r3, #1
 8015df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d11b      	bne.n	8015e36 <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8015dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e00:	3301      	adds	r3, #1
 8015e02:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e06:	2200      	movs	r2, #0
 8015e08:	469a      	mov	sl, r3
 8015e0a:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015e10:	2202      	movs	r2, #2
 8015e12:	9202      	str	r2, [sp, #8]
 8015e14:	2201      	movs	r2, #1
 8015e16:	9201      	str	r2, [sp, #4]
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	465b      	mov	r3, fp
 8015e1e:	69f8      	ldr	r0, [r7, #28]
 8015e20:	f001 faa2 	bl	8017368 <_fx_utility_logical_sector_read>
 8015e24:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8015e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d001      	beq.n	8015e30 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 8015e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e2e:	e0b1      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	689b      	ldr	r3, [r3, #8]
 8015e34:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8015e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	021b      	lsls	r3, r3, #8
 8015e3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8015e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e42:	4313      	orrs	r3, r2
 8015e44:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 8015e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e48:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8015e4c:	d303      	bcc.n	8015e56 <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 8015e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e50:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8015e54:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e5a:	601a      	str	r2, [r3, #0]
 8015e5c:	e078      	b.n	8015f50 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8015e5e:	69fb      	ldr	r3, [r7, #28]
 8015e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d139      	bne.n	8015eda <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8015e66:	69bb      	ldr	r3, [r7, #24]
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e72:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015e7a:	4413      	add	r3, r2
 8015e7c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e80:	2200      	movs	r2, #0
 8015e82:	4698      	mov	r8, r3
 8015e84:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015e8a:	2202      	movs	r2, #2
 8015e8c:	9202      	str	r2, [sp, #8]
 8015e8e:	2201      	movs	r2, #1
 8015e90:	9201      	str	r2, [sp, #4]
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	4642      	mov	r2, r8
 8015e96:	464b      	mov	r3, r9
 8015e98:	69f8      	ldr	r0, [r7, #28]
 8015e9a:	f001 fa65 	bl	8017368 <_fx_utility_logical_sector_read>
 8015e9e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8015ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d001      	beq.n	8015eaa <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 8015ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ea8:	e074      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015eb0:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8015eb2:	69fa      	ldr	r2, [r7, #28]
 8015eb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8015eb6:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8015eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ebc:	1ad3      	subs	r3, r2, r3
 8015ebe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	689a      	ldr	r2, [r3, #8]
 8015ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec6:	4413      	add	r3, r2
 8015ec8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8015eca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015ecc:	f7ff fdd8 	bl	8015a80 <_fx_utility_16_unsigned_read>
 8015ed0:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ed6:	601a      	str	r2, [r3, #0]
 8015ed8:	e03a      	b.n	8015f50 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015ee0:	69fb      	ldr	r3, [r7, #28]
 8015ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ee6:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8015eee:	4413      	add	r3, r2
 8015ef0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8015efc:	fb01 f202 	mul.w	r2, r1, r2
 8015f00:	1a9b      	subs	r3, r3, r2
 8015f02:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f06:	2200      	movs	r2, #0
 8015f08:	461c      	mov	r4, r3
 8015f0a:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8015f10:	2202      	movs	r2, #2
 8015f12:	9202      	str	r2, [sp, #8]
 8015f14:	2201      	movs	r2, #1
 8015f16:	9201      	str	r2, [sp, #4]
 8015f18:	9300      	str	r3, [sp, #0]
 8015f1a:	4622      	mov	r2, r4
 8015f1c:	462b      	mov	r3, r5
 8015f1e:	69f8      	ldr	r0, [r7, #28]
 8015f20:	f001 fa22 	bl	8017368 <_fx_utility_logical_sector_read>
 8015f24:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8015f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d001      	beq.n	8015f30 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 8015f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f2e:	e031      	b.n	8015f94 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	689a      	ldr	r2, [r3, #8]
 8015f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f36:	4413      	add	r3, r2
 8015f38:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8015f3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015f3c:	f7ff fdc8 	bl	8015ad0 <_fx_utility_32_unsigned_read>
 8015f40:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 8015f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015f48:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f4e:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8015f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f52:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8015f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f58:	4614      	mov	r4, r2
 8015f5a:	3318      	adds	r3, #24
 8015f5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8015f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f66:	f103 0218 	add.w	r2, r3, #24
 8015f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f6c:	4614      	mov	r4, r2
 8015f6e:	330c      	adds	r3, #12
 8015f70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8015f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f7a:	330c      	adds	r3, #12
 8015f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015f80:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8015f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f86:	69ba      	ldr	r2, [r7, #24]
 8015f88:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f90:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8015f92:	2300      	movs	r3, #0
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3750      	adds	r7, #80	; 0x50
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015f9e <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8015f9e:	b590      	push	{r4, r7, lr}
 8015fa0:	b089      	sub	sp, #36	; 0x24
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	60f8      	str	r0, [r7, #12]
 8015fa6:	60b9      	str	r1, [r7, #8]
 8015fa8:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8015fb0:	1c5a      	adds	r2, r3, #1
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8015fbe:	1c5a      	adds	r2, r3, #1
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	f003 0303 	and.w	r3, r3, #3
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8015fd0:	69ba      	ldr	r2, [r7, #24]
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	005b      	lsls	r3, r3, #1
 8015fd6:	4413      	add	r3, r2
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8015fde:	68fa      	ldr	r2, [r7, #12]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	61fb      	str	r3, [r7, #28]
 8015fe8:	e051      	b.n	801608e <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8015fea:	69fa      	ldr	r2, [r7, #28]
 8015fec:	4613      	mov	r3, r2
 8015fee:	005b      	lsls	r3, r3, #1
 8015ff0:	4413      	add	r3, r2
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	68ba      	ldr	r2, [r7, #8]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d142      	bne.n	8016088 <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8016002:	69fa      	ldr	r2, [r7, #28]
 8016004:	4613      	mov	r3, r2
 8016006:	005b      	lsls	r3, r3, #1
 8016008:	4413      	add	r3, r2
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	461a      	mov	r2, r3
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	4413      	add	r3, r2
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8016016:	69fa      	ldr	r2, [r7, #28]
 8016018:	4613      	mov	r3, r2
 801601a:	005b      	lsls	r3, r3, #1
 801601c:	4413      	add	r3, r2
 801601e:	009b      	lsls	r3, r3, #2
 8016020:	461a      	mov	r2, r3
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	4413      	add	r3, r2
 8016026:	2201      	movs	r2, #1
 8016028:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016030:	2b00      	cmp	r3, #0
 8016032:	d027      	beq.n	8016084 <_fx_utility_FAT_entry_write+0xe6>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d124      	bne.n	8016084 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8016040:	1c5a      	adds	r2, r3, #1
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2206      	movs	r2, #6
 801604c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2290      	movs	r2, #144	; 0x90
 8016054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	3b02      	subs	r3, #2
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8016064:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8016068:	441a      	add	r2, r3
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 8016084:	2300      	movs	r3, #0
 8016086:	e07a      	b.n	801617e <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	3301      	adds	r3, #1
 801608c:	61fb      	str	r3, [r7, #28]
 801608e:	69fb      	ldr	r3, [r7, #28]
 8016090:	2b03      	cmp	r3, #3
 8016092:	d9aa      	bls.n	8015fea <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801609a:	1e5a      	subs	r2, r3, #1
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80160a8:	1c5a      	adds	r2, r3, #1
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	1cda      	adds	r2, r3, #3
 80160b4:	68f9      	ldr	r1, [r7, #12]
 80160b6:	4613      	mov	r3, r2
 80160b8:	005b      	lsls	r3, r3, #1
 80160ba:	4413      	add	r3, r2
 80160bc:	009b      	lsls	r3, r3, #2
 80160be:	440b      	add	r3, r1
 80160c0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b01      	cmp	r3, #1
 80160c8:	d108      	bne.n	80160dc <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	f000 f85b 	bl	8016186 <_fx_utility_FAT_flush>
 80160d0:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d001      	beq.n	80160dc <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	e050      	b.n	801617e <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	4614      	mov	r4, r2
 80160e6:	3318      	adds	r3, #24
 80160e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80160ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	f103 0218 	add.w	r2, r3, #24
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	4614      	mov	r4, r2
 80160fa:	330c      	adds	r3, #12
 80160fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	330c      	adds	r3, #12
 8016108:	697a      	ldr	r2, [r7, #20]
 801610a:	ca07      	ldmia	r2, {r0, r1, r2}
 801610c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	2201      	movs	r2, #1
 8016114:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	68ba      	ldr	r2, [r7, #8]
 801611a:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016128:	2b00      	cmp	r3, #0
 801612a:	d027      	beq.n	801617c <_fx_utility_FAT_entry_write+0x1de>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d124      	bne.n	801617c <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8016138:	1c5a      	adds	r2, r3, #1
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2206      	movs	r2, #6
 8016144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2290      	movs	r2, #144	; 0x90
 801614c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	3b02      	subs	r3, #2
 8016158:	68f9      	ldr	r1, [r7, #12]
 801615a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801615c:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8016160:	441a      	add	r2, r3
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016178:	68f8      	ldr	r0, [r7, #12]
 801617a:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 801617c:	2300      	movs	r3, #0
}
 801617e:	4618      	mov	r0, r3
 8016180:	3724      	adds	r7, #36	; 0x24
 8016182:	46bd      	mov	sp, r7
 8016184:	bd90      	pop	{r4, r7, pc}

08016186 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 8016186:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801618a:	b09a      	sub	sp, #104	; 0x68
 801618c:	af04      	add	r7, sp, #16
 801618e:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8016196:	1c5a      	adds	r2, r3, #1
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801619e:	2300      	movs	r3, #0
 80161a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161a2:	e337      	b.n	8016814 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 80161a4:	69f9      	ldr	r1, [r7, #28]
 80161a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161a8:	4613      	mov	r3, r2
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4413      	add	r3, r2
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	440b      	add	r3, r1
 80161b2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f000 8325 	beq.w	8016808 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 80161be:	69f9      	ldr	r1, [r7, #28]
 80161c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161c2:	4613      	mov	r3, r2
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	4413      	add	r3, r2
 80161c8:	009b      	lsls	r3, r3, #2
 80161ca:	440b      	add	r3, r1
 80161cc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 80161d4:	69fb      	ldr	r3, [r7, #28]
 80161d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161d8:	2b00      	cmp	r3, #0
 80161da:	f000 816c 	beq.w	80164b6 <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80161de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161e0:	005a      	lsls	r2, r3, #1
 80161e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161e4:	4413      	add	r3, r2
 80161e6:	085b      	lsrs	r3, r3, #1
 80161e8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161f0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80161f8:	4413      	add	r3, r2
 80161fa:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 80161fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016200:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8016202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016204:	2200      	movs	r2, #0
 8016206:	461c      	mov	r4, r3
 8016208:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801620a:	69fb      	ldr	r3, [r7, #28]
 801620c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801620e:	2302      	movs	r3, #2
 8016210:	9302      	str	r3, [sp, #8]
 8016212:	2301      	movs	r3, #1
 8016214:	9301      	str	r3, [sp, #4]
 8016216:	9200      	str	r2, [sp, #0]
 8016218:	4622      	mov	r2, r4
 801621a:	462b      	mov	r3, r5
 801621c:	69f8      	ldr	r0, [r7, #28]
 801621e:	f001 f8a3 	bl	8017368 <_fx_utility_logical_sector_read>
 8016222:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8016224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016226:	2b00      	cmp	r3, #0
 8016228:	d001      	beq.n	801622e <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 801622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622c:	e2f7      	b.n	801681e <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 801622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016234:	d037      	beq.n	80162a6 <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	689b      	ldr	r3, [r3, #8]
 801623a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 801623c:	69f9      	ldr	r1, [r7, #28]
 801623e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	440b      	add	r3, r1
 801624a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8016252:	69f9      	ldr	r1, [r7, #28]
 8016254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	440b      	add	r3, r1
 8016260:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8016268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801626a:	f003 0301 	and.w	r3, r3, #1
 801626e:	2b00      	cmp	r3, #0
 8016270:	d005      	beq.n	801627e <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8016272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016274:	091b      	lsrs	r3, r3, #4
 8016276:	b2db      	uxtb	r3, r3
 8016278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801627a:	7013      	strb	r3, [r2, #0]
 801627c:	e010      	b.n	80162a0 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 801627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016286:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8016288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628a:	b2da      	uxtb	r2, r3
 801628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628e:	0a1b      	lsrs	r3, r3, #8
 8016290:	b2db      	uxtb	r3, r3
 8016292:	f003 030f 	and.w	r3, r3, #15
 8016296:	b2db      	uxtb	r3, r3
 8016298:	4313      	orrs	r3, r2
 801629a:	b2db      	uxtb	r3, r3
 801629c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801629e:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 80162a0:	f04f 33ff 	mov.w	r3, #4294967295
 80162a4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80162a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162a8:	653b      	str	r3, [r7, #80]	; 0x50
 80162aa:	e0a0      	b.n	80163ee <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 80162ac:	69f9      	ldr	r1, [r7, #28]
 80162ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80162b0:	4613      	mov	r3, r2
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	4413      	add	r3, r2
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	440b      	add	r3, r1
 80162ba:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 808a 	beq.w	80163da <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80162c6:	69f9      	ldr	r1, [r7, #28]
 80162c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80162ca:	4613      	mov	r3, r2
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80162dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162de:	005a      	lsls	r2, r3, #1
 80162e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162e2:	4413      	add	r3, r2
 80162e4:	085b      	lsrs	r3, r3, #1
 80162e6:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162ee:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80162f6:	4413      	add	r3, r2
 80162f8:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 80162fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162fe:	429a      	cmp	r2, r3
 8016300:	d16d      	bne.n	80163de <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8016302:	69f9      	ldr	r1, [r7, #28]
 8016304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016306:	4613      	mov	r3, r2
 8016308:	005b      	lsls	r3, r3, #1
 801630a:	4413      	add	r3, r2
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	440b      	add	r3, r1
 8016310:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801631c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801631e:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8016324:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8016328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801632a:	1ad3      	subs	r3, r2, r3
 801632c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016332:	3b01      	subs	r3, #1
 8016334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016336:	429a      	cmp	r2, r3
 8016338:	d101      	bne.n	801633e <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 801633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633c:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	689a      	ldr	r2, [r3, #8]
 8016342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016344:	4413      	add	r3, r2
 8016346:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8016348:	69f9      	ldr	r1, [r7, #28]
 801634a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801634c:	4613      	mov	r3, r2
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	4413      	add	r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	440b      	add	r3, r1
 8016356:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801635a:	2200      	movs	r2, #0
 801635c:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 801635e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016360:	f003 0301 	and.w	r3, r3, #1
 8016364:	2b00      	cmp	r3, #0
 8016366:	d01b      	beq.n	80163a0 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 8016368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	f003 030f 	and.w	r3, r3, #15
 8016370:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8016372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016374:	b2da      	uxtb	r2, r3
 8016376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016378:	b2db      	uxtb	r3, r3
 801637a:	011b      	lsls	r3, r3, #4
 801637c:	b2db      	uxtb	r3, r3
 801637e:	4313      	orrs	r3, r2
 8016380:	b2db      	uxtb	r3, r3
 8016382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016384:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8016386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801638a:	429a      	cmp	r2, r3
 801638c:	d029      	beq.n	80163e2 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 801638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016390:	3301      	adds	r3, #1
 8016392:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8016394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016396:	091b      	lsrs	r3, r3, #4
 8016398:	b2db      	uxtb	r3, r3
 801639a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801639c:	7013      	strb	r3, [r2, #0]
 801639e:	e023      	b.n	80163e8 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163a6:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80163a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d01a      	beq.n	80163e6 <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 80163b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b2:	3301      	adds	r3, #1
 80163b4:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80163b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163be:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80163c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c2:	b2da      	uxtb	r2, r3
 80163c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c6:	0a1b      	lsrs	r3, r3, #8
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	f003 030f 	and.w	r3, r3, #15
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	4313      	orrs	r3, r2
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163d6:	7013      	strb	r3, [r2, #0]
 80163d8:	e006      	b.n	80163e8 <_fx_utility_FAT_flush+0x262>
                        continue;
 80163da:	bf00      	nop
 80163dc:	e004      	b.n	80163e8 <_fx_utility_FAT_flush+0x262>
                        continue;
 80163de:	bf00      	nop
 80163e0:	e002      	b.n	80163e8 <_fx_utility_FAT_flush+0x262>
                            continue;
 80163e2:	bf00      	nop
 80163e4:	e000      	b.n	80163e8 <_fx_utility_FAT_flush+0x262>
                            continue;
 80163e6:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80163e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163ea:	3301      	adds	r3, #1
 80163ec:	653b      	str	r3, [r7, #80]	; 0x50
 80163ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163f0:	2b0f      	cmp	r3, #15
 80163f2:	f67f af5b 	bls.w	80162ac <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80163f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163f8:	2200      	movs	r2, #0
 80163fa:	4698      	mov	r8, r3
 80163fc:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80163fe:	69fb      	ldr	r3, [r7, #28]
 8016400:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8016402:	2302      	movs	r3, #2
 8016404:	9302      	str	r3, [sp, #8]
 8016406:	2301      	movs	r3, #1
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	9200      	str	r2, [sp, #0]
 801640c:	4642      	mov	r2, r8
 801640e:	464b      	mov	r3, r9
 8016410:	69f8      	ldr	r0, [r7, #28]
 8016412:	f001 fa3d 	bl	8017890 <_fx_utility_logical_sector_write>
 8016416:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8016418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641a:	2b00      	cmp	r3, #0
 801641c:	d001      	beq.n	8016422 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 801641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016420:	e1fd      	b.n	801681e <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8016422:	69fb      	ldr	r3, [r7, #28]
 8016424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801642a:	2b00      	cmp	r3, #0
 801642c:	d105      	bne.n	801643a <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016432:	0a9b      	lsrs	r3, r3, #10
 8016434:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8016438:	e006      	b.n	8016448 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801643a:	69fb      	ldr	r3, [r7, #28]
 801643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801643e:	0a9b      	lsrs	r3, r3, #10
 8016440:	b2db      	uxtb	r3, r3
 8016442:	3301      	adds	r3, #1
 8016444:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 8016448:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801644c:	2b00      	cmp	r3, #0
 801644e:	d101      	bne.n	8016454 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8016450:	2302      	movs	r3, #2
 8016452:	e1e4      	b.n	801681e <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8016454:	69fb      	ldr	r3, [r7, #28]
 8016456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8016460:	fbb2 f3f3 	udiv	r3, r2, r3
 8016464:	08db      	lsrs	r3, r3, #3
 8016466:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8016468:	69fa      	ldr	r2, [r7, #28]
 801646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801646c:	4413      	add	r3, r2
 801646e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801647a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801647c:	1a9a      	subs	r2, r3, r2
 801647e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8016482:	fbb2 f3f3 	udiv	r3, r2, r3
 8016486:	f003 0207 	and.w	r2, r3, #7
 801648a:	2301      	movs	r3, #1
 801648c:	4093      	lsls	r3, r2
 801648e:	b25b      	sxtb	r3, r3
 8016490:	430b      	orrs	r3, r1
 8016492:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8016494:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8016496:	69fa      	ldr	r2, [r7, #28]
 8016498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649a:	4413      	add	r3, r2
 801649c:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80164a0:	460b      	mov	r3, r1
 80164a2:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 80164a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164aa:	f000 81af 	beq.w	801680c <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 80164ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164b0:	3301      	adds	r3, #1
 80164b2:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80164b4:	e6a5      	b.n	8016202 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	f040 80d2 	bne.w	8016664 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 80164c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80164cc:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80164d4:	4413      	add	r3, r2
 80164d6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80164d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164da:	2200      	movs	r2, #0
 80164dc:	469a      	mov	sl, r3
 80164de:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80164e4:	2302      	movs	r3, #2
 80164e6:	9302      	str	r3, [sp, #8]
 80164e8:	2301      	movs	r3, #1
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	9200      	str	r2, [sp, #0]
 80164ee:	4652      	mov	r2, sl
 80164f0:	465b      	mov	r3, fp
 80164f2:	69f8      	ldr	r0, [r7, #28]
 80164f4:	f000 ff38 	bl	8017368 <_fx_utility_logical_sector_read>
 80164f8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d001      	beq.n	8016504 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8016500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016502:	e18c      	b.n	801681e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8016504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016506:	653b      	str	r3, [r7, #80]	; 0x50
 8016508:	e057      	b.n	80165ba <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801650a:	69f9      	ldr	r1, [r7, #28]
 801650c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801650e:	4613      	mov	r3, r2
 8016510:	005b      	lsls	r3, r3, #1
 8016512:	4413      	add	r3, r2
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	440b      	add	r3, r1
 8016518:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d045      	beq.n	80165ae <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8016522:	69f9      	ldr	r1, [r7, #28]
 8016524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016526:	4613      	mov	r3, r2
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	4413      	add	r3, r2
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	440b      	add	r3, r1
 8016530:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8016538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016544:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8016548:	69fb      	ldr	r3, [r7, #28]
 801654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801654c:	4413      	add	r3, r2
 801654e:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8016550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016554:	429a      	cmp	r2, r3
 8016556:	d12c      	bne.n	80165b2 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8016558:	69fb      	ldr	r3, [r7, #28]
 801655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801655c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801655e:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8016564:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8016568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	689a      	ldr	r2, [r3, #8]
 8016572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016574:	4413      	add	r3, r2
 8016576:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8016578:	69f9      	ldr	r1, [r7, #28]
 801657a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801657c:	4613      	mov	r3, r2
 801657e:	005b      	lsls	r3, r3, #1
 8016580:	4413      	add	r3, r2
 8016582:	009b      	lsls	r3, r3, #2
 8016584:	440b      	add	r3, r1
 8016586:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 801658e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016592:	f7ff fa88 	bl	8015aa6 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8016596:	69f9      	ldr	r1, [r7, #28]
 8016598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	009b      	lsls	r3, r3, #2
 80165a2:	440b      	add	r3, r1
 80165a4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80165a8:	2200      	movs	r2, #0
 80165aa:	601a      	str	r2, [r3, #0]
 80165ac:	e002      	b.n	80165b4 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80165ae:	bf00      	nop
 80165b0:	e000      	b.n	80165b4 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80165b2:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80165b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165b6:	3301      	adds	r3, #1
 80165b8:	653b      	str	r3, [r7, #80]	; 0x50
 80165ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165bc:	2b0f      	cmp	r3, #15
 80165be:	d9a4      	bls.n	801650a <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80165c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165c2:	2200      	movs	r2, #0
 80165c4:	613b      	str	r3, [r7, #16]
 80165c6:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80165c8:	69fb      	ldr	r3, [r7, #28]
 80165ca:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80165cc:	2302      	movs	r3, #2
 80165ce:	9302      	str	r3, [sp, #8]
 80165d0:	2301      	movs	r3, #1
 80165d2:	9301      	str	r3, [sp, #4]
 80165d4:	9200      	str	r2, [sp, #0]
 80165d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80165da:	69f8      	ldr	r0, [r7, #28]
 80165dc:	f001 f958 	bl	8017890 <_fx_utility_logical_sector_write>
 80165e0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80165e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d001      	beq.n	80165ec <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	e118      	b.n	801681e <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80165ec:	69fb      	ldr	r3, [r7, #28]
 80165ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d105      	bne.n	8016604 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165fc:	0a9b      	lsrs	r3, r3, #10
 80165fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8016602:	e006      	b.n	8016612 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016608:	0a9b      	lsrs	r3, r3, #10
 801660a:	b2db      	uxtb	r3, r3
 801660c:	3301      	adds	r3, #1
 801660e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016616:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016618:	1ad2      	subs	r2, r2, r3
 801661a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016622:	08db      	lsrs	r3, r3, #3
 8016624:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8016626:	69fa      	ldr	r2, [r7, #28]
 8016628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801662a:	4413      	add	r3, r2
 801662c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8016630:	781b      	ldrb	r3, [r3, #0]
 8016632:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801663a:	1a9a      	subs	r2, r3, r2
 801663c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8016640:	fbb2 f3f3 	udiv	r3, r2, r3
 8016644:	f003 0207 	and.w	r2, r3, #7
 8016648:	2301      	movs	r3, #1
 801664a:	4093      	lsls	r3, r2
 801664c:	b25b      	sxtb	r3, r3
 801664e:	430b      	orrs	r3, r1
 8016650:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8016652:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8016654:	69fa      	ldr	r2, [r7, #28]
 8016656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016658:	4413      	add	r3, r2
 801665a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801665e:	460b      	mov	r3, r1
 8016660:	7013      	strb	r3, [r2, #0]
 8016662:	e0d4      	b.n	801680e <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8016664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801666e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016670:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8016674:	69fb      	ldr	r3, [r7, #28]
 8016676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8016678:	4413      	add	r3, r2
 801667a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801667c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801667e:	2200      	movs	r2, #0
 8016680:	60bb      	str	r3, [r7, #8]
 8016682:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8016688:	2302      	movs	r3, #2
 801668a:	9302      	str	r3, [sp, #8]
 801668c:	2301      	movs	r3, #1
 801668e:	9301      	str	r3, [sp, #4]
 8016690:	9200      	str	r2, [sp, #0]
 8016692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016696:	69f8      	ldr	r0, [r7, #28]
 8016698:	f000 fe66 	bl	8017368 <_fx_utility_logical_sector_read>
 801669c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d001      	beq.n	80166a8 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 80166a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a6:	e0ba      	b.n	801681e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80166a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166aa:	653b      	str	r3, [r7, #80]	; 0x50
 80166ac:	e057      	b.n	801675e <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80166ae:	69f9      	ldr	r1, [r7, #28]
 80166b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166b2:	4613      	mov	r3, r2
 80166b4:	005b      	lsls	r3, r3, #1
 80166b6:	4413      	add	r3, r2
 80166b8:	009b      	lsls	r3, r3, #2
 80166ba:	440b      	add	r3, r1
 80166bc:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d045      	beq.n	8016752 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80166c6:	69f9      	ldr	r1, [r7, #28]
 80166c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166ca:	4613      	mov	r3, r2
 80166cc:	005b      	lsls	r3, r3, #1
 80166ce:	4413      	add	r3, r2
 80166d0:	009b      	lsls	r3, r3, #2
 80166d2:	440b      	add	r3, r1
 80166d4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 80166dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166de:	009b      	lsls	r3, r3, #2
 80166e0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166e8:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80166f0:	4413      	add	r3, r2
 80166f2:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 80166f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d12c      	bne.n	8016756 <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016702:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8016708:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801670c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801670e:	1ad3      	subs	r3, r2, r3
 8016710:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8016712:	69fb      	ldr	r3, [r7, #28]
 8016714:	689a      	ldr	r2, [r3, #8]
 8016716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016718:	4413      	add	r3, r2
 801671a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801671c:	69f9      	ldr	r1, [r7, #28]
 801671e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016720:	4613      	mov	r3, r2
 8016722:	005b      	lsls	r3, r3, #1
 8016724:	4413      	add	r3, r2
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	440b      	add	r3, r1
 801672a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8016732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016736:	f7ff f9e8 	bl	8015b0a <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801673a:	69f9      	ldr	r1, [r7, #28]
 801673c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801673e:	4613      	mov	r3, r2
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4413      	add	r3, r2
 8016744:	009b      	lsls	r3, r3, #2
 8016746:	440b      	add	r3, r1
 8016748:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801674c:	2200      	movs	r2, #0
 801674e:	601a      	str	r2, [r3, #0]
 8016750:	e002      	b.n	8016758 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8016752:	bf00      	nop
 8016754:	e000      	b.n	8016758 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8016756:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8016758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801675a:	3301      	adds	r3, #1
 801675c:	653b      	str	r3, [r7, #80]	; 0x50
 801675e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016760:	2b0f      	cmp	r3, #15
 8016762:	d9a4      	bls.n	80166ae <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8016764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016766:	2200      	movs	r2, #0
 8016768:	603b      	str	r3, [r7, #0]
 801676a:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8016770:	2302      	movs	r3, #2
 8016772:	9302      	str	r3, [sp, #8]
 8016774:	2301      	movs	r3, #1
 8016776:	9301      	str	r3, [sp, #4]
 8016778:	9200      	str	r2, [sp, #0]
 801677a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801677e:	69f8      	ldr	r0, [r7, #28]
 8016780:	f001 f886 	bl	8017890 <_fx_utility_logical_sector_write>
 8016784:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8016786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016788:	2b00      	cmp	r3, #0
 801678a:	d001      	beq.n	8016790 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 801678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801678e:	e046      	b.n	801681e <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8016790:	69fb      	ldr	r3, [r7, #28]
 8016792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016798:	2b00      	cmp	r3, #0
 801679a:	d105      	bne.n	80167a8 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167a0:	0a9b      	lsrs	r3, r3, #10
 80167a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80167a6:	e006      	b.n	80167b6 <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167ac:	0a9b      	lsrs	r3, r3, #10
 80167ae:	b2db      	uxtb	r3, r3
 80167b0:	3301      	adds	r3, #1
 80167b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80167b6:	69fb      	ldr	r3, [r7, #28]
 80167b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80167bc:	1ad2      	subs	r2, r2, r3
 80167be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80167c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80167c6:	08db      	lsrs	r3, r3, #3
 80167c8:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80167ca:	69fa      	ldr	r2, [r7, #28]
 80167cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167ce:	4413      	add	r3, r2
 80167d0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80167d8:	69fb      	ldr	r3, [r7, #28]
 80167da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80167dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167de:	1a9a      	subs	r2, r3, r2
 80167e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80167e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80167e8:	f003 0207 	and.w	r2, r3, #7
 80167ec:	2301      	movs	r3, #1
 80167ee:	4093      	lsls	r3, r2
 80167f0:	b25b      	sxtb	r3, r3
 80167f2:	430b      	orrs	r3, r1
 80167f4:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80167f6:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80167f8:	69fa      	ldr	r2, [r7, #28]
 80167fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167fc:	4413      	add	r3, r2
 80167fe:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8016802:	460b      	mov	r3, r1
 8016804:	7013      	strb	r3, [r2, #0]
 8016806:	e002      	b.n	801680e <_fx_utility_FAT_flush+0x688>
            continue;
 8016808:	bf00      	nop
 801680a:	e000      	b.n	801680e <_fx_utility_FAT_flush+0x688>
                    break;
 801680c:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801680e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016810:	3301      	adds	r3, #1
 8016812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016816:	2b0f      	cmp	r3, #15
 8016818:	f67f acc4 	bls.w	80161a4 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 801681c:	2300      	movs	r3, #0
}
 801681e:	4618      	mov	r0, r3
 8016820:	3758      	adds	r7, #88	; 0x58
 8016822:	46bd      	mov	sp, r7
 8016824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016828 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8016828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801682c:	b092      	sub	sp, #72	; 0x48
 801682e:	af04      	add	r7, sp, #16
 8016830:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801683a:	2b00      	cmp	r3, #0
 801683c:	d105      	bne.n	801684a <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801683e:	69fb      	ldr	r3, [r7, #28]
 8016840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016842:	0a9b      	lsrs	r3, r3, #10
 8016844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016848:	e006      	b.n	8016858 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801684e:	0a9b      	lsrs	r3, r3, #10
 8016850:	b2db      	uxtb	r3, r3
 8016852:	3301      	adds	r3, #1
 8016854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8016858:	2300      	movs	r3, #0
 801685a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801685c:	e089      	b.n	8016972 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 801685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016860:	08db      	lsrs	r3, r3, #3
 8016862:	69fa      	ldr	r2, [r7, #28]
 8016864:	4413      	add	r3, r2
 8016866:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 801686a:	461a      	mov	r2, r3
 801686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686e:	f003 0307 	and.w	r3, r3, #7
 8016872:	fa42 f303 	asr.w	r3, r2, r3
 8016876:	f003 0301 	and.w	r3, r3, #1
 801687a:	2b00      	cmp	r3, #0
 801687c:	d075      	beq.n	801696a <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 801687e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016884:	fb03 f202 	mul.w	r2, r3, r2
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801688c:	4413      	add	r3, r2
 801688e:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8016890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016896:	4413      	add	r3, r2
 8016898:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 801689a:	69fb      	ldr	r3, [r7, #28]
 801689c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801689e:	69fb      	ldr	r3, [r7, #28]
 80168a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168a2:	4413      	add	r3, r2
 80168a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d95a      	bls.n	8016960 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 80168aa:	69fb      	ldr	r3, [r7, #28]
 80168ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168b2:	4413      	add	r3, r2
 80168b4:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 80168b6:	e053      	b.n	8016960 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80168b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168ba:	2200      	movs	r2, #0
 80168bc:	613b      	str	r3, [r7, #16]
 80168be:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80168c4:	2302      	movs	r3, #2
 80168c6:	9302      	str	r3, [sp, #8]
 80168c8:	2301      	movs	r3, #1
 80168ca:	9301      	str	r3, [sp, #4]
 80168cc:	9200      	str	r2, [sp, #0]
 80168ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80168d2:	69f8      	ldr	r0, [r7, #28]
 80168d4:	f000 fd48 	bl	8017368 <_fx_utility_logical_sector_read>
 80168d8:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80168da:	6a3b      	ldr	r3, [r7, #32]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 80168e0:	6a3b      	ldr	r3, [r7, #32]
 80168e2:	e05c      	b.n	801699e <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168e8:	3b01      	subs	r3, #1
 80168ea:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 80168ec:	e032      	b.n	8016954 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80168ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168f0:	2200      	movs	r2, #0
 80168f2:	60bb      	str	r3, [r7, #8]
 80168f4:	60fa      	str	r2, [r7, #12]
 80168f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f8:	2200      	movs	r2, #0
 80168fa:	4698      	mov	r8, r3
 80168fc:	4691      	mov	r9, r2
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016902:	2200      	movs	r2, #0
 8016904:	469a      	mov	sl, r3
 8016906:	4693      	mov	fp, r2
 8016908:	fb0a f209 	mul.w	r2, sl, r9
 801690c:	fb08 f30b 	mul.w	r3, r8, fp
 8016910:	4413      	add	r3, r2
 8016912:	fba8 450a 	umull	r4, r5, r8, sl
 8016916:	442b      	add	r3, r5
 8016918:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 801691a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801691e:	460b      	mov	r3, r1
 8016920:	191b      	adds	r3, r3, r4
 8016922:	603b      	str	r3, [r7, #0]
 8016924:	4613      	mov	r3, r2
 8016926:	416b      	adcs	r3, r5
 8016928:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801692a:	69fb      	ldr	r3, [r7, #28]
 801692c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 801692e:	2302      	movs	r3, #2
 8016930:	9302      	str	r3, [sp, #8]
 8016932:	2301      	movs	r3, #1
 8016934:	9301      	str	r3, [sp, #4]
 8016936:	9200      	str	r2, [sp, #0]
 8016938:	e9d7 2300 	ldrd	r2, r3, [r7]
 801693c:	69f8      	ldr	r0, [r7, #28]
 801693e:	f000 ffa7 	bl	8017890 <_fx_utility_logical_sector_write>
 8016942:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8016944:	6a3b      	ldr	r3, [r7, #32]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d001      	beq.n	801694e <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	e027      	b.n	801699e <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 801694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016950:	3b01      	subs	r3, #1
 8016952:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8016954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016956:	2b00      	cmp	r3, #0
 8016958:	d1c9      	bne.n	80168ee <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 801695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801695c:	3301      	adds	r3, #1
 801695e:	637b      	str	r3, [r7, #52]	; 0x34
 8016960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016964:	429a      	cmp	r2, r3
 8016966:	d3a7      	bcc.n	80168b8 <_fx_utility_FAT_map_flush+0x90>
 8016968:	e000      	b.n	801696c <_fx_utility_FAT_map_flush+0x144>
            continue;
 801696a:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696e:	3301      	adds	r3, #1
 8016970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016978:	f4ff af71 	bcc.w	801685e <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 801697c:	2300      	movs	r3, #0
 801697e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016980:	e009      	b.n	8016996 <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8016982:	69fa      	ldr	r2, [r7, #28]
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	4413      	add	r3, r2
 8016988:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801698c:	2200      	movs	r2, #0
 801698e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8016990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016992:	3301      	adds	r3, #1
 8016994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016998:	2b7f      	cmp	r3, #127	; 0x7f
 801699a:	d9f2      	bls.n	8016982 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 801699c:	2300      	movs	r3, #0
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3738      	adds	r7, #56	; 0x38
 80169a2:	46bd      	mov	sp, r7
 80169a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080169a8 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b08f      	sub	sp, #60	; 0x3c
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	691b      	ldr	r3, [r3, #16]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	f000 8275 	beq.w	8016ea8 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80169be:	683a      	ldr	r2, [r7, #0]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80169c6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80169ca:	4013      	ands	r3, r2
 80169cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	6a1a      	ldr	r2, [r3, #32]
 80169d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d4:	f003 031f 	and.w	r3, r3, #31
 80169d8:	2101      	movs	r1, #1
 80169da:	fa01 f303 	lsl.w	r3, r1, r3
 80169de:	431a      	orrs	r2, r3
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 80169e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80169ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169ec:	4613      	mov	r3, r2
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	4413      	add	r3, r2
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80169f8:	68fa      	ldr	r2, [r7, #12]
 80169fa:	4413      	add	r3, r2
 80169fc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80169fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a00:	7c5b      	ldrb	r3, [r3, #17]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d015      	beq.n	8016a32 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 8016a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016a10:	4299      	cmp	r1, r3
 8016a12:	bf08      	it	eq
 8016a14:	4290      	cmpeq	r0, r2
 8016a16:	d10c      	bne.n	8016a32 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8016a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8016a26:	1c5a      	adds	r2, r3, #1
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8016a2e:	2300      	movs	r3, #0
 8016a30:	e27e      	b.n	8016f30 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8016a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a34:	3318      	adds	r3, #24
 8016a36:	7c5b      	ldrb	r3, [r3, #17]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d060      	beq.n	8016afe <_fx_utility_logical_sector_cache_entry_read+0x156>
 8016a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a3e:	3318      	adds	r3, #24
 8016a40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016a48:	4299      	cmp	r1, r3
 8016a4a:	bf08      	it	eq
 8016a4c:	4290      	cmpeq	r0, r2
 8016a4e:	d156      	bne.n	8016afe <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8016a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a52:	3318      	adds	r3, #24
 8016a54:	681a      	ldr	r2, [r3, #0]
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8016a60:	1c5a      	adds	r2, r3, #1
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8016a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8016a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016a74:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8016a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a7a:	7c1b      	ldrb	r3, [r3, #16]
 8016a7c:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8016a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a82:	7c5b      	ldrb	r3, [r3, #17]
 8016a84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8016a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a8a:	7c9b      	ldrb	r3, [r3, #18]
 8016a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8016a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a92:	3318      	adds	r3, #24
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a98:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8016a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a9c:	3318      	adds	r3, #24
 8016a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016aa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016aa4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8016aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aaa:	3318      	adds	r3, #24
 8016aac:	7c1a      	ldrb	r2, [r3, #16]
 8016aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab0:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8016ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab4:	3318      	adds	r3, #24
 8016ab6:	7c5a      	ldrb	r2, [r3, #17]
 8016ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aba:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8016abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016abe:	3318      	adds	r3, #24
 8016ac0:	7c9a      	ldrb	r2, [r3, #18]
 8016ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ac4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8016ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ac8:	3318      	adds	r3, #24
 8016aca:	693a      	ldr	r2, [r7, #16]
 8016acc:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8016ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ad0:	f103 0118 	add.w	r1, r3, #24
 8016ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8016adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ade:	3318      	adds	r3, #24
 8016ae0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016ae4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8016ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ae8:	3318      	adds	r3, #24
 8016aea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8016aee:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8016af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016af2:	3318      	adds	r3, #24
 8016af4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016af8:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8016afa:	2300      	movs	r3, #0
 8016afc:	e218      	b.n	8016f30 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8016afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b00:	3330      	adds	r3, #48	; 0x30
 8016b02:	7c5b      	ldrb	r3, [r3, #17]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f000 8086 	beq.w	8016c16 <_fx_utility_logical_sector_cache_entry_read+0x26e>
 8016b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b0c:	3330      	adds	r3, #48	; 0x30
 8016b0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016b16:	4299      	cmp	r1, r3
 8016b18:	bf08      	it	eq
 8016b1a:	4290      	cmpeq	r0, r2
 8016b1c:	d17b      	bne.n	8016c16 <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8016b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b20:	3330      	adds	r3, #48	; 0x30
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8016b2e:	1c5a      	adds	r2, r3, #1
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8016b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8016b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8016b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b48:	7c1b      	ldrb	r3, [r3, #16]
 8016b4a:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8016b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b50:	7c5b      	ldrb	r3, [r3, #17]
 8016b52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8016b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b58:	7c9b      	ldrb	r3, [r3, #18]
 8016b5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8016b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b60:	3330      	adds	r3, #48	; 0x30
 8016b62:	681a      	ldr	r2, [r3, #0]
 8016b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b66:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8016b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b6a:	3330      	adds	r3, #48	; 0x30
 8016b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016b70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016b72:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8016b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b78:	3330      	adds	r3, #48	; 0x30
 8016b7a:	7c1a      	ldrb	r2, [r3, #16]
 8016b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b7e:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8016b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b82:	3330      	adds	r3, #48	; 0x30
 8016b84:	7c5a      	ldrb	r2, [r3, #17]
 8016b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b88:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8016b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b8c:	3330      	adds	r3, #48	; 0x30
 8016b8e:	7c9a      	ldrb	r2, [r3, #18]
 8016b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b92:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8016b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b96:	f103 0218 	add.w	r2, r3, #24
 8016b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b9c:	3330      	adds	r3, #48	; 0x30
 8016b9e:	6812      	ldr	r2, [r2, #0]
 8016ba0:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8016ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ba4:	3318      	adds	r3, #24
 8016ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ba8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8016bac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016bb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8016bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bb6:	f103 0218 	add.w	r2, r3, #24
 8016bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bbc:	3330      	adds	r3, #48	; 0x30
 8016bbe:	7c12      	ldrb	r2, [r2, #16]
 8016bc0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8016bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc4:	f103 0218 	add.w	r2, r3, #24
 8016bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bca:	3330      	adds	r3, #48	; 0x30
 8016bcc:	7c52      	ldrb	r2, [r2, #17]
 8016bce:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8016bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bd2:	f103 0218 	add.w	r2, r3, #24
 8016bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bd8:	3330      	adds	r3, #48	; 0x30
 8016bda:	7c92      	ldrb	r2, [r2, #18]
 8016bdc:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8016bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be0:	3318      	adds	r3, #24
 8016be2:	693a      	ldr	r2, [r7, #16]
 8016be4:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8016be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be8:	f103 0118 	add.w	r1, r3, #24
 8016bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016bf0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8016bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf6:	3318      	adds	r3, #24
 8016bf8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016bfc:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8016bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c00:	3318      	adds	r3, #24
 8016c02:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8016c06:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8016c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c0a:	3318      	adds	r3, #24
 8016c0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016c10:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8016c12:	2300      	movs	r3, #0
 8016c14:	e18c      	b.n	8016f30 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8016c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c18:	3348      	adds	r3, #72	; 0x48
 8016c1a:	7c5b      	ldrb	r3, [r3, #17]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f000 80ac 	beq.w	8016d7a <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8016c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c24:	3348      	adds	r3, #72	; 0x48
 8016c26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016c2e:	4299      	cmp	r1, r3
 8016c30:	bf08      	it	eq
 8016c32:	4290      	cmpeq	r0, r2
 8016c34:	f040 80a1 	bne.w	8016d7a <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8016c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c3a:	3348      	adds	r3, #72	; 0x48
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8016c48:	1c5a      	adds	r2, r3, #1
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8016c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8016c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8016c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c62:	7c1b      	ldrb	r3, [r3, #16]
 8016c64:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8016c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c6a:	7c5b      	ldrb	r3, [r3, #17]
 8016c6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8016c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c72:	7c9b      	ldrb	r3, [r3, #18]
 8016c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8016c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c7a:	3348      	adds	r3, #72	; 0x48
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c80:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8016c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c84:	3348      	adds	r3, #72	; 0x48
 8016c86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8016c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c92:	3348      	adds	r3, #72	; 0x48
 8016c94:	7c1a      	ldrb	r2, [r3, #16]
 8016c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c98:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8016c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c9c:	3348      	adds	r3, #72	; 0x48
 8016c9e:	7c5a      	ldrb	r2, [r3, #17]
 8016ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ca2:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8016ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ca6:	3348      	adds	r3, #72	; 0x48
 8016ca8:	7c9a      	ldrb	r2, [r3, #18]
 8016caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cac:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8016cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cb6:	3348      	adds	r3, #72	; 0x48
 8016cb8:	6812      	ldr	r2, [r2, #0]
 8016cba:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8016cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cbe:	3330      	adds	r3, #48	; 0x30
 8016cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cc2:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8016cc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016cca:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8016cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd6:	3348      	adds	r3, #72	; 0x48
 8016cd8:	7c12      	ldrb	r2, [r2, #16]
 8016cda:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8016cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ce4:	3348      	adds	r3, #72	; 0x48
 8016ce6:	7c52      	ldrb	r2, [r2, #17]
 8016ce8:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8016cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cf2:	3348      	adds	r3, #72	; 0x48
 8016cf4:	7c92      	ldrb	r2, [r2, #18]
 8016cf6:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8016cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cfa:	f103 0218 	add.w	r2, r3, #24
 8016cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d00:	3330      	adds	r3, #48	; 0x30
 8016d02:	6812      	ldr	r2, [r2, #0]
 8016d04:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8016d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d08:	3318      	adds	r3, #24
 8016d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d0c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8016d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d14:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8016d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d1a:	f103 0218 	add.w	r2, r3, #24
 8016d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d20:	3330      	adds	r3, #48	; 0x30
 8016d22:	7c12      	ldrb	r2, [r2, #16]
 8016d24:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8016d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d28:	f103 0218 	add.w	r2, r3, #24
 8016d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d2e:	3330      	adds	r3, #48	; 0x30
 8016d30:	7c52      	ldrb	r2, [r2, #17]
 8016d32:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8016d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d36:	f103 0218 	add.w	r2, r3, #24
 8016d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d3c:	3330      	adds	r3, #48	; 0x30
 8016d3e:	7c92      	ldrb	r2, [r2, #18]
 8016d40:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8016d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d44:	3318      	adds	r3, #24
 8016d46:	693a      	ldr	r2, [r7, #16]
 8016d48:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8016d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d4c:	f103 0118 	add.w	r1, r3, #24
 8016d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016d54:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8016d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d5a:	3318      	adds	r3, #24
 8016d5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016d60:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8016d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d64:	3318      	adds	r3, #24
 8016d66:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8016d6a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8016d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d6e:	3318      	adds	r3, #24
 8016d70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016d74:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8016d76:	2300      	movs	r3, #0
 8016d78:	e0da      	b.n	8016f30 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8016d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d7c:	3348      	adds	r3, #72	; 0x48
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8016d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d84:	3348      	adds	r3, #72	; 0x48
 8016d86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8016d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d90:	3348      	adds	r3, #72	; 0x48
 8016d92:	7c1b      	ldrb	r3, [r3, #16]
 8016d94:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 8016d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d9a:	3348      	adds	r3, #72	; 0x48
 8016d9c:	7c5b      	ldrb	r3, [r3, #17]
 8016d9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8016da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016da4:	3348      	adds	r3, #72	; 0x48
 8016da6:	7c9b      	ldrb	r3, [r3, #18]
 8016da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8016dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016db4:	3348      	adds	r3, #72	; 0x48
 8016db6:	6812      	ldr	r2, [r2, #0]
 8016db8:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8016dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dbc:	3330      	adds	r3, #48	; 0x30
 8016dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016dc0:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8016dc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8016dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd4:	3348      	adds	r3, #72	; 0x48
 8016dd6:	7c12      	ldrb	r2, [r2, #16]
 8016dd8:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8016dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016de2:	3348      	adds	r3, #72	; 0x48
 8016de4:	7c52      	ldrb	r2, [r2, #17]
 8016de6:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8016de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016df0:	3348      	adds	r3, #72	; 0x48
 8016df2:	7c92      	ldrb	r2, [r2, #18]
 8016df4:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8016df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016df8:	f103 0218 	add.w	r2, r3, #24
 8016dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dfe:	3330      	adds	r3, #48	; 0x30
 8016e00:	6812      	ldr	r2, [r2, #0]
 8016e02:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8016e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e06:	3318      	adds	r3, #24
 8016e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e0a:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8016e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016e12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8016e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e18:	f103 0218 	add.w	r2, r3, #24
 8016e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e1e:	3330      	adds	r3, #48	; 0x30
 8016e20:	7c12      	ldrb	r2, [r2, #16]
 8016e22:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8016e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e26:	f103 0218 	add.w	r2, r3, #24
 8016e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2c:	3330      	adds	r3, #48	; 0x30
 8016e2e:	7c52      	ldrb	r2, [r2, #17]
 8016e30:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8016e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e34:	f103 0218 	add.w	r2, r3, #24
 8016e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3a:	3330      	adds	r3, #48	; 0x30
 8016e3c:	7c92      	ldrb	r2, [r2, #18]
 8016e3e:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8016e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e42:	3318      	adds	r3, #24
 8016e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e46:	6812      	ldr	r2, [r2, #0]
 8016e48:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8016e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e4c:	f103 0118 	add.w	r1, r3, #24
 8016e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016e56:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8016e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e5c:	3318      	adds	r3, #24
 8016e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e60:	7c12      	ldrb	r2, [r2, #16]
 8016e62:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8016e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e66:	3318      	adds	r3, #24
 8016e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e6a:	7c52      	ldrb	r2, [r2, #17]
 8016e6c:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8016e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e70:	3318      	adds	r3, #24
 8016e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e74:	7c92      	ldrb	r2, [r2, #18]
 8016e76:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8016e78:	693a      	ldr	r2, [r7, #16]
 8016e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e7c:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8016e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016e82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e84:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8016e88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e8e:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8016e90:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8016e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e96:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8016e98:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e9e:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8016ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	601a      	str	r2, [r3, #0]
 8016ea6:	e042      	b.n	8016f2e <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	69db      	ldr	r3, [r3, #28]
 8016eb2:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8016eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 8016eba:	e033      	b.n	8016f24 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8016ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ebe:	7c5b      	ldrb	r3, [r3, #17]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d025      	beq.n	8016f10 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8016ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016ece:	4299      	cmp	r1, r3
 8016ed0:	bf08      	it	eq
 8016ed2:	4290      	cmpeq	r0, r2
 8016ed4:	d11c      	bne.n	8016f10 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8016ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8016ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d00b      	beq.n	8016efe <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8016ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ee8:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 8016eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016eec:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8016eee:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8016ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ef6:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016efc:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8016f04:	1c5a      	adds	r2, r3, #1
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	e00f      	b.n	8016f30 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8016f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f12:	695b      	ldr	r3, [r3, #20]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d005      	beq.n	8016f24 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8016f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016f1c:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8016f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f20:	695b      	ldr	r3, [r3, #20]
 8016f22:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8016f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f26:	1e5a      	subs	r2, r3, #1
 8016f28:	633a      	str	r2, [r7, #48]	; 0x30
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d1c6      	bne.n	8016ebc <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8016f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	373c      	adds	r7, #60	; 0x3c
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8016f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016f40:	b094      	sub	sp, #80	; 0x50
 8016f42:	af00      	add	r7, sp, #0
 8016f44:	61f8      	str	r0, [r7, #28]
 8016f46:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 8016f4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016f4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8016f52:	1884      	adds	r4, r0, r2
 8016f54:	eb41 0503 	adc.w	r5, r1, r3
 8016f58:	1e63      	subs	r3, r4, #1
 8016f5a:	60bb      	str	r3, [r7, #8]
 8016f5c:	f145 33ff 	adc.w	r3, r5, #4294967295
 8016f60:	60fb      	str	r3, [r7, #12]
 8016f62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016f66:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	691b      	ldr	r3, [r3, #16]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	f040 80b4 	bne.w	80170e2 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8016f7a:	69fb      	ldr	r3, [r7, #28]
 8016f7c:	695b      	ldr	r3, [r3, #20]
 8016f7e:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8016f80:	69fb      	ldr	r3, [r7, #28]
 8016f82:	69db      	ldr	r3, [r3, #28]
 8016f84:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8016f86:	e09f      	b.n	80170c8 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8016f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d103      	bne.n	8016f96 <_fx_utility_logical_sector_flush+0x5a>
 8016f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	f000 81de 	beq.w	8017352 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8016f96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8016f9a:	4313      	orrs	r3, r2
 8016f9c:	f000 81db 	beq.w	8017356 <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8016fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fa2:	7c5b      	ldrb	r3, [r3, #17]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f000 808c 	beq.w	80170c2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8016faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8016fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016fb4:	4290      	cmp	r0, r2
 8016fb6:	eb71 0303 	sbcs.w	r3, r1, r3
 8016fba:	f0c0 8082 	bcc.w	80170c2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8016fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8016fc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016fc8:	4290      	cmp	r0, r2
 8016fca:	eb71 0303 	sbcs.w	r3, r1, r3
 8016fce:	d378      	bcc.n	80170c2 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8016fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fd2:	7c1b      	ldrb	r3, [r3, #16]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d04d      	beq.n	8017074 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8016fd8:	69fb      	ldr	r3, [r7, #28]
 8016fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d148      	bne.n	8017074 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8016fe2:	69fb      	ldr	r3, [r7, #28]
 8016fe4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8016fe8:	1c5a      	adds	r2, r3, #1
 8016fea:	69fb      	ldr	r3, [r7, #28]
 8016fec:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	2290      	movs	r2, #144	; 0x90
 8016ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8017000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801700c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8017016:	69fb      	ldr	r3, [r7, #28]
 8017018:	2201      	movs	r2, #1
 801701a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801701e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017020:	7c9b      	ldrb	r3, [r3, #18]
 8017022:	461a      	mov	r2, r3
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801702a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801702c:	7c9b      	ldrb	r3, [r3, #18]
 801702e:	2b04      	cmp	r3, #4
 8017030:	d003      	beq.n	801703a <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	2201      	movs	r2, #1
 8017036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017040:	69f8      	ldr	r0, [r7, #28]
 8017042:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	2200      	movs	r2, #0
 8017048:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017052:	2b00      	cmp	r3, #0
 8017054:	d003      	beq.n	801705e <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801705c:	e17f      	b.n	801735e <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017060:	2200      	movs	r2, #0
 8017062:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8017064:	69fb      	ldr	r3, [r7, #28]
 8017066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017068:	1e5a      	subs	r2, r3, #1
 801706a:	69fb      	ldr	r3, [r7, #28]
 801706c:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	3b01      	subs	r3, #1
 8017072:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8017074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017076:	2b00      	cmp	r3, #0
 8017078:	d018      	beq.n	80170ac <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801707c:	2200      	movs	r2, #0
 801707e:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8017080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017082:	f04f 32ff 	mov.w	r2, #4294967295
 8017086:	f04f 33ff 	mov.w	r3, #4294967295
 801708a:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 801708e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017090:	7c1b      	ldrb	r3, [r3, #16]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00a      	beq.n	80170ac <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8017096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017098:	2200      	movs	r2, #0
 801709a:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170a0:	1e5a      	subs	r2, r3, #1
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80170a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a8:	3b01      	subs	r3, #1
 80170aa:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 80170ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80170b0:	1e51      	subs	r1, r2, #1
 80170b2:	6039      	str	r1, [r7, #0]
 80170b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80170b8:	607b      	str	r3, [r7, #4]
 80170ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80170be:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80170c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170c4:	695b      	ldr	r3, [r3, #20]
 80170c6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80170c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170ca:	1e5a      	subs	r2, r3, #1
 80170cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	f000 8144 	beq.w	801735c <_fx_utility_logical_sector_flush+0x420>
 80170d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80170da:	4313      	orrs	r3, r2
 80170dc:	f47f af54 	bne.w	8016f88 <_fx_utility_logical_sector_flush+0x4c>
 80170e0:	e13c      	b.n	801735c <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80170e2:	69fb      	ldr	r3, [r7, #28]
 80170e4:	695b      	ldr	r3, [r3, #20]
 80170e6:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 80170e8:	2300      	movs	r3, #0
 80170ea:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 80170ec:	69fb      	ldr	r3, [r7, #28]
 80170ee:	6a1b      	ldr	r3, [r3, #32]
 80170f0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 80170f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80170f6:	2a20      	cmp	r2, #32
 80170f8:	f173 0300 	sbcs.w	r3, r3, #0
 80170fc:	d202      	bcs.n	8017104 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 80170fe:	2301      	movs	r3, #1
 8017100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017102:	e121      	b.n	8017348 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8017104:	2300      	movs	r3, #0
 8017106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8017108:	e11e      	b.n	8017348 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710c:	2b00      	cmp	r3, #0
 801710e:	d103      	bne.n	8017118 <_fx_utility_logical_sector_flush+0x1dc>
 8017110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017112:	2b00      	cmp	r3, #0
 8017114:	f000 8121 	beq.w	801735a <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8017118:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801711c:	4313      	orrs	r3, r2
 801711e:	f000 811d 	beq.w	801735c <_fx_utility_logical_sector_flush+0x420>
 8017122:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017126:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801712a:	4290      	cmp	r0, r2
 801712c:	eb71 0303 	sbcs.w	r3, r1, r3
 8017130:	f0c0 8114 	bcc.w	801735c <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8017134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017136:	2b00      	cmp	r3, #0
 8017138:	d015      	beq.n	8017166 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801713a:	693a      	ldr	r2, [r7, #16]
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017142:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8017146:	4013      	ands	r3, r2
 8017148:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 801714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801714c:	f003 031f 	and.w	r3, r3, #31
 8017150:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8017152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017154:	009b      	lsls	r3, r3, #2
 8017156:	63bb      	str	r3, [r7, #56]	; 0x38
 8017158:	e00d      	b.n	8017176 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 801715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715c:	085b      	lsrs	r3, r3, #1
 801715e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8017160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017162:	3301      	adds	r3, #1
 8017164:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 8017166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017168:	f003 0301 	and.w	r3, r3, #1
 801716c:	2b00      	cmp	r3, #0
 801716e:	d0f4      	beq.n	801715a <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8017170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 8017176:	2300      	movs	r3, #0
 8017178:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801717a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801717c:	4613      	mov	r3, r2
 801717e:	005b      	lsls	r3, r3, #1
 8017180:	4413      	add	r3, r2
 8017182:	00db      	lsls	r3, r3, #3
 8017184:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8017188:	69fa      	ldr	r2, [r7, #28]
 801718a:	4413      	add	r3, r2
 801718c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 801718e:	2300      	movs	r3, #0
 8017190:	647b      	str	r3, [r7, #68]	; 0x44
 8017192:	e0a7      	b.n	80172e4 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8017194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017196:	7c5b      	ldrb	r3, [r3, #17]
 8017198:	2b00      	cmp	r3, #0
 801719a:	f000 8089 	beq.w	80172b0 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80171a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80171a8:	4290      	cmp	r0, r2
 80171aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80171ae:	d37f      	bcc.n	80172b0 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 80171b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80171b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80171ba:	4290      	cmp	r0, r2
 80171bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80171c0:	d376      	bcc.n	80172b0 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80171c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171c4:	7c1b      	ldrb	r3, [r3, #16]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d04d      	beq.n	8017266 <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80171ca:	69fb      	ldr	r3, [r7, #28]
 80171cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d148      	bne.n	8017266 <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 80171d4:	69fb      	ldr	r3, [r7, #28]
 80171d6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80171da:	1c5a      	adds	r2, r3, #1
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	2201      	movs	r2, #1
 80171e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	2290      	movs	r2, #144	; 0x90
 80171ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80171f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80171fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	2201      	movs	r2, #1
 801720c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8017210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017212:	7c9b      	ldrb	r3, [r3, #18]
 8017214:	461a      	mov	r2, r3
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801721c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801721e:	7c9b      	ldrb	r3, [r3, #18]
 8017220:	2b04      	cmp	r3, #4
 8017222:	d003      	beq.n	801722c <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017224:	69fb      	ldr	r3, [r7, #28]
 8017226:	2201      	movs	r2, #1
 8017228:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801722c:	69fb      	ldr	r3, [r7, #28]
 801722e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017232:	69f8      	ldr	r0, [r7, #28]
 8017234:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	2200      	movs	r2, #0
 801723a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017244:	2b00      	cmp	r3, #0
 8017246:	d003      	beq.n	8017250 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 8017248:	69fb      	ldr	r3, [r7, #28]
 801724a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801724e:	e086      	b.n	801735e <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8017250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017252:	2200      	movs	r2, #0
 8017254:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801725a:	1e5a      	subs	r2, r3, #1
 801725c:	69fb      	ldr	r3, [r7, #28]
 801725e:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8017260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017262:	3b01      	subs	r3, #1
 8017264:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 8017266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017268:	2b00      	cmp	r3, #0
 801726a:	d018      	beq.n	801729e <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801726e:	2200      	movs	r2, #0
 8017270:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8017272:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017274:	f04f 32ff 	mov.w	r2, #4294967295
 8017278:	f04f 33ff 	mov.w	r3, #4294967295
 801727c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8017280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017282:	7c1b      	ldrb	r3, [r3, #16]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d00a      	beq.n	801729e <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8017288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801728a:	2200      	movs	r2, #0
 801728c:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017292:	1e5a      	subs	r2, r3, #1
 8017294:	69fb      	ldr	r3, [r7, #28]
 8017296:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8017298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801729a:	3b01      	subs	r3, #1
 801729c:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 801729e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80172a2:	f112 38ff 	adds.w	r8, r2, #4294967295
 80172a6:	f143 39ff 	adc.w	r9, r3, #4294967295
 80172aa:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 80172ae:	e006      	b.n	80172be <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 80172b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172b2:	7c5b      	ldrb	r3, [r3, #17]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d002      	beq.n	80172be <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 80172b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ba:	3301      	adds	r3, #1
 80172bc:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80172be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d102      	bne.n	80172ca <_fx_utility_logical_sector_flush+0x38e>
 80172c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d011      	beq.n	80172ee <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80172ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80172ce:	4313      	orrs	r3, r2
 80172d0:	d102      	bne.n	80172d8 <_fx_utility_logical_sector_flush+0x39c>
 80172d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d00c      	beq.n	80172f2 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 80172d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172da:	3318      	adds	r3, #24
 80172dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 80172de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172e0:	3301      	adds	r3, #1
 80172e2:	647b      	str	r3, [r7, #68]	; 0x44
 80172e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172e6:	2b03      	cmp	r3, #3
 80172e8:	f67f af54 	bls.w	8017194 <_fx_utility_logical_sector_flush+0x258>
 80172ec:	e002      	b.n	80172f4 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 80172ee:	bf00      	nop
 80172f0:	e000      	b.n	80172f4 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 80172f2:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 80172f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f6:	3380      	adds	r3, #128	; 0x80
 80172f8:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 80172fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80172fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172fe:	429a      	cmp	r2, r3
 8017300:	f4ff af3b 	bcc.w	801717a <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8017304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017306:	2b00      	cmp	r3, #0
 8017308:	d00c      	beq.n	8017324 <_fx_utility_logical_sector_flush+0x3e8>
 801730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801730c:	2b00      	cmp	r3, #0
 801730e:	d109      	bne.n	8017324 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8017310:	69fb      	ldr	r3, [r7, #28]
 8017312:	6a1a      	ldr	r2, [r3, #32]
 8017314:	2101      	movs	r1, #1
 8017316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017318:	fa01 f303 	lsl.w	r3, r1, r3
 801731c:	43db      	mvns	r3, r3
 801731e:	401a      	ands	r2, r3
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8017324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017326:	2b00      	cmp	r3, #0
 8017328:	d008      	beq.n	801733c <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801732a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801732e:	f112 0a01 	adds.w	sl, r2, #1
 8017332:	f143 0b00 	adc.w	fp, r3, #0
 8017336:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801733a:	e005      	b.n	8017348 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 801733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733e:	085b      	lsrs	r3, r3, #1
 8017340:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 8017342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017344:	3301      	adds	r3, #1
 8017346:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 8017348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734a:	2b00      	cmp	r3, #0
 801734c:	f47f aedd 	bne.w	801710a <_fx_utility_logical_sector_flush+0x1ce>
 8017350:	e004      	b.n	801735c <_fx_utility_logical_sector_flush+0x420>
                break;
 8017352:	bf00      	nop
 8017354:	e002      	b.n	801735c <_fx_utility_logical_sector_flush+0x420>
                break;
 8017356:	bf00      	nop
 8017358:	e000      	b.n	801735c <_fx_utility_logical_sector_flush+0x420>
                break;
 801735a:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801735c:	2300      	movs	r3, #0
}
 801735e:	4618      	mov	r0, r3
 8017360:	3750      	adds	r7, #80	; 0x50
 8017362:	46bd      	mov	sp, r7
 8017364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017368 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8017368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801736c:	b09c      	sub	sp, #112	; 0x70
 801736e:	af04      	add	r7, sp, #16
 8017370:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017372:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8017376:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801737a:	2b02      	cmp	r3, #2
 801737c:	d106      	bne.n	801738c <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 801737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017380:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8017384:	1c5a      	adds	r2, r3, #1
 8017386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017388:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 801738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801738e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8017392:	1c5a      	adds	r2, r3, #1
 8017394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017396:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801739c:	689a      	ldr	r2, [r3, #8]
 801739e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80173a2:	4293      	cmp	r3, r2
 80173a4:	f0c0 80d9 	bcc.w	801755a <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80173a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173aa:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80173ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80173b0:	4293      	cmp	r3, r2
 80173b2:	f200 80d2 	bhi.w	801755a <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 80173b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80173c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80173c2:	f7ff faf1 	bl	80169a8 <_fx_utility_logical_sector_cache_entry_read>
 80173c6:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 80173c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d101      	bne.n	80173d2 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 80173ce:	2300      	movs	r3, #0
 80173d0:	e259      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 80173d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173d4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80173d8:	1c5a      	adds	r2, r3, #1
 80173da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173dc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 80173e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173e2:	7c5b      	ldrb	r3, [r3, #17]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d049      	beq.n	801747c <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 80173e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173ea:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d045      	beq.n	801747c <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 80173f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173f2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80173f6:	1c5a      	adds	r2, r3, #1
 80173f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173fa:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80173fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017400:	2201      	movs	r2, #1
 8017402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017408:	2290      	movs	r2, #144	; 0x90
 801740a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8017418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801741a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017420:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8017424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017426:	2201      	movs	r2, #1
 8017428:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801742e:	7c9b      	ldrb	r3, [r3, #18]
 8017430:	461a      	mov	r2, r3
 8017432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017434:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8017438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801743a:	7c9b      	ldrb	r3, [r3, #18]
 801743c:	2b04      	cmp	r3, #4
 801743e:	d003      	beq.n	8017448 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017442:	2201      	movs	r2, #1
 8017444:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801744a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801744e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017450:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017454:	2200      	movs	r2, #0
 8017456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801745c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017460:	2b00      	cmp	r3, #0
 8017462:	d003      	beq.n	801746c <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8017464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801746a:	e20c      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801746c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801746e:	2200      	movs	r2, #0
 8017470:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8017472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017476:	1e5a      	subs	r2, r3, #1
 8017478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801747a:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 801747c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801747e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017482:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8017486:	4290      	cmp	r0, r2
 8017488:	eb71 0303 	sbcs.w	r3, r1, r3
 801748c:	d301      	bcc.n	8017492 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 801748e:	2389      	movs	r3, #137	; 0x89
 8017490:	e1f9      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8017492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017494:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8017498:	1c5a      	adds	r2, r3, #1
 801749a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801749c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80174a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174a2:	2200      	movs	r2, #0
 80174a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80174a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174aa:	2290      	movs	r2, #144	; 0x90
 80174ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80174b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174b2:	681a      	ldr	r2, [r3, #0]
 80174b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80174ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80174bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 80174c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174c4:	2201      	movs	r2, #1
 80174c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80174ca:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80174ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80174d4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80174d8:	2b04      	cmp	r3, #4
 80174da:	d103      	bne.n	80174e4 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80174dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174de:	2201      	movs	r2, #1
 80174e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80174e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80174ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80174ec:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80174ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80174f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d11a      	bne.n	8017536 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8017500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017506:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801750a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801750c:	2201      	movs	r2, #1
 801750e:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8017510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017512:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8017516:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8017518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801751a:	2b00      	cmp	r3, #0
 801751c:	d015      	beq.n	801754a <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 801751e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8017520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017522:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8017524:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8017526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017528:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801752a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801752c:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017532:	61da      	str	r2, [r3, #28]
 8017534:	e009      	b.n	801754a <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8017536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017538:	2200      	movs	r2, #0
 801753a:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801753c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801753e:	f04f 32ff 	mov.w	r2, #4294967295
 8017542:	f04f 33ff 	mov.w	r3, #4294967295
 8017546:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801754a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017550:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8017552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017558:	e195      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 801755a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801755e:	2200      	movs	r2, #0
 8017560:	469a      	mov	sl, r3
 8017562:	4693      	mov	fp, r2
 8017564:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017568:	eb1a 0402 	adds.w	r4, sl, r2
 801756c:	eb4b 0503 	adc.w	r5, fp, r3
 8017570:	f114 38ff 	adds.w	r8, r4, #4294967295
 8017574:	f145 39ff 	adc.w	r9, r5, #4294967295
 8017578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801757a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801757e:	2300      	movs	r3, #0
 8017580:	63ba      	str	r2, [r7, #56]	; 0x38
 8017582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017584:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8017588:	460b      	mov	r3, r1
 801758a:	4543      	cmp	r3, r8
 801758c:	4613      	mov	r3, r2
 801758e:	eb73 0309 	sbcs.w	r3, r3, r9
 8017592:	d22c      	bcs.n	80175ee <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8017594:	2389      	movs	r3, #137	; 0x89
 8017596:	e176      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8017598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80175a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80175a4:	f7ff fa00 	bl	80169a8 <_fx_utility_logical_sector_cache_entry_read>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d124      	bne.n	80175f8 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80175ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175b0:	6898      	ldr	r0, [r3, #8]
 80175b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175b6:	461a      	mov	r2, r3
 80175b8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80175bc:	f000 fad0 	bl	8017b60 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80175c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80175c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80175c8:	4413      	add	r3, r2
 80175ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 80175ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80175d2:	1c51      	adds	r1, r2, #1
 80175d4:	61b9      	str	r1, [r7, #24]
 80175d6:	f143 0300 	adc.w	r3, r3, #0
 80175da:	61fb      	str	r3, [r7, #28]
 80175dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80175e0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 80175e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80175e8:	3b01      	subs	r3, #1
 80175ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 80175ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d1d0      	bne.n	8017598 <_fx_utility_logical_sector_read+0x230>
 80175f6:	e000      	b.n	80175fa <_fx_utility_logical_sector_read+0x292>
                break;
 80175f8:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 80175fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80175fe:	2200      	movs	r2, #0
 8017600:	633b      	str	r3, [r7, #48]	; 0x30
 8017602:	637a      	str	r2, [r7, #52]	; 0x34
 8017604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017608:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801760c:	4621      	mov	r1, r4
 801760e:	1889      	adds	r1, r1, r2
 8017610:	62b9      	str	r1, [r7, #40]	; 0x28
 8017612:	4629      	mov	r1, r5
 8017614:	eb43 0101 	adc.w	r1, r3, r1
 8017618:	62f9      	str	r1, [r7, #44]	; 0x2c
 801761a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801761e:	460b      	mov	r3, r1
 8017620:	3b01      	subs	r3, #1
 8017622:	613b      	str	r3, [r7, #16]
 8017624:	4613      	mov	r3, r2
 8017626:	f143 33ff 	adc.w	r3, r3, #4294967295
 801762a:	617b      	str	r3, [r7, #20]
 801762c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8017630:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8017634:	e02b      	b.n	801768e <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8017636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801763a:	9300      	str	r3, [sp, #0]
 801763c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017640:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017642:	f7ff f9b1 	bl	80169a8 <_fx_utility_logical_sector_cache_entry_read>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d125      	bne.n	8017698 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801764e:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8017650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017654:	3b01      	subs	r3, #1
 8017656:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017658:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801765a:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801765e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017662:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8017664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8017668:	461a      	mov	r2, r3
 801766a:	f000 fa79 	bl	8017b60 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 801766e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017672:	1e51      	subs	r1, r2, #1
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	f143 33ff 	adc.w	r3, r3, #4294967295
 801767a:	60fb      	str	r3, [r7, #12]
 801767c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017680:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8017684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017688:	3b01      	subs	r3, #1
 801768a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801768e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017692:	2b00      	cmp	r3, #0
 8017694:	d1cf      	bne.n	8017636 <_fx_utility_logical_sector_read+0x2ce>
 8017696:	e000      	b.n	801769a <_fx_utility_logical_sector_read+0x332>
                break;
 8017698:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 801769a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d101      	bne.n	80176a6 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 80176a2:	2300      	movs	r3, #0
 80176a4:	e0ef      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 80176a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80176aa:	2200      	movs	r2, #0
 80176ac:	623b      	str	r3, [r7, #32]
 80176ae:	627a      	str	r2, [r7, #36]	; 0x24
 80176b0:	2301      	movs	r3, #1
 80176b2:	9302      	str	r3, [sp, #8]
 80176b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80176b8:	e9cd 3400 	strd	r3, r4, [sp]
 80176bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80176c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80176c2:	f7ff fc3b 	bl	8016f3c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80176c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176c8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80176cc:	1c5a      	adds	r2, r3, #1
 80176ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176d0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80176d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176d6:	2200      	movs	r2, #0
 80176d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80176dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176de:	2290      	movs	r2, #144	; 0x90
 80176e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80176e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80176ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80176ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80176f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80176f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80176fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8017700:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8017704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017706:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801770a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801770e:	2b04      	cmp	r3, #4
 8017710:	d103      	bne.n	801771a <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8017712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017714:	2201      	movs	r2, #1
 8017716:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801771a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801771c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017720:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017722:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8017724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017726:	2200      	movs	r2, #0
 8017728:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 801772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801772e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017732:	2b00      	cmp	r3, #0
 8017734:	f040 80a4 	bne.w	8017880 <_fx_utility_logical_sector_read+0x518>
 8017738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801773a:	695b      	ldr	r3, [r3, #20]
 801773c:	089b      	lsrs	r3, r3, #2
 801773e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017742:	429a      	cmp	r2, r3
 8017744:	f080 809c 	bcs.w	8017880 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8017748:	e095      	b.n	8017876 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801774a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801774e:	9300      	str	r3, [sp, #0]
 8017750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017754:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017756:	f7ff f927 	bl	80169a8 <_fx_utility_logical_sector_cache_entry_read>
 801775a:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 801775c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801775e:	2b00      	cmp	r3, #0
 8017760:	d101      	bne.n	8017766 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8017762:	2300      	movs	r3, #0
 8017764:	e08f      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8017766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017768:	7c5b      	ldrb	r3, [r3, #17]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d049      	beq.n	8017802 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 801776e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017770:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8017772:	2b00      	cmp	r3, #0
 8017774:	d045      	beq.n	8017802 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8017776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017778:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801777c:	1c5a      	adds	r2, r3, #1
 801777e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017780:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017786:	2201      	movs	r2, #1
 8017788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801778c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801778e:	2290      	movs	r2, #144	; 0x90
 8017790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8017794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017796:	681a      	ldr	r2, [r3, #0]
 8017798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801779a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801779e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80177a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 80177aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177ac:	2201      	movs	r2, #1
 80177ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80177b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177b4:	7c9b      	ldrb	r3, [r3, #18]
 80177b6:	461a      	mov	r2, r3
 80177b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80177be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177c0:	7c9b      	ldrb	r3, [r3, #18]
 80177c2:	2b04      	cmp	r3, #4
 80177c4:	d003      	beq.n	80177ce <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80177c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177c8:	2201      	movs	r2, #1
 80177ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80177ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80177d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80177d6:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80177d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177da:	2200      	movs	r2, #0
 80177dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 80177e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d003      	beq.n	80177f2 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 80177ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177f0:	e049      	b.n	8017886 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80177f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177f4:	2200      	movs	r2, #0
 80177f6:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 80177f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177fc:	1e5a      	subs	r2, r3, #1
 80177fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017800:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8017802:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017808:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801780c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801780e:	2201      	movs	r2, #1
 8017810:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8017812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017814:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8017818:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 801781a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801781c:	2b00      	cmp	r3, #0
 801781e:	d00a      	beq.n	8017836 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8017820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8017822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017824:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8017826:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8017828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801782a:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801782c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801782e:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8017830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017832:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017834:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8017836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017838:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801783e:	461a      	mov	r2, r3
 8017840:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8017844:	f000 f98c 	bl	8017b60 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8017848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801784c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017850:	4413      	add	r3, r2
 8017852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8017856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801785a:	1c51      	adds	r1, r2, #1
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	f143 0300 	adc.w	r3, r3, #0
 8017862:	607b      	str	r3, [r7, #4]
 8017864:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017868:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 801786c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017870:	3b01      	subs	r3, #1
 8017872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8017876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801787a:	2b00      	cmp	r3, #0
 801787c:	f47f af65 	bne.w	801774a <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8017880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8017886:	4618      	mov	r0, r3
 8017888:	3760      	adds	r7, #96	; 0x60
 801788a:	46bd      	mov	sp, r7
 801788c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017890 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8017890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017894:	b096      	sub	sp, #88	; 0x58
 8017896:	af04      	add	r7, sp, #16
 8017898:	62f8      	str	r0, [r7, #44]	; 0x2c
 801789a:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 801789e:	2300      	movs	r3, #0
 80178a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80178a4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d106      	bne.n	80178ba <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80178ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ae:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80178b2:	1c5a      	adds	r2, r3, #1
 80178b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178b6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 80178ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80178c0:	1c5a      	adds	r2, r3, #1
 80178c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80178c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ca:	689a      	ldr	r2, [r3, #8]
 80178cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80178ce:	4293      	cmp	r3, r2
 80178d0:	f0c0 80d8 	bcc.w	8017a84 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80178d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d6:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80178d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80178da:	4293      	cmp	r3, r2
 80178dc:	f200 80d2 	bhi.w	8017a84 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 80178e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178e2:	691b      	ldr	r3, [r3, #16]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d030      	beq.n	801794a <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 80178e8:	6a3a      	ldr	r2, [r7, #32]
 80178ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178f0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80178f4:	4013      	ands	r3, r2
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80178fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178fc:	4613      	mov	r3, r2
 80178fe:	005b      	lsls	r3, r3, #1
 8017900:	4413      	add	r3, r2
 8017902:	00db      	lsls	r3, r3, #3
 8017904:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8017908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801790a:	4413      	add	r3, r2
 801790c:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801790e:	2300      	movs	r3, #0
 8017910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017912:	e016      	b.n	8017942 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8017914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017916:	7c5b      	ldrb	r3, [r3, #17]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d00c      	beq.n	8017936 <_fx_utility_logical_sector_write+0xa6>
 801791c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801791e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017922:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8017926:	4299      	cmp	r1, r3
 8017928:	bf08      	it	eq
 801792a:	4290      	cmpeq	r0, r2
 801792c:	d103      	bne.n	8017936 <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 801792e:	2301      	movs	r3, #1
 8017930:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8017934:	e02d      	b.n	8017992 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8017936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017938:	3301      	adds	r3, #1
 801793a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801793c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801793e:	3318      	adds	r3, #24
 8017940:	647b      	str	r3, [r7, #68]	; 0x44
 8017942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017944:	2b03      	cmp	r3, #3
 8017946:	d9e5      	bls.n	8017914 <_fx_utility_logical_sector_write+0x84>
 8017948:	e023      	b.n	8017992 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8017950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017952:	69db      	ldr	r3, [r3, #28]
 8017954:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8017956:	e017      	b.n	8017988 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8017958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801795a:	7c5b      	ldrb	r3, [r3, #17]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d00c      	beq.n	801797a <_fx_utility_logical_sector_write+0xea>
 8017960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017962:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017966:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801796a:	4299      	cmp	r1, r3
 801796c:	bf08      	it	eq
 801796e:	4290      	cmpeq	r0, r2
 8017970:	d103      	bne.n	801797a <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8017972:	2301      	movs	r3, #1
 8017974:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8017978:	e00b      	b.n	8017992 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801797a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801797c:	695b      	ldr	r3, [r3, #20]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d002      	beq.n	8017988 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8017982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017984:	695b      	ldr	r3, [r3, #20]
 8017986:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 8017988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801798a:	1e5a      	subs	r2, r3, #1
 801798c:	643a      	str	r2, [r7, #64]	; 0x40
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1e2      	bne.n	8017958 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8017992:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017996:	2b00      	cmp	r3, #0
 8017998:	d00d      	beq.n	80179b6 <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801799a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801799c:	7c1b      	ldrb	r3, [r3, #16]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d107      	bne.n	80179b2 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80179a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179a6:	1c5a      	adds	r2, r3, #1
 80179a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179aa:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80179ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179ae:	2201      	movs	r2, #1
 80179b0:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 80179b2:	2300      	movs	r3, #0
 80179b4:	e0cf      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80179b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80179ba:	4313      	orrs	r3, r2
 80179bc:	d004      	beq.n	80179c8 <_fx_utility_logical_sector_write+0x138>
 80179be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80179c2:	1c51      	adds	r1, r2, #1
 80179c4:	430b      	orrs	r3, r1
 80179c6:	d101      	bne.n	80179cc <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 80179c8:	2389      	movs	r3, #137	; 0x89
 80179ca:	e0c4      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80179cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179ce:	2200      	movs	r2, #0
 80179d0:	61bb      	str	r3, [r7, #24]
 80179d2:	61fa      	str	r2, [r7, #28]
 80179d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80179d8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80179dc:	4621      	mov	r1, r4
 80179de:	1889      	adds	r1, r1, r2
 80179e0:	6139      	str	r1, [r7, #16]
 80179e2:	4629      	mov	r1, r5
 80179e4:	eb43 0101 	adc.w	r1, r3, r1
 80179e8:	6179      	str	r1, [r7, #20]
 80179ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80179ee:	460b      	mov	r3, r1
 80179f0:	f113 3aff 	adds.w	sl, r3, #4294967295
 80179f4:	4613      	mov	r3, r2
 80179f6:	f143 3bff 	adc.w	fp, r3, #4294967295
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017a00:	4592      	cmp	sl, r2
 8017a02:	eb7b 0303 	sbcs.w	r3, fp, r3
 8017a06:	d301      	bcc.n	8017a0c <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8017a08:	2389      	movs	r3, #137	; 0x89
 8017a0a:	e0a4      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8017a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a0e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8017a12:	1c5a      	adds	r2, r3, #1
 8017a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a16:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	2201      	movs	r2, #1
 8017a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a24:	2290      	movs	r2, #144	; 0x90
 8017a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8017a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8017a32:	6a3a      	ldr	r2, [r7, #32]
 8017a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8017a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017a3e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8017a42:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8017a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8017a4c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017a50:	2b04      	cmp	r3, #4
 8017a52:	d003      	beq.n	8017a5c <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a56:	2201      	movs	r2, #1
 8017a58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a64:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a68:	2200      	movs	r2, #0
 8017a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8017a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d003      	beq.n	8017a80 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 8017a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a7e:	e06a      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8017a80:	2300      	movs	r3, #0
 8017a82:	e068      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8017a84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017a88:	4313      	orrs	r3, r2
 8017a8a:	d004      	beq.n	8017a96 <_fx_utility_logical_sector_write+0x206>
 8017a8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017a90:	1c51      	adds	r1, r2, #1
 8017a92:	430b      	orrs	r3, r1
 8017a94:	d101      	bne.n	8017a9a <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 8017a96:	2389      	movs	r3, #137	; 0x89
 8017a98:	e05d      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8017a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	60bb      	str	r3, [r7, #8]
 8017aa0:	60fa      	str	r2, [r7, #12]
 8017aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017aa6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8017aaa:	4651      	mov	r1, sl
 8017aac:	eb11 0802 	adds.w	r8, r1, r2
 8017ab0:	4659      	mov	r1, fp
 8017ab2:	eb41 0903 	adc.w	r9, r1, r3
 8017ab6:	f118 34ff 	adds.w	r4, r8, #4294967295
 8017aba:	f149 35ff 	adc.w	r5, r9, #4294967295
 8017abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017ac4:	4294      	cmp	r4, r2
 8017ac6:	eb75 0303 	sbcs.w	r3, r5, r3
 8017aca:	d301      	bcc.n	8017ad0 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8017acc:	2389      	movs	r3, #137	; 0x89
 8017ace:	e042      	b.n	8017b56 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8017ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	603b      	str	r3, [r7, #0]
 8017ad6:	607a      	str	r2, [r7, #4]
 8017ad8:	2301      	movs	r3, #1
 8017ada:	9302      	str	r3, [sp, #8]
 8017adc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017ae0:	e9cd 3400 	strd	r3, r4, [sp]
 8017ae4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017aea:	f7ff fa27 	bl	8016f3c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8017aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017af0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8017af4:	1c5a      	adds	r2, r3, #1
 8017af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017af8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017afe:	2201      	movs	r2, #1
 8017b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b06:	2290      	movs	r2, #144	; 0x90
 8017b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8017b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8017b14:	6a3a      	ldr	r2, [r7, #32]
 8017b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8017b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017b20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8017b24:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8017b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8017b2e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017b32:	2b04      	cmp	r3, #4
 8017b34:	d003      	beq.n	8017b3e <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b38:	2201      	movs	r2, #1
 8017b3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b46:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8017b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3748      	adds	r7, #72	; 0x48
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017b60 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	60b9      	str	r1, [r7, #8]
 8017b6a:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	68f9      	ldr	r1, [r7, #12]
 8017b70:	68b8      	ldr	r0, [r7, #8]
 8017b72:	f003 facb 	bl	801b10c <memcpy>
}
 8017b76:	bf00      	nop
 8017b78:	3710      	adds	r7, #16
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bd80      	pop	{r7, pc}
	...

08017b80 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d101      	bne.n	8017b92 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8017b8e:	2318      	movs	r3, #24
 8017b90:	e018      	b.n	8017bc4 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017b92:	f3ef 8305 	mrs	r3, IPSR
 8017b96:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017b98:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017b9a:	4b0c      	ldr	r3, [pc, #48]	; (8017bcc <_fxe_file_close+0x4c>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	4313      	orrs	r3, r2
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d108      	bne.n	8017bb6 <_fxe_file_close+0x36>
 8017ba4:	4b0a      	ldr	r3, [pc, #40]	; (8017bd0 <_fxe_file_close+0x50>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d004      	beq.n	8017bb6 <_fxe_file_close+0x36>
 8017bac:	4b08      	ldr	r3, [pc, #32]	; (8017bd0 <_fxe_file_close+0x50>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	4a08      	ldr	r2, [pc, #32]	; (8017bd4 <_fxe_file_close+0x54>)
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d101      	bne.n	8017bba <_fxe_file_close+0x3a>
 8017bb6:	2320      	movs	r3, #32
 8017bb8:	e004      	b.n	8017bc4 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7f9 fa4e 	bl	801105c <_fx_file_close>
 8017bc0:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8017bc2:	68fb      	ldr	r3, [r7, #12]
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3710      	adds	r7, #16
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	2400006c 	.word	0x2400006c
 8017bd0:	240043cc 	.word	0x240043cc
 8017bd4:	24004514 	.word	0x24004514

08017bd8 <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b084      	sub	sp, #16
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
 8017be0:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d101      	bne.n	8017bec <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 8017be8:	2318      	movs	r3, #24
 8017bea:	e019      	b.n	8017c20 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017bec:	f3ef 8305 	mrs	r3, IPSR
 8017bf0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017bf2:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017bf4:	4b0c      	ldr	r3, [pc, #48]	; (8017c28 <_fxe_file_create+0x50>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d108      	bne.n	8017c10 <_fxe_file_create+0x38>
 8017bfe:	4b0b      	ldr	r3, [pc, #44]	; (8017c2c <_fxe_file_create+0x54>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d004      	beq.n	8017c10 <_fxe_file_create+0x38>
 8017c06:	4b09      	ldr	r3, [pc, #36]	; (8017c2c <_fxe_file_create+0x54>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4a09      	ldr	r2, [pc, #36]	; (8017c30 <_fxe_file_create+0x58>)
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d101      	bne.n	8017c14 <_fxe_file_create+0x3c>
 8017c10:	2320      	movs	r3, #32
 8017c12:	e005      	b.n	8017c20 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8017c14:	6839      	ldr	r1, [r7, #0]
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7f9 fac4 	bl	80111a4 <_fx_file_create>
 8017c1c:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8017c1e:	68fb      	ldr	r3, [r7, #12]
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	3710      	adds	r7, #16
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}
 8017c28:	2400006c 	.word	0x2400006c
 8017c2c:	240043cc 	.word	0x240043cc
 8017c30:	24004514 	.word	0x24004514

08017c34 <_fxe_file_delete>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_delete(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d101      	bne.n	8017c48 <_fxe_file_delete+0x14>
    {
        return(FX_PTR_ERROR);
 8017c44:	2318      	movs	r3, #24
 8017c46:	e019      	b.n	8017c7c <_fxe_file_delete+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017c48:	f3ef 8305 	mrs	r3, IPSR
 8017c4c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017c4e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017c50:	4b0c      	ldr	r3, [pc, #48]	; (8017c84 <_fxe_file_delete+0x50>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4313      	orrs	r3, r2
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d108      	bne.n	8017c6c <_fxe_file_delete+0x38>
 8017c5a:	4b0b      	ldr	r3, [pc, #44]	; (8017c88 <_fxe_file_delete+0x54>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d004      	beq.n	8017c6c <_fxe_file_delete+0x38>
 8017c62:	4b09      	ldr	r3, [pc, #36]	; (8017c88 <_fxe_file_delete+0x54>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4a09      	ldr	r2, [pc, #36]	; (8017c8c <_fxe_file_delete+0x58>)
 8017c68:	4293      	cmp	r3, r2
 8017c6a:	d101      	bne.n	8017c70 <_fxe_file_delete+0x3c>
 8017c6c:	2320      	movs	r3, #32
 8017c6e:	e005      	b.n	8017c7c <_fxe_file_delete+0x48>

    /* Call actual file delete service.  */
    status =  _fx_file_delete(media_ptr, file_name);
 8017c70:	6839      	ldr	r1, [r7, #0]
 8017c72:	6878      	ldr	r0, [r7, #4]
 8017c74:	f7f9 fc04 	bl	8011480 <_fx_file_delete>
 8017c78:	60f8      	str	r0, [r7, #12]

    /* File delete is complete, return status.  */
    return(status);
 8017c7a:	68fb      	ldr	r3, [r7, #12]
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3710      	adds	r7, #16
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	2400006c 	.word	0x2400006c
 8017c88:	240043cc 	.word	0x240043cc
 8017c8c:	24004514 	.word	0x24004514

08017c90 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b088      	sub	sp, #32
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
 8017c9c:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d00b      	beq.n	8017cbc <_fxe_file_open+0x2c>
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a36      	ldr	r2, [pc, #216]	; (8017d84 <_fxe_file_open+0xf4>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d106      	bne.n	8017cbc <_fxe_file_open+0x2c>
 8017cae:	68bb      	ldr	r3, [r7, #8]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d003      	beq.n	8017cbc <_fxe_file_open+0x2c>
 8017cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8017cba:	d001      	beq.n	8017cc0 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8017cbc:	2318      	movs	r3, #24
 8017cbe:	e05d      	b.n	8017d7c <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d007      	beq.n	8017cd6 <_fxe_file_open+0x46>
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	2b02      	cmp	r3, #2
 8017cca:	d004      	beq.n	8017cd6 <_fxe_file_open+0x46>
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	d001      	beq.n	8017cd6 <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 8017cd2:	2306      	movs	r3, #6
 8017cd4:	e052      	b.n	8017d7c <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017cd6:	f3ef 8305 	mrs	r3, IPSR
 8017cda:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8017cdc:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017cde:	4b2a      	ldr	r3, [pc, #168]	; (8017d88 <_fxe_file_open+0xf8>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4313      	orrs	r3, r2
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d108      	bne.n	8017cfa <_fxe_file_open+0x6a>
 8017ce8:	4b28      	ldr	r3, [pc, #160]	; (8017d8c <_fxe_file_open+0xfc>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d004      	beq.n	8017cfa <_fxe_file_open+0x6a>
 8017cf0:	4b26      	ldr	r3, [pc, #152]	; (8017d8c <_fxe_file_open+0xfc>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a26      	ldr	r2, [pc, #152]	; (8017d90 <_fxe_file_open+0x100>)
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d101      	bne.n	8017cfe <_fxe_file_open+0x6e>
 8017cfa:	2320      	movs	r3, #32
 8017cfc:	e03e      	b.n	8017d7c <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	4a20      	ldr	r2, [pc, #128]	; (8017d84 <_fxe_file_open+0xf4>)
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d001      	beq.n	8017d0c <_fxe_file_open+0x7c>
 8017d08:	2311      	movs	r3, #17
 8017d0a:	e037      	b.n	8017d7c <_fxe_file_open+0xec>
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017d12:	f04f 31ff 	mov.w	r1, #4294967295
 8017d16:	4618      	mov	r0, r3
 8017d18:	f000 ff12 	bl	8018b40 <_tx_mutex_get>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d001      	beq.n	8017d26 <_fxe_file_open+0x96>
 8017d22:	2311      	movs	r3, #17
 8017d24:	e02a      	b.n	8017d7c <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017d2c:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017d34:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 8017d36:	e00e      	b.n	8017d56 <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8017d38:	68ba      	ldr	r2, [r7, #8]
 8017d3a:	69fb      	ldr	r3, [r7, #28]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d107      	bne.n	8017d50 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017d46:	4618      	mov	r0, r3
 8017d48:	f001 f972 	bl	8019030 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8017d4c:	2318      	movs	r3, #24
 8017d4e:	e015      	b.n	8017d7c <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8017d50:	69fb      	ldr	r3, [r7, #28]
 8017d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d54:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	1e5a      	subs	r2, r3, #1
 8017d5a:	61ba      	str	r2, [r7, #24]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1eb      	bne.n	8017d38 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017d66:	4618      	mov	r0, r3
 8017d68:	f001 f962 	bl	8019030 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	68b9      	ldr	r1, [r7, #8]
 8017d72:	68f8      	ldr	r0, [r7, #12]
 8017d74:	f7f9 ff88 	bl	8011c88 <_fx_file_open>
 8017d78:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8017d7a:	697b      	ldr	r3, [r7, #20]
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3720      	adds	r7, #32
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	4d454449 	.word	0x4d454449
 8017d88:	2400006c 	.word	0x2400006c
 8017d8c:	240043cc 	.word	0x240043cc
 8017d90:	24004514 	.word	0x24004514

08017d94 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b086      	sub	sp, #24
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	60f8      	str	r0, [r7, #12]
 8017d9c:	60b9      	str	r1, [r7, #8]
 8017d9e:	607a      	str	r2, [r7, #4]
 8017da0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d005      	beq.n	8017db4 <_fxe_file_read+0x20>
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d002      	beq.n	8017db4 <_fxe_file_read+0x20>
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d101      	bne.n	8017db8 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 8017db4:	2318      	movs	r3, #24
 8017db6:	e01b      	b.n	8017df0 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017db8:	f3ef 8305 	mrs	r3, IPSR
 8017dbc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8017dbe:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017dc0:	4b0d      	ldr	r3, [pc, #52]	; (8017df8 <_fxe_file_read+0x64>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d108      	bne.n	8017ddc <_fxe_file_read+0x48>
 8017dca:	4b0c      	ldr	r3, [pc, #48]	; (8017dfc <_fxe_file_read+0x68>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d004      	beq.n	8017ddc <_fxe_file_read+0x48>
 8017dd2:	4b0a      	ldr	r3, [pc, #40]	; (8017dfc <_fxe_file_read+0x68>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	4a0a      	ldr	r2, [pc, #40]	; (8017e00 <_fxe_file_read+0x6c>)
 8017dd8:	4293      	cmp	r3, r2
 8017dda:	d101      	bne.n	8017de0 <_fxe_file_read+0x4c>
 8017ddc:	2320      	movs	r3, #32
 8017dde:	e007      	b.n	8017df0 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8017de0:	683b      	ldr	r3, [r7, #0]
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	68b9      	ldr	r1, [r7, #8]
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f7fa fc30 	bl	801264c <_fx_file_read>
 8017dec:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8017dee:	697b      	ldr	r3, [r7, #20]
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3718      	adds	r7, #24
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	2400006c 	.word	0x2400006c
 8017dfc:	240043cc 	.word	0x240043cc
 8017e00:	24004514 	.word	0x24004514

08017e04 <_fxe_file_rename>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_rename(FX_MEDIA *media_ptr, CHAR *old_file_name, CHAR *new_file_name)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b086      	sub	sp, #24
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d101      	bne.n	8017e1a <_fxe_file_rename+0x16>
    {
        return(FX_PTR_ERROR);
 8017e16:	2318      	movs	r3, #24
 8017e18:	e01a      	b.n	8017e50 <_fxe_file_rename+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017e1a:	f3ef 8305 	mrs	r3, IPSR
 8017e1e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8017e20:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017e22:	4b0d      	ldr	r3, [pc, #52]	; (8017e58 <_fxe_file_rename+0x54>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4313      	orrs	r3, r2
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d108      	bne.n	8017e3e <_fxe_file_rename+0x3a>
 8017e2c:	4b0b      	ldr	r3, [pc, #44]	; (8017e5c <_fxe_file_rename+0x58>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d004      	beq.n	8017e3e <_fxe_file_rename+0x3a>
 8017e34:	4b09      	ldr	r3, [pc, #36]	; (8017e5c <_fxe_file_rename+0x58>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	4a09      	ldr	r2, [pc, #36]	; (8017e60 <_fxe_file_rename+0x5c>)
 8017e3a:	4293      	cmp	r3, r2
 8017e3c:	d101      	bne.n	8017e42 <_fxe_file_rename+0x3e>
 8017e3e:	2320      	movs	r3, #32
 8017e40:	e006      	b.n	8017e50 <_fxe_file_rename+0x4c>

    /* Call actual file rename service.  */
    status =  _fx_file_rename(media_ptr, old_file_name, new_file_name);
 8017e42:	687a      	ldr	r2, [r7, #4]
 8017e44:	68b9      	ldr	r1, [r7, #8]
 8017e46:	68f8      	ldr	r0, [r7, #12]
 8017e48:	f7fa fea4 	bl	8012b94 <_fx_file_rename>
 8017e4c:	6178      	str	r0, [r7, #20]

    /* File rename is complete, return status.  */
    return(status);
 8017e4e:	697b      	ldr	r3, [r7, #20]
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	3718      	adds	r7, #24
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	2400006c 	.word	0x2400006c
 8017e5c:	240043cc 	.word	0x240043cc
 8017e60:	24004514 	.word	0x24004514

08017e64 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d101      	bne.n	8017e78 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8017e74:	2318      	movs	r3, #24
 8017e76:	e019      	b.n	8017eac <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017e78:	f3ef 8305 	mrs	r3, IPSR
 8017e7c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017e7e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017e80:	4b0c      	ldr	r3, [pc, #48]	; (8017eb4 <_fxe_file_seek+0x50>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4313      	orrs	r3, r2
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d108      	bne.n	8017e9c <_fxe_file_seek+0x38>
 8017e8a:	4b0b      	ldr	r3, [pc, #44]	; (8017eb8 <_fxe_file_seek+0x54>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d004      	beq.n	8017e9c <_fxe_file_seek+0x38>
 8017e92:	4b09      	ldr	r3, [pc, #36]	; (8017eb8 <_fxe_file_seek+0x54>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	4a09      	ldr	r2, [pc, #36]	; (8017ebc <_fxe_file_seek+0x58>)
 8017e98:	4293      	cmp	r3, r2
 8017e9a:	d101      	bne.n	8017ea0 <_fxe_file_seek+0x3c>
 8017e9c:	2320      	movs	r3, #32
 8017e9e:	e005      	b.n	8017eac <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8017ea0:	6839      	ldr	r1, [r7, #0]
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f7fb f978 	bl	8013198 <_fx_file_seek>
 8017ea8:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8017eaa:	68fb      	ldr	r3, [r7, #12]
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3710      	adds	r7, #16
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	2400006c 	.word	0x2400006c
 8017eb8:	240043cc 	.word	0x240043cc
 8017ebc:	24004514 	.word	0x24004514

08017ec0 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b086      	sub	sp, #24
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d002      	beq.n	8017ed8 <_fxe_file_write+0x18>
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d101      	bne.n	8017edc <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 8017ed8:	2318      	movs	r3, #24
 8017eda:	e01a      	b.n	8017f12 <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017edc:	f3ef 8305 	mrs	r3, IPSR
 8017ee0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8017ee2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017ee4:	4b0d      	ldr	r3, [pc, #52]	; (8017f1c <_fxe_file_write+0x5c>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d108      	bne.n	8017f00 <_fxe_file_write+0x40>
 8017eee:	4b0c      	ldr	r3, [pc, #48]	; (8017f20 <_fxe_file_write+0x60>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d004      	beq.n	8017f00 <_fxe_file_write+0x40>
 8017ef6:	4b0a      	ldr	r3, [pc, #40]	; (8017f20 <_fxe_file_write+0x60>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	4a0a      	ldr	r2, [pc, #40]	; (8017f24 <_fxe_file_write+0x64>)
 8017efc:	4293      	cmp	r3, r2
 8017efe:	d101      	bne.n	8017f04 <_fxe_file_write+0x44>
 8017f00:	2320      	movs	r3, #32
 8017f02:	e006      	b.n	8017f12 <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 8017f04:	687a      	ldr	r2, [r7, #4]
 8017f06:	68b9      	ldr	r1, [r7, #8]
 8017f08:	68f8      	ldr	r0, [r7, #12]
 8017f0a:	f7fb f957 	bl	80131bc <_fx_file_write>
 8017f0e:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8017f10:	697b      	ldr	r3, [r7, #20]
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3718      	adds	r7, #24
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	2400006c 	.word	0x2400006c
 8017f20:	240043cc 	.word	0x240043cc
 8017f24:	24004514 	.word	0x24004514

08017f28 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b084      	sub	sp, #16
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d101      	bne.n	8017f3a <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 8017f36:	2318      	movs	r3, #24
 8017f38:	e018      	b.n	8017f6c <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017f3a:	f3ef 8305 	mrs	r3, IPSR
 8017f3e:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017f40:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017f42:	4b0c      	ldr	r3, [pc, #48]	; (8017f74 <_fxe_media_close+0x4c>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	4313      	orrs	r3, r2
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d108      	bne.n	8017f5e <_fxe_media_close+0x36>
 8017f4c:	4b0a      	ldr	r3, [pc, #40]	; (8017f78 <_fxe_media_close+0x50>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d004      	beq.n	8017f5e <_fxe_media_close+0x36>
 8017f54:	4b08      	ldr	r3, [pc, #32]	; (8017f78 <_fxe_media_close+0x50>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4a08      	ldr	r2, [pc, #32]	; (8017f7c <_fxe_media_close+0x54>)
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d101      	bne.n	8017f62 <_fxe_media_close+0x3a>
 8017f5e:	2320      	movs	r3, #32
 8017f60:	e004      	b.n	8017f6c <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7fc f9aa 	bl	80142bc <_fx_media_close>
 8017f68:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8017f6a:	68fb      	ldr	r3, [r7, #12]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3710      	adds	r7, #16
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}
 8017f74:	2400006c 	.word	0x2400006c
 8017f78:	240043cc 	.word	0x240043cc
 8017f7c:	24004514 	.word	0x24004514

08017f80 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b084      	sub	sp, #16
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8017f8e:	2318      	movs	r3, #24
 8017f90:	e018      	b.n	8017fc4 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8017f92:	f3ef 8305 	mrs	r3, IPSR
 8017f96:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8017f98:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8017f9a:	4b0c      	ldr	r3, [pc, #48]	; (8017fcc <_fxe_media_flush+0x4c>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	4313      	orrs	r3, r2
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d108      	bne.n	8017fb6 <_fxe_media_flush+0x36>
 8017fa4:	4b0a      	ldr	r3, [pc, #40]	; (8017fd0 <_fxe_media_flush+0x50>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d004      	beq.n	8017fb6 <_fxe_media_flush+0x36>
 8017fac:	4b08      	ldr	r3, [pc, #32]	; (8017fd0 <_fxe_media_flush+0x50>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a08      	ldr	r2, [pc, #32]	; (8017fd4 <_fxe_media_flush+0x54>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d101      	bne.n	8017fba <_fxe_media_flush+0x3a>
 8017fb6:	2320      	movs	r3, #32
 8017fb8:	e004      	b.n	8017fc4 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f7fc fb56 	bl	801466c <_fx_media_flush>
 8017fc0:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8017fc2:	68fb      	ldr	r3, [r7, #12]
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	3710      	adds	r7, #16
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	2400006c 	.word	0x2400006c
 8017fd0:	240043cc 	.word	0x240043cc
 8017fd4:	24004514 	.word	0x24004514

08017fd8 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b08e      	sub	sp, #56	; 0x38
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
 8017fe4:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d00a      	beq.n	8018002 <_fxe_media_open+0x2a>
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d007      	beq.n	8018002 <_fxe_media_open+0x2a>
 8017ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d004      	beq.n	8018002 <_fxe_media_open+0x2a>
 8017ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ffa:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8017ffe:	4293      	cmp	r3, r2
 8018000:	d001      	beq.n	8018006 <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 8018002:	2318      	movs	r3, #24
 8018004:	e071      	b.n	80180ea <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018006:	f3ef 8305 	mrs	r3, IPSR
 801800a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801800c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801800e:	4b39      	ldr	r3, [pc, #228]	; (80180f4 <_fxe_media_open+0x11c>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	4313      	orrs	r3, r2
 8018014:	2b00      	cmp	r3, #0
 8018016:	d108      	bne.n	801802a <_fxe_media_open+0x52>
 8018018:	4b37      	ldr	r3, [pc, #220]	; (80180f8 <_fxe_media_open+0x120>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d004      	beq.n	801802a <_fxe_media_open+0x52>
 8018020:	4b35      	ldr	r3, [pc, #212]	; (80180f8 <_fxe_media_open+0x120>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4a35      	ldr	r2, [pc, #212]	; (80180fc <_fxe_media_open+0x124>)
 8018026:	4293      	cmp	r3, r2
 8018028:	d101      	bne.n	801802e <_fxe_media_open+0x56>
 801802a:	2320      	movs	r3, #32
 801802c:	e05d      	b.n	80180ea <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 801802e:	4b34      	ldr	r3, [pc, #208]	; (8018100 <_fxe_media_open+0x128>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	425b      	negs	r3, r3
 8018038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801803a:	4013      	ands	r3, r2
 801803c:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 801803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018040:	2b01      	cmp	r3, #1
 8018042:	d004      	beq.n	801804e <_fxe_media_open+0x76>
 8018044:	4b2e      	ldr	r3, [pc, #184]	; (8018100 <_fxe_media_open+0x128>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801804a:	429a      	cmp	r2, r3
 801804c:	d001      	beq.n	8018052 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801804e:	2302      	movs	r3, #2
 8018050:	e04b      	b.n	80180ea <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8018052:	4b2c      	ldr	r3, [pc, #176]	; (8018104 <_fxe_media_open+0x12c>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8018058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801805a:	425b      	negs	r3, r3
 801805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801805e:	4013      	ands	r3, r2
 8018060:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8018062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018064:	2b01      	cmp	r3, #1
 8018066:	d004      	beq.n	8018072 <_fxe_media_open+0x9a>
 8018068:	4b26      	ldr	r3, [pc, #152]	; (8018104 <_fxe_media_open+0x12c>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801806e:	429a      	cmp	r2, r3
 8018070:	d001      	beq.n	8018076 <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8018072:	2302      	movs	r3, #2
 8018074:	e039      	b.n	80180ea <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8018076:	f001 fd3f 	bl	8019af8 <_tx_thread_identify>
 801807a:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 801807c:	f107 0314 	add.w	r3, r7, #20
 8018080:	461a      	mov	r2, r3
 8018082:	2100      	movs	r1, #0
 8018084:	6a38      	ldr	r0, [r7, #32]
 8018086:	f001 fd91 	bl	8019bac <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 801808a:	4b1f      	ldr	r3, [pc, #124]	; (8018108 <_fxe_media_open+0x130>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8018090:	4b1e      	ldr	r3, [pc, #120]	; (801810c <_fxe_media_open+0x134>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8018096:	e010      	b.n	80180ba <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8018098:	68fa      	ldr	r2, [r7, #12]
 801809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809c:	429a      	cmp	r2, r3
 801809e:	d108      	bne.n	80180b2 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80180a0:	697b      	ldr	r3, [r7, #20]
 80180a2:	f107 0214 	add.w	r2, r7, #20
 80180a6:	4619      	mov	r1, r3
 80180a8:	6a38      	ldr	r0, [r7, #32]
 80180aa:	f001 fd7f 	bl	8019bac <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 80180ae:	2318      	movs	r3, #24
 80180b0:	e01b      	b.n	80180ea <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 80180b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80180b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 80180ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180bc:	1e5a      	subs	r2, r3, #1
 80180be:	62ba      	str	r2, [r7, #40]	; 0x28
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d1e9      	bne.n	8018098 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	f107 0214 	add.w	r2, r7, #20
 80180ca:	4619      	mov	r1, r3
 80180cc:	6a38      	ldr	r0, [r7, #32]
 80180ce:	f001 fd6d 	bl	8019bac <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 80180d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180d4:	9301      	str	r3, [sp, #4]
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	687a      	ldr	r2, [r7, #4]
 80180de:	68b9      	ldr	r1, [r7, #8]
 80180e0:	68f8      	ldr	r0, [r7, #12]
 80180e2:	f7fc fc4f 	bl	8014984 <_fx_media_open>
 80180e6:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 80180e8:	69fb      	ldr	r3, [r7, #28]
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	3730      	adds	r7, #48	; 0x30
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
 80180f2:	bf00      	nop
 80180f4:	2400006c 	.word	0x2400006c
 80180f8:	240043cc 	.word	0x240043cc
 80180fc:	24004514 	.word	0x24004514
 8018100:	24004354 	.word	0x24004354
 8018104:	24004358 	.word	0x24004358
 8018108:	24004344 	.word	0x24004344
 801810c:	24004348 	.word	0x24004348

08018110 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b096      	sub	sp, #88	; 0x58
 8018114:	af00      	add	r7, sp, #0
 8018116:	60f8      	str	r0, [r7, #12]
 8018118:	60b9      	str	r1, [r7, #8]
 801811a:	607a      	str	r2, [r7, #4]
 801811c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	3303      	adds	r3, #3
 8018122:	f023 0303 	bic.w	r3, r3, #3
 8018126:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018128:	f3ef 8310 	mrs	r3, PRIMASK
 801812c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8018130:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8018132:	b672      	cpsid	i
    return(int_posture);
 8018134:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8018136:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018138:	4b55      	ldr	r3, [pc, #340]	; (8018290 <_tx_byte_allocate+0x180>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 801813e:	2300      	movs	r3, #0
 8018140:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018146:	621a      	str	r2, [r3, #32]
 8018148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801814a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814e:	f383 8810 	msr	PRIMASK, r3
}
 8018152:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8018154:	6879      	ldr	r1, [r7, #4]
 8018156:	68f8      	ldr	r0, [r7, #12]
 8018158:	f000 f9b2 	bl	80184c0 <_tx_byte_pool_search>
 801815c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801815e:	f3ef 8310 	mrs	r3, PRIMASK
 8018162:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8018164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8018166:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8018168:	b672      	cpsid	i
    return(int_posture);
 801816a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 801816c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801816e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018170:	2b00      	cmp	r3, #0
 8018172:	d002      	beq.n	801817a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8018174:	2301      	movs	r3, #1
 8018176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018178:	e006      	b.n	8018188 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	6a1b      	ldr	r3, [r3, #32]
 801817e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018180:	429a      	cmp	r2, r3
 8018182:	d101      	bne.n	8018188 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8018184:	2301      	movs	r3, #1
 8018186:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8018188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801818a:	2b00      	cmp	r3, #0
 801818c:	d0d9      	beq.n	8018142 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018192:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8018194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018196:	2b00      	cmp	r3, #0
 8018198:	d008      	beq.n	80181ac <_tx_byte_allocate+0x9c>
 801819a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801819c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801819e:	6a3b      	ldr	r3, [r7, #32]
 80181a0:	f383 8810 	msr	PRIMASK, r3
}
 80181a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80181a6:	2300      	movs	r3, #0
 80181a8:	653b      	str	r3, [r7, #80]	; 0x50
 80181aa:	e06c      	b.n	8018286 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d061      	beq.n	8018276 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80181b2:	4b38      	ldr	r3, [pc, #224]	; (8018294 <_tx_byte_allocate+0x184>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d007      	beq.n	80181ca <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80181ba:	2310      	movs	r3, #16
 80181bc:	653b      	str	r3, [r7, #80]	; 0x50
 80181be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80181c2:	69fb      	ldr	r3, [r7, #28]
 80181c4:	f383 8810 	msr	PRIMASK, r3
}
 80181c8:	e05d      	b.n	8018286 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80181ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181cc:	4a32      	ldr	r2, [pc, #200]	; (8018298 <_tx_byte_allocate+0x188>)
 80181ce:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80181d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181d2:	68fa      	ldr	r2, [r7, #12]
 80181d4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80181d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181d8:	68ba      	ldr	r2, [r7, #8]
 80181da:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80181dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80181e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80181e8:	1c5a      	adds	r2, r3, #1
 80181ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181f4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181fa:	1c5a      	adds	r2, r3, #1
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8018200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018202:	2b00      	cmp	r3, #0
 8018204:	d109      	bne.n	801821a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801820a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801820c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801820e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018210:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8018212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018216:	675a      	str	r2, [r3, #116]	; 0x74
 8018218:	e011      	b.n	801823e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801821e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8018220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018224:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8018226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801822a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801822c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801822e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018230:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8018232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018236:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8018238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801823c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 801823e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018240:	2209      	movs	r2, #9
 8018242:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8018244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018246:	2201      	movs	r2, #1
 8018248:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801824a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801824c:	683a      	ldr	r2, [r7, #0]
 801824e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8018250:	4b10      	ldr	r3, [pc, #64]	; (8018294 <_tx_byte_allocate+0x184>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	3301      	adds	r3, #1
 8018256:	4a0f      	ldr	r2, [pc, #60]	; (8018294 <_tx_byte_allocate+0x184>)
 8018258:	6013      	str	r3, [r2, #0]
 801825a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801825c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801825e:	69bb      	ldr	r3, [r7, #24]
 8018260:	f383 8810 	msr	PRIMASK, r3
}
 8018264:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8018266:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8018268:	f001 ff1a 	bl	801a0a0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801826c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801826e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018272:	653b      	str	r3, [r7, #80]	; 0x50
 8018274:	e007      	b.n	8018286 <_tx_byte_allocate+0x176>
 8018276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018278:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	f383 8810 	msr	PRIMASK, r3
}
 8018280:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8018282:	2310      	movs	r3, #16
 8018284:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8018286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8018288:	4618      	mov	r0, r3
 801828a:	3758      	adds	r7, #88	; 0x58
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	240043cc 	.word	0x240043cc
 8018294:	24004464 	.word	0x24004464
 8018298:	0801829d 	.word	0x0801829d

0801829c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b08e      	sub	sp, #56	; 0x38
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80182a6:	f3ef 8310 	mrs	r3, PRIMASK
 80182aa:	623b      	str	r3, [r7, #32]
    return(posture);
 80182ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80182ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80182b0:	b672      	cpsid	i
    return(int_posture);
 80182b2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80182b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182ba:	4a33      	ldr	r2, [pc, #204]	; (8018388 <_tx_byte_pool_cleanup+0xec>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d158      	bne.n	8018372 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80182c6:	683a      	ldr	r2, [r7, #0]
 80182c8:	429a      	cmp	r2, r3
 80182ca:	d152      	bne.n	8018372 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182d0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d04c      	beq.n	8018372 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80182d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4a2b      	ldr	r2, [pc, #172]	; (801838c <_tx_byte_pool_cleanup+0xf0>)
 80182de:	4293      	cmp	r3, r2
 80182e0:	d147      	bne.n	8018372 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80182e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d043      	beq.n	8018372 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2200      	movs	r2, #0
 80182ee:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80182f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182f4:	1e5a      	subs	r2, r3, #1
 80182f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80182fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8018300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018302:	2b00      	cmp	r3, #0
 8018304:	d103      	bne.n	801830e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8018306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018308:	2200      	movs	r2, #0
 801830a:	625a      	str	r2, [r3, #36]	; 0x24
 801830c:	e013      	b.n	8018336 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018312:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018318:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801831e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8018320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018324:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8018326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801832a:	687a      	ldr	r2, [r7, #4]
 801832c:	429a      	cmp	r2, r3
 801832e:	d102      	bne.n	8018336 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8018330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018334:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801833a:	2b09      	cmp	r3, #9
 801833c:	d119      	bne.n	8018372 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	2210      	movs	r2, #16
 8018342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8018346:	4b12      	ldr	r3, [pc, #72]	; (8018390 <_tx_byte_pool_cleanup+0xf4>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	3301      	adds	r3, #1
 801834c:	4a10      	ldr	r2, [pc, #64]	; (8018390 <_tx_byte_pool_cleanup+0xf4>)
 801834e:	6013      	str	r3, [r2, #0]
 8018350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018352:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	f383 8810 	msr	PRIMASK, r3
}
 801835a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f001 fd9f 	bl	8019ea0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018362:	f3ef 8310 	mrs	r3, PRIMASK
 8018366:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018368:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801836a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801836c:	b672      	cpsid	i
    return(int_posture);
 801836e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8018370:	637b      	str	r3, [r7, #52]	; 0x34
 8018372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018374:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f383 8810 	msr	PRIMASK, r3
}
 801837c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801837e:	bf00      	nop
 8018380:	3738      	adds	r7, #56	; 0x38
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	0801829d 	.word	0x0801829d
 801838c:	42595445 	.word	0x42595445
 8018390:	24004464 	.word	0x24004464

08018394 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b08e      	sub	sp, #56	; 0x38
 8018398:	af00      	add	r7, sp, #0
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	60b9      	str	r1, [r7, #8]
 801839e:	607a      	str	r2, [r7, #4]
 80183a0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80183a2:	2234      	movs	r2, #52	; 0x34
 80183a4:	2100      	movs	r1, #0
 80183a6:	68f8      	ldr	r0, [r7, #12]
 80183a8:	f002 fe66 	bl	801b078 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	f023 0303 	bic.w	r3, r3, #3
 80183b2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	68ba      	ldr	r2, [r7, #8]
 80183b8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	683a      	ldr	r2, [r7, #0]
 80183c4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	687a      	ldr	r2, [r7, #4]
 80183ca:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	687a      	ldr	r2, [r7, #4]
 80183d0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	f1a3 0208 	sub.w	r2, r3, #8
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2202      	movs	r2, #2
 80183e0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80183e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	4413      	add	r3, r2
 80183ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80183ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f0:	3b04      	subs	r3, #4
 80183f2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80183f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80183fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018400:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8018402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018404:	3b04      	subs	r3, #4
 8018406:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8018408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801840a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8018416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018418:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801841e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8018424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018426:	3304      	adds	r3, #4
 8018428:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801842c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018430:	4a1f      	ldr	r2, [pc, #124]	; (80184b0 <_tx_byte_pool_create+0x11c>)
 8018432:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2200      	movs	r2, #0
 8018438:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801843a:	f3ef 8310 	mrs	r3, PRIMASK
 801843e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018440:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018442:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018444:	b672      	cpsid	i
    return(int_posture);
 8018446:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8018448:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	4a19      	ldr	r2, [pc, #100]	; (80184b4 <_tx_byte_pool_create+0x120>)
 801844e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8018450:	4b19      	ldr	r3, [pc, #100]	; (80184b8 <_tx_byte_pool_create+0x124>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d109      	bne.n	801846c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8018458:	4a18      	ldr	r2, [pc, #96]	; (80184bc <_tx_byte_pool_create+0x128>)
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	68fa      	ldr	r2, [r7, #12]
 8018462:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	68fa      	ldr	r2, [r7, #12]
 8018468:	631a      	str	r2, [r3, #48]	; 0x30
 801846a:	e011      	b.n	8018490 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801846c:	4b13      	ldr	r3, [pc, #76]	; (80184bc <_tx_byte_pool_create+0x128>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8018472:	6a3b      	ldr	r3, [r7, #32]
 8018474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018476:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8018478:	6a3b      	ldr	r3, [r7, #32]
 801847a:	68fa      	ldr	r2, [r7, #12]
 801847c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801847e:	69fb      	ldr	r3, [r7, #28]
 8018480:	68fa      	ldr	r2, [r7, #12]
 8018482:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	69fa      	ldr	r2, [r7, #28]
 8018488:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	6a3a      	ldr	r2, [r7, #32]
 801848e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8018490:	4b09      	ldr	r3, [pc, #36]	; (80184b8 <_tx_byte_pool_create+0x124>)
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	3301      	adds	r3, #1
 8018496:	4a08      	ldr	r2, [pc, #32]	; (80184b8 <_tx_byte_pool_create+0x124>)
 8018498:	6013      	str	r3, [r2, #0]
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	f383 8810 	msr	PRIMASK, r3
}
 80184a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80184a6:	2300      	movs	r3, #0
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3738      	adds	r7, #56	; 0x38
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	ffffeeee 	.word	0xffffeeee
 80184b4:	42595445 	.word	0x42595445
 80184b8:	240043c0 	.word	0x240043c0
 80184bc:	240043bc 	.word	0x240043bc

080184c0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80184c0:	b480      	push	{r7}
 80184c2:	b097      	sub	sp, #92	; 0x5c
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80184ca:	2300      	movs	r3, #0
 80184cc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80184ce:	f3ef 8310 	mrs	r3, PRIMASK
 80184d2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80184d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80184d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80184d8:	b672      	cpsid	i
    return(int_posture);
 80184da:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80184dc:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	689a      	ldr	r2, [r3, #8]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	68db      	ldr	r3, [r3, #12]
 80184e6:	3b02      	subs	r3, #2
 80184e8:	00db      	lsls	r3, r3, #3
 80184ea:	4413      	add	r3, r2
 80184ec:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80184ee:	683a      	ldr	r2, [r7, #0]
 80184f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d308      	bcc.n	8018508 <_tx_byte_pool_search+0x48>
 80184f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	f383 8810 	msr	PRIMASK, r3
}
 8018500:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8018502:	2300      	movs	r3, #0
 8018504:	653b      	str	r3, [r7, #80]	; 0x50
 8018506:	e0dd      	b.n	80186c4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8018508:	4b72      	ldr	r3, [pc, #456]	; (80186d4 <_tx_byte_pool_search+0x214>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018512:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	695b      	ldr	r3, [r3, #20]
 8018518:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	3301      	adds	r3, #1
 8018520:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8018522:	2300      	movs	r3, #0
 8018524:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8018526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018528:	3304      	adds	r3, #4
 801852a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801852e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8018530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4a68      	ldr	r2, [pc, #416]	; (80186d8 <_tx_byte_pool_search+0x218>)
 8018536:	4293      	cmp	r3, r2
 8018538:	d143      	bne.n	80185c2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801853a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801853c:	2b00      	cmp	r3, #0
 801853e:	d104      	bne.n	801854a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018544:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8018546:	2301      	movs	r3, #1
 8018548:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801854a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801854c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 801854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8018554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018558:	1ad3      	subs	r3, r2, r3
 801855a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801855c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801855e:	3b08      	subs	r3, #8
 8018560:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8018562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	429a      	cmp	r2, r3
 8018568:	d257      	bcs.n	801861a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801856a:	2300      	movs	r3, #0
 801856c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018570:	3304      	adds	r3, #4
 8018572:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8018574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018576:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8018578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	4a56      	ldr	r2, [pc, #344]	; (80186d8 <_tx_byte_pool_search+0x218>)
 801857e:	4293      	cmp	r3, r2
 8018580:	d113      	bne.n	80185aa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8018582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018584:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8018586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018588:	681a      	ldr	r2, [r3, #0]
 801858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	68db      	ldr	r3, [r3, #12]
 8018592:	1e5a      	subs	r2, r3, #1
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	695b      	ldr	r3, [r3, #20]
 801859c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801859e:	429a      	cmp	r2, r3
 80185a0:	d114      	bne.n	80185cc <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185a6:	615a      	str	r2, [r3, #20]
 80185a8:	e010      	b.n	80185cc <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80185aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ac:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80185ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80185b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d008      	beq.n	80185cc <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80185ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185bc:	3b01      	subs	r3, #1
 80185be:	64bb      	str	r3, [r7, #72]	; 0x48
 80185c0:	e004      	b.n	80185cc <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80185c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185c4:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80185c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80185cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d002      	beq.n	80185d8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80185d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185d4:	3b01      	subs	r3, #1
 80185d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80185d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80185dc:	693b      	ldr	r3, [r7, #16]
 80185de:	f383 8810 	msr	PRIMASK, r3
}
 80185e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80185e4:	f3ef 8310 	mrs	r3, PRIMASK
 80185e8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80185ea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80185ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80185ee:	b672      	cpsid	i
    return(int_posture);
 80185f0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80185f2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6a1b      	ldr	r3, [r3, #32]
 80185f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80185fa:	429a      	cmp	r2, r3
 80185fc:	d009      	beq.n	8018612 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	695b      	ldr	r3, [r3, #20]
 8018602:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	68db      	ldr	r3, [r3, #12]
 8018608:	3301      	adds	r3, #1
 801860a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018610:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8018612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018614:	2b00      	cmp	r3, #0
 8018616:	d186      	bne.n	8018526 <_tx_byte_pool_search+0x66>
 8018618:	e000      	b.n	801861c <_tx_byte_pool_search+0x15c>
                    break;
 801861a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801861e:	2b00      	cmp	r3, #0
 8018620:	d048      	beq.n	80186b4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8018622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	1ad3      	subs	r3, r2, r3
 8018628:	2b13      	cmp	r3, #19
 801862a:	d91e      	bls.n	801866a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	3308      	adds	r3, #8
 8018630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018632:	4413      	add	r3, r2
 8018634:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8018636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018638:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801863a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801863c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 801863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018640:	681a      	ldr	r2, [r3, #0]
 8018642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018644:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8018646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018648:	3304      	adds	r3, #4
 801864a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801864e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8018650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018652:	4a21      	ldr	r2, [pc, #132]	; (80186d8 <_tx_byte_pool_search+0x218>)
 8018654:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	68db      	ldr	r3, [r3, #12]
 801865a:	1c5a      	adds	r2, r3, #1
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8018660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018664:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801866a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801866c:	3304      	adds	r3, #4
 801866e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8018670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018672:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8018674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018676:	687a      	ldr	r2, [r7, #4]
 8018678:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	689a      	ldr	r2, [r3, #8]
 801867e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018680:	1ad3      	subs	r3, r2, r3
 8018682:	f1a3 0208 	sub.w	r2, r3, #8
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	695b      	ldr	r3, [r3, #20]
 801868e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018690:	429a      	cmp	r2, r3
 8018692:	d105      	bne.n	80186a0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8018694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018696:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8018698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801869a:	681a      	ldr	r2, [r3, #0]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	615a      	str	r2, [r3, #20]
 80186a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	f383 8810 	msr	PRIMASK, r3
}
 80186aa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80186ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186ae:	3308      	adds	r3, #8
 80186b0:	653b      	str	r3, [r7, #80]	; 0x50
 80186b2:	e007      	b.n	80186c4 <_tx_byte_pool_search+0x204>
 80186b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	f383 8810 	msr	PRIMASK, r3
}
 80186be:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80186c0:	2300      	movs	r3, #0
 80186c2:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80186c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	375c      	adds	r7, #92	; 0x5c
 80186ca:	46bd      	mov	sp, r7
 80186cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d0:	4770      	bx	lr
 80186d2:	bf00      	nop
 80186d4:	240043cc 	.word	0x240043cc
 80186d8:	ffffeeee 	.word	0xffffeeee

080186dc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80186e0:	f001 fa28 	bl	8019b34 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80186e4:	f001 ff26 	bl	801a534 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80186e8:	4b12      	ldr	r3, [pc, #72]	; (8018734 <_tx_initialize_high_level+0x58>)
 80186ea:	2200      	movs	r2, #0
 80186ec:	601a      	str	r2, [r3, #0]
 80186ee:	4b12      	ldr	r3, [pc, #72]	; (8018738 <_tx_initialize_high_level+0x5c>)
 80186f0:	2200      	movs	r2, #0
 80186f2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80186f4:	4b11      	ldr	r3, [pc, #68]	; (801873c <_tx_initialize_high_level+0x60>)
 80186f6:	2200      	movs	r2, #0
 80186f8:	601a      	str	r2, [r3, #0]
 80186fa:	4b11      	ldr	r3, [pc, #68]	; (8018740 <_tx_initialize_high_level+0x64>)
 80186fc:	2200      	movs	r2, #0
 80186fe:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8018700:	4b10      	ldr	r3, [pc, #64]	; (8018744 <_tx_initialize_high_level+0x68>)
 8018702:	2200      	movs	r2, #0
 8018704:	601a      	str	r2, [r3, #0]
 8018706:	4b10      	ldr	r3, [pc, #64]	; (8018748 <_tx_initialize_high_level+0x6c>)
 8018708:	2200      	movs	r2, #0
 801870a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801870c:	4b0f      	ldr	r3, [pc, #60]	; (801874c <_tx_initialize_high_level+0x70>)
 801870e:	2200      	movs	r2, #0
 8018710:	601a      	str	r2, [r3, #0]
 8018712:	4b0f      	ldr	r3, [pc, #60]	; (8018750 <_tx_initialize_high_level+0x74>)
 8018714:	2200      	movs	r2, #0
 8018716:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8018718:	4b0e      	ldr	r3, [pc, #56]	; (8018754 <_tx_initialize_high_level+0x78>)
 801871a:	2200      	movs	r2, #0
 801871c:	601a      	str	r2, [r3, #0]
 801871e:	4b0e      	ldr	r3, [pc, #56]	; (8018758 <_tx_initialize_high_level+0x7c>)
 8018720:	2200      	movs	r2, #0
 8018722:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8018724:	4b0d      	ldr	r3, [pc, #52]	; (801875c <_tx_initialize_high_level+0x80>)
 8018726:	2200      	movs	r2, #0
 8018728:	601a      	str	r2, [r3, #0]
 801872a:	4b0d      	ldr	r3, [pc, #52]	; (8018760 <_tx_initialize_high_level+0x84>)
 801872c:	2200      	movs	r2, #0
 801872e:	601a      	str	r2, [r3, #0]
#endif
}
 8018730:	bf00      	nop
 8018732:	bd80      	pop	{r7, pc}
 8018734:	24004394 	.word	0x24004394
 8018738:	24004398 	.word	0x24004398
 801873c:	2400439c 	.word	0x2400439c
 8018740:	240043a0 	.word	0x240043a0
 8018744:	240043a4 	.word	0x240043a4
 8018748:	240043a8 	.word	0x240043a8
 801874c:	240043b4 	.word	0x240043b4
 8018750:	240043b8 	.word	0x240043b8
 8018754:	240043bc 	.word	0x240043bc
 8018758:	240043c0 	.word	0x240043c0
 801875c:	240043ac 	.word	0x240043ac
 8018760:	240043b0 	.word	0x240043b0

08018764 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8018768:	4b10      	ldr	r3, [pc, #64]	; (80187ac <_tx_initialize_kernel_enter+0x48>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8018770:	d00c      	beq.n	801878c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8018772:	4b0e      	ldr	r3, [pc, #56]	; (80187ac <_tx_initialize_kernel_enter+0x48>)
 8018774:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8018778:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801877a:	f7e7 fdb1 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801877e:	f7ff ffad 	bl	80186dc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8018782:	4b0b      	ldr	r3, [pc, #44]	; (80187b0 <_tx_initialize_kernel_enter+0x4c>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	3301      	adds	r3, #1
 8018788:	4a09      	ldr	r2, [pc, #36]	; (80187b0 <_tx_initialize_kernel_enter+0x4c>)
 801878a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801878c:	4b07      	ldr	r3, [pc, #28]	; (80187ac <_tx_initialize_kernel_enter+0x48>)
 801878e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8018792:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8018794:	4b07      	ldr	r3, [pc, #28]	; (80187b4 <_tx_initialize_kernel_enter+0x50>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	4618      	mov	r0, r3
 801879a:	f7e8 f89f 	bl	80008dc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801879e:	4b03      	ldr	r3, [pc, #12]	; (80187ac <_tx_initialize_kernel_enter+0x48>)
 80187a0:	2200      	movs	r2, #0
 80187a2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80187a4:	f7e7 fddc 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80187a8:	bf00      	nop
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	2400006c 	.word	0x2400006c
 80187b0:	24004464 	.word	0x24004464
 80187b4:	240043c4 	.word	0x240043c4

080187b8 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b08e      	sub	sp, #56	; 0x38
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80187c2:	f3ef 8310 	mrs	r3, PRIMASK
 80187c6:	623b      	str	r3, [r7, #32]
    return(posture);
 80187c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80187ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80187cc:	b672      	cpsid	i
    return(int_posture);
 80187ce:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80187d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80187d6:	4a33      	ldr	r2, [pc, #204]	; (80188a4 <_tx_mutex_cleanup+0xec>)
 80187d8:	4293      	cmp	r3, r2
 80187da:	d158      	bne.n	801888e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80187e2:	683a      	ldr	r2, [r7, #0]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d152      	bne.n	801888e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187ec:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80187ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d04c      	beq.n	801888e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80187f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	4a2b      	ldr	r2, [pc, #172]	; (80188a8 <_tx_mutex_cleanup+0xf0>)
 80187fa:	4293      	cmp	r3, r2
 80187fc:	d147      	bne.n	801888e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80187fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018800:	69db      	ldr	r3, [r3, #28]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d043      	beq.n	801888e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	2200      	movs	r2, #0
 801880a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801880e:	69db      	ldr	r3, [r3, #28]
 8018810:	1e5a      	subs	r2, r3, #1
 8018812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018814:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8018816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018818:	69db      	ldr	r3, [r3, #28]
 801881a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881e:	2b00      	cmp	r3, #0
 8018820:	d103      	bne.n	801882a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8018822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018824:	2200      	movs	r2, #0
 8018826:	619a      	str	r2, [r3, #24]
 8018828:	e013      	b.n	8018852 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801882e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018834:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8018836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801883a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018840:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8018842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018844:	699b      	ldr	r3, [r3, #24]
 8018846:	687a      	ldr	r2, [r7, #4]
 8018848:	429a      	cmp	r2, r3
 801884a:	d102      	bne.n	8018852 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018850:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018856:	2b0d      	cmp	r3, #13
 8018858:	d119      	bne.n	801888e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	221d      	movs	r2, #29
 801885e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8018862:	4b12      	ldr	r3, [pc, #72]	; (80188ac <_tx_mutex_cleanup+0xf4>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	3301      	adds	r3, #1
 8018868:	4a10      	ldr	r2, [pc, #64]	; (80188ac <_tx_mutex_cleanup+0xf4>)
 801886a:	6013      	str	r3, [r2, #0]
 801886c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801886e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018870:	693b      	ldr	r3, [r7, #16]
 8018872:	f383 8810 	msr	PRIMASK, r3
}
 8018876:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f001 fb11 	bl	8019ea0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801887e:	f3ef 8310 	mrs	r3, PRIMASK
 8018882:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018884:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018886:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018888:	b672      	cpsid	i
    return(int_posture);
 801888a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801888c:	637b      	str	r3, [r7, #52]	; 0x34
 801888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018890:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	f383 8810 	msr	PRIMASK, r3
}
 8018898:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801889a:	bf00      	nop
 801889c:	3738      	adds	r7, #56	; 0x38
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}
 80188a2:	bf00      	nop
 80188a4:	080187b9 	.word	0x080187b9
 80188a8:	4d555445 	.word	0x4d555445
 80188ac:	24004464 	.word	0x24004464

080188b0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b08a      	sub	sp, #40	; 0x28
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80188b8:	f3ef 8310 	mrs	r3, PRIMASK
 80188bc:	61fb      	str	r3, [r7, #28]
    return(posture);
 80188be:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80188c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80188c2:	b672      	cpsid	i
    return(int_posture);
 80188c4:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80188c8:	4b1a      	ldr	r3, [pc, #104]	; (8018934 <_tx_mutex_thread_release+0x84>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	3301      	adds	r3, #1
 80188ce:	4a19      	ldr	r2, [pc, #100]	; (8018934 <_tx_mutex_thread_release+0x84>)
 80188d0:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80188d8:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80188da:	6a3b      	ldr	r3, [r7, #32]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d017      	beq.n	8018910 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80188e0:	6a3b      	ldr	r3, [r7, #32]
 80188e2:	2201      	movs	r2, #1
 80188e4:	609a      	str	r2, [r3, #8]
 80188e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	f383 8810 	msr	PRIMASK, r3
}
 80188f0:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80188f2:	6a38      	ldr	r0, [r7, #32]
 80188f4:	f000 fb9c 	bl	8019030 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80188f8:	f3ef 8310 	mrs	r3, PRIMASK
 80188fc:	617b      	str	r3, [r7, #20]
    return(posture);
 80188fe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8018900:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018902:	b672      	cpsid	i
    return(int_posture);
 8018904:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8018906:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801890e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8018910:	6a3b      	ldr	r3, [r7, #32]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d1dd      	bne.n	80188d2 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8018916:	4b07      	ldr	r3, [pc, #28]	; (8018934 <_tx_mutex_thread_release+0x84>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	3b01      	subs	r3, #1
 801891c:	4a05      	ldr	r2, [pc, #20]	; (8018934 <_tx_mutex_thread_release+0x84>)
 801891e:	6013      	str	r3, [r2, #0]
 8018920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018922:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	f383 8810 	msr	PRIMASK, r3
}
 801892a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 801892c:	bf00      	nop
 801892e:	3728      	adds	r7, #40	; 0x28
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}
 8018934:	24004464 	.word	0x24004464

08018938 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b08a      	sub	sp, #40	; 0x28
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8018944:	2234      	movs	r2, #52	; 0x34
 8018946:	2100      	movs	r1, #0
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f002 fb95 	bl	801b078 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	68ba      	ldr	r2, [r7, #8]
 8018952:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	687a      	ldr	r2, [r7, #4]
 8018958:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801895a:	f3ef 8310 	mrs	r3, PRIMASK
 801895e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018960:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018962:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018964:	b672      	cpsid	i
    return(int_posture);
 8018966:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8018968:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	4a1a      	ldr	r2, [pc, #104]	; (80189d8 <_tx_mutex_create+0xa0>)
 801896e:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8018970:	4b1a      	ldr	r3, [pc, #104]	; (80189dc <_tx_mutex_create+0xa4>)
 8018972:	4a1b      	ldr	r2, [pc, #108]	; (80189e0 <_tx_mutex_create+0xa8>)
 8018974:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8018976:	4b1b      	ldr	r3, [pc, #108]	; (80189e4 <_tx_mutex_create+0xac>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d109      	bne.n	8018992 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 801897e:	4a1a      	ldr	r2, [pc, #104]	; (80189e8 <_tx_mutex_create+0xb0>)
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	68fa      	ldr	r2, [r7, #12]
 8018988:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	68fa      	ldr	r2, [r7, #12]
 801898e:	625a      	str	r2, [r3, #36]	; 0x24
 8018990:	e011      	b.n	80189b6 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8018992:	4b15      	ldr	r3, [pc, #84]	; (80189e8 <_tx_mutex_create+0xb0>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8018998:	6a3b      	ldr	r3, [r7, #32]
 801899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801899c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801899e:	6a3b      	ldr	r3, [r7, #32]
 80189a0:	68fa      	ldr	r2, [r7, #12]
 80189a2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80189a4:	69fb      	ldr	r3, [r7, #28]
 80189a6:	68fa      	ldr	r2, [r7, #12]
 80189a8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	69fa      	ldr	r2, [r7, #28]
 80189ae:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	6a3a      	ldr	r2, [r7, #32]
 80189b4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80189b6:	4b0b      	ldr	r3, [pc, #44]	; (80189e4 <_tx_mutex_create+0xac>)
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	3301      	adds	r3, #1
 80189bc:	4a09      	ldr	r2, [pc, #36]	; (80189e4 <_tx_mutex_create+0xac>)
 80189be:	6013      	str	r3, [r2, #0]
 80189c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80189c4:	693b      	ldr	r3, [r7, #16]
 80189c6:	f383 8810 	msr	PRIMASK, r3
}
 80189ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80189cc:	2300      	movs	r3, #0
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	3728      	adds	r7, #40	; 0x28
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	4d555445 	.word	0x4d555445
 80189dc:	24004468 	.word	0x24004468
 80189e0:	080188b1 	.word	0x080188b1
 80189e4:	240043b0 	.word	0x240043b0
 80189e8:	240043ac 	.word	0x240043ac

080189ec <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b096      	sub	sp, #88	; 0x58
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80189f4:	f3ef 8310 	mrs	r3, PRIMASK
 80189f8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80189fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80189fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80189fe:	b672      	cpsid	i
    return(int_posture);
 8018a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8018a02:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2200      	movs	r2, #0
 8018a08:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8018a0a:	4b4a      	ldr	r3, [pc, #296]	; (8018b34 <_tx_mutex_delete+0x148>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	4a48      	ldr	r2, [pc, #288]	; (8018b34 <_tx_mutex_delete+0x148>)
 8018a12:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8018a14:	4b47      	ldr	r3, [pc, #284]	; (8018b34 <_tx_mutex_delete+0x148>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d103      	bne.n	8018a24 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8018a1c:	4b46      	ldr	r3, [pc, #280]	; (8018b38 <_tx_mutex_delete+0x14c>)
 8018a1e:	2200      	movs	r2, #0
 8018a20:	601a      	str	r2, [r3, #0]
 8018a22:	e013      	b.n	8018a4c <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6a1b      	ldr	r3, [r3, #32]
 8018a28:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a2e:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8018a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018a34:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8018a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a3a:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8018a3c:	4b3e      	ldr	r3, [pc, #248]	; (8018b38 <_tx_mutex_delete+0x14c>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	429a      	cmp	r2, r3
 8018a44:	d102      	bne.n	8018a4c <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8018a46:	4a3c      	ldr	r2, [pc, #240]	; (8018b38 <_tx_mutex_delete+0x14c>)
 8018a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a4a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8018a4c:	4b3b      	ldr	r3, [pc, #236]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	3301      	adds	r3, #1
 8018a52:	4a3a      	ldr	r2, [pc, #232]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018a54:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	699b      	ldr	r3, [r3, #24]
 8018a5a:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	2200      	movs	r2, #0
 8018a60:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	69db      	ldr	r3, [r3, #28]
 8018a66:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	68db      	ldr	r3, [r3, #12]
 8018a72:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8018a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d013      	beq.n	8018aa2 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	609a      	str	r2, [r3, #8]
 8018a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a86:	f383 8810 	msr	PRIMASK, r3
}
 8018a8a:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f000 facf 	bl	8019030 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018a92:	f3ef 8310 	mrs	r3, PRIMASK
 8018a96:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8018a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8018a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8018a9c:	b672      	cpsid	i
    return(int_posture);
 8018a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8018aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8018aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018aa4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa8:	f383 8810 	msr	PRIMASK, r3
}
 8018aac:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8018aae:	e024      	b.n	8018afa <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8018ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ab2:	3b01      	subs	r3, #1
 8018ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8018aba:	61fb      	str	r3, [r7, #28]
    return(posture);
 8018abc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8018abe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018ac0:	b672      	cpsid	i
    return(int_posture);
 8018ac2:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8018ac4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8018ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ac8:	2200      	movs	r2, #0
 8018aca:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8018acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ace:	2201      	movs	r2, #1
 8018ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8018ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8018ada:	4b18      	ldr	r3, [pc, #96]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	3301      	adds	r3, #1
 8018ae0:	4a16      	ldr	r2, [pc, #88]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018ae2:	6013      	str	r3, [r2, #0]
 8018ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ae6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018ae8:	6a3b      	ldr	r3, [r7, #32]
 8018aea:	f383 8810 	msr	PRIMASK, r3
}
 8018aee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8018af0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018af2:	f001 f9d5 	bl	8019ea0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8018af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018af8:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8018afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d1d7      	bne.n	8018ab0 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018b00:	f3ef 8310 	mrs	r3, PRIMASK
 8018b04:	613b      	str	r3, [r7, #16]
    return(posture);
 8018b06:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8018b08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018b0a:	b672      	cpsid	i
    return(int_posture);
 8018b0c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8018b0e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8018b10:	4b0a      	ldr	r3, [pc, #40]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	3b01      	subs	r3, #1
 8018b16:	4a09      	ldr	r2, [pc, #36]	; (8018b3c <_tx_mutex_delete+0x150>)
 8018b18:	6013      	str	r3, [r2, #0]
 8018b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	f383 8810 	msr	PRIMASK, r3
}
 8018b24:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8018b26:	f001 f981 	bl	8019e2c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8018b2a:	2300      	movs	r3, #0
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3758      	adds	r7, #88	; 0x58
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	240043b0 	.word	0x240043b0
 8018b38:	240043ac 	.word	0x240043ac
 8018b3c:	24004464 	.word	0x24004464

08018b40 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b092      	sub	sp, #72	; 0x48
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8018b4e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8018b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8018b52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018b54:	b672      	cpsid	i
    return(int_posture);
 8018b56:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8018b58:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018b5a:	4b7a      	ldr	r3, [pc, #488]	; (8018d44 <_tx_mutex_get+0x204>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	689b      	ldr	r3, [r3, #8]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d144      	bne.n	8018bf2 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2201      	movs	r2, #1
 8018b6c:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018b72:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8018b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d032      	beq.n	8018be0 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	691b      	ldr	r3, [r3, #16]
 8018b7e:	2b01      	cmp	r3, #1
 8018b80:	d106      	bne.n	8018b90 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8018b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2220      	movs	r2, #32
 8018b8e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8018b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018b96:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8018b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d00f      	beq.n	8018bbe <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8018b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ba2:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8018ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba6:	687a      	ldr	r2, [r7, #4]
 8018ba8:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8018baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bac:	687a      	ldr	r2, [r7, #4]
 8018bae:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bb4:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8018bbc:	e009      	b.n	8018bd2 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8018bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bc0:	687a      	ldr	r2, [r7, #4]
 8018bc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	687a      	ldr	r2, [r7, #4]
 8018bd0:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8018bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018bd8:	1c5a      	adds	r2, r3, #1
 8018bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8018be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018be2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018be4:	69fb      	ldr	r3, [r7, #28]
 8018be6:	f383 8810 	msr	PRIMASK, r3
}
 8018bea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8018bec:	2300      	movs	r3, #0
 8018bee:	647b      	str	r3, [r7, #68]	; 0x44
 8018bf0:	e0a2      	b.n	8018d38 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d10d      	bne.n	8018c18 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	689b      	ldr	r3, [r3, #8]
 8018c00:	1c5a      	adds	r2, r3, #1
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	609a      	str	r2, [r3, #8]
 8018c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018c08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c0a:	69bb      	ldr	r3, [r7, #24]
 8018c0c:	f383 8810 	msr	PRIMASK, r3
}
 8018c10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8018c12:	2300      	movs	r3, #0
 8018c14:	647b      	str	r3, [r7, #68]	; 0x44
 8018c16:	e08f      	b.n	8018d38 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	f000 8084 	beq.w	8018d28 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8018c20:	4b49      	ldr	r3, [pc, #292]	; (8018d48 <_tx_mutex_get+0x208>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d008      	beq.n	8018c3a <_tx_mutex_get+0xfa>
 8018c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018c2a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	f383 8810 	msr	PRIMASK, r3
}
 8018c32:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8018c34:	231d      	movs	r3, #29
 8018c36:	647b      	str	r3, [r7, #68]	; 0x44
 8018c38:	e07e      	b.n	8018d38 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8018c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c42:	4a42      	ldr	r2, [pc, #264]	; (8018d4c <_tx_mutex_get+0x20c>)
 8018c44:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8018c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c48:	687a      	ldr	r2, [r7, #4]
 8018c4a:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8018c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018c52:	1c5a      	adds	r2, r3, #1
 8018c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	69db      	ldr	r3, [r3, #28]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d109      	bne.n	8018c76 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c66:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8018c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c6c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8018c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c72:	675a      	str	r2, [r3, #116]	; 0x74
 8018c74:	e011      	b.n	8018c9a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	699b      	ldr	r3, [r3, #24]
 8018c7a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8018c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018c80:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8018c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c86:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8018c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c8c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8018c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c92:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8018c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c98:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	69db      	ldr	r3, [r3, #28]
 8018c9e:	1c5a      	adds	r2, r3, #1
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8018ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ca6:	220d      	movs	r2, #13
 8018ca8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8018caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cac:	2201      	movs	r2, #1
 8018cae:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8018cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cb2:	683a      	ldr	r2, [r7, #0]
 8018cb4:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8018cb6:	4b24      	ldr	r3, [pc, #144]	; (8018d48 <_tx_mutex_get+0x208>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	3301      	adds	r3, #1
 8018cbc:	4a22      	ldr	r2, [pc, #136]	; (8018d48 <_tx_mutex_get+0x208>)
 8018cbe:	6013      	str	r3, [r2, #0]
 8018cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018cc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	f383 8810 	msr	PRIMASK, r3
}
 8018cca:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	691b      	ldr	r3, [r3, #16]
 8018cd0:	2b01      	cmp	r3, #1
 8018cd2:	d121      	bne.n	8018d18 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	d903      	bls.n	8018ce8 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8018ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8018ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d204      	bcs.n	8018d00 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8018cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8018d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	d905      	bls.n	8018d18 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8018d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d10:	4619      	mov	r1, r3
 8018d12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018d14:	f000 f8ce 	bl	8018eb4 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8018d18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018d1a:	f001 f9c1 	bl	801a0a0 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8018d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d24:	647b      	str	r3, [r7, #68]	; 0x44
 8018d26:	e007      	b.n	8018d38 <_tx_mutex_get+0x1f8>
 8018d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	f383 8810 	msr	PRIMASK, r3
}
 8018d32:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8018d34:	231d      	movs	r3, #29
 8018d36:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8018d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	3748      	adds	r7, #72	; 0x48
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}
 8018d42:	bf00      	nop
 8018d44:	240043cc 	.word	0x240043cc
 8018d48:	24004464 	.word	0x24004464
 8018d4c:	080187b9 	.word	0x080187b9

08018d50 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b092      	sub	sp, #72	; 0x48
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018d58:	f3ef 8310 	mrs	r3, PRIMASK
 8018d5c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8018d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8018d60:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018d62:	b672      	cpsid	i
    return(int_posture);
 8018d64:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8018d66:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	69db      	ldr	r3, [r3, #28]
 8018d6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8018d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d805      	bhi.n	8018d80 <_tx_mutex_prioritize+0x30>
 8018d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d76:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018d78:	69fb      	ldr	r3, [r7, #28]
 8018d7a:	f383 8810 	msr	PRIMASK, r3
}
 8018d7e:	e092      	b.n	8018ea6 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8018d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d82:	2b02      	cmp	r3, #2
 8018d84:	d114      	bne.n	8018db0 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	699b      	ldr	r3, [r3, #24]
 8018d8a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8018d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d90:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8018d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d202      	bcs.n	8018da4 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018da2:	619a      	str	r2, [r3, #24]
 8018da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018da6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018da8:	69bb      	ldr	r3, [r7, #24]
 8018daa:	f383 8810 	msr	PRIMASK, r3
}
 8018dae:	e07a      	b.n	8018ea6 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	699b      	ldr	r3, [r3, #24]
 8018db4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8018db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018db8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8018dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018dbe:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8018dc0:	4b3b      	ldr	r3, [pc, #236]	; (8018eb0 <_tx_mutex_prioritize+0x160>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	3301      	adds	r3, #1
 8018dc6:	4a3a      	ldr	r2, [pc, #232]	; (8018eb0 <_tx_mutex_prioritize+0x160>)
 8018dc8:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8018dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d201      	bcs.n	8018dde <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8018dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018de0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	f383 8810 	msr	PRIMASK, r3
}
 8018de8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018dea:	f3ef 8310 	mrs	r3, PRIMASK
 8018dee:	617b      	str	r3, [r7, #20]
    return(posture);
 8018df0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8018df2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018df4:	b672      	cpsid	i
    return(int_posture);
 8018df6:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8018df8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	699b      	ldr	r3, [r3, #24]
 8018dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e00:	429a      	cmp	r2, r3
 8018e02:	d002      	beq.n	8018e0a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8018e04:	2301      	movs	r3, #1
 8018e06:	633b      	str	r3, [r7, #48]	; 0x30
 8018e08:	e006      	b.n	8018e18 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	69db      	ldr	r3, [r3, #28]
 8018e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d001      	beq.n	8018e18 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8018e14:	2301      	movs	r3, #1
 8018e16:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8018e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d103      	bne.n	8018e26 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8018e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e22:	643b      	str	r3, [r7, #64]	; 0x40
 8018e24:	e00c      	b.n	8018e40 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	699b      	ldr	r3, [r3, #24]
 8018e2a:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	69db      	ldr	r3, [r3, #28]
 8018e30:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8018e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e34:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8018e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e3a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8018e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e44:	429a      	cmp	r2, r3
 8018e46:	d1c2      	bne.n	8018dce <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8018e48:	4b19      	ldr	r3, [pc, #100]	; (8018eb0 <_tx_mutex_prioritize+0x160>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	3b01      	subs	r3, #1
 8018e4e:	4a18      	ldr	r2, [pc, #96]	; (8018eb0 <_tx_mutex_prioritize+0x160>)
 8018e50:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8018e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e56:	429a      	cmp	r2, r3
 8018e58:	d01d      	beq.n	8018e96 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8018e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8018e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e64:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8018e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e6a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8018e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e70:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8018e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e76:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8018e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e7c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8018e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e82:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8018e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e88:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8018e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e8e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e94:	619a      	str	r2, [r3, #24]
 8018e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e98:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ea0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8018ea2:	f000 ffc3 	bl	8019e2c <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8018ea6:	2300      	movs	r3, #0
#endif
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3748      	adds	r7, #72	; 0x48
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	24004464 	.word	0x24004464

08018eb4 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b090      	sub	sp, #64	; 0x40
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
 8018ebc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8018ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8018ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8018ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8018ec8:	b672      	cpsid	i
    return(int_posture);
 8018eca:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8018ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d017      	beq.n	8018f06 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	683a      	ldr	r2, [r7, #0]
 8018eda:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018ee2:	683a      	ldr	r2, [r7, #0]
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d905      	bls.n	8018ef4 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	63da      	str	r2, [r3, #60]	; 0x3c
 8018ef2:	e002      	b.n	8018efa <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	683a      	ldr	r2, [r7, #0]
 8018ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8018efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018efc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f00:	f383 8810 	msr	PRIMASK, r3
}
 8018f04:	e089      	b.n	801901a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8018f06:	4b47      	ldr	r3, [pc, #284]	; (8019024 <_tx_mutex_priority_change+0x170>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f10:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8018f12:	4b45      	ldr	r3, [pc, #276]	; (8019028 <_tx_mutex_priority_change+0x174>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	3302      	adds	r3, #2
 8018f18:	4a43      	ldr	r2, [pc, #268]	; (8019028 <_tx_mutex_priority_change+0x174>)
 8018f1a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	220e      	movs	r2, #14
 8018f20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2201      	movs	r2, #1
 8018f26:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8018f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f30:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f32:	69bb      	ldr	r3, [r7, #24]
 8018f34:	f383 8810 	msr	PRIMASK, r3
}
 8018f38:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f001 f8b0 	bl	801a0a0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018f40:	f3ef 8310 	mrs	r3, PRIMASK
 8018f44:	623b      	str	r3, [r7, #32]
    return(posture);
 8018f46:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8018f48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018f4a:	b672      	cpsid	i
    return(int_posture);
 8018f4c:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8018f4e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	683a      	ldr	r2, [r7, #0]
 8018f54:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018f5c:	683a      	ldr	r2, [r7, #0]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d905      	bls.n	8018f6e <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8018f6c:	e002      	b.n	8018f74 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	683a      	ldr	r2, [r7, #0]
 8018f72:	63da      	str	r2, [r3, #60]	; 0x3c
 8018f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f76:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	f383 8810 	msr	PRIMASK, r3
}
 8018f7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f000 ff8d 	bl	8019ea0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018f86:	f3ef 8310 	mrs	r3, PRIMASK
 8018f8a:	617b      	str	r3, [r7, #20]
    return(posture);
 8018f8c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8018f8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018f90:	b672      	cpsid	i
    return(int_posture);
 8018f92:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8018f94:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8018f96:	4b23      	ldr	r3, [pc, #140]	; (8019024 <_tx_mutex_priority_change+0x170>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8018f9c:	687a      	ldr	r2, [r7, #4]
 8018f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d034      	beq.n	801900e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d130      	bne.n	801900e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d811      	bhi.n	8018fdc <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8018fb8:	687a      	ldr	r2, [r7, #4]
 8018fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d126      	bne.n	801900e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8018fc0:	4a18      	ldr	r2, [pc, #96]	; (8019024 <_tx_mutex_priority_change+0x170>)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8018fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	429a      	cmp	r2, r3
 8018fcc:	d21f      	bcs.n	801900e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd2:	4916      	ldr	r1, [pc, #88]	; (801902c <_tx_mutex_priority_change+0x178>)
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018fda:	e018      	b.n	801900e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d212      	bcs.n	801900e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	d80c      	bhi.n	801900e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8018ff4:	4a0b      	ldr	r2, [pc, #44]	; (8019024 <_tx_mutex_priority_change+0x170>)
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8018ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018ffc:	683b      	ldr	r3, [r7, #0]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d205      	bcs.n	801900e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019006:	4909      	ldr	r1, [pc, #36]	; (801902c <_tx_mutex_priority_change+0x178>)
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019010:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019012:	68bb      	ldr	r3, [r7, #8]
 8019014:	f383 8810 	msr	PRIMASK, r3
}
 8019018:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801901a:	bf00      	nop
 801901c:	3740      	adds	r7, #64	; 0x40
 801901e:	46bd      	mov	sp, r7
 8019020:	bd80      	pop	{r7, pc}
 8019022:	bf00      	nop
 8019024:	240043d0 	.word	0x240043d0
 8019028:	24004464 	.word	0x24004464
 801902c:	240043e4 	.word	0x240043e4

08019030 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b0a6      	sub	sp, #152	; 0x98
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8019038:	2320      	movs	r3, #32
 801903a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801903e:	f3ef 8310 	mrs	r3, PRIMASK
 8019042:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8019044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8019046:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8019048:	b672      	cpsid	i
    return(int_posture);
 801904a:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 801904c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	689b      	ldr	r3, [r3, #8]
 8019054:	2b00      	cmp	r3, #0
 8019056:	f000 81ff 	beq.w	8019458 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	68db      	ldr	r3, [r3, #12]
 801905e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8019060:	4ba3      	ldr	r3, [pc, #652]	; (80192f0 <_tx_mutex_put+0x2c0>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801906c:	429a      	cmp	r2, r3
 801906e:	d00d      	beq.n	801908c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8019070:	4ba0      	ldr	r3, [pc, #640]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d109      	bne.n	801908c <_tx_mutex_put+0x5c>
 8019078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801907c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801907e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019080:	f383 8810 	msr	PRIMASK, r3
}
 8019084:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8019086:	231e      	movs	r3, #30
 8019088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 801908c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019090:	2b20      	cmp	r3, #32
 8019092:	f040 81eb 	bne.w	801946c <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	689b      	ldr	r3, [r3, #8]
 801909a:	1e5a      	subs	r2, r3, #1
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	689b      	ldr	r3, [r3, #8]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d00a      	beq.n	80190be <_tx_mutex_put+0x8e>
 80190a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190ac:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80190ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190b0:	f383 8810 	msr	PRIMASK, r3
}
 80190b4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80190b6:	2300      	movs	r3, #0
 80190b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80190bc:	e1d6      	b.n	801946c <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80190be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d10a      	bne.n	80190da <_tx_mutex_put+0xaa>
 80190c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80190ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190cc:	f383 8810 	msr	PRIMASK, r3
}
 80190d0:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80190d2:	2300      	movs	r3, #0
 80190d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80190d8:	e1c8      	b.n	801946c <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80190da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80190e0:	1e5a      	subs	r2, r3, #1
 80190e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80190e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d104      	bne.n	80190fc <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80190f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190f4:	2200      	movs	r2, #0
 80190f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80190fa:	e019      	b.n	8019130 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019108:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801910a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801910e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019110:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8019112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019114:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019118:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801911a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801911c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	429a      	cmp	r2, r3
 8019124:	d104      	bne.n	8019130 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8019126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019128:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801912c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	699b      	ldr	r3, [r3, #24]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d110      	bne.n	801915a <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	691b      	ldr	r3, [r3, #16]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d10c      	bne.n	801915a <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2200      	movs	r2, #0
 8019144:	60da      	str	r2, [r3, #12]
 8019146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801914a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801914e:	f383 8810 	msr	PRIMASK, r3
}
 8019152:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8019154:	2300      	movs	r3, #0
 8019156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 801915a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801915e:	2b20      	cmp	r3, #32
 8019160:	f040 8184 	bne.w	801946c <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8019164:	2300      	movs	r3, #0
 8019166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 801916a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801916c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	691b      	ldr	r3, [r3, #16]
 8019178:	2b01      	cmp	r3, #1
 801917a:	d155      	bne.n	8019228 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801917c:	4b5d      	ldr	r3, [pc, #372]	; (80192f4 <_tx_mutex_put+0x2c4>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	3301      	adds	r3, #1
 8019182:	4a5c      	ldr	r2, [pc, #368]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019184:	6013      	str	r3, [r2, #0]
 8019186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801918a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801918c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801918e:	f383 8810 	msr	PRIMASK, r3
}
 8019192:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8019194:	2320      	movs	r3, #32
 8019196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801919a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801919c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80191a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80191a4:	e01f      	b.n	80191e6 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80191a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191aa:	691b      	ldr	r3, [r3, #16]
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	d10b      	bne.n	80191c8 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80191b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d904      	bls.n	80191c8 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80191be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80191c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80191d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80191d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80191d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80191dc:	429a      	cmp	r2, r3
 80191de:	d102      	bne.n	80191e6 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 80191e0:	2300      	movs	r3, #0
 80191e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80191e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d1db      	bne.n	80191a6 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80191ee:	f3ef 8310 	mrs	r3, PRIMASK
 80191f2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80191f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80191f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80191f8:	b672      	cpsid	i
    return(int_posture);
 80191fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 80191fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8019200:	4b3c      	ldr	r3, [pc, #240]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	3b01      	subs	r3, #1
 8019206:	4a3b      	ldr	r2, [pc, #236]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019208:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801920a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801920c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8019214:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801921c:	429a      	cmp	r2, r3
 801921e:	d203      	bcs.n	8019228 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8019220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	69db      	ldr	r3, [r3, #28]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d920      	bls.n	8019272 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	691b      	ldr	r3, [r3, #16]
 8019234:	2b01      	cmp	r3, #1
 8019236:	d11c      	bne.n	8019272 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8019238:	4b2e      	ldr	r3, [pc, #184]	; (80192f4 <_tx_mutex_put+0x2c4>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	3301      	adds	r3, #1
 801923e:	4a2d      	ldr	r2, [pc, #180]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019240:	6013      	str	r3, [r2, #0]
 8019242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019246:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801924a:	f383 8810 	msr	PRIMASK, r3
}
 801924e:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8019250:	6878      	ldr	r0, [r7, #4]
 8019252:	f7ff fd7d 	bl	8018d50 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019256:	f3ef 8310 	mrs	r3, PRIMASK
 801925a:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801925e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8019260:	b672      	cpsid	i
    return(int_posture);
 8019262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8019264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8019268:	4b22      	ldr	r3, [pc, #136]	; (80192f4 <_tx_mutex_put+0x2c4>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	3b01      	subs	r3, #1
 801926e:	4a21      	ldr	r2, [pc, #132]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019270:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	699b      	ldr	r3, [r3, #24]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d13e      	bne.n	80192f8 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801927a:	4b1e      	ldr	r3, [pc, #120]	; (80192f4 <_tx_mutex_put+0x2c4>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	3301      	adds	r3, #1
 8019280:	4a1c      	ldr	r2, [pc, #112]	; (80192f4 <_tx_mutex_put+0x2c4>)
 8019282:	6013      	str	r3, [r2, #0]
 8019284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019288:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801928c:	f383 8810 	msr	PRIMASK, r3
}
 8019290:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2220      	movs	r2, #32
 8019296:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	68db      	ldr	r3, [r3, #12]
 801929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801929e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80192a2:	429a      	cmp	r2, r3
 80192a4:	d006      	beq.n	80192b4 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	68db      	ldr	r3, [r3, #12]
 80192aa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7ff fe00 	bl	8018eb4 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80192b4:	f3ef 8310 	mrs	r3, PRIMASK
 80192b8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80192ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80192bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80192be:	b672      	cpsid	i
    return(int_posture);
 80192c0:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 80192c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 80192c6:	4b0b      	ldr	r3, [pc, #44]	; (80192f4 <_tx_mutex_put+0x2c4>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	3b01      	subs	r3, #1
 80192cc:	4a09      	ldr	r2, [pc, #36]	; (80192f4 <_tx_mutex_put+0x2c4>)
 80192ce:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2200      	movs	r2, #0
 80192d4:	60da      	str	r2, [r3, #12]
 80192d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80192da:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80192dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192de:	f383 8810 	msr	PRIMASK, r3
}
 80192e2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 80192e4:	f000 fda2 	bl	8019e2c <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 80192e8:	2300      	movs	r3, #0
 80192ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80192ee:	e0bd      	b.n	801946c <_tx_mutex_put+0x43c>
 80192f0:	240043cc 	.word	0x240043cc
 80192f4:	24004464 	.word	0x24004464
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	699b      	ldr	r3, [r3, #24]
 80192fc:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	691b      	ldr	r3, [r3, #16]
 8019302:	2b01      	cmp	r3, #1
 8019304:	d10a      	bne.n	801931c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	68db      	ldr	r3, [r3, #12]
 801930a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801930e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2220      	movs	r2, #32
 801931a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801931c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801931e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019322:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8019324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019326:	2b00      	cmp	r3, #0
 8019328:	d10a      	bne.n	8019340 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801932a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	687a      	ldr	r2, [r7, #4]
 8019336:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	631a      	str	r2, [r3, #48]	; 0x30
 801933e:	e016      	b.n	801936e <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8019340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801934a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019350:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8019352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019356:	687a      	ldr	r2, [r7, #4]
 8019358:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801935a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019364:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801936c:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 801936e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019370:	1c5a      	adds	r2, r3, #1
 8019372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2201      	movs	r2, #1
 801937c:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019382:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	69db      	ldr	r3, [r3, #28]
 8019388:	1e5a      	subs	r2, r3, #1
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	69db      	ldr	r3, [r3, #28]
 8019392:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8019394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019396:	2b00      	cmp	r3, #0
 8019398:	d103      	bne.n	80193a2 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	619a      	str	r2, [r3, #24]
 80193a0:	e00e      	b.n	80193c0 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80193a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80193a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193a6:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80193ac:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80193ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80193b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80193b2:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80193b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80193b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80193b8:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80193ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80193bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80193be:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80193c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80193c2:	2200      	movs	r2, #0
 80193c4:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80193c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80193c8:	2200      	movs	r2, #0
 80193ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80193ce:	4b2a      	ldr	r3, [pc, #168]	; (8019478 <_tx_mutex_put+0x448>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	3301      	adds	r3, #1
 80193d4:	4a28      	ldr	r2, [pc, #160]	; (8019478 <_tx_mutex_put+0x448>)
 80193d6:	6013      	str	r3, [r2, #0]
 80193d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80193dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	f383 8810 	msr	PRIMASK, r3
}
 80193e4:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	691b      	ldr	r3, [r3, #16]
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d12d      	bne.n	801944a <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	69db      	ldr	r3, [r3, #28]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d01c      	beq.n	8019430 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 80193f6:	6878      	ldr	r0, [r7, #4]
 80193f8:	f7ff fcaa 	bl	8018d50 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80193fc:	f3ef 8310 	mrs	r3, PRIMASK
 8019400:	61bb      	str	r3, [r7, #24]
    return(posture);
 8019402:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8019404:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019406:	b672      	cpsid	i
    return(int_posture);
 8019408:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801940a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	699b      	ldr	r3, [r3, #24]
 8019412:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8019414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019416:	2b00      	cmp	r3, #0
 8019418:	d003      	beq.n	8019422 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801941a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	629a      	str	r2, [r3, #40]	; 0x28
 8019422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019426:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	f383 8810 	msr	PRIMASK, r3
}
 801942e:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8019430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019436:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801943a:	429a      	cmp	r2, r3
 801943c:	d005      	beq.n	801944a <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801943e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8019442:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019446:	f7ff fd35 	bl	8018eb4 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801944a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801944c:	f000 fd28 	bl	8019ea0 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8019450:	2300      	movs	r3, #0
 8019452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019456:	e009      	b.n	801946c <_tx_mutex_put+0x43c>
 8019458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801945c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	f383 8810 	msr	PRIMASK, r3
}
 8019464:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8019466:	231e      	movs	r3, #30
 8019468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 801946c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8019470:	4618      	mov	r0, r3
 8019472:	3798      	adds	r7, #152	; 0x98
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	24004464 	.word	0x24004464

0801947c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b08e      	sub	sp, #56	; 0x38
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019486:	f3ef 8310 	mrs	r3, PRIMASK
 801948a:	623b      	str	r3, [r7, #32]
    return(posture);
 801948c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801948e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019490:	b672      	cpsid	i
    return(int_posture);
 8019492:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8019494:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801949a:	4a33      	ldr	r2, [pc, #204]	; (8019568 <_tx_semaphore_cleanup+0xec>)
 801949c:	4293      	cmp	r3, r2
 801949e:	d158      	bne.n	8019552 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80194a6:	683a      	ldr	r2, [r7, #0]
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d152      	bne.n	8019552 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194b0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80194b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d04c      	beq.n	8019552 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80194b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	4a2b      	ldr	r2, [pc, #172]	; (801956c <_tx_semaphore_cleanup+0xf0>)
 80194be:	4293      	cmp	r3, r2
 80194c0:	d147      	bne.n	8019552 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80194c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c4:	691b      	ldr	r3, [r3, #16]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d043      	beq.n	8019552 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2200      	movs	r2, #0
 80194ce:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80194d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d2:	691b      	ldr	r3, [r3, #16]
 80194d4:	1e5a      	subs	r2, r3, #1
 80194d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80194da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194dc:	691b      	ldr	r3, [r3, #16]
 80194de:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80194e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d103      	bne.n	80194ee <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80194e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194e8:	2200      	movs	r2, #0
 80194ea:	60da      	str	r2, [r3, #12]
 80194ec:	e013      	b.n	8019516 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194f2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194f8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80194fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194fe:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8019500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019504:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8019506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019508:	68db      	ldr	r3, [r3, #12]
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	429a      	cmp	r2, r3
 801950e:	d102      	bne.n	8019516 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8019510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019514:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801951a:	2b06      	cmp	r3, #6
 801951c:	d119      	bne.n	8019552 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	220d      	movs	r2, #13
 8019522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8019526:	4b12      	ldr	r3, [pc, #72]	; (8019570 <_tx_semaphore_cleanup+0xf4>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	3301      	adds	r3, #1
 801952c:	4a10      	ldr	r2, [pc, #64]	; (8019570 <_tx_semaphore_cleanup+0xf4>)
 801952e:	6013      	str	r3, [r2, #0]
 8019530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019532:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	f383 8810 	msr	PRIMASK, r3
}
 801953a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	f000 fcaf 	bl	8019ea0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019542:	f3ef 8310 	mrs	r3, PRIMASK
 8019546:	61bb      	str	r3, [r7, #24]
    return(posture);
 8019548:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801954a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801954c:	b672      	cpsid	i
    return(int_posture);
 801954e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8019550:	637b      	str	r3, [r7, #52]	; 0x34
 8019552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019554:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	f383 8810 	msr	PRIMASK, r3
}
 801955c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801955e:	bf00      	nop
 8019560:	3738      	adds	r7, #56	; 0x38
 8019562:	46bd      	mov	sp, r7
 8019564:	bd80      	pop	{r7, pc}
 8019566:	bf00      	nop
 8019568:	0801947d 	.word	0x0801947d
 801956c:	53454d41 	.word	0x53454d41
 8019570:	24004464 	.word	0x24004464

08019574 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b08a      	sub	sp, #40	; 0x28
 8019578:	af00      	add	r7, sp, #0
 801957a:	60f8      	str	r0, [r7, #12]
 801957c:	60b9      	str	r1, [r7, #8]
 801957e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8019580:	221c      	movs	r2, #28
 8019582:	2100      	movs	r1, #0
 8019584:	68f8      	ldr	r0, [r7, #12]
 8019586:	f001 fd77 	bl	801b078 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	68ba      	ldr	r2, [r7, #8]
 801958e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	687a      	ldr	r2, [r7, #4]
 8019594:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019596:	f3ef 8310 	mrs	r3, PRIMASK
 801959a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801959c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801959e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80195a0:	b672      	cpsid	i
    return(int_posture);
 80195a2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80195a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	4a18      	ldr	r2, [pc, #96]	; (801960c <_tx_semaphore_create+0x98>)
 80195aa:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80195ac:	4b18      	ldr	r3, [pc, #96]	; (8019610 <_tx_semaphore_create+0x9c>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d109      	bne.n	80195c8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80195b4:	4a17      	ldr	r2, [pc, #92]	; (8019614 <_tx_semaphore_create+0xa0>)
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	68fa      	ldr	r2, [r7, #12]
 80195be:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	68fa      	ldr	r2, [r7, #12]
 80195c4:	619a      	str	r2, [r3, #24]
 80195c6:	e011      	b.n	80195ec <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80195c8:	4b12      	ldr	r3, [pc, #72]	; (8019614 <_tx_semaphore_create+0xa0>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80195ce:	6a3b      	ldr	r3, [r7, #32]
 80195d0:	699b      	ldr	r3, [r3, #24]
 80195d2:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80195d4:	6a3b      	ldr	r3, [r7, #32]
 80195d6:	68fa      	ldr	r2, [r7, #12]
 80195d8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80195da:	69fb      	ldr	r3, [r7, #28]
 80195dc:	68fa      	ldr	r2, [r7, #12]
 80195de:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	69fa      	ldr	r2, [r7, #28]
 80195e4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	6a3a      	ldr	r2, [r7, #32]
 80195ea:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80195ec:	4b08      	ldr	r3, [pc, #32]	; (8019610 <_tx_semaphore_create+0x9c>)
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	3301      	adds	r3, #1
 80195f2:	4a07      	ldr	r2, [pc, #28]	; (8019610 <_tx_semaphore_create+0x9c>)
 80195f4:	6013      	str	r3, [r2, #0]
 80195f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	f383 8810 	msr	PRIMASK, r3
}
 8019600:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8019602:	2300      	movs	r3, #0
}
 8019604:	4618      	mov	r0, r3
 8019606:	3728      	adds	r7, #40	; 0x28
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}
 801960c:	53454d41 	.word	0x53454d41
 8019610:	24004398 	.word	0x24004398
 8019614:	24004394 	.word	0x24004394

08019618 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b092      	sub	sp, #72	; 0x48
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019620:	f3ef 8310 	mrs	r3, PRIMASK
 8019624:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8019626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8019628:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801962a:	b672      	cpsid	i
    return(int_posture);
 801962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801962e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2200      	movs	r2, #0
 8019634:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8019636:	4b3d      	ldr	r3, [pc, #244]	; (801972c <_tx_semaphore_delete+0x114>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	3b01      	subs	r3, #1
 801963c:	4a3b      	ldr	r2, [pc, #236]	; (801972c <_tx_semaphore_delete+0x114>)
 801963e:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8019640:	4b3a      	ldr	r3, [pc, #232]	; (801972c <_tx_semaphore_delete+0x114>)
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d103      	bne.n	8019650 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8019648:	4b39      	ldr	r3, [pc, #228]	; (8019730 <_tx_semaphore_delete+0x118>)
 801964a:	2200      	movs	r2, #0
 801964c:	601a      	str	r2, [r3, #0]
 801964e:	e013      	b.n	8019678 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	695b      	ldr	r3, [r3, #20]
 8019654:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	699b      	ldr	r3, [r3, #24]
 801965a:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 801965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019660:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8019662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019666:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8019668:	4b31      	ldr	r3, [pc, #196]	; (8019730 <_tx_semaphore_delete+0x118>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	687a      	ldr	r2, [r7, #4]
 801966e:	429a      	cmp	r2, r3
 8019670:	d102      	bne.n	8019678 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8019672:	4a2f      	ldr	r2, [pc, #188]	; (8019730 <_tx_semaphore_delete+0x118>)
 8019674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019676:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8019678:	4b2e      	ldr	r3, [pc, #184]	; (8019734 <_tx_semaphore_delete+0x11c>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	3301      	adds	r3, #1
 801967e:	4a2d      	ldr	r2, [pc, #180]	; (8019734 <_tx_semaphore_delete+0x11c>)
 8019680:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	68db      	ldr	r3, [r3, #12]
 8019686:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2200      	movs	r2, #0
 801968c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2200      	movs	r2, #0
 8019698:	611a      	str	r2, [r3, #16]
 801969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801969c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196a0:	f383 8810 	msr	PRIMASK, r3
}
 80196a4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80196a6:	e024      	b.n	80196f2 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80196a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196aa:	3b01      	subs	r3, #1
 80196ac:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80196ae:	f3ef 8310 	mrs	r3, PRIMASK
 80196b2:	61fb      	str	r3, [r7, #28]
    return(posture);
 80196b4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80196b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80196b8:	b672      	cpsid	i
    return(int_posture);
 80196ba:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80196bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80196be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196c0:	2200      	movs	r2, #0
 80196c2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80196c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196c6:	2201      	movs	r2, #1
 80196c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80196cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196d0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80196d2:	4b18      	ldr	r3, [pc, #96]	; (8019734 <_tx_semaphore_delete+0x11c>)
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	3301      	adds	r3, #1
 80196d8:	4a16      	ldr	r2, [pc, #88]	; (8019734 <_tx_semaphore_delete+0x11c>)
 80196da:	6013      	str	r3, [r2, #0]
 80196dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196de:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80196e0:	6a3b      	ldr	r3, [r7, #32]
 80196e2:	f383 8810 	msr	PRIMASK, r3
}
 80196e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80196e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80196ea:	f000 fbd9 	bl	8019ea0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80196ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196f0:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80196f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d1d7      	bne.n	80196a8 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80196f8:	f3ef 8310 	mrs	r3, PRIMASK
 80196fc:	613b      	str	r3, [r7, #16]
    return(posture);
 80196fe:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8019700:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019702:	b672      	cpsid	i
    return(int_posture);
 8019704:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8019706:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8019708:	4b0a      	ldr	r3, [pc, #40]	; (8019734 <_tx_semaphore_delete+0x11c>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	3b01      	subs	r3, #1
 801970e:	4a09      	ldr	r2, [pc, #36]	; (8019734 <_tx_semaphore_delete+0x11c>)
 8019710:	6013      	str	r3, [r2, #0]
 8019712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019714:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	f383 8810 	msr	PRIMASK, r3
}
 801971c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801971e:	f000 fb85 	bl	8019e2c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8019722:	2300      	movs	r3, #0
}
 8019724:	4618      	mov	r0, r3
 8019726:	3748      	adds	r7, #72	; 0x48
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	24004398 	.word	0x24004398
 8019730:	24004394 	.word	0x24004394
 8019734:	24004464 	.word	0x24004464

08019738 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b08e      	sub	sp, #56	; 0x38
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8019742:	2300      	movs	r3, #0
 8019744:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019746:	f3ef 8310 	mrs	r3, PRIMASK
 801974a:	623b      	str	r3, [r7, #32]
    return(posture);
 801974c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801974e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019750:	b672      	cpsid	i
    return(int_posture);
 8019752:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8019754:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	689b      	ldr	r3, [r3, #8]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00a      	beq.n	8019774 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	689b      	ldr	r3, [r3, #8]
 8019762:	1e5a      	subs	r2, r3, #1
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	609a      	str	r2, [r3, #8]
 8019768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801976a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801976c:	69bb      	ldr	r3, [r7, #24]
 801976e:	f383 8810 	msr	PRIMASK, r3
}
 8019772:	e068      	b.n	8019846 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d05d      	beq.n	8019836 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801977a:	4b35      	ldr	r3, [pc, #212]	; (8019850 <_tx_semaphore_get+0x118>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d008      	beq.n	8019794 <_tx_semaphore_get+0x5c>
 8019782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019784:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	f383 8810 	msr	PRIMASK, r3
}
 801978c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801978e:	230d      	movs	r3, #13
 8019790:	637b      	str	r3, [r7, #52]	; 0x34
 8019792:	e058      	b.n	8019846 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8019794:	4b2f      	ldr	r3, [pc, #188]	; (8019854 <_tx_semaphore_get+0x11c>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979c:	4a2e      	ldr	r2, [pc, #184]	; (8019858 <_tx_semaphore_get+0x120>)
 801979e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80197a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a2:	687a      	ldr	r2, [r7, #4]
 80197a4:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80197a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80197ac:	1c5a      	adds	r2, r3, #1
 80197ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d109      	bne.n	80197d0 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197c0:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80197c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197c6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80197c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197cc:	675a      	str	r2, [r3, #116]	; 0x74
 80197ce:	e011      	b.n	80197f4 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	68db      	ldr	r3, [r3, #12]
 80197d4:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80197d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197da:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80197dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80197e0:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80197e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197e6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80197e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197ec:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80197ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197f2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	691b      	ldr	r3, [r3, #16]
 80197f8:	1c5a      	adds	r2, r3, #1
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80197fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019800:	2206      	movs	r2, #6
 8019802:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8019804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019806:	2201      	movs	r2, #1
 8019808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801980c:	683a      	ldr	r2, [r7, #0]
 801980e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8019810:	4b0f      	ldr	r3, [pc, #60]	; (8019850 <_tx_semaphore_get+0x118>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	3301      	adds	r3, #1
 8019816:	4a0e      	ldr	r2, [pc, #56]	; (8019850 <_tx_semaphore_get+0x118>)
 8019818:	6013      	str	r3, [r2, #0]
 801981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801981c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801981e:	693b      	ldr	r3, [r7, #16]
 8019820:	f383 8810 	msr	PRIMASK, r3
}
 8019824:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8019826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019828:	f000 fc3a 	bl	801a0a0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801982e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019832:	637b      	str	r3, [r7, #52]	; 0x34
 8019834:	e007      	b.n	8019846 <_tx_semaphore_get+0x10e>
 8019836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019838:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	f383 8810 	msr	PRIMASK, r3
}
 8019840:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8019842:	230d      	movs	r3, #13
 8019844:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8019846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019848:	4618      	mov	r0, r3
 801984a:	3738      	adds	r7, #56	; 0x38
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}
 8019850:	24004464 	.word	0x24004464
 8019854:	240043cc 	.word	0x240043cc
 8019858:	0801947d 	.word	0x0801947d

0801985c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b08c      	sub	sp, #48	; 0x30
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019864:	f3ef 8310 	mrs	r3, PRIMASK
 8019868:	61bb      	str	r3, [r7, #24]
    return(posture);
 801986a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801986c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801986e:	b672      	cpsid	i
    return(int_posture);
 8019870:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8019872:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	691b      	ldr	r3, [r3, #16]
 8019878:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987c:	2b00      	cmp	r3, #0
 801987e:	d10a      	bne.n	8019896 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	689b      	ldr	r3, [r3, #8]
 8019884:	1c5a      	adds	r2, r3, #1
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	609a      	str	r2, [r3, #8]
 801988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801988c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801988e:	693b      	ldr	r3, [r7, #16]
 8019890:	f383 8810 	msr	PRIMASK, r3
}
 8019894:	e033      	b.n	80198fe <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	68db      	ldr	r3, [r3, #12]
 801989a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 801989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801989e:	3b01      	subs	r3, #1
 80198a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80198a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d103      	bne.n	80198b0 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	2200      	movs	r2, #0
 80198ac:	60da      	str	r2, [r3, #12]
 80198ae:	e00e      	b.n	80198ce <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80198b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80198b4:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6a3a      	ldr	r2, [r7, #32]
 80198ba:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80198bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198c0:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80198c2:	6a3b      	ldr	r3, [r7, #32]
 80198c4:	69fa      	ldr	r2, [r7, #28]
 80198c6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80198c8:	69fb      	ldr	r3, [r7, #28]
 80198ca:	6a3a      	ldr	r2, [r7, #32]
 80198cc:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198d2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80198d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d6:	2200      	movs	r2, #0
 80198d8:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80198da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198dc:	2200      	movs	r2, #0
 80198de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80198e2:	4b09      	ldr	r3, [pc, #36]	; (8019908 <_tx_semaphore_put+0xac>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	3301      	adds	r3, #1
 80198e8:	4a07      	ldr	r2, [pc, #28]	; (8019908 <_tx_semaphore_put+0xac>)
 80198ea:	6013      	str	r3, [r2, #0]
 80198ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	f383 8810 	msr	PRIMASK, r3
}
 80198f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80198f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198fa:	f000 fad1 	bl	8019ea0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80198fe:	2300      	movs	r3, #0
}
 8019900:	4618      	mov	r0, r3
 8019902:	3730      	adds	r7, #48	; 0x30
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}
 8019908:	24004464 	.word	0x24004464

0801990c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b092      	sub	sp, #72	; 0x48
 8019910:	af00      	add	r7, sp, #0
 8019912:	60f8      	str	r0, [r7, #12]
 8019914:	60b9      	str	r1, [r7, #8]
 8019916:	607a      	str	r2, [r7, #4]
 8019918:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801991a:	2300      	movs	r3, #0
 801991c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801991e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019920:	21ef      	movs	r1, #239	; 0xef
 8019922:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019924:	f001 fba8 	bl	801b078 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8019928:	22b0      	movs	r2, #176	; 0xb0
 801992a:	2100      	movs	r1, #0
 801992c:	68f8      	ldr	r0, [r7, #12]
 801992e:	f001 fba3 	bl	801b078 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	68ba      	ldr	r2, [r7, #8]
 8019936:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	683a      	ldr	r2, [r7, #0]
 8019942:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019948:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801994e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019954:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801995a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019962:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019968:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	2220      	movs	r2, #32
 801996e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8019972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019974:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8019976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019978:	3b01      	subs	r3, #1
 801997a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801997c:	4413      	add	r3, r2
 801997e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019984:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8019986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801998a:	429a      	cmp	r2, r3
 801998c:	d007      	beq.n	801999e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	2200      	movs	r2, #0
 8019992:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	2200      	movs	r2, #0
 8019998:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801999c:	e006      	b.n	80199ac <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80199a2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80199a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	2203      	movs	r2, #3
 80199b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	4a48      	ldr	r2, [pc, #288]	; (8019ad8 <_tx_thread_create+0x1cc>)
 80199b6:	655a      	str	r2, [r3, #84]	; 0x54
 80199b8:	68fa      	ldr	r2, [r7, #12]
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80199be:	4947      	ldr	r1, [pc, #284]	; (8019adc <_tx_thread_create+0x1d0>)
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	f7e6 fd2d 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80199c6:	f3ef 8310 	mrs	r3, PRIMASK
 80199ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80199cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80199ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80199d0:	b672      	cpsid	i
    return(int_posture);
 80199d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80199d4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	4a41      	ldr	r2, [pc, #260]	; (8019ae0 <_tx_thread_create+0x1d4>)
 80199da:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80199dc:	4b41      	ldr	r3, [pc, #260]	; (8019ae4 <_tx_thread_create+0x1d8>)
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d10b      	bne.n	80199fc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80199e4:	4a40      	ldr	r2, [pc, #256]	; (8019ae8 <_tx_thread_create+0x1dc>)
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	68fa      	ldr	r2, [r7, #12]
 80199ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	68fa      	ldr	r2, [r7, #12]
 80199f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80199fa:	e016      	b.n	8019a2a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80199fc:	4b3a      	ldr	r3, [pc, #232]	; (8019ae8 <_tx_thread_create+0x1dc>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8019a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a08:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8019a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0c:	68fa      	ldr	r2, [r7, #12]
 8019a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8019a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8019a2a:	4b2e      	ldr	r3, [pc, #184]	; (8019ae4 <_tx_thread_create+0x1d8>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	3301      	adds	r3, #1
 8019a30:	4a2c      	ldr	r2, [pc, #176]	; (8019ae4 <_tx_thread_create+0x1d8>)
 8019a32:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8019a34:	4b2d      	ldr	r3, [pc, #180]	; (8019aec <_tx_thread_create+0x1e0>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	3301      	adds	r3, #1
 8019a3a:	4a2c      	ldr	r2, [pc, #176]	; (8019aec <_tx_thread_create+0x1e0>)
 8019a3c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8019a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019a40:	2b01      	cmp	r3, #1
 8019a42:	d129      	bne.n	8019a98 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019a44:	f3ef 8305 	mrs	r3, IPSR
 8019a48:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8019a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8019a4c:	4b28      	ldr	r3, [pc, #160]	; (8019af0 <_tx_thread_create+0x1e4>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	4313      	orrs	r3, r2
 8019a52:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019a56:	d30d      	bcc.n	8019a74 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8019a58:	4b26      	ldr	r3, [pc, #152]	; (8019af4 <_tx_thread_create+0x1e8>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8019a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d009      	beq.n	8019a78 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8019a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a68:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8019a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8019a72:	e001      	b.n	8019a78 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8019a74:	2300      	movs	r3, #0
 8019a76:	647b      	str	r3, [r7, #68]	; 0x44
 8019a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a7a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019a7c:	6a3b      	ldr	r3, [r7, #32]
 8019a7e:	f383 8810 	msr	PRIMASK, r3
}
 8019a82:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8019a84:	68f8      	ldr	r0, [r7, #12]
 8019a86:	f000 fa0b 	bl	8019ea0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8019a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d01e      	beq.n	8019ace <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8019a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019a94:	63da      	str	r2, [r3, #60]	; 0x3c
 8019a96:	e01a      	b.n	8019ace <_tx_thread_create+0x1c2>
 8019a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019a9c:	693b      	ldr	r3, [r7, #16]
 8019a9e:	f383 8810 	msr	PRIMASK, r3
}
 8019aa2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8019aa8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8019aaa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8019aac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019aae:	b672      	cpsid	i
    return(int_posture);
 8019ab0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8019ab2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8019ab4:	4b0d      	ldr	r3, [pc, #52]	; (8019aec <_tx_thread_create+0x1e0>)
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	3b01      	subs	r3, #1
 8019aba:	4a0c      	ldr	r2, [pc, #48]	; (8019aec <_tx_thread_create+0x1e0>)
 8019abc:	6013      	str	r3, [r2, #0]
 8019abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	f383 8810 	msr	PRIMASK, r3
}
 8019ac8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8019aca:	f000 f9af 	bl	8019e2c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8019ace:	2300      	movs	r3, #0
}
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	3748      	adds	r7, #72	; 0x48
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}
 8019ad8:	0801a375 	.word	0x0801a375
 8019adc:	08019c95 	.word	0x08019c95
 8019ae0:	54485244 	.word	0x54485244
 8019ae4:	240043d8 	.word	0x240043d8
 8019ae8:	240043d4 	.word	0x240043d4
 8019aec:	24004464 	.word	0x24004464
 8019af0:	2400006c 	.word	0x2400006c
 8019af4:	240043d0 	.word	0x240043d0

08019af8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8019af8:	b480      	push	{r7}
 8019afa:	b087      	sub	sp, #28
 8019afc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019afe:	f3ef 8310 	mrs	r3, PRIMASK
 8019b02:	60bb      	str	r3, [r7, #8]
    return(posture);
 8019b04:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8019b06:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019b08:	b672      	cpsid	i
    return(int_posture);
 8019b0a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8019b0c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8019b0e:	4b08      	ldr	r3, [pc, #32]	; (8019b30 <_tx_thread_identify+0x38>)
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	613b      	str	r3, [r7, #16]
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	f383 8810 	msr	PRIMASK, r3
}
 8019b1e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8019b20:	693b      	ldr	r3, [r7, #16]
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	371c      	adds	r7, #28
 8019b26:	46bd      	mov	sp, r7
 8019b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2c:	4770      	bx	lr
 8019b2e:	bf00      	nop
 8019b30:	240043cc 	.word	0x240043cc

08019b34 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8019b38:	4b12      	ldr	r3, [pc, #72]	; (8019b84 <_tx_thread_initialize+0x50>)
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8019b3e:	4b12      	ldr	r3, [pc, #72]	; (8019b88 <_tx_thread_initialize+0x54>)
 8019b40:	2200      	movs	r2, #0
 8019b42:	601a      	str	r2, [r3, #0]
 8019b44:	4b11      	ldr	r3, [pc, #68]	; (8019b8c <_tx_thread_initialize+0x58>)
 8019b46:	2200      	movs	r2, #0
 8019b48:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8019b4a:	4b11      	ldr	r3, [pc, #68]	; (8019b90 <_tx_thread_initialize+0x5c>)
 8019b4c:	2220      	movs	r2, #32
 8019b4e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8019b50:	2280      	movs	r2, #128	; 0x80
 8019b52:	2100      	movs	r1, #0
 8019b54:	480f      	ldr	r0, [pc, #60]	; (8019b94 <_tx_thread_initialize+0x60>)
 8019b56:	f001 fa8f 	bl	801b078 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8019b5a:	4b0f      	ldr	r3, [pc, #60]	; (8019b98 <_tx_thread_initialize+0x64>)
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8019b60:	4b0e      	ldr	r3, [pc, #56]	; (8019b9c <_tx_thread_initialize+0x68>)
 8019b62:	2200      	movs	r2, #0
 8019b64:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8019b66:	4b0e      	ldr	r3, [pc, #56]	; (8019ba0 <_tx_thread_initialize+0x6c>)
 8019b68:	2200      	movs	r2, #0
 8019b6a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8019b6c:	4b0d      	ldr	r3, [pc, #52]	; (8019ba4 <_tx_thread_initialize+0x70>)
 8019b6e:	2200      	movs	r2, #0
 8019b70:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8019b72:	4b0d      	ldr	r3, [pc, #52]	; (8019ba8 <_tx_thread_initialize+0x74>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8019b7a:	4a0b      	ldr	r2, [pc, #44]	; (8019ba8 <_tx_thread_initialize+0x74>)
 8019b7c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8019b7e:	bf00      	nop
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	240043cc 	.word	0x240043cc
 8019b88:	240043d0 	.word	0x240043d0
 8019b8c:	240043dc 	.word	0x240043dc
 8019b90:	240043e0 	.word	0x240043e0
 8019b94:	240043e4 	.word	0x240043e4
 8019b98:	240043d4 	.word	0x240043d4
 8019b9c:	240043d8 	.word	0x240043d8
 8019ba0:	24004464 	.word	0x24004464
 8019ba4:	24004468 	.word	0x24004468
 8019ba8:	2400446c 	.word	0x2400446c

08019bac <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b08c      	sub	sp, #48	; 0x30
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019bc2:	68ba      	ldr	r2, [r7, #8]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d004      	beq.n	8019bd2 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d001      	beq.n	8019bd2 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8019bce:	2300      	movs	r3, #0
 8019bd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8019bd6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8019bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8019bda:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019bdc:	b672      	cpsid	i
    return(int_posture);
 8019bde:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8019be0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019be8:	68ba      	ldr	r2, [r7, #8]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d902      	bls.n	8019bf4 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8019bee:	2318      	movs	r3, #24
 8019bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8019bf2:	e03e      	b.n	8019c72 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	68ba      	ldr	r2, [r7, #8]
 8019c02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c0c:	68ba      	ldr	r2, [r7, #8]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d203      	bcs.n	8019c1a <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	68ba      	ldr	r2, [r7, #8]
 8019c16:	63da      	str	r2, [r3, #60]	; 0x3c
 8019c18:	e004      	b.n	8019c24 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c28:	4b17      	ldr	r3, [pc, #92]	; (8019c88 <_tx_thread_preemption_change+0xdc>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	d920      	bls.n	8019c72 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8019c30:	4b15      	ldr	r3, [pc, #84]	; (8019c88 <_tx_thread_preemption_change+0xdc>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	68ba      	ldr	r2, [r7, #8]
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d91b      	bls.n	8019c72 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8019c3a:	4b14      	ldr	r3, [pc, #80]	; (8019c8c <_tx_thread_preemption_change+0xe0>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	68fa      	ldr	r2, [r7, #12]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d116      	bne.n	8019c72 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8019c44:	4b10      	ldr	r3, [pc, #64]	; (8019c88 <_tx_thread_preemption_change+0xdc>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	4a11      	ldr	r2, [pc, #68]	; (8019c90 <_tx_thread_preemption_change+0xe4>)
 8019c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c4e:	4a0f      	ldr	r2, [pc, #60]	; (8019c8c <_tx_thread_preemption_change+0xe0>)
 8019c50:	6013      	str	r3, [r2, #0]
 8019c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	f383 8810 	msr	PRIMASK, r3
}
 8019c5c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8019c5e:	f000 f8e5 	bl	8019e2c <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019c62:	f3ef 8310 	mrs	r3, PRIMASK
 8019c66:	61fb      	str	r3, [r7, #28]
    return(posture);
 8019c68:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8019c6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019c6c:	b672      	cpsid	i
    return(int_posture);
 8019c6e:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8019c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	f383 8810 	msr	PRIMASK, r3
}
 8019c7c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8019c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3730      	adds	r7, #48	; 0x30
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	240043e0 	.word	0x240043e0
 8019c8c:	240043d0 	.word	0x240043d0
 8019c90:	240043e4 	.word	0x240043e4

08019c94 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b088      	sub	sp, #32
 8019c98:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8019c9a:	4b21      	ldr	r3, [pc, #132]	; (8019d20 <_tx_thread_shell_entry+0x8c>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8019ca0:	69fb      	ldr	r3, [r7, #28]
 8019ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ca4:	69fa      	ldr	r2, [r7, #28]
 8019ca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019ca8:	4610      	mov	r0, r2
 8019caa:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8019cac:	4b1d      	ldr	r3, [pc, #116]	; (8019d24 <_tx_thread_shell_entry+0x90>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d003      	beq.n	8019cbc <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8019cb4:	4b1b      	ldr	r3, [pc, #108]	; (8019d24 <_tx_thread_shell_entry+0x90>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	69f8      	ldr	r0, [r7, #28]
 8019cba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8019cc0:	607b      	str	r3, [r7, #4]
    return(posture);
 8019cc2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8019cc4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019cc6:	b672      	cpsid	i
    return(int_posture);
 8019cc8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8019cca:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8019ccc:	69fb      	ldr	r3, [r7, #28]
 8019cce:	2201      	movs	r2, #1
 8019cd0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8019cd2:	69fb      	ldr	r3, [r7, #28]
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8019cd8:	69fb      	ldr	r3, [r7, #28]
 8019cda:	2200      	movs	r2, #0
 8019cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8019cde:	4b12      	ldr	r3, [pc, #72]	; (8019d28 <_tx_thread_shell_entry+0x94>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	4a10      	ldr	r2, [pc, #64]	; (8019d28 <_tx_thread_shell_entry+0x94>)
 8019ce6:	6013      	str	r3, [r2, #0]
 8019ce8:	69bb      	ldr	r3, [r7, #24]
 8019cea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019cec:	68bb      	ldr	r3, [r7, #8]
 8019cee:	f383 8810 	msr	PRIMASK, r3
}
 8019cf2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8019cf4:	f3ef 8314 	mrs	r3, CONTROL
 8019cf8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8019cfa:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8019cfc:	617b      	str	r3, [r7, #20]
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	f023 0304 	bic.w	r3, r3, #4
 8019d04:	617b      	str	r3, [r7, #20]
 8019d06:	697b      	ldr	r3, [r7, #20]
 8019d08:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8019d0a:	693b      	ldr	r3, [r7, #16]
 8019d0c:	f383 8814 	msr	CONTROL, r3
}
 8019d10:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8019d12:	69f8      	ldr	r0, [r7, #28]
 8019d14:	f000 f9c4 	bl	801a0a0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8019d18:	bf00      	nop
 8019d1a:	3720      	adds	r7, #32
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	240043cc 	.word	0x240043cc
 8019d24:	24004468 	.word	0x24004468
 8019d28:	24004464 	.word	0x24004464

08019d2c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b08e      	sub	sp, #56	; 0x38
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019d34:	f3ef 8310 	mrs	r3, PRIMASK
 8019d38:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8019d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8019d3c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8019d3e:	b672      	cpsid	i
    return(int_posture);
 8019d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8019d42:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8019d44:	4b35      	ldr	r3, [pc, #212]	; (8019e1c <_tx_thread_sleep+0xf0>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8019d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d108      	bne.n	8019d62 <_tx_thread_sleep+0x36>
 8019d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019d54:	6a3b      	ldr	r3, [r7, #32]
 8019d56:	f383 8810 	msr	PRIMASK, r3
}
 8019d5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8019d5c:	2313      	movs	r3, #19
 8019d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8019d60:	e056      	b.n	8019e10 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019d62:	f3ef 8305 	mrs	r3, IPSR
 8019d66:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8019d68:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019d6a:	4b2d      	ldr	r3, [pc, #180]	; (8019e20 <_tx_thread_sleep+0xf4>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4313      	orrs	r3, r2
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d008      	beq.n	8019d86 <_tx_thread_sleep+0x5a>
 8019d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019d78:	69bb      	ldr	r3, [r7, #24]
 8019d7a:	f383 8810 	msr	PRIMASK, r3
}
 8019d7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8019d80:	2313      	movs	r3, #19
 8019d82:	637b      	str	r3, [r7, #52]	; 0x34
 8019d84:	e044      	b.n	8019e10 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8019d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d88:	4a26      	ldr	r2, [pc, #152]	; (8019e24 <_tx_thread_sleep+0xf8>)
 8019d8a:	4293      	cmp	r3, r2
 8019d8c:	d108      	bne.n	8019da0 <_tx_thread_sleep+0x74>
 8019d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	f383 8810 	msr	PRIMASK, r3
}
 8019d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8019d9a:	2313      	movs	r3, #19
 8019d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8019d9e:	e037      	b.n	8019e10 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d108      	bne.n	8019db8 <_tx_thread_sleep+0x8c>
 8019da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019da8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019daa:	693b      	ldr	r3, [r7, #16]
 8019dac:	f383 8810 	msr	PRIMASK, r3
}
 8019db0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8019db2:	2300      	movs	r3, #0
 8019db4:	637b      	str	r3, [r7, #52]	; 0x34
 8019db6:	e02b      	b.n	8019e10 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8019db8:	4b1b      	ldr	r3, [pc, #108]	; (8019e28 <_tx_thread_sleep+0xfc>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d008      	beq.n	8019dd2 <_tx_thread_sleep+0xa6>
 8019dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	f383 8810 	msr	PRIMASK, r3
}
 8019dca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8019dcc:	2313      	movs	r3, #19
 8019dce:	637b      	str	r3, [r7, #52]	; 0x34
 8019dd0:	e01e      	b.n	8019e10 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8019dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd4:	2204      	movs	r2, #4
 8019dd6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8019dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dda:	2201      	movs	r2, #1
 8019ddc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8019dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de0:	2200      	movs	r2, #0
 8019de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8019de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de8:	687a      	ldr	r2, [r7, #4]
 8019dea:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8019dec:	4b0e      	ldr	r3, [pc, #56]	; (8019e28 <_tx_thread_sleep+0xfc>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	3301      	adds	r3, #1
 8019df2:	4a0d      	ldr	r2, [pc, #52]	; (8019e28 <_tx_thread_sleep+0xfc>)
 8019df4:	6013      	str	r3, [r2, #0]
 8019df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	f383 8810 	msr	PRIMASK, r3
}
 8019e00:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8019e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e04:	f000 f94c 	bl	801a0a0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8019e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	3738      	adds	r7, #56	; 0x38
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	240043cc 	.word	0x240043cc
 8019e20:	2400006c 	.word	0x2400006c
 8019e24:	24004514 	.word	0x24004514
 8019e28:	24004464 	.word	0x24004464

08019e2c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8019e2c:	b480      	push	{r7}
 8019e2e:	b089      	sub	sp, #36	; 0x24
 8019e30:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8019e32:	4b17      	ldr	r3, [pc, #92]	; (8019e90 <_tx_thread_system_preempt_check+0x64>)
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d121      	bne.n	8019e82 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8019e3e:	4b15      	ldr	r3, [pc, #84]	; (8019e94 <_tx_thread_system_preempt_check+0x68>)
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8019e44:	4b14      	ldr	r3, [pc, #80]	; (8019e98 <_tx_thread_system_preempt_check+0x6c>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8019e4a:	69ba      	ldr	r2, [r7, #24]
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d017      	beq.n	8019e82 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8019e52:	4b12      	ldr	r3, [pc, #72]	; (8019e9c <_tx_thread_system_preempt_check+0x70>)
 8019e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019e5a:	f3ef 8305 	mrs	r3, IPSR
 8019e5e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8019e60:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d10c      	bne.n	8019e80 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019e66:	f3ef 8310 	mrs	r3, PRIMASK
 8019e6a:	60fb      	str	r3, [r7, #12]
    return(posture);
 8019e6c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8019e6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019e70:	b662      	cpsie	i
}
 8019e72:	bf00      	nop
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f383 8810 	msr	PRIMASK, r3
}
 8019e7e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8019e80:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8019e82:	bf00      	nop
 8019e84:	3724      	adds	r7, #36	; 0x24
 8019e86:	46bd      	mov	sp, r7
 8019e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8c:	4770      	bx	lr
 8019e8e:	bf00      	nop
 8019e90:	24004464 	.word	0x24004464
 8019e94:	240043cc 	.word	0x240043cc
 8019e98:	240043d0 	.word	0x240043d0
 8019e9c:	e000ed04 	.word	0xe000ed04

08019ea0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b096      	sub	sp, #88	; 0x58
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8019eac:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8019eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8019eb0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8019eb2:	b672      	cpsid	i
    return(int_posture);
 8019eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8019eb6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d005      	beq.n	8019ecc <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	334c      	adds	r3, #76	; 0x4c
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f000 fc13 	bl	801a6f0 <_tx_timer_system_deactivate>
 8019eca:	e002      	b.n	8019ed2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8019ed2:	4b6c      	ldr	r3, [pc, #432]	; (801a084 <_tx_thread_system_resume+0x1e4>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	3b01      	subs	r3, #1
 8019ed8:	4a6a      	ldr	r2, [pc, #424]	; (801a084 <_tx_thread_system_resume+0x1e4>)
 8019eda:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f040 8083 	bne.w	8019fec <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f000 8097 	beq.w	801a01e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d172      	bne.n	8019fde <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	2200      	movs	r2, #0
 8019efc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f02:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8019f04:	4a60      	ldr	r2, [pc, #384]	; (801a088 <_tx_thread_system_resume+0x1e8>)
 8019f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8019f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d154      	bne.n	8019fbe <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8019f14:	495c      	ldr	r1, [pc, #368]	; (801a088 <_tx_thread_system_resume+0x1e8>)
 8019f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f18:	687a      	ldr	r2, [r7, #4]
 8019f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	687a      	ldr	r2, [r7, #4]
 8019f28:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8019f32:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8019f34:	4b55      	ldr	r3, [pc, #340]	; (801a08c <_tx_thread_system_resume+0x1ec>)
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f3a:	4313      	orrs	r3, r2
 8019f3c:	4a53      	ldr	r2, [pc, #332]	; (801a08c <_tx_thread_system_resume+0x1ec>)
 8019f3e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8019f40:	4b53      	ldr	r3, [pc, #332]	; (801a090 <_tx_thread_system_resume+0x1f0>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d269      	bcs.n	801a01e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8019f4a:	4a51      	ldr	r2, [pc, #324]	; (801a090 <_tx_thread_system_resume+0x1f0>)
 8019f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f4e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8019f50:	4b50      	ldr	r3, [pc, #320]	; (801a094 <_tx_thread_system_resume+0x1f4>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8019f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d103      	bne.n	8019f64 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8019f5c:	4a4d      	ldr	r2, [pc, #308]	; (801a094 <_tx_thread_system_resume+0x1f4>)
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6013      	str	r3, [r2, #0]
 8019f62:	e05c      	b.n	801a01e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8019f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d257      	bcs.n	801a01e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8019f6e:	4a49      	ldr	r2, [pc, #292]	; (801a094 <_tx_thread_system_resume+0x1f4>)
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6013      	str	r3, [r2, #0]
 8019f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7a:	f383 8810 	msr	PRIMASK, r3
}
 8019f7e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8019f80:	4b40      	ldr	r3, [pc, #256]	; (801a084 <_tx_thread_system_resume+0x1e4>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8019f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d174      	bne.n	801a076 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8019f8c:	4b42      	ldr	r3, [pc, #264]	; (801a098 <_tx_thread_system_resume+0x1f8>)
 8019f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f92:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019f94:	f3ef 8305 	mrs	r3, IPSR
 8019f98:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8019f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d10c      	bne.n	8019fba <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8019fa4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8019fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8019fa8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019faa:	b662      	cpsie	i
}
 8019fac:	bf00      	nop
 8019fae:	6a3b      	ldr	r3, [r7, #32]
 8019fb0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	f383 8810 	msr	PRIMASK, r3
}
 8019fb8:	bf00      	nop
}
 8019fba:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8019fbc:	e05b      	b.n	801a076 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8019fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc2:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8019fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8019fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fcc:	687a      	ldr	r2, [r7, #4]
 8019fce:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fd4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019fda:	621a      	str	r2, [r3, #32]
 8019fdc:	e01f      	b.n	801a01e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2203      	movs	r2, #3
 8019fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8019fea:	e018      	b.n	801a01e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d014      	beq.n	801a01e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ff8:	2b02      	cmp	r3, #2
 8019ffa:	d010      	beq.n	801a01e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a000:	2b00      	cmp	r3, #0
 801a002:	d106      	bne.n	801a012 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2200      	movs	r2, #0
 801a008:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	2200      	movs	r2, #0
 801a00e:	631a      	str	r2, [r3, #48]	; 0x30
 801a010:	e005      	b.n	801a01e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2200      	movs	r2, #0
 801a016:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2203      	movs	r2, #3
 801a01c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801a01e:	4b1f      	ldr	r3, [pc, #124]	; (801a09c <_tx_thread_system_resume+0x1fc>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	63bb      	str	r3, [r7, #56]	; 0x38
 801a024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a026:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a028:	69bb      	ldr	r3, [r7, #24]
 801a02a:	f383 8810 	msr	PRIMASK, r3
}
 801a02e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801a030:	4b18      	ldr	r3, [pc, #96]	; (801a094 <_tx_thread_system_resume+0x1f4>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a036:	429a      	cmp	r2, r3
 801a038:	d020      	beq.n	801a07c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801a03a:	4b12      	ldr	r3, [pc, #72]	; (801a084 <_tx_thread_system_resume+0x1e4>)
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 801a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a042:	2b00      	cmp	r3, #0
 801a044:	d11a      	bne.n	801a07c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801a046:	4b14      	ldr	r3, [pc, #80]	; (801a098 <_tx_thread_system_resume+0x1f8>)
 801a048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a04c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a04e:	f3ef 8305 	mrs	r3, IPSR
 801a052:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801a054:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 801a056:	2b00      	cmp	r3, #0
 801a058:	d10f      	bne.n	801a07a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a05a:	f3ef 8310 	mrs	r3, PRIMASK
 801a05e:	613b      	str	r3, [r7, #16]
    return(posture);
 801a060:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801a062:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801a064:	b662      	cpsie	i
}
 801a066:	bf00      	nop
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	f383 8810 	msr	PRIMASK, r3
}
 801a072:	bf00      	nop
}
 801a074:	e001      	b.n	801a07a <_tx_thread_system_resume+0x1da>
                                return;
 801a076:	bf00      	nop
 801a078:	e000      	b.n	801a07c <_tx_thread_system_resume+0x1dc>
 801a07a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801a07c:	3758      	adds	r7, #88	; 0x58
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop
 801a084:	24004464 	.word	0x24004464
 801a088:	240043e4 	.word	0x240043e4
 801a08c:	240043dc 	.word	0x240043dc
 801a090:	240043e0 	.word	0x240043e0
 801a094:	240043d0 	.word	0x240043d0
 801a098:	e000ed04 	.word	0xe000ed04
 801a09c:	240043cc 	.word	0x240043cc

0801a0a0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b09e      	sub	sp, #120	; 0x78
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801a0a8:	4b81      	ldr	r3, [pc, #516]	; (801a2b0 <_tx_thread_system_suspend+0x210>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a0ae:	f3ef 8310 	mrs	r3, PRIMASK
 801a0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801a0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801a0b6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801a0b8:	b672      	cpsid	i
    return(int_posture);
 801a0ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801a0bc:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801a0be:	687a      	ldr	r2, [r7, #4]
 801a0c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a0c2:	429a      	cmp	r2, r3
 801a0c4:	d112      	bne.n	801a0ec <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0ca:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801a0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d008      	beq.n	801a0e4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801a0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d8:	d004      	beq.n	801a0e4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	334c      	adds	r3, #76	; 0x4c
 801a0de:	4618      	mov	r0, r3
 801a0e0:	f000 faa4 	bl	801a62c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	69db      	ldr	r3, [r3, #28]
 801a0e8:	4a72      	ldr	r2, [pc, #456]	; (801a2b4 <_tx_thread_system_suspend+0x214>)
 801a0ea:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801a0ec:	4b72      	ldr	r3, [pc, #456]	; (801a2b8 <_tx_thread_system_suspend+0x218>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	3b01      	subs	r3, #1
 801a0f2:	4a71      	ldr	r2, [pc, #452]	; (801a2b8 <_tx_thread_system_suspend+0x218>)
 801a0f4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0fa:	2b01      	cmp	r3, #1
 801a0fc:	f040 80a6 	bne.w	801a24c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2200      	movs	r2, #0
 801a104:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a10a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6a1b      	ldr	r3, [r3, #32]
 801a110:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801a112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	429a      	cmp	r2, r3
 801a118:	d015      	beq.n	801a146 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801a120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a122:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a124:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801a126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a12a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801a12c:	4a63      	ldr	r2, [pc, #396]	; (801a2bc <_tx_thread_system_suspend+0x21c>)
 801a12e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a134:	687a      	ldr	r2, [r7, #4]
 801a136:	429a      	cmp	r2, r3
 801a138:	d157      	bne.n	801a1ea <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801a13a:	4960      	ldr	r1, [pc, #384]	; (801a2bc <_tx_thread_system_suspend+0x21c>)
 801a13c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a13e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a144:	e051      	b.n	801a1ea <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801a146:	4a5d      	ldr	r2, [pc, #372]	; (801a2bc <_tx_thread_system_suspend+0x21c>)
 801a148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a14a:	2100      	movs	r1, #0
 801a14c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 801a150:	2201      	movs	r2, #1
 801a152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a154:	fa02 f303 	lsl.w	r3, r2, r3
 801a158:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801a15a:	4b59      	ldr	r3, [pc, #356]	; (801a2c0 <_tx_thread_system_suspend+0x220>)
 801a15c:	681a      	ldr	r2, [r3, #0]
 801a15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a160:	43db      	mvns	r3, r3
 801a162:	4013      	ands	r3, r2
 801a164:	4a56      	ldr	r2, [pc, #344]	; (801a2c0 <_tx_thread_system_suspend+0x220>)
 801a166:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801a168:	2300      	movs	r3, #0
 801a16a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801a16c:	4b54      	ldr	r3, [pc, #336]	; (801a2c0 <_tx_thread_system_suspend+0x220>)
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801a172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a174:	2b00      	cmp	r3, #0
 801a176:	d12b      	bne.n	801a1d0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801a178:	4b52      	ldr	r3, [pc, #328]	; (801a2c4 <_tx_thread_system_suspend+0x224>)
 801a17a:	2220      	movs	r2, #32
 801a17c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801a17e:	4b52      	ldr	r3, [pc, #328]	; (801a2c8 <_tx_thread_system_suspend+0x228>)
 801a180:	2200      	movs	r2, #0
 801a182:	601a      	str	r2, [r3, #0]
 801a184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a186:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a18a:	f383 8810 	msr	PRIMASK, r3
}
 801a18e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801a190:	4b49      	ldr	r3, [pc, #292]	; (801a2b8 <_tx_thread_system_suspend+0x218>)
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801a196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a198:	2b00      	cmp	r3, #0
 801a19a:	f040 8081 	bne.w	801a2a0 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801a19e:	4b4b      	ldr	r3, [pc, #300]	; (801a2cc <_tx_thread_system_suspend+0x22c>)
 801a1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a1a6:	f3ef 8305 	mrs	r3, IPSR
 801a1aa:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801a1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d10c      	bne.n	801a1cc <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a1b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 801a1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801a1ba:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801a1bc:	b662      	cpsie	i
}
 801a1be:	bf00      	nop
 801a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1c2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1c6:	f383 8810 	msr	PRIMASK, r3
}
 801a1ca:	bf00      	nop
}
 801a1cc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801a1ce:	e067      	b.n	801a2a0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801a1d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a1d2:	fa93 f3a3 	rbit	r3, r3
 801a1d6:	65bb      	str	r3, [r7, #88]	; 0x58
 801a1d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a1da:	fab3 f383 	clz	r3, r3
 801a1de:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801a1e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a1e4:	4413      	add	r3, r2
 801a1e6:	4a37      	ldr	r2, [pc, #220]	; (801a2c4 <_tx_thread_system_suspend+0x224>)
 801a1e8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801a1ea:	4b37      	ldr	r3, [pc, #220]	; (801a2c8 <_tx_thread_system_suspend+0x228>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	687a      	ldr	r2, [r7, #4]
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	d12b      	bne.n	801a24c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801a1f4:	4b33      	ldr	r3, [pc, #204]	; (801a2c4 <_tx_thread_system_suspend+0x224>)
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4a30      	ldr	r2, [pc, #192]	; (801a2bc <_tx_thread_system_suspend+0x21c>)
 801a1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1fe:	4a32      	ldr	r2, [pc, #200]	; (801a2c8 <_tx_thread_system_suspend+0x228>)
 801a200:	6013      	str	r3, [r2, #0]
 801a202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a204:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a208:	f383 8810 	msr	PRIMASK, r3
}
 801a20c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801a20e:	4b2a      	ldr	r3, [pc, #168]	; (801a2b8 <_tx_thread_system_suspend+0x218>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 801a214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a216:	2b00      	cmp	r3, #0
 801a218:	d144      	bne.n	801a2a4 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801a21a:	4b2c      	ldr	r3, [pc, #176]	; (801a2cc <_tx_thread_system_suspend+0x22c>)
 801a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a220:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a222:	f3ef 8305 	mrs	r3, IPSR
 801a226:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 801a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d10c      	bne.n	801a248 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a22e:	f3ef 8310 	mrs	r3, PRIMASK
 801a232:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801a236:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 801a238:	b662      	cpsie	i
}
 801a23a:	bf00      	nop
 801a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a23e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a240:	6a3b      	ldr	r3, [r7, #32]
 801a242:	f383 8810 	msr	PRIMASK, r3
}
 801a246:	bf00      	nop
}
 801a248:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801a24a:	e02b      	b.n	801a2a4 <_tx_thread_system_suspend+0x204>
 801a24c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a24e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a250:	69fb      	ldr	r3, [r7, #28]
 801a252:	f383 8810 	msr	PRIMASK, r3
}
 801a256:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801a258:	4b1b      	ldr	r3, [pc, #108]	; (801a2c8 <_tx_thread_system_suspend+0x228>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a25e:	429a      	cmp	r2, r3
 801a260:	d022      	beq.n	801a2a8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801a262:	4b15      	ldr	r3, [pc, #84]	; (801a2b8 <_tx_thread_system_suspend+0x218>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801a268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d11c      	bne.n	801a2a8 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801a26e:	4b17      	ldr	r3, [pc, #92]	; (801a2cc <_tx_thread_system_suspend+0x22c>)
 801a270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a274:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a276:	f3ef 8305 	mrs	r3, IPSR
 801a27a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801a27c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d10c      	bne.n	801a29c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a282:	f3ef 8310 	mrs	r3, PRIMASK
 801a286:	617b      	str	r3, [r7, #20]
    return(posture);
 801a288:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801a28a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801a28c:	b662      	cpsie	i
}
 801a28e:	bf00      	nop
 801a290:	693b      	ldr	r3, [r7, #16]
 801a292:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	f383 8810 	msr	PRIMASK, r3
}
 801a29a:	bf00      	nop
}
 801a29c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801a29e:	e003      	b.n	801a2a8 <_tx_thread_system_suspend+0x208>
                return;
 801a2a0:	bf00      	nop
 801a2a2:	e002      	b.n	801a2aa <_tx_thread_system_suspend+0x20a>
            return;
 801a2a4:	bf00      	nop
 801a2a6:	e000      	b.n	801a2aa <_tx_thread_system_suspend+0x20a>
    return;
 801a2a8:	bf00      	nop
}
 801a2aa:	3778      	adds	r7, #120	; 0x78
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	240043cc 	.word	0x240043cc
 801a2b4:	240049d0 	.word	0x240049d0
 801a2b8:	24004464 	.word	0x24004464
 801a2bc:	240043e4 	.word	0x240043e4
 801a2c0:	240043dc 	.word	0x240043dc
 801a2c4:	240043e0 	.word	0x240043e0
 801a2c8:	240043d0 	.word	0x240043d0
 801a2cc:	e000ed04 	.word	0xe000ed04

0801a2d0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801a2d0:	b480      	push	{r7}
 801a2d2:	b087      	sub	sp, #28
 801a2d4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801a2d6:	4b21      	ldr	r3, [pc, #132]	; (801a35c <_tx_thread_time_slice+0x8c>)
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a2dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a2e0:	60fb      	str	r3, [r7, #12]
    return(posture);
 801a2e2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801a2e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a2e6:	b672      	cpsid	i
    return(int_posture);
 801a2e8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801a2ea:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801a2ec:	4b1c      	ldr	r3, [pc, #112]	; (801a360 <_tx_thread_time_slice+0x90>)
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d024      	beq.n	801a342 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801a2f8:	697b      	ldr	r3, [r7, #20]
 801a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d120      	bne.n	801a342 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801a300:	697b      	ldr	r3, [r7, #20]
 801a302:	69da      	ldr	r2, [r3, #28]
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	699b      	ldr	r3, [r3, #24]
 801a30c:	4a15      	ldr	r2, [pc, #84]	; (801a364 <_tx_thread_time_slice+0x94>)
 801a30e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801a310:	697b      	ldr	r3, [r7, #20]
 801a312:	6a1b      	ldr	r3, [r3, #32]
 801a314:	697a      	ldr	r2, [r7, #20]
 801a316:	429a      	cmp	r2, r3
 801a318:	d013      	beq.n	801a342 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801a31a:	697b      	ldr	r3, [r7, #20]
 801a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a31e:	697b      	ldr	r3, [r7, #20]
 801a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a322:	429a      	cmp	r2, r3
 801a324:	d10d      	bne.n	801a342 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801a326:	697b      	ldr	r3, [r7, #20]
 801a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a32a:	697a      	ldr	r2, [r7, #20]
 801a32c:	6a12      	ldr	r2, [r2, #32]
 801a32e:	490e      	ldr	r1, [pc, #56]	; (801a368 <_tx_thread_time_slice+0x98>)
 801a330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801a334:	4b0d      	ldr	r3, [pc, #52]	; (801a36c <_tx_thread_time_slice+0x9c>)
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	4a0b      	ldr	r2, [pc, #44]	; (801a368 <_tx_thread_time_slice+0x98>)
 801a33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a33e:	4a0c      	ldr	r2, [pc, #48]	; (801a370 <_tx_thread_time_slice+0xa0>)
 801a340:	6013      	str	r3, [r2, #0]
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	f383 8810 	msr	PRIMASK, r3
}
 801a34c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801a34e:	bf00      	nop
 801a350:	371c      	adds	r7, #28
 801a352:	46bd      	mov	sp, r7
 801a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop
 801a35c:	240043cc 	.word	0x240043cc
 801a360:	24004474 	.word	0x24004474
 801a364:	240049d0 	.word	0x240049d0
 801a368:	240043e4 	.word	0x240043e4
 801a36c:	240043e0 	.word	0x240043e0
 801a370:	240043d0 	.word	0x240043d0

0801a374 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b08a      	sub	sp, #40	; 0x28
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a380:	f3ef 8310 	mrs	r3, PRIMASK
 801a384:	617b      	str	r3, [r7, #20]
    return(posture);
 801a386:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801a388:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a38a:	b672      	cpsid	i
    return(int_posture);
 801a38c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801a38e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a394:	2b04      	cmp	r3, #4
 801a396:	d10e      	bne.n	801a3b6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801a398:	4b13      	ldr	r3, [pc, #76]	; (801a3e8 <_tx_thread_timeout+0x74>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	3301      	adds	r3, #1
 801a39e:	4a12      	ldr	r2, [pc, #72]	; (801a3e8 <_tx_thread_timeout+0x74>)
 801a3a0:	6013      	str	r3, [r2, #0]
 801a3a2:	6a3b      	ldr	r3, [r7, #32]
 801a3a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	f383 8810 	msr	PRIMASK, r3
}
 801a3ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801a3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3b0:	f7ff fd76 	bl	8019ea0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801a3b4:	e013      	b.n	801a3de <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a3ba:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a3c2:	61bb      	str	r3, [r7, #24]
 801a3c4:	6a3b      	ldr	r3, [r7, #32]
 801a3c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	f383 8810 	msr	PRIMASK, r3
}
 801a3ce:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d003      	beq.n	801a3de <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801a3d6:	69fb      	ldr	r3, [r7, #28]
 801a3d8:	69b9      	ldr	r1, [r7, #24]
 801a3da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3dc:	4798      	blx	r3
}
 801a3de:	bf00      	nop
 801a3e0:	3728      	adds	r7, #40	; 0x28
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	24004464 	.word	0x24004464

0801a3ec <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 801a3ec:	b480      	push	{r7}
 801a3ee:	b087      	sub	sp, #28
 801a3f0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a3f2:	f3ef 8310 	mrs	r3, PRIMASK
 801a3f6:	60bb      	str	r3, [r7, #8]
    return(posture);
 801a3f8:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801a3fa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a3fc:	b672      	cpsid	i
    return(int_posture);
 801a3fe:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 801a400:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801a402:	4b08      	ldr	r3, [pc, #32]	; (801a424 <_tx_time_get+0x38>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	613b      	str	r3, [r7, #16]
 801a408:	697b      	ldr	r3, [r7, #20]
 801a40a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	f383 8810 	msr	PRIMASK, r3
}
 801a412:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 801a414:	693b      	ldr	r3, [r7, #16]
}
 801a416:	4618      	mov	r0, r3
 801a418:	371c      	adds	r7, #28
 801a41a:	46bd      	mov	sp, r7
 801a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a420:	4770      	bx	lr
 801a422:	bf00      	nop
 801a424:	24004470 	.word	0x24004470

0801a428 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b08a      	sub	sp, #40	; 0x28
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	60f8      	str	r0, [r7, #12]
 801a430:	60b9      	str	r1, [r7, #8]
 801a432:	607a      	str	r2, [r7, #4]
 801a434:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801a436:	222c      	movs	r2, #44	; 0x2c
 801a438:	2100      	movs	r1, #0
 801a43a:	68f8      	ldr	r0, [r7, #12]
 801a43c:	f000 fe1c 	bl	801b078 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	68ba      	ldr	r2, [r7, #8]
 801a444:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a44a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a450:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	683a      	ldr	r2, [r7, #0]
 801a45c:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a45e:	f3ef 8310 	mrs	r3, PRIMASK
 801a462:	61bb      	str	r3, [r7, #24]
    return(posture);
 801a464:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801a466:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a468:	b672      	cpsid	i
    return(int_posture);
 801a46a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801a46c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	4a1c      	ldr	r2, [pc, #112]	; (801a4e4 <_tx_timer_create+0xbc>)
 801a472:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801a474:	4b1c      	ldr	r3, [pc, #112]	; (801a4e8 <_tx_timer_create+0xc0>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d109      	bne.n	801a490 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 801a47c:	4a1b      	ldr	r2, [pc, #108]	; (801a4ec <_tx_timer_create+0xc4>)
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	68fa      	ldr	r2, [r7, #12]
 801a486:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	68fa      	ldr	r2, [r7, #12]
 801a48c:	629a      	str	r2, [r3, #40]	; 0x28
 801a48e:	e011      	b.n	801a4b4 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 801a490:	4b16      	ldr	r3, [pc, #88]	; (801a4ec <_tx_timer_create+0xc4>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801a496:	6a3b      	ldr	r3, [r7, #32]
 801a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a49a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 801a49c:	6a3b      	ldr	r3, [r7, #32]
 801a49e:	68fa      	ldr	r2, [r7, #12]
 801a4a0:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	68fa      	ldr	r2, [r7, #12]
 801a4a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	69fa      	ldr	r2, [r7, #28]
 801a4ac:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	6a3a      	ldr	r2, [r7, #32]
 801a4b2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801a4b4:	4b0c      	ldr	r3, [pc, #48]	; (801a4e8 <_tx_timer_create+0xc0>)
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	3301      	adds	r3, #1
 801a4ba:	4a0b      	ldr	r2, [pc, #44]	; (801a4e8 <_tx_timer_create+0xc0>)
 801a4bc:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d104      	bne.n	801a4ce <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	3308      	adds	r3, #8
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f000 f8af 	bl	801a62c <_tx_timer_system_activate>
 801a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	f383 8810 	msr	PRIMASK, r3
}
 801a4d8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801a4da:	2300      	movs	r3, #0
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3728      	adds	r7, #40	; 0x28
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	4154494d 	.word	0x4154494d
 801a4e8:	2400450c 	.word	0x2400450c
 801a4ec:	24004508 	.word	0x24004508

0801a4f0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b084      	sub	sp, #16
 801a4f4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a4f6:	f3ef 8310 	mrs	r3, PRIMASK
 801a4fa:	607b      	str	r3, [r7, #4]
    return(posture);
 801a4fc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801a4fe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a500:	b672      	cpsid	i
    return(int_posture);
 801a502:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801a504:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801a506:	4b09      	ldr	r3, [pc, #36]	; (801a52c <_tx_timer_expiration_process+0x3c>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	3301      	adds	r3, #1
 801a50c:	4a07      	ldr	r2, [pc, #28]	; (801a52c <_tx_timer_expiration_process+0x3c>)
 801a50e:	6013      	str	r3, [r2, #0]
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	f383 8810 	msr	PRIMASK, r3
}
 801a51a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801a51c:	4804      	ldr	r0, [pc, #16]	; (801a530 <_tx_timer_expiration_process+0x40>)
 801a51e:	f7ff fcbf 	bl	8019ea0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801a522:	bf00      	nop
 801a524:	3710      	adds	r7, #16
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}
 801a52a:	bf00      	nop
 801a52c:	24004464 	.word	0x24004464
 801a530:	24004514 	.word	0x24004514

0801a534 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801a534:	b590      	push	{r4, r7, lr}
 801a536:	b089      	sub	sp, #36	; 0x24
 801a538:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801a53a:	4b28      	ldr	r3, [pc, #160]	; (801a5dc <_tx_timer_initialize+0xa8>)
 801a53c:	2200      	movs	r2, #0
 801a53e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801a540:	4b27      	ldr	r3, [pc, #156]	; (801a5e0 <_tx_timer_initialize+0xac>)
 801a542:	2200      	movs	r2, #0
 801a544:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801a546:	4b27      	ldr	r3, [pc, #156]	; (801a5e4 <_tx_timer_initialize+0xb0>)
 801a548:	2200      	movs	r2, #0
 801a54a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801a54c:	4b26      	ldr	r3, [pc, #152]	; (801a5e8 <_tx_timer_initialize+0xb4>)
 801a54e:	2200      	movs	r2, #0
 801a550:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801a552:	4b26      	ldr	r3, [pc, #152]	; (801a5ec <_tx_timer_initialize+0xb8>)
 801a554:	2200      	movs	r2, #0
 801a556:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801a558:	2280      	movs	r2, #128	; 0x80
 801a55a:	2100      	movs	r1, #0
 801a55c:	4824      	ldr	r0, [pc, #144]	; (801a5f0 <_tx_timer_initialize+0xbc>)
 801a55e:	f000 fd8b 	bl	801b078 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801a562:	4b24      	ldr	r3, [pc, #144]	; (801a5f4 <_tx_timer_initialize+0xc0>)
 801a564:	4a22      	ldr	r2, [pc, #136]	; (801a5f0 <_tx_timer_initialize+0xbc>)
 801a566:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801a568:	4b23      	ldr	r3, [pc, #140]	; (801a5f8 <_tx_timer_initialize+0xc4>)
 801a56a:	4a21      	ldr	r2, [pc, #132]	; (801a5f0 <_tx_timer_initialize+0xbc>)
 801a56c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801a56e:	4b23      	ldr	r3, [pc, #140]	; (801a5fc <_tx_timer_initialize+0xc8>)
 801a570:	4a23      	ldr	r2, [pc, #140]	; (801a600 <_tx_timer_initialize+0xcc>)
 801a572:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801a574:	4b21      	ldr	r3, [pc, #132]	; (801a5fc <_tx_timer_initialize+0xc8>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	3304      	adds	r3, #4
 801a57a:	4a20      	ldr	r2, [pc, #128]	; (801a5fc <_tx_timer_initialize+0xc8>)
 801a57c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801a57e:	4b21      	ldr	r3, [pc, #132]	; (801a604 <_tx_timer_initialize+0xd0>)
 801a580:	4a21      	ldr	r2, [pc, #132]	; (801a608 <_tx_timer_initialize+0xd4>)
 801a582:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801a584:	4b21      	ldr	r3, [pc, #132]	; (801a60c <_tx_timer_initialize+0xd8>)
 801a586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a58a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801a58c:	4b20      	ldr	r3, [pc, #128]	; (801a610 <_tx_timer_initialize+0xdc>)
 801a58e:	2200      	movs	r2, #0
 801a590:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801a592:	4b1c      	ldr	r3, [pc, #112]	; (801a604 <_tx_timer_initialize+0xd0>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	4a1d      	ldr	r2, [pc, #116]	; (801a60c <_tx_timer_initialize+0xd8>)
 801a598:	6812      	ldr	r2, [r2, #0]
 801a59a:	491d      	ldr	r1, [pc, #116]	; (801a610 <_tx_timer_initialize+0xdc>)
 801a59c:	6809      	ldr	r1, [r1, #0]
 801a59e:	481c      	ldr	r0, [pc, #112]	; (801a610 <_tx_timer_initialize+0xdc>)
 801a5a0:	6800      	ldr	r0, [r0, #0]
 801a5a2:	2400      	movs	r4, #0
 801a5a4:	9405      	str	r4, [sp, #20]
 801a5a6:	2400      	movs	r4, #0
 801a5a8:	9404      	str	r4, [sp, #16]
 801a5aa:	9003      	str	r0, [sp, #12]
 801a5ac:	9102      	str	r1, [sp, #8]
 801a5ae:	9201      	str	r2, [sp, #4]
 801a5b0:	9300      	str	r3, [sp, #0]
 801a5b2:	4b18      	ldr	r3, [pc, #96]	; (801a614 <_tx_timer_initialize+0xe0>)
 801a5b4:	4a18      	ldr	r2, [pc, #96]	; (801a618 <_tx_timer_initialize+0xe4>)
 801a5b6:	4919      	ldr	r1, [pc, #100]	; (801a61c <_tx_timer_initialize+0xe8>)
 801a5b8:	4819      	ldr	r0, [pc, #100]	; (801a620 <_tx_timer_initialize+0xec>)
 801a5ba:	f7ff f9a7 	bl	801990c <_tx_thread_create>
 801a5be:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d1e5      	bne.n	801a592 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801a5c6:	4b17      	ldr	r3, [pc, #92]	; (801a624 <_tx_timer_initialize+0xf0>)
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801a5cc:	4b16      	ldr	r3, [pc, #88]	; (801a628 <_tx_timer_initialize+0xf4>)
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801a5d2:	bf00      	nop
 801a5d4:	370c      	adds	r7, #12
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bd90      	pop	{r4, r7, pc}
 801a5da:	bf00      	nop
 801a5dc:	24004470 	.word	0x24004470
 801a5e0:	240049d0 	.word	0x240049d0
 801a5e4:	24004474 	.word	0x24004474
 801a5e8:	24004504 	.word	0x24004504
 801a5ec:	24004510 	.word	0x24004510
 801a5f0:	24004478 	.word	0x24004478
 801a5f4:	240044f8 	.word	0x240044f8
 801a5f8:	24004500 	.word	0x24004500
 801a5fc:	240044fc 	.word	0x240044fc
 801a600:	240044f4 	.word	0x240044f4
 801a604:	240045c4 	.word	0x240045c4
 801a608:	240045d0 	.word	0x240045d0
 801a60c:	240045c8 	.word	0x240045c8
 801a610:	240045cc 	.word	0x240045cc
 801a614:	4154494d 	.word	0x4154494d
 801a618:	0801a761 	.word	0x0801a761
 801a61c:	0801bc3c 	.word	0x0801bc3c
 801a620:	24004514 	.word	0x24004514
 801a624:	24004508 	.word	0x24004508
 801a628:	2400450c 	.word	0x2400450c

0801a62c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801a62c:	b480      	push	{r7}
 801a62e:	b089      	sub	sp, #36	; 0x24
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d04a      	beq.n	801a6d6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801a640:	697b      	ldr	r3, [r7, #20]
 801a642:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a646:	d046      	beq.n	801a6d6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	699b      	ldr	r3, [r3, #24]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d142      	bne.n	801a6d6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801a650:	697b      	ldr	r3, [r7, #20]
 801a652:	2b20      	cmp	r3, #32
 801a654:	d902      	bls.n	801a65c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801a656:	231f      	movs	r3, #31
 801a658:	61bb      	str	r3, [r7, #24]
 801a65a:	e002      	b.n	801a662 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	3b01      	subs	r3, #1
 801a660:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801a662:	4b20      	ldr	r3, [pc, #128]	; (801a6e4 <_tx_timer_system_activate+0xb8>)
 801a664:	681a      	ldr	r2, [r3, #0]
 801a666:	69bb      	ldr	r3, [r7, #24]
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	4413      	add	r3, r2
 801a66c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801a66e:	4b1e      	ldr	r3, [pc, #120]	; (801a6e8 <_tx_timer_system_activate+0xbc>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	69fa      	ldr	r2, [r7, #28]
 801a674:	429a      	cmp	r2, r3
 801a676:	d30b      	bcc.n	801a690 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801a678:	4b1b      	ldr	r3, [pc, #108]	; (801a6e8 <_tx_timer_system_activate+0xbc>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	69fa      	ldr	r2, [r7, #28]
 801a67e:	1ad3      	subs	r3, r2, r3
 801a680:	109b      	asrs	r3, r3, #2
 801a682:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801a684:	4b19      	ldr	r3, [pc, #100]	; (801a6ec <_tx_timer_system_activate+0xc0>)
 801a686:	681a      	ldr	r2, [r3, #0]
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	4413      	add	r3, r2
 801a68e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 801a690:	69fb      	ldr	r3, [r7, #28]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d109      	bne.n	801a6ac <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	687a      	ldr	r2, [r7, #4]
 801a69c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	687a      	ldr	r2, [r7, #4]
 801a6a2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801a6a4:	69fb      	ldr	r3, [r7, #28]
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	601a      	str	r2, [r3, #0]
 801a6aa:	e011      	b.n	801a6d0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801a6ac:	69fb      	ldr	r3, [r7, #28]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	695b      	ldr	r3, [r3, #20]
 801a6b6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	687a      	ldr	r2, [r7, #4]
 801a6bc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	687a      	ldr	r2, [r7, #4]
 801a6c2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	68fa      	ldr	r2, [r7, #12]
 801a6c8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	68ba      	ldr	r2, [r7, #8]
 801a6ce:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	69fa      	ldr	r2, [r7, #28]
 801a6d4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801a6d6:	bf00      	nop
 801a6d8:	3724      	adds	r7, #36	; 0x24
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e0:	4770      	bx	lr
 801a6e2:	bf00      	nop
 801a6e4:	24004500 	.word	0x24004500
 801a6e8:	240044fc 	.word	0x240044fc
 801a6ec:	240044f8 	.word	0x240044f8

0801a6f0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b087      	sub	sp, #28
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	699b      	ldr	r3, [r3, #24]
 801a6fc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d026      	beq.n	801a752 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	691b      	ldr	r3, [r3, #16]
 801a708:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801a70a:	687a      	ldr	r2, [r7, #4]
 801a70c:	693b      	ldr	r3, [r7, #16]
 801a70e:	429a      	cmp	r2, r3
 801a710:	d108      	bne.n	801a724 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	429a      	cmp	r2, r3
 801a71a:	d117      	bne.n	801a74c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	2200      	movs	r2, #0
 801a720:	601a      	str	r2, [r3, #0]
 801a722:	e013      	b.n	801a74c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	695b      	ldr	r3, [r3, #20]
 801a728:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801a72a:	693b      	ldr	r3, [r7, #16]
 801a72c:	68fa      	ldr	r2, [r7, #12]
 801a72e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	693a      	ldr	r2, [r7, #16]
 801a734:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801a736:	697b      	ldr	r3, [r7, #20]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d105      	bne.n	801a74c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801a740:	693b      	ldr	r3, [r7, #16]
 801a742:	697a      	ldr	r2, [r7, #20]
 801a744:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	693a      	ldr	r2, [r7, #16]
 801a74a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2200      	movs	r2, #0
 801a750:	619a      	str	r2, [r3, #24]
    }
}
 801a752:	bf00      	nop
 801a754:	371c      	adds	r7, #28
 801a756:	46bd      	mov	sp, r7
 801a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75c:	4770      	bx	lr
	...

0801a760 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b098      	sub	sp, #96	; 0x60
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801a768:	2300      	movs	r3, #0
 801a76a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	4a73      	ldr	r2, [pc, #460]	; (801a93c <_tx_timer_thread_entry+0x1dc>)
 801a770:	4293      	cmp	r3, r2
 801a772:	f040 80de 	bne.w	801a932 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a776:	f3ef 8310 	mrs	r3, PRIMASK
 801a77a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801a77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801a780:	b672      	cpsid	i
    return(int_posture);
 801a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801a784:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801a786:	4b6e      	ldr	r3, [pc, #440]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d003      	beq.n	801a79c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	f107 020c 	add.w	r2, r7, #12
 801a79a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801a79c:	4b68      	ldr	r3, [pc, #416]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801a7a4:	4b66      	ldr	r3, [pc, #408]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	3304      	adds	r3, #4
 801a7aa:	4a65      	ldr	r2, [pc, #404]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a7ac:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801a7ae:	4b64      	ldr	r3, [pc, #400]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	4b64      	ldr	r3, [pc, #400]	; (801a944 <_tx_timer_thread_entry+0x1e4>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	d103      	bne.n	801a7c2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801a7ba:	4b63      	ldr	r3, [pc, #396]	; (801a948 <_tx_timer_thread_entry+0x1e8>)
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a60      	ldr	r2, [pc, #384]	; (801a940 <_tx_timer_thread_entry+0x1e0>)
 801a7c0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801a7c2:	4b62      	ldr	r3, [pc, #392]	; (801a94c <_tx_timer_thread_entry+0x1ec>)
 801a7c4:	2200      	movs	r2, #0
 801a7c6:	601a      	str	r2, [r3, #0]
 801a7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a7ca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ce:	f383 8810 	msr	PRIMASK, r3
}
 801a7d2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a7d4:	f3ef 8310 	mrs	r3, PRIMASK
 801a7d8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801a7dc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801a7de:	b672      	cpsid	i
    return(int_posture);
 801a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801a7e2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801a7e4:	e07f      	b.n	801a8e6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	691b      	ldr	r3, [r3, #16]
 801a7ee:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801a7f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d102      	bne.n	801a802 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	60fb      	str	r3, [r7, #12]
 801a800:	e00e      	b.n	801a820 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801a802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a804:	695b      	ldr	r3, [r3, #20]
 801a806:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801a808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a80a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a80c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801a80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a812:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801a814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a816:	f107 020c 	add.w	r2, r7, #12
 801a81a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801a81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a81e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801a820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	2b20      	cmp	r3, #32
 801a826:	d911      	bls.n	801a84c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801a828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 801a830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a832:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801a834:	2300      	movs	r3, #0
 801a836:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801a838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a83a:	f107 0208 	add.w	r2, r7, #8
 801a83e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a844:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801a846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a848:	60bb      	str	r3, [r7, #8]
 801a84a:	e01a      	b.n	801a882 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801a84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a84e:	689b      	ldr	r3, [r3, #8]
 801a850:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801a852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a854:	68db      	ldr	r3, [r3, #12]
 801a856:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801a858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a85a:	685a      	ldr	r2, [r3, #4]
 801a85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a85e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801a860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d009      	beq.n	801a87c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801a868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a86a:	f107 0208 	add.w	r2, r7, #8
 801a86e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801a870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a874:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a878:	60bb      	str	r3, [r7, #8]
 801a87a:	e002      	b.n	801a882 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801a87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a87e:	2200      	movs	r2, #0
 801a880:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801a882:	4a33      	ldr	r2, [pc, #204]	; (801a950 <_tx_timer_thread_entry+0x1f0>)
 801a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a886:	6013      	str	r3, [r2, #0]
 801a888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88e:	f383 8810 	msr	PRIMASK, r3
}
 801a892:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801a894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a896:	2b00      	cmp	r3, #0
 801a898:	d002      	beq.n	801a8a0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801a89a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a89c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a89e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a8a0:	f3ef 8310 	mrs	r3, PRIMASK
 801a8a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801a8a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801a8aa:	b672      	cpsid	i
    return(int_posture);
 801a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801a8ae:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 801a8b0:	4b27      	ldr	r3, [pc, #156]	; (801a950 <_tx_timer_thread_entry+0x1f0>)
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d105      	bne.n	801a8ca <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801a8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8c0:	2200      	movs	r2, #0
 801a8c2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801a8c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a8c6:	f7ff feb1 	bl	801a62c <_tx_timer_system_activate>
 801a8ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a8cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a8ce:	69bb      	ldr	r3, [r7, #24]
 801a8d0:	f383 8810 	msr	PRIMASK, r3
}
 801a8d4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801a8d6:	f3ef 8310 	mrs	r3, PRIMASK
 801a8da:	623b      	str	r3, [r7, #32]
    return(posture);
 801a8dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801a8de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801a8e0:	b672      	cpsid	i
    return(int_posture);
 801a8e2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801a8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	f47f af7c 	bne.w	801a7e6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801a8ee:	4b17      	ldr	r3, [pc, #92]	; (801a94c <_tx_timer_thread_entry+0x1ec>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d116      	bne.n	801a924 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801a8f6:	4b17      	ldr	r3, [pc, #92]	; (801a954 <_tx_timer_thread_entry+0x1f4>)
 801a8f8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801a8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8fc:	2203      	movs	r2, #3
 801a8fe:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801a900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a902:	2201      	movs	r2, #1
 801a904:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801a906:	4b14      	ldr	r3, [pc, #80]	; (801a958 <_tx_timer_thread_entry+0x1f8>)
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	3301      	adds	r3, #1
 801a90c:	4a12      	ldr	r2, [pc, #72]	; (801a958 <_tx_timer_thread_entry+0x1f8>)
 801a90e:	6013      	str	r3, [r2, #0]
 801a910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a912:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	f383 8810 	msr	PRIMASK, r3
}
 801a91a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801a91c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a91e:	f7ff fbbf 	bl	801a0a0 <_tx_thread_system_suspend>
 801a922:	e728      	b.n	801a776 <_tx_timer_thread_entry+0x16>
 801a924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a926:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801a928:	693b      	ldr	r3, [r7, #16]
 801a92a:	f383 8810 	msr	PRIMASK, r3
}
 801a92e:	bf00      	nop
            TX_DISABLE
 801a930:	e721      	b.n	801a776 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801a932:	bf00      	nop
 801a934:	3760      	adds	r7, #96	; 0x60
 801a936:	46bd      	mov	sp, r7
 801a938:	bd80      	pop	{r7, pc}
 801a93a:	bf00      	nop
 801a93c:	4154494d 	.word	0x4154494d
 801a940:	24004500 	.word	0x24004500
 801a944:	240044fc 	.word	0x240044fc
 801a948:	240044f8 	.word	0x240044f8
 801a94c:	24004504 	.word	0x24004504
 801a950:	24004510 	.word	0x24004510
 801a954:	24004514 	.word	0x24004514
 801a958:	24004464 	.word	0x24004464

0801a95c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b08a      	sub	sp, #40	; 0x28
 801a960:	af00      	add	r7, sp, #0
 801a962:	60f8      	str	r0, [r7, #12]
 801a964:	60b9      	str	r1, [r7, #8]
 801a966:	607a      	str	r2, [r7, #4]
 801a968:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801a96a:	2300      	movs	r3, #0
 801a96c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	2b00      	cmp	r3, #0
 801a972:	d102      	bne.n	801a97a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801a974:	2302      	movs	r3, #2
 801a976:	627b      	str	r3, [r7, #36]	; 0x24
 801a978:	e029      	b.n	801a9ce <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	4a2d      	ldr	r2, [pc, #180]	; (801aa34 <_txe_byte_allocate+0xd8>)
 801a980:	4293      	cmp	r3, r2
 801a982:	d002      	beq.n	801a98a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801a984:	2302      	movs	r3, #2
 801a986:	627b      	str	r3, [r7, #36]	; 0x24
 801a988:	e021      	b.n	801a9ce <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d102      	bne.n	801a996 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801a990:	2303      	movs	r3, #3
 801a992:	627b      	str	r3, [r7, #36]	; 0x24
 801a994:	e01b      	b.n	801a9ce <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d102      	bne.n	801a9a2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801a99c:	2305      	movs	r3, #5
 801a99e:	627b      	str	r3, [r7, #36]	; 0x24
 801a9a0:	e015      	b.n	801a9ce <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	69db      	ldr	r3, [r3, #28]
 801a9a6:	687a      	ldr	r2, [r7, #4]
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	d902      	bls.n	801a9b2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801a9ac:	2305      	movs	r3, #5
 801a9ae:	627b      	str	r3, [r7, #36]	; 0x24
 801a9b0:	e00d      	b.n	801a9ce <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d00a      	beq.n	801a9ce <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a9b8:	f3ef 8305 	mrs	r3, IPSR
 801a9bc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801a9be:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801a9c0:	4b1d      	ldr	r3, [pc, #116]	; (801aa38 <_txe_byte_allocate+0xdc>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	4313      	orrs	r3, r2
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d001      	beq.n	801a9ce <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801a9ca:	2304      	movs	r3, #4
 801a9cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d108      	bne.n	801a9e6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801a9d4:	4b19      	ldr	r3, [pc, #100]	; (801aa3c <_txe_byte_allocate+0xe0>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801a9da:	6a3b      	ldr	r3, [r7, #32]
 801a9dc:	4a18      	ldr	r2, [pc, #96]	; (801aa40 <_txe_byte_allocate+0xe4>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d101      	bne.n	801a9e6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801a9e2:	2313      	movs	r3, #19
 801a9e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d114      	bne.n	801aa16 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a9ec:	f3ef 8305 	mrs	r3, IPSR
 801a9f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801a9f2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801a9f4:	4b10      	ldr	r3, [pc, #64]	; (801aa38 <_txe_byte_allocate+0xdc>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	4313      	orrs	r3, r2
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d00b      	beq.n	801aa16 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801a9fe:	f3ef 8305 	mrs	r3, IPSR
 801aa02:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801aa04:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801aa06:	4b0c      	ldr	r3, [pc, #48]	; (801aa38 <_txe_byte_allocate+0xdc>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	4313      	orrs	r3, r2
 801aa0c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801aa10:	d201      	bcs.n	801aa16 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801aa12:	2313      	movs	r3, #19
 801aa14:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d106      	bne.n	801aa2a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	687a      	ldr	r2, [r7, #4]
 801aa20:	68b9      	ldr	r1, [r7, #8]
 801aa22:	68f8      	ldr	r0, [r7, #12]
 801aa24:	f7fd fb74 	bl	8018110 <_tx_byte_allocate>
 801aa28:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	3728      	adds	r7, #40	; 0x28
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}
 801aa34:	42595445 	.word	0x42595445
 801aa38:	2400006c 	.word	0x2400006c
 801aa3c:	240043cc 	.word	0x240043cc
 801aa40:	24004514 	.word	0x24004514

0801aa44 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b092      	sub	sp, #72	; 0x48
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	60f8      	str	r0, [r7, #12]
 801aa4c:	60b9      	str	r1, [r7, #8]
 801aa4e:	607a      	str	r2, [r7, #4]
 801aa50:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801aa52:	2300      	movs	r3, #0
 801aa54:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d102      	bne.n	801aa62 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801aa5c:	2302      	movs	r3, #2
 801aa5e:	647b      	str	r3, [r7, #68]	; 0x44
 801aa60:	e075      	b.n	801ab4e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801aa62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa64:	2b34      	cmp	r3, #52	; 0x34
 801aa66:	d002      	beq.n	801aa6e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801aa68:	2302      	movs	r3, #2
 801aa6a:	647b      	str	r3, [r7, #68]	; 0x44
 801aa6c:	e06f      	b.n	801ab4e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801aa6e:	f3ef 8310 	mrs	r3, PRIMASK
 801aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801aa76:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801aa78:	b672      	cpsid	i
    return(int_posture);
 801aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801aa7c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801aa7e:	4b3b      	ldr	r3, [pc, #236]	; (801ab6c <_txe_byte_pool_create+0x128>)
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	3301      	adds	r3, #1
 801aa84:	4a39      	ldr	r2, [pc, #228]	; (801ab6c <_txe_byte_pool_create+0x128>)
 801aa86:	6013      	str	r3, [r2, #0]
 801aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa8a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa8e:	f383 8810 	msr	PRIMASK, r3
}
 801aa92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801aa94:	4b36      	ldr	r3, [pc, #216]	; (801ab70 <_txe_byte_pool_create+0x12c>)
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	643b      	str	r3, [r7, #64]	; 0x40
 801aa9e:	e009      	b.n	801aab4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 801aaa0:	68fa      	ldr	r2, [r7, #12]
 801aaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d00b      	beq.n	801aac0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 801aaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801aaae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aab0:	3301      	adds	r3, #1
 801aab2:	643b      	str	r3, [r7, #64]	; 0x40
 801aab4:	4b2f      	ldr	r3, [pc, #188]	; (801ab74 <_txe_byte_pool_create+0x130>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801aaba:	429a      	cmp	r2, r3
 801aabc:	d3f0      	bcc.n	801aaa0 <_txe_byte_pool_create+0x5c>
 801aabe:	e000      	b.n	801aac2 <_txe_byte_pool_create+0x7e>
                break;
 801aac0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801aac2:	f3ef 8310 	mrs	r3, PRIMASK
 801aac6:	623b      	str	r3, [r7, #32]
    return(posture);
 801aac8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801aaca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801aacc:	b672      	cpsid	i
    return(int_posture);
 801aace:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801aad0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801aad2:	4b26      	ldr	r3, [pc, #152]	; (801ab6c <_txe_byte_pool_create+0x128>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	3b01      	subs	r3, #1
 801aad8:	4a24      	ldr	r2, [pc, #144]	; (801ab6c <_txe_byte_pool_create+0x128>)
 801aada:	6013      	str	r3, [r2, #0]
 801aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aade:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae2:	f383 8810 	msr	PRIMASK, r3
}
 801aae6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801aae8:	f7ff f9a0 	bl	8019e2c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801aaec:	68fa      	ldr	r2, [r7, #12]
 801aaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d102      	bne.n	801aafa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801aaf4:	2302      	movs	r3, #2
 801aaf6:	647b      	str	r3, [r7, #68]	; 0x44
 801aaf8:	e029      	b.n	801ab4e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d102      	bne.n	801ab06 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801ab00:	2303      	movs	r3, #3
 801ab02:	647b      	str	r3, [r7, #68]	; 0x44
 801ab04:	e023      	b.n	801ab4e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	2b63      	cmp	r3, #99	; 0x63
 801ab0a:	d802      	bhi.n	801ab12 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801ab0c:	2305      	movs	r3, #5
 801ab0e:	647b      	str	r3, [r7, #68]	; 0x44
 801ab10:	e01d      	b.n	801ab4e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801ab12:	4b19      	ldr	r3, [pc, #100]	; (801ab78 <_txe_byte_pool_create+0x134>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801ab18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab1a:	4a18      	ldr	r2, [pc, #96]	; (801ab7c <_txe_byte_pool_create+0x138>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d101      	bne.n	801ab24 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801ab20:	2313      	movs	r3, #19
 801ab22:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ab24:	f3ef 8305 	mrs	r3, IPSR
 801ab28:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801ab2a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801ab2c:	4b14      	ldr	r3, [pc, #80]	; (801ab80 <_txe_byte_pool_create+0x13c>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	4313      	orrs	r3, r2
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d00b      	beq.n	801ab4e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ab36:	f3ef 8305 	mrs	r3, IPSR
 801ab3a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801ab3c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801ab3e:	4b10      	ldr	r3, [pc, #64]	; (801ab80 <_txe_byte_pool_create+0x13c>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4313      	orrs	r3, r2
 801ab44:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801ab48:	d201      	bcs.n	801ab4e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801ab4a:	2313      	movs	r3, #19
 801ab4c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801ab4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d106      	bne.n	801ab62 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	687a      	ldr	r2, [r7, #4]
 801ab58:	68b9      	ldr	r1, [r7, #8]
 801ab5a:	68f8      	ldr	r0, [r7, #12]
 801ab5c:	f7fd fc1a 	bl	8018394 <_tx_byte_pool_create>
 801ab60:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801ab62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	3748      	adds	r7, #72	; 0x48
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	24004464 	.word	0x24004464
 801ab70:	240043bc 	.word	0x240043bc
 801ab74:	240043c0 	.word	0x240043c0
 801ab78:	240043cc 	.word	0x240043cc
 801ab7c:	24004514 	.word	0x24004514
 801ab80:	2400006c 	.word	0x2400006c

0801ab84 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b092      	sub	sp, #72	; 0x48
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	60f8      	str	r0, [r7, #12]
 801ab8c:	60b9      	str	r1, [r7, #8]
 801ab8e:	607a      	str	r2, [r7, #4]
 801ab90:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801ab92:	2300      	movs	r3, #0
 801ab94:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d102      	bne.n	801aba2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801ab9c:	230c      	movs	r3, #12
 801ab9e:	647b      	str	r3, [r7, #68]	; 0x44
 801aba0:	e054      	b.n	801ac4c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801aba2:	683b      	ldr	r3, [r7, #0]
 801aba4:	2b1c      	cmp	r3, #28
 801aba6:	d002      	beq.n	801abae <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801aba8:	230c      	movs	r3, #12
 801abaa:	647b      	str	r3, [r7, #68]	; 0x44
 801abac:	e04e      	b.n	801ac4c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801abae:	f3ef 8310 	mrs	r3, PRIMASK
 801abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801abb6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801abb8:	b672      	cpsid	i
    return(int_posture);
 801abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801abbc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801abbe:	4b36      	ldr	r3, [pc, #216]	; (801ac98 <_txe_semaphore_create+0x114>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	3301      	adds	r3, #1
 801abc4:	4a34      	ldr	r2, [pc, #208]	; (801ac98 <_txe_semaphore_create+0x114>)
 801abc6:	6013      	str	r3, [r2, #0]
 801abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abce:	f383 8810 	msr	PRIMASK, r3
}
 801abd2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801abd4:	4b31      	ldr	r3, [pc, #196]	; (801ac9c <_txe_semaphore_create+0x118>)
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801abda:	2300      	movs	r3, #0
 801abdc:	643b      	str	r3, [r7, #64]	; 0x40
 801abde:	e009      	b.n	801abf4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 801abe0:	68fa      	ldr	r2, [r7, #12]
 801abe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abe4:	429a      	cmp	r2, r3
 801abe6:	d00b      	beq.n	801ac00 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801abe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abea:	695b      	ldr	r3, [r3, #20]
 801abec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801abee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801abf0:	3301      	adds	r3, #1
 801abf2:	643b      	str	r3, [r7, #64]	; 0x40
 801abf4:	4b2a      	ldr	r3, [pc, #168]	; (801aca0 <_txe_semaphore_create+0x11c>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d3f0      	bcc.n	801abe0 <_txe_semaphore_create+0x5c>
 801abfe:	e000      	b.n	801ac02 <_txe_semaphore_create+0x7e>
                break;
 801ac00:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ac02:	f3ef 8310 	mrs	r3, PRIMASK
 801ac06:	623b      	str	r3, [r7, #32]
    return(posture);
 801ac08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801ac0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ac0c:	b672      	cpsid	i
    return(int_posture);
 801ac0e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801ac10:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801ac12:	4b21      	ldr	r3, [pc, #132]	; (801ac98 <_txe_semaphore_create+0x114>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	3b01      	subs	r3, #1
 801ac18:	4a1f      	ldr	r2, [pc, #124]	; (801ac98 <_txe_semaphore_create+0x114>)
 801ac1a:	6013      	str	r3, [r2, #0]
 801ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac22:	f383 8810 	msr	PRIMASK, r3
}
 801ac26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801ac28:	f7ff f900 	bl	8019e2c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801ac2c:	68fa      	ldr	r2, [r7, #12]
 801ac2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d102      	bne.n	801ac3a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801ac34:	230c      	movs	r3, #12
 801ac36:	647b      	str	r3, [r7, #68]	; 0x44
 801ac38:	e008      	b.n	801ac4c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801ac3a:	4b1a      	ldr	r3, [pc, #104]	; (801aca4 <_txe_semaphore_create+0x120>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac42:	4a19      	ldr	r2, [pc, #100]	; (801aca8 <_txe_semaphore_create+0x124>)
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d101      	bne.n	801ac4c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801ac48:	2313      	movs	r3, #19
 801ac4a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801ac4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d114      	bne.n	801ac7c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ac52:	f3ef 8305 	mrs	r3, IPSR
 801ac56:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801ac58:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801ac5a:	4b14      	ldr	r3, [pc, #80]	; (801acac <_txe_semaphore_create+0x128>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4313      	orrs	r3, r2
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d00b      	beq.n	801ac7c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ac64:	f3ef 8305 	mrs	r3, IPSR
 801ac68:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801ac6a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801ac6c:	4b0f      	ldr	r3, [pc, #60]	; (801acac <_txe_semaphore_create+0x128>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	4313      	orrs	r3, r2
 801ac72:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801ac76:	d201      	bcs.n	801ac7c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801ac78:	2313      	movs	r3, #19
 801ac7a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801ac7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d105      	bne.n	801ac8e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801ac82:	687a      	ldr	r2, [r7, #4]
 801ac84:	68b9      	ldr	r1, [r7, #8]
 801ac86:	68f8      	ldr	r0, [r7, #12]
 801ac88:	f7fe fc74 	bl	8019574 <_tx_semaphore_create>
 801ac8c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801ac8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3748      	adds	r7, #72	; 0x48
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	24004464 	.word	0x24004464
 801ac9c:	24004394 	.word	0x24004394
 801aca0:	24004398 	.word	0x24004398
 801aca4:	240043cc 	.word	0x240043cc
 801aca8:	24004514 	.word	0x24004514
 801acac:	2400006c 	.word	0x2400006c

0801acb0 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b086      	sub	sp, #24
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801acb8:	2300      	movs	r3, #0
 801acba:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d102      	bne.n	801acc8 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801acc2:	230c      	movs	r3, #12
 801acc4:	617b      	str	r3, [r7, #20]
 801acc6:	e01c      	b.n	801ad02 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	4a13      	ldr	r2, [pc, #76]	; (801ad1c <_txe_semaphore_delete+0x6c>)
 801acce:	4293      	cmp	r3, r2
 801acd0:	d002      	beq.n	801acd8 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801acd2:	230c      	movs	r3, #12
 801acd4:	617b      	str	r3, [r7, #20]
 801acd6:	e014      	b.n	801ad02 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801acd8:	f3ef 8305 	mrs	r3, IPSR
 801acdc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801acde:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801ace0:	4b0f      	ldr	r3, [pc, #60]	; (801ad20 <_txe_semaphore_delete+0x70>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	4313      	orrs	r3, r2
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d002      	beq.n	801acf0 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801acea:	2313      	movs	r3, #19
 801acec:	617b      	str	r3, [r7, #20]
 801acee:	e008      	b.n	801ad02 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801acf0:	4b0c      	ldr	r3, [pc, #48]	; (801ad24 <_txe_semaphore_delete+0x74>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	4a0b      	ldr	r2, [pc, #44]	; (801ad28 <_txe_semaphore_delete+0x78>)
 801acfa:	4293      	cmp	r3, r2
 801acfc:	d101      	bne.n	801ad02 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801acfe:	2313      	movs	r3, #19
 801ad00:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801ad02:	697b      	ldr	r3, [r7, #20]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d103      	bne.n	801ad10 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	f7fe fc85 	bl	8019618 <_tx_semaphore_delete>
 801ad0e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801ad10:	697b      	ldr	r3, [r7, #20]
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3718      	adds	r7, #24
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	bf00      	nop
 801ad1c:	53454d41 	.word	0x53454d41
 801ad20:	2400006c 	.word	0x2400006c
 801ad24:	240043cc 	.word	0x240043cc
 801ad28:	24004514 	.word	0x24004514

0801ad2c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b086      	sub	sp, #24
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	6078      	str	r0, [r7, #4]
 801ad34:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801ad36:	2300      	movs	r3, #0
 801ad38:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d102      	bne.n	801ad46 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801ad40:	230c      	movs	r3, #12
 801ad42:	617b      	str	r3, [r7, #20]
 801ad44:	e01f      	b.n	801ad86 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	4a15      	ldr	r2, [pc, #84]	; (801ada0 <_txe_semaphore_get+0x74>)
 801ad4c:	4293      	cmp	r3, r2
 801ad4e:	d002      	beq.n	801ad56 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801ad50:	230c      	movs	r3, #12
 801ad52:	617b      	str	r3, [r7, #20]
 801ad54:	e017      	b.n	801ad86 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d014      	beq.n	801ad86 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ad5c:	f3ef 8305 	mrs	r3, IPSR
 801ad60:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801ad62:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801ad64:	4b0f      	ldr	r3, [pc, #60]	; (801ada4 <_txe_semaphore_get+0x78>)
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4313      	orrs	r3, r2
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d002      	beq.n	801ad74 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801ad6e:	2304      	movs	r3, #4
 801ad70:	617b      	str	r3, [r7, #20]
 801ad72:	e008      	b.n	801ad86 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801ad74:	4b0c      	ldr	r3, [pc, #48]	; (801ada8 <_txe_semaphore_get+0x7c>)
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801ad7a:	693b      	ldr	r3, [r7, #16]
 801ad7c:	4a0b      	ldr	r2, [pc, #44]	; (801adac <_txe_semaphore_get+0x80>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d101      	bne.n	801ad86 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801ad82:	2304      	movs	r3, #4
 801ad84:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d104      	bne.n	801ad96 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801ad8c:	6839      	ldr	r1, [r7, #0]
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7fe fcd2 	bl	8019738 <_tx_semaphore_get>
 801ad94:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801ad96:	697b      	ldr	r3, [r7, #20]
}
 801ad98:	4618      	mov	r0, r3
 801ad9a:	3718      	adds	r7, #24
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}
 801ada0:	53454d41 	.word	0x53454d41
 801ada4:	2400006c 	.word	0x2400006c
 801ada8:	240043cc 	.word	0x240043cc
 801adac:	24004514 	.word	0x24004514

0801adb0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d102      	bne.n	801adc4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801adbe:	230c      	movs	r3, #12
 801adc0:	60fb      	str	r3, [r7, #12]
 801adc2:	e00b      	b.n	801addc <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	4a07      	ldr	r2, [pc, #28]	; (801ade8 <_txe_semaphore_put+0x38>)
 801adca:	4293      	cmp	r3, r2
 801adcc:	d002      	beq.n	801add4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801adce:	230c      	movs	r3, #12
 801add0:	60fb      	str	r3, [r7, #12]
 801add2:	e003      	b.n	801addc <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	f7fe fd41 	bl	801985c <_tx_semaphore_put>
 801adda:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801addc:	68fb      	ldr	r3, [r7, #12]
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3710      	adds	r7, #16
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	bf00      	nop
 801ade8:	53454d41 	.word	0x53454d41

0801adec <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b09a      	sub	sp, #104	; 0x68
 801adf0:	af06      	add	r7, sp, #24
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	60b9      	str	r1, [r7, #8]
 801adf6:	607a      	str	r2, [r7, #4]
 801adf8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801adfa:	2300      	movs	r3, #0
 801adfc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d102      	bne.n	801ae0a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801ae04:	230e      	movs	r3, #14
 801ae06:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ae08:	e0bb      	b.n	801af82 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801ae0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae0c:	2bb0      	cmp	r3, #176	; 0xb0
 801ae0e:	d002      	beq.n	801ae16 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801ae10:	230e      	movs	r3, #14
 801ae12:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ae14:	e0b5      	b.n	801af82 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ae16:	f3ef 8310 	mrs	r3, PRIMASK
 801ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801ae1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801ae20:	b672      	cpsid	i
    return(int_posture);
 801ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801ae24:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801ae26:	4b64      	ldr	r3, [pc, #400]	; (801afb8 <_txe_thread_create+0x1cc>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	3301      	adds	r3, #1
 801ae2c:	4a62      	ldr	r2, [pc, #392]	; (801afb8 <_txe_thread_create+0x1cc>)
 801ae2e:	6013      	str	r3, [r2, #0]
 801ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae36:	f383 8810 	msr	PRIMASK, r3
}
 801ae3a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801ae40:	4b5e      	ldr	r3, [pc, #376]	; (801afbc <_txe_thread_create+0x1d0>)
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801ae46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ae48:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801ae4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae4c:	3b01      	subs	r3, #1
 801ae4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ae50:	4413      	add	r3, r2
 801ae52:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae56:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801ae58:	2300      	movs	r3, #0
 801ae5a:	647b      	str	r3, [r7, #68]	; 0x44
 801ae5c:	e02b      	b.n	801aeb6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801ae5e:	68fa      	ldr	r2, [r7, #12]
 801ae60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae62:	429a      	cmp	r2, r3
 801ae64:	d101      	bne.n	801ae6a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801ae66:	2301      	movs	r3, #1
 801ae68:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801ae6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae6c:	2b01      	cmp	r3, #1
 801ae6e:	d028      	beq.n	801aec2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801ae70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ae76:	429a      	cmp	r2, r3
 801ae78:	d308      	bcc.n	801ae8c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801ae7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae7c:	691b      	ldr	r3, [r3, #16]
 801ae7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d203      	bcs.n	801ae8c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801ae84:	2300      	movs	r3, #0
 801ae86:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801ae88:	2301      	movs	r3, #1
 801ae8a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801ae8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae8e:	68db      	ldr	r3, [r3, #12]
 801ae90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ae92:	429a      	cmp	r2, r3
 801ae94:	d308      	bcc.n	801aea8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801ae96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae98:	691b      	ldr	r3, [r3, #16]
 801ae9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ae9c:	429a      	cmp	r2, r3
 801ae9e:	d203      	bcs.n	801aea8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801aea0:	2300      	movs	r3, #0
 801aea2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801aea4:	2301      	movs	r3, #1
 801aea6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801aea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aeae:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801aeb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	647b      	str	r3, [r7, #68]	; 0x44
 801aeb6:	4b42      	ldr	r3, [pc, #264]	; (801afc0 <_txe_thread_create+0x1d4>)
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d3ce      	bcc.n	801ae5e <_txe_thread_create+0x72>
 801aec0:	e000      	b.n	801aec4 <_txe_thread_create+0xd8>
                break;
 801aec2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801aec4:	f3ef 8310 	mrs	r3, PRIMASK
 801aec8:	61fb      	str	r3, [r7, #28]
    return(posture);
 801aeca:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801aecc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801aece:	b672      	cpsid	i
    return(int_posture);
 801aed0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801aed2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801aed4:	4b38      	ldr	r3, [pc, #224]	; (801afb8 <_txe_thread_create+0x1cc>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	3b01      	subs	r3, #1
 801aeda:	4a37      	ldr	r2, [pc, #220]	; (801afb8 <_txe_thread_create+0x1cc>)
 801aedc:	6013      	str	r3, [r2, #0]
 801aede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aee0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801aee2:	6a3b      	ldr	r3, [r7, #32]
 801aee4:	f383 8810 	msr	PRIMASK, r3
}
 801aee8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801aeea:	f7fe ff9f 	bl	8019e2c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801aeee:	68fa      	ldr	r2, [r7, #12]
 801aef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aef2:	429a      	cmp	r2, r3
 801aef4:	d102      	bne.n	801aefc <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801aef6:	230e      	movs	r3, #14
 801aef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aefa:	e042      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801aefc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d102      	bne.n	801af08 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801af02:	2303      	movs	r3, #3
 801af04:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af06:	e03c      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d102      	bne.n	801af14 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801af0e:	2303      	movs	r3, #3
 801af10:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af12:	e036      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801af14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af16:	2bc7      	cmp	r3, #199	; 0xc7
 801af18:	d802      	bhi.n	801af20 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801af1a:	2305      	movs	r3, #5
 801af1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af1e:	e030      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801af20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af22:	2b1f      	cmp	r3, #31
 801af24:	d902      	bls.n	801af2c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801af26:	230f      	movs	r3, #15
 801af28:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af2a:	e02a      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801af2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801af2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af30:	429a      	cmp	r2, r3
 801af32:	d902      	bls.n	801af3a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801af34:	2318      	movs	r3, #24
 801af36:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af38:	e023      	b.n	801af82 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801af3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801af3c:	2b01      	cmp	r3, #1
 801af3e:	d902      	bls.n	801af46 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801af40:	2310      	movs	r3, #16
 801af42:	64fb      	str	r3, [r7, #76]	; 0x4c
 801af44:	e01d      	b.n	801af82 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801af46:	4b1f      	ldr	r3, [pc, #124]	; (801afc4 <_txe_thread_create+0x1d8>)
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af4e:	4a1e      	ldr	r2, [pc, #120]	; (801afc8 <_txe_thread_create+0x1dc>)
 801af50:	4293      	cmp	r3, r2
 801af52:	d101      	bne.n	801af58 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801af54:	2313      	movs	r3, #19
 801af56:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801af58:	f3ef 8305 	mrs	r3, IPSR
 801af5c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801af5e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801af60:	4b1a      	ldr	r3, [pc, #104]	; (801afcc <_txe_thread_create+0x1e0>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4313      	orrs	r3, r2
 801af66:	2b00      	cmp	r3, #0
 801af68:	d00b      	beq.n	801af82 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801af6a:	f3ef 8305 	mrs	r3, IPSR
 801af6e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801af70:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801af72:	4b16      	ldr	r3, [pc, #88]	; (801afcc <_txe_thread_create+0x1e0>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4313      	orrs	r3, r2
 801af78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801af7c:	d201      	bcs.n	801af82 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801af7e:	2313      	movs	r3, #19
 801af80:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801af82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af84:	2b00      	cmp	r3, #0
 801af86:	d112      	bne.n	801afae <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801af88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801af8a:	9305      	str	r3, [sp, #20]
 801af8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801af8e:	9304      	str	r3, [sp, #16]
 801af90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801af92:	9303      	str	r3, [sp, #12]
 801af94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af96:	9302      	str	r3, [sp, #8]
 801af98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af9a:	9301      	str	r3, [sp, #4]
 801af9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af9e:	9300      	str	r3, [sp, #0]
 801afa0:	683b      	ldr	r3, [r7, #0]
 801afa2:	687a      	ldr	r2, [r7, #4]
 801afa4:	68b9      	ldr	r1, [r7, #8]
 801afa6:	68f8      	ldr	r0, [r7, #12]
 801afa8:	f7fe fcb0 	bl	801990c <_tx_thread_create>
 801afac:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	3750      	adds	r7, #80	; 0x50
 801afb4:	46bd      	mov	sp, r7
 801afb6:	bd80      	pop	{r7, pc}
 801afb8:	24004464 	.word	0x24004464
 801afbc:	240043d4 	.word	0x240043d4
 801afc0:	240043d8 	.word	0x240043d8
 801afc4:	240043cc 	.word	0x240043cc
 801afc8:	24004514 	.word	0x24004514
 801afcc:	2400006c 	.word	0x2400006c

0801afd0 <sniprintf>:
 801afd0:	b40c      	push	{r2, r3}
 801afd2:	b530      	push	{r4, r5, lr}
 801afd4:	4b17      	ldr	r3, [pc, #92]	; (801b034 <sniprintf+0x64>)
 801afd6:	1e0c      	subs	r4, r1, #0
 801afd8:	681d      	ldr	r5, [r3, #0]
 801afda:	b09d      	sub	sp, #116	; 0x74
 801afdc:	da08      	bge.n	801aff0 <sniprintf+0x20>
 801afde:	238b      	movs	r3, #139	; 0x8b
 801afe0:	602b      	str	r3, [r5, #0]
 801afe2:	f04f 30ff 	mov.w	r0, #4294967295
 801afe6:	b01d      	add	sp, #116	; 0x74
 801afe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afec:	b002      	add	sp, #8
 801afee:	4770      	bx	lr
 801aff0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aff8:	bf14      	ite	ne
 801affa:	f104 33ff 	addne.w	r3, r4, #4294967295
 801affe:	4623      	moveq	r3, r4
 801b000:	9304      	str	r3, [sp, #16]
 801b002:	9307      	str	r3, [sp, #28]
 801b004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b008:	9002      	str	r0, [sp, #8]
 801b00a:	9006      	str	r0, [sp, #24]
 801b00c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b010:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b012:	ab21      	add	r3, sp, #132	; 0x84
 801b014:	a902      	add	r1, sp, #8
 801b016:	4628      	mov	r0, r5
 801b018:	9301      	str	r3, [sp, #4]
 801b01a:	f000 f9d7 	bl	801b3cc <_svfiprintf_r>
 801b01e:	1c43      	adds	r3, r0, #1
 801b020:	bfbc      	itt	lt
 801b022:	238b      	movlt	r3, #139	; 0x8b
 801b024:	602b      	strlt	r3, [r5, #0]
 801b026:	2c00      	cmp	r4, #0
 801b028:	d0dd      	beq.n	801afe6 <sniprintf+0x16>
 801b02a:	9b02      	ldr	r3, [sp, #8]
 801b02c:	2200      	movs	r2, #0
 801b02e:	701a      	strb	r2, [r3, #0]
 801b030:	e7d9      	b.n	801afe6 <sniprintf+0x16>
 801b032:	bf00      	nop
 801b034:	240000bc 	.word	0x240000bc

0801b038 <siprintf>:
 801b038:	b40e      	push	{r1, r2, r3}
 801b03a:	b500      	push	{lr}
 801b03c:	b09c      	sub	sp, #112	; 0x70
 801b03e:	ab1d      	add	r3, sp, #116	; 0x74
 801b040:	9002      	str	r0, [sp, #8]
 801b042:	9006      	str	r0, [sp, #24]
 801b044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b048:	4809      	ldr	r0, [pc, #36]	; (801b070 <siprintf+0x38>)
 801b04a:	9107      	str	r1, [sp, #28]
 801b04c:	9104      	str	r1, [sp, #16]
 801b04e:	4909      	ldr	r1, [pc, #36]	; (801b074 <siprintf+0x3c>)
 801b050:	f853 2b04 	ldr.w	r2, [r3], #4
 801b054:	9105      	str	r1, [sp, #20]
 801b056:	6800      	ldr	r0, [r0, #0]
 801b058:	9301      	str	r3, [sp, #4]
 801b05a:	a902      	add	r1, sp, #8
 801b05c:	f000 f9b6 	bl	801b3cc <_svfiprintf_r>
 801b060:	9b02      	ldr	r3, [sp, #8]
 801b062:	2200      	movs	r2, #0
 801b064:	701a      	strb	r2, [r3, #0]
 801b066:	b01c      	add	sp, #112	; 0x70
 801b068:	f85d eb04 	ldr.w	lr, [sp], #4
 801b06c:	b003      	add	sp, #12
 801b06e:	4770      	bx	lr
 801b070:	240000bc 	.word	0x240000bc
 801b074:	ffff0208 	.word	0xffff0208

0801b078 <memset>:
 801b078:	4402      	add	r2, r0
 801b07a:	4603      	mov	r3, r0
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d100      	bne.n	801b082 <memset+0xa>
 801b080:	4770      	bx	lr
 801b082:	f803 1b01 	strb.w	r1, [r3], #1
 801b086:	e7f9      	b.n	801b07c <memset+0x4>

0801b088 <strstr>:
 801b088:	780a      	ldrb	r2, [r1, #0]
 801b08a:	b570      	push	{r4, r5, r6, lr}
 801b08c:	b96a      	cbnz	r2, 801b0aa <strstr+0x22>
 801b08e:	bd70      	pop	{r4, r5, r6, pc}
 801b090:	429a      	cmp	r2, r3
 801b092:	d109      	bne.n	801b0a8 <strstr+0x20>
 801b094:	460c      	mov	r4, r1
 801b096:	4605      	mov	r5, r0
 801b098:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d0f6      	beq.n	801b08e <strstr+0x6>
 801b0a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b0a4:	429e      	cmp	r6, r3
 801b0a6:	d0f7      	beq.n	801b098 <strstr+0x10>
 801b0a8:	3001      	adds	r0, #1
 801b0aa:	7803      	ldrb	r3, [r0, #0]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d1ef      	bne.n	801b090 <strstr+0x8>
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	e7ec      	b.n	801b08e <strstr+0x6>

0801b0b4 <__errno>:
 801b0b4:	4b01      	ldr	r3, [pc, #4]	; (801b0bc <__errno+0x8>)
 801b0b6:	6818      	ldr	r0, [r3, #0]
 801b0b8:	4770      	bx	lr
 801b0ba:	bf00      	nop
 801b0bc:	240000bc 	.word	0x240000bc

0801b0c0 <__libc_init_array>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	4d0d      	ldr	r5, [pc, #52]	; (801b0f8 <__libc_init_array+0x38>)
 801b0c4:	4c0d      	ldr	r4, [pc, #52]	; (801b0fc <__libc_init_array+0x3c>)
 801b0c6:	1b64      	subs	r4, r4, r5
 801b0c8:	10a4      	asrs	r4, r4, #2
 801b0ca:	2600      	movs	r6, #0
 801b0cc:	42a6      	cmp	r6, r4
 801b0ce:	d109      	bne.n	801b0e4 <__libc_init_array+0x24>
 801b0d0:	4d0b      	ldr	r5, [pc, #44]	; (801b100 <__libc_init_array+0x40>)
 801b0d2:	4c0c      	ldr	r4, [pc, #48]	; (801b104 <__libc_init_array+0x44>)
 801b0d4:	f000 fc6a 	bl	801b9ac <_init>
 801b0d8:	1b64      	subs	r4, r4, r5
 801b0da:	10a4      	asrs	r4, r4, #2
 801b0dc:	2600      	movs	r6, #0
 801b0de:	42a6      	cmp	r6, r4
 801b0e0:	d105      	bne.n	801b0ee <__libc_init_array+0x2e>
 801b0e2:	bd70      	pop	{r4, r5, r6, pc}
 801b0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0e8:	4798      	blx	r3
 801b0ea:	3601      	adds	r6, #1
 801b0ec:	e7ee      	b.n	801b0cc <__libc_init_array+0xc>
 801b0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0f2:	4798      	blx	r3
 801b0f4:	3601      	adds	r6, #1
 801b0f6:	e7f2      	b.n	801b0de <__libc_init_array+0x1e>
 801b0f8:	0801bcc4 	.word	0x0801bcc4
 801b0fc:	0801bcc4 	.word	0x0801bcc4
 801b100:	0801bcc4 	.word	0x0801bcc4
 801b104:	0801bcc8 	.word	0x0801bcc8

0801b108 <__retarget_lock_acquire_recursive>:
 801b108:	4770      	bx	lr

0801b10a <__retarget_lock_release_recursive>:
 801b10a:	4770      	bx	lr

0801b10c <memcpy>:
 801b10c:	440a      	add	r2, r1
 801b10e:	4291      	cmp	r1, r2
 801b110:	f100 33ff 	add.w	r3, r0, #4294967295
 801b114:	d100      	bne.n	801b118 <memcpy+0xc>
 801b116:	4770      	bx	lr
 801b118:	b510      	push	{r4, lr}
 801b11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b11e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b122:	4291      	cmp	r1, r2
 801b124:	d1f9      	bne.n	801b11a <memcpy+0xe>
 801b126:	bd10      	pop	{r4, pc}

0801b128 <_free_r>:
 801b128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b12a:	2900      	cmp	r1, #0
 801b12c:	d044      	beq.n	801b1b8 <_free_r+0x90>
 801b12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b132:	9001      	str	r0, [sp, #4]
 801b134:	2b00      	cmp	r3, #0
 801b136:	f1a1 0404 	sub.w	r4, r1, #4
 801b13a:	bfb8      	it	lt
 801b13c:	18e4      	addlt	r4, r4, r3
 801b13e:	f000 f8df 	bl	801b300 <__malloc_lock>
 801b142:	4a1e      	ldr	r2, [pc, #120]	; (801b1bc <_free_r+0x94>)
 801b144:	9801      	ldr	r0, [sp, #4]
 801b146:	6813      	ldr	r3, [r2, #0]
 801b148:	b933      	cbnz	r3, 801b158 <_free_r+0x30>
 801b14a:	6063      	str	r3, [r4, #4]
 801b14c:	6014      	str	r4, [r2, #0]
 801b14e:	b003      	add	sp, #12
 801b150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b154:	f000 b8da 	b.w	801b30c <__malloc_unlock>
 801b158:	42a3      	cmp	r3, r4
 801b15a:	d908      	bls.n	801b16e <_free_r+0x46>
 801b15c:	6825      	ldr	r5, [r4, #0]
 801b15e:	1961      	adds	r1, r4, r5
 801b160:	428b      	cmp	r3, r1
 801b162:	bf01      	itttt	eq
 801b164:	6819      	ldreq	r1, [r3, #0]
 801b166:	685b      	ldreq	r3, [r3, #4]
 801b168:	1949      	addeq	r1, r1, r5
 801b16a:	6021      	streq	r1, [r4, #0]
 801b16c:	e7ed      	b.n	801b14a <_free_r+0x22>
 801b16e:	461a      	mov	r2, r3
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	b10b      	cbz	r3, 801b178 <_free_r+0x50>
 801b174:	42a3      	cmp	r3, r4
 801b176:	d9fa      	bls.n	801b16e <_free_r+0x46>
 801b178:	6811      	ldr	r1, [r2, #0]
 801b17a:	1855      	adds	r5, r2, r1
 801b17c:	42a5      	cmp	r5, r4
 801b17e:	d10b      	bne.n	801b198 <_free_r+0x70>
 801b180:	6824      	ldr	r4, [r4, #0]
 801b182:	4421      	add	r1, r4
 801b184:	1854      	adds	r4, r2, r1
 801b186:	42a3      	cmp	r3, r4
 801b188:	6011      	str	r1, [r2, #0]
 801b18a:	d1e0      	bne.n	801b14e <_free_r+0x26>
 801b18c:	681c      	ldr	r4, [r3, #0]
 801b18e:	685b      	ldr	r3, [r3, #4]
 801b190:	6053      	str	r3, [r2, #4]
 801b192:	440c      	add	r4, r1
 801b194:	6014      	str	r4, [r2, #0]
 801b196:	e7da      	b.n	801b14e <_free_r+0x26>
 801b198:	d902      	bls.n	801b1a0 <_free_r+0x78>
 801b19a:	230c      	movs	r3, #12
 801b19c:	6003      	str	r3, [r0, #0]
 801b19e:	e7d6      	b.n	801b14e <_free_r+0x26>
 801b1a0:	6825      	ldr	r5, [r4, #0]
 801b1a2:	1961      	adds	r1, r4, r5
 801b1a4:	428b      	cmp	r3, r1
 801b1a6:	bf04      	itt	eq
 801b1a8:	6819      	ldreq	r1, [r3, #0]
 801b1aa:	685b      	ldreq	r3, [r3, #4]
 801b1ac:	6063      	str	r3, [r4, #4]
 801b1ae:	bf04      	itt	eq
 801b1b0:	1949      	addeq	r1, r1, r5
 801b1b2:	6021      	streq	r1, [r4, #0]
 801b1b4:	6054      	str	r4, [r2, #4]
 801b1b6:	e7ca      	b.n	801b14e <_free_r+0x26>
 801b1b8:	b003      	add	sp, #12
 801b1ba:	bd30      	pop	{r4, r5, pc}
 801b1bc:	24004b14 	.word	0x24004b14

0801b1c0 <sbrk_aligned>:
 801b1c0:	b570      	push	{r4, r5, r6, lr}
 801b1c2:	4e0e      	ldr	r6, [pc, #56]	; (801b1fc <sbrk_aligned+0x3c>)
 801b1c4:	460c      	mov	r4, r1
 801b1c6:	6831      	ldr	r1, [r6, #0]
 801b1c8:	4605      	mov	r5, r0
 801b1ca:	b911      	cbnz	r1, 801b1d2 <sbrk_aligned+0x12>
 801b1cc:	f000 fba6 	bl	801b91c <_sbrk_r>
 801b1d0:	6030      	str	r0, [r6, #0]
 801b1d2:	4621      	mov	r1, r4
 801b1d4:	4628      	mov	r0, r5
 801b1d6:	f000 fba1 	bl	801b91c <_sbrk_r>
 801b1da:	1c43      	adds	r3, r0, #1
 801b1dc:	d00a      	beq.n	801b1f4 <sbrk_aligned+0x34>
 801b1de:	1cc4      	adds	r4, r0, #3
 801b1e0:	f024 0403 	bic.w	r4, r4, #3
 801b1e4:	42a0      	cmp	r0, r4
 801b1e6:	d007      	beq.n	801b1f8 <sbrk_aligned+0x38>
 801b1e8:	1a21      	subs	r1, r4, r0
 801b1ea:	4628      	mov	r0, r5
 801b1ec:	f000 fb96 	bl	801b91c <_sbrk_r>
 801b1f0:	3001      	adds	r0, #1
 801b1f2:	d101      	bne.n	801b1f8 <sbrk_aligned+0x38>
 801b1f4:	f04f 34ff 	mov.w	r4, #4294967295
 801b1f8:	4620      	mov	r0, r4
 801b1fa:	bd70      	pop	{r4, r5, r6, pc}
 801b1fc:	24004b18 	.word	0x24004b18

0801b200 <_malloc_r>:
 801b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b204:	1ccd      	adds	r5, r1, #3
 801b206:	f025 0503 	bic.w	r5, r5, #3
 801b20a:	3508      	adds	r5, #8
 801b20c:	2d0c      	cmp	r5, #12
 801b20e:	bf38      	it	cc
 801b210:	250c      	movcc	r5, #12
 801b212:	2d00      	cmp	r5, #0
 801b214:	4607      	mov	r7, r0
 801b216:	db01      	blt.n	801b21c <_malloc_r+0x1c>
 801b218:	42a9      	cmp	r1, r5
 801b21a:	d905      	bls.n	801b228 <_malloc_r+0x28>
 801b21c:	230c      	movs	r3, #12
 801b21e:	603b      	str	r3, [r7, #0]
 801b220:	2600      	movs	r6, #0
 801b222:	4630      	mov	r0, r6
 801b224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b228:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b2fc <_malloc_r+0xfc>
 801b22c:	f000 f868 	bl	801b300 <__malloc_lock>
 801b230:	f8d8 3000 	ldr.w	r3, [r8]
 801b234:	461c      	mov	r4, r3
 801b236:	bb5c      	cbnz	r4, 801b290 <_malloc_r+0x90>
 801b238:	4629      	mov	r1, r5
 801b23a:	4638      	mov	r0, r7
 801b23c:	f7ff ffc0 	bl	801b1c0 <sbrk_aligned>
 801b240:	1c43      	adds	r3, r0, #1
 801b242:	4604      	mov	r4, r0
 801b244:	d155      	bne.n	801b2f2 <_malloc_r+0xf2>
 801b246:	f8d8 4000 	ldr.w	r4, [r8]
 801b24a:	4626      	mov	r6, r4
 801b24c:	2e00      	cmp	r6, #0
 801b24e:	d145      	bne.n	801b2dc <_malloc_r+0xdc>
 801b250:	2c00      	cmp	r4, #0
 801b252:	d048      	beq.n	801b2e6 <_malloc_r+0xe6>
 801b254:	6823      	ldr	r3, [r4, #0]
 801b256:	4631      	mov	r1, r6
 801b258:	4638      	mov	r0, r7
 801b25a:	eb04 0903 	add.w	r9, r4, r3
 801b25e:	f000 fb5d 	bl	801b91c <_sbrk_r>
 801b262:	4581      	cmp	r9, r0
 801b264:	d13f      	bne.n	801b2e6 <_malloc_r+0xe6>
 801b266:	6821      	ldr	r1, [r4, #0]
 801b268:	1a6d      	subs	r5, r5, r1
 801b26a:	4629      	mov	r1, r5
 801b26c:	4638      	mov	r0, r7
 801b26e:	f7ff ffa7 	bl	801b1c0 <sbrk_aligned>
 801b272:	3001      	adds	r0, #1
 801b274:	d037      	beq.n	801b2e6 <_malloc_r+0xe6>
 801b276:	6823      	ldr	r3, [r4, #0]
 801b278:	442b      	add	r3, r5
 801b27a:	6023      	str	r3, [r4, #0]
 801b27c:	f8d8 3000 	ldr.w	r3, [r8]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d038      	beq.n	801b2f6 <_malloc_r+0xf6>
 801b284:	685a      	ldr	r2, [r3, #4]
 801b286:	42a2      	cmp	r2, r4
 801b288:	d12b      	bne.n	801b2e2 <_malloc_r+0xe2>
 801b28a:	2200      	movs	r2, #0
 801b28c:	605a      	str	r2, [r3, #4]
 801b28e:	e00f      	b.n	801b2b0 <_malloc_r+0xb0>
 801b290:	6822      	ldr	r2, [r4, #0]
 801b292:	1b52      	subs	r2, r2, r5
 801b294:	d41f      	bmi.n	801b2d6 <_malloc_r+0xd6>
 801b296:	2a0b      	cmp	r2, #11
 801b298:	d917      	bls.n	801b2ca <_malloc_r+0xca>
 801b29a:	1961      	adds	r1, r4, r5
 801b29c:	42a3      	cmp	r3, r4
 801b29e:	6025      	str	r5, [r4, #0]
 801b2a0:	bf18      	it	ne
 801b2a2:	6059      	strne	r1, [r3, #4]
 801b2a4:	6863      	ldr	r3, [r4, #4]
 801b2a6:	bf08      	it	eq
 801b2a8:	f8c8 1000 	streq.w	r1, [r8]
 801b2ac:	5162      	str	r2, [r4, r5]
 801b2ae:	604b      	str	r3, [r1, #4]
 801b2b0:	4638      	mov	r0, r7
 801b2b2:	f104 060b 	add.w	r6, r4, #11
 801b2b6:	f000 f829 	bl	801b30c <__malloc_unlock>
 801b2ba:	f026 0607 	bic.w	r6, r6, #7
 801b2be:	1d23      	adds	r3, r4, #4
 801b2c0:	1af2      	subs	r2, r6, r3
 801b2c2:	d0ae      	beq.n	801b222 <_malloc_r+0x22>
 801b2c4:	1b9b      	subs	r3, r3, r6
 801b2c6:	50a3      	str	r3, [r4, r2]
 801b2c8:	e7ab      	b.n	801b222 <_malloc_r+0x22>
 801b2ca:	42a3      	cmp	r3, r4
 801b2cc:	6862      	ldr	r2, [r4, #4]
 801b2ce:	d1dd      	bne.n	801b28c <_malloc_r+0x8c>
 801b2d0:	f8c8 2000 	str.w	r2, [r8]
 801b2d4:	e7ec      	b.n	801b2b0 <_malloc_r+0xb0>
 801b2d6:	4623      	mov	r3, r4
 801b2d8:	6864      	ldr	r4, [r4, #4]
 801b2da:	e7ac      	b.n	801b236 <_malloc_r+0x36>
 801b2dc:	4634      	mov	r4, r6
 801b2de:	6876      	ldr	r6, [r6, #4]
 801b2e0:	e7b4      	b.n	801b24c <_malloc_r+0x4c>
 801b2e2:	4613      	mov	r3, r2
 801b2e4:	e7cc      	b.n	801b280 <_malloc_r+0x80>
 801b2e6:	230c      	movs	r3, #12
 801b2e8:	603b      	str	r3, [r7, #0]
 801b2ea:	4638      	mov	r0, r7
 801b2ec:	f000 f80e 	bl	801b30c <__malloc_unlock>
 801b2f0:	e797      	b.n	801b222 <_malloc_r+0x22>
 801b2f2:	6025      	str	r5, [r4, #0]
 801b2f4:	e7dc      	b.n	801b2b0 <_malloc_r+0xb0>
 801b2f6:	605b      	str	r3, [r3, #4]
 801b2f8:	deff      	udf	#255	; 0xff
 801b2fa:	bf00      	nop
 801b2fc:	24004b14 	.word	0x24004b14

0801b300 <__malloc_lock>:
 801b300:	4801      	ldr	r0, [pc, #4]	; (801b308 <__malloc_lock+0x8>)
 801b302:	f7ff bf01 	b.w	801b108 <__retarget_lock_acquire_recursive>
 801b306:	bf00      	nop
 801b308:	24004b10 	.word	0x24004b10

0801b30c <__malloc_unlock>:
 801b30c:	4801      	ldr	r0, [pc, #4]	; (801b314 <__malloc_unlock+0x8>)
 801b30e:	f7ff befc 	b.w	801b10a <__retarget_lock_release_recursive>
 801b312:	bf00      	nop
 801b314:	24004b10 	.word	0x24004b10

0801b318 <__ssputs_r>:
 801b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b31c:	688e      	ldr	r6, [r1, #8]
 801b31e:	461f      	mov	r7, r3
 801b320:	42be      	cmp	r6, r7
 801b322:	680b      	ldr	r3, [r1, #0]
 801b324:	4682      	mov	sl, r0
 801b326:	460c      	mov	r4, r1
 801b328:	4690      	mov	r8, r2
 801b32a:	d82c      	bhi.n	801b386 <__ssputs_r+0x6e>
 801b32c:	898a      	ldrh	r2, [r1, #12]
 801b32e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b332:	d026      	beq.n	801b382 <__ssputs_r+0x6a>
 801b334:	6965      	ldr	r5, [r4, #20]
 801b336:	6909      	ldr	r1, [r1, #16]
 801b338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b33c:	eba3 0901 	sub.w	r9, r3, r1
 801b340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b344:	1c7b      	adds	r3, r7, #1
 801b346:	444b      	add	r3, r9
 801b348:	106d      	asrs	r5, r5, #1
 801b34a:	429d      	cmp	r5, r3
 801b34c:	bf38      	it	cc
 801b34e:	461d      	movcc	r5, r3
 801b350:	0553      	lsls	r3, r2, #21
 801b352:	d527      	bpl.n	801b3a4 <__ssputs_r+0x8c>
 801b354:	4629      	mov	r1, r5
 801b356:	f7ff ff53 	bl	801b200 <_malloc_r>
 801b35a:	4606      	mov	r6, r0
 801b35c:	b360      	cbz	r0, 801b3b8 <__ssputs_r+0xa0>
 801b35e:	6921      	ldr	r1, [r4, #16]
 801b360:	464a      	mov	r2, r9
 801b362:	f7ff fed3 	bl	801b10c <memcpy>
 801b366:	89a3      	ldrh	r3, [r4, #12]
 801b368:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b370:	81a3      	strh	r3, [r4, #12]
 801b372:	6126      	str	r6, [r4, #16]
 801b374:	6165      	str	r5, [r4, #20]
 801b376:	444e      	add	r6, r9
 801b378:	eba5 0509 	sub.w	r5, r5, r9
 801b37c:	6026      	str	r6, [r4, #0]
 801b37e:	60a5      	str	r5, [r4, #8]
 801b380:	463e      	mov	r6, r7
 801b382:	42be      	cmp	r6, r7
 801b384:	d900      	bls.n	801b388 <__ssputs_r+0x70>
 801b386:	463e      	mov	r6, r7
 801b388:	6820      	ldr	r0, [r4, #0]
 801b38a:	4632      	mov	r2, r6
 801b38c:	4641      	mov	r1, r8
 801b38e:	f000 faab 	bl	801b8e8 <memmove>
 801b392:	68a3      	ldr	r3, [r4, #8]
 801b394:	1b9b      	subs	r3, r3, r6
 801b396:	60a3      	str	r3, [r4, #8]
 801b398:	6823      	ldr	r3, [r4, #0]
 801b39a:	4433      	add	r3, r6
 801b39c:	6023      	str	r3, [r4, #0]
 801b39e:	2000      	movs	r0, #0
 801b3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3a4:	462a      	mov	r2, r5
 801b3a6:	f000 fac9 	bl	801b93c <_realloc_r>
 801b3aa:	4606      	mov	r6, r0
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	d1e0      	bne.n	801b372 <__ssputs_r+0x5a>
 801b3b0:	6921      	ldr	r1, [r4, #16]
 801b3b2:	4650      	mov	r0, sl
 801b3b4:	f7ff feb8 	bl	801b128 <_free_r>
 801b3b8:	230c      	movs	r3, #12
 801b3ba:	f8ca 3000 	str.w	r3, [sl]
 801b3be:	89a3      	ldrh	r3, [r4, #12]
 801b3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b3c4:	81a3      	strh	r3, [r4, #12]
 801b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3ca:	e7e9      	b.n	801b3a0 <__ssputs_r+0x88>

0801b3cc <_svfiprintf_r>:
 801b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d0:	4698      	mov	r8, r3
 801b3d2:	898b      	ldrh	r3, [r1, #12]
 801b3d4:	061b      	lsls	r3, r3, #24
 801b3d6:	b09d      	sub	sp, #116	; 0x74
 801b3d8:	4607      	mov	r7, r0
 801b3da:	460d      	mov	r5, r1
 801b3dc:	4614      	mov	r4, r2
 801b3de:	d50e      	bpl.n	801b3fe <_svfiprintf_r+0x32>
 801b3e0:	690b      	ldr	r3, [r1, #16]
 801b3e2:	b963      	cbnz	r3, 801b3fe <_svfiprintf_r+0x32>
 801b3e4:	2140      	movs	r1, #64	; 0x40
 801b3e6:	f7ff ff0b 	bl	801b200 <_malloc_r>
 801b3ea:	6028      	str	r0, [r5, #0]
 801b3ec:	6128      	str	r0, [r5, #16]
 801b3ee:	b920      	cbnz	r0, 801b3fa <_svfiprintf_r+0x2e>
 801b3f0:	230c      	movs	r3, #12
 801b3f2:	603b      	str	r3, [r7, #0]
 801b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3f8:	e0d0      	b.n	801b59c <_svfiprintf_r+0x1d0>
 801b3fa:	2340      	movs	r3, #64	; 0x40
 801b3fc:	616b      	str	r3, [r5, #20]
 801b3fe:	2300      	movs	r3, #0
 801b400:	9309      	str	r3, [sp, #36]	; 0x24
 801b402:	2320      	movs	r3, #32
 801b404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b408:	f8cd 800c 	str.w	r8, [sp, #12]
 801b40c:	2330      	movs	r3, #48	; 0x30
 801b40e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b5b4 <_svfiprintf_r+0x1e8>
 801b412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b416:	f04f 0901 	mov.w	r9, #1
 801b41a:	4623      	mov	r3, r4
 801b41c:	469a      	mov	sl, r3
 801b41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b422:	b10a      	cbz	r2, 801b428 <_svfiprintf_r+0x5c>
 801b424:	2a25      	cmp	r2, #37	; 0x25
 801b426:	d1f9      	bne.n	801b41c <_svfiprintf_r+0x50>
 801b428:	ebba 0b04 	subs.w	fp, sl, r4
 801b42c:	d00b      	beq.n	801b446 <_svfiprintf_r+0x7a>
 801b42e:	465b      	mov	r3, fp
 801b430:	4622      	mov	r2, r4
 801b432:	4629      	mov	r1, r5
 801b434:	4638      	mov	r0, r7
 801b436:	f7ff ff6f 	bl	801b318 <__ssputs_r>
 801b43a:	3001      	adds	r0, #1
 801b43c:	f000 80a9 	beq.w	801b592 <_svfiprintf_r+0x1c6>
 801b440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b442:	445a      	add	r2, fp
 801b444:	9209      	str	r2, [sp, #36]	; 0x24
 801b446:	f89a 3000 	ldrb.w	r3, [sl]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	f000 80a1 	beq.w	801b592 <_svfiprintf_r+0x1c6>
 801b450:	2300      	movs	r3, #0
 801b452:	f04f 32ff 	mov.w	r2, #4294967295
 801b456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b45a:	f10a 0a01 	add.w	sl, sl, #1
 801b45e:	9304      	str	r3, [sp, #16]
 801b460:	9307      	str	r3, [sp, #28]
 801b462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b466:	931a      	str	r3, [sp, #104]	; 0x68
 801b468:	4654      	mov	r4, sl
 801b46a:	2205      	movs	r2, #5
 801b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b470:	4850      	ldr	r0, [pc, #320]	; (801b5b4 <_svfiprintf_r+0x1e8>)
 801b472:	f7e5 f865 	bl	8000540 <memchr>
 801b476:	9a04      	ldr	r2, [sp, #16]
 801b478:	b9d8      	cbnz	r0, 801b4b2 <_svfiprintf_r+0xe6>
 801b47a:	06d0      	lsls	r0, r2, #27
 801b47c:	bf44      	itt	mi
 801b47e:	2320      	movmi	r3, #32
 801b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b484:	0711      	lsls	r1, r2, #28
 801b486:	bf44      	itt	mi
 801b488:	232b      	movmi	r3, #43	; 0x2b
 801b48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b48e:	f89a 3000 	ldrb.w	r3, [sl]
 801b492:	2b2a      	cmp	r3, #42	; 0x2a
 801b494:	d015      	beq.n	801b4c2 <_svfiprintf_r+0xf6>
 801b496:	9a07      	ldr	r2, [sp, #28]
 801b498:	4654      	mov	r4, sl
 801b49a:	2000      	movs	r0, #0
 801b49c:	f04f 0c0a 	mov.w	ip, #10
 801b4a0:	4621      	mov	r1, r4
 801b4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4a6:	3b30      	subs	r3, #48	; 0x30
 801b4a8:	2b09      	cmp	r3, #9
 801b4aa:	d94d      	bls.n	801b548 <_svfiprintf_r+0x17c>
 801b4ac:	b1b0      	cbz	r0, 801b4dc <_svfiprintf_r+0x110>
 801b4ae:	9207      	str	r2, [sp, #28]
 801b4b0:	e014      	b.n	801b4dc <_svfiprintf_r+0x110>
 801b4b2:	eba0 0308 	sub.w	r3, r0, r8
 801b4b6:	fa09 f303 	lsl.w	r3, r9, r3
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	9304      	str	r3, [sp, #16]
 801b4be:	46a2      	mov	sl, r4
 801b4c0:	e7d2      	b.n	801b468 <_svfiprintf_r+0x9c>
 801b4c2:	9b03      	ldr	r3, [sp, #12]
 801b4c4:	1d19      	adds	r1, r3, #4
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	9103      	str	r1, [sp, #12]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	bfbb      	ittet	lt
 801b4ce:	425b      	neglt	r3, r3
 801b4d0:	f042 0202 	orrlt.w	r2, r2, #2
 801b4d4:	9307      	strge	r3, [sp, #28]
 801b4d6:	9307      	strlt	r3, [sp, #28]
 801b4d8:	bfb8      	it	lt
 801b4da:	9204      	strlt	r2, [sp, #16]
 801b4dc:	7823      	ldrb	r3, [r4, #0]
 801b4de:	2b2e      	cmp	r3, #46	; 0x2e
 801b4e0:	d10c      	bne.n	801b4fc <_svfiprintf_r+0x130>
 801b4e2:	7863      	ldrb	r3, [r4, #1]
 801b4e4:	2b2a      	cmp	r3, #42	; 0x2a
 801b4e6:	d134      	bne.n	801b552 <_svfiprintf_r+0x186>
 801b4e8:	9b03      	ldr	r3, [sp, #12]
 801b4ea:	1d1a      	adds	r2, r3, #4
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	9203      	str	r2, [sp, #12]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	bfb8      	it	lt
 801b4f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4f8:	3402      	adds	r4, #2
 801b4fa:	9305      	str	r3, [sp, #20]
 801b4fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b5c4 <_svfiprintf_r+0x1f8>
 801b500:	7821      	ldrb	r1, [r4, #0]
 801b502:	2203      	movs	r2, #3
 801b504:	4650      	mov	r0, sl
 801b506:	f7e5 f81b 	bl	8000540 <memchr>
 801b50a:	b138      	cbz	r0, 801b51c <_svfiprintf_r+0x150>
 801b50c:	9b04      	ldr	r3, [sp, #16]
 801b50e:	eba0 000a 	sub.w	r0, r0, sl
 801b512:	2240      	movs	r2, #64	; 0x40
 801b514:	4082      	lsls	r2, r0
 801b516:	4313      	orrs	r3, r2
 801b518:	3401      	adds	r4, #1
 801b51a:	9304      	str	r3, [sp, #16]
 801b51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b520:	4825      	ldr	r0, [pc, #148]	; (801b5b8 <_svfiprintf_r+0x1ec>)
 801b522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b526:	2206      	movs	r2, #6
 801b528:	f7e5 f80a 	bl	8000540 <memchr>
 801b52c:	2800      	cmp	r0, #0
 801b52e:	d038      	beq.n	801b5a2 <_svfiprintf_r+0x1d6>
 801b530:	4b22      	ldr	r3, [pc, #136]	; (801b5bc <_svfiprintf_r+0x1f0>)
 801b532:	bb1b      	cbnz	r3, 801b57c <_svfiprintf_r+0x1b0>
 801b534:	9b03      	ldr	r3, [sp, #12]
 801b536:	3307      	adds	r3, #7
 801b538:	f023 0307 	bic.w	r3, r3, #7
 801b53c:	3308      	adds	r3, #8
 801b53e:	9303      	str	r3, [sp, #12]
 801b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b542:	4433      	add	r3, r6
 801b544:	9309      	str	r3, [sp, #36]	; 0x24
 801b546:	e768      	b.n	801b41a <_svfiprintf_r+0x4e>
 801b548:	fb0c 3202 	mla	r2, ip, r2, r3
 801b54c:	460c      	mov	r4, r1
 801b54e:	2001      	movs	r0, #1
 801b550:	e7a6      	b.n	801b4a0 <_svfiprintf_r+0xd4>
 801b552:	2300      	movs	r3, #0
 801b554:	3401      	adds	r4, #1
 801b556:	9305      	str	r3, [sp, #20]
 801b558:	4619      	mov	r1, r3
 801b55a:	f04f 0c0a 	mov.w	ip, #10
 801b55e:	4620      	mov	r0, r4
 801b560:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b564:	3a30      	subs	r2, #48	; 0x30
 801b566:	2a09      	cmp	r2, #9
 801b568:	d903      	bls.n	801b572 <_svfiprintf_r+0x1a6>
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d0c6      	beq.n	801b4fc <_svfiprintf_r+0x130>
 801b56e:	9105      	str	r1, [sp, #20]
 801b570:	e7c4      	b.n	801b4fc <_svfiprintf_r+0x130>
 801b572:	fb0c 2101 	mla	r1, ip, r1, r2
 801b576:	4604      	mov	r4, r0
 801b578:	2301      	movs	r3, #1
 801b57a:	e7f0      	b.n	801b55e <_svfiprintf_r+0x192>
 801b57c:	ab03      	add	r3, sp, #12
 801b57e:	9300      	str	r3, [sp, #0]
 801b580:	462a      	mov	r2, r5
 801b582:	4b0f      	ldr	r3, [pc, #60]	; (801b5c0 <_svfiprintf_r+0x1f4>)
 801b584:	a904      	add	r1, sp, #16
 801b586:	4638      	mov	r0, r7
 801b588:	f3af 8000 	nop.w
 801b58c:	1c42      	adds	r2, r0, #1
 801b58e:	4606      	mov	r6, r0
 801b590:	d1d6      	bne.n	801b540 <_svfiprintf_r+0x174>
 801b592:	89ab      	ldrh	r3, [r5, #12]
 801b594:	065b      	lsls	r3, r3, #25
 801b596:	f53f af2d 	bmi.w	801b3f4 <_svfiprintf_r+0x28>
 801b59a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b59c:	b01d      	add	sp, #116	; 0x74
 801b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a2:	ab03      	add	r3, sp, #12
 801b5a4:	9300      	str	r3, [sp, #0]
 801b5a6:	462a      	mov	r2, r5
 801b5a8:	4b05      	ldr	r3, [pc, #20]	; (801b5c0 <_svfiprintf_r+0x1f4>)
 801b5aa:	a904      	add	r1, sp, #16
 801b5ac:	4638      	mov	r0, r7
 801b5ae:	f000 f879 	bl	801b6a4 <_printf_i>
 801b5b2:	e7eb      	b.n	801b58c <_svfiprintf_r+0x1c0>
 801b5b4:	0801bc88 	.word	0x0801bc88
 801b5b8:	0801bc92 	.word	0x0801bc92
 801b5bc:	00000000 	.word	0x00000000
 801b5c0:	0801b319 	.word	0x0801b319
 801b5c4:	0801bc8e 	.word	0x0801bc8e

0801b5c8 <_printf_common>:
 801b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5cc:	4616      	mov	r6, r2
 801b5ce:	4699      	mov	r9, r3
 801b5d0:	688a      	ldr	r2, [r1, #8]
 801b5d2:	690b      	ldr	r3, [r1, #16]
 801b5d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	bfb8      	it	lt
 801b5dc:	4613      	movlt	r3, r2
 801b5de:	6033      	str	r3, [r6, #0]
 801b5e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b5e4:	4607      	mov	r7, r0
 801b5e6:	460c      	mov	r4, r1
 801b5e8:	b10a      	cbz	r2, 801b5ee <_printf_common+0x26>
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	6033      	str	r3, [r6, #0]
 801b5ee:	6823      	ldr	r3, [r4, #0]
 801b5f0:	0699      	lsls	r1, r3, #26
 801b5f2:	bf42      	ittt	mi
 801b5f4:	6833      	ldrmi	r3, [r6, #0]
 801b5f6:	3302      	addmi	r3, #2
 801b5f8:	6033      	strmi	r3, [r6, #0]
 801b5fa:	6825      	ldr	r5, [r4, #0]
 801b5fc:	f015 0506 	ands.w	r5, r5, #6
 801b600:	d106      	bne.n	801b610 <_printf_common+0x48>
 801b602:	f104 0a19 	add.w	sl, r4, #25
 801b606:	68e3      	ldr	r3, [r4, #12]
 801b608:	6832      	ldr	r2, [r6, #0]
 801b60a:	1a9b      	subs	r3, r3, r2
 801b60c:	42ab      	cmp	r3, r5
 801b60e:	dc26      	bgt.n	801b65e <_printf_common+0x96>
 801b610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b614:	1e13      	subs	r3, r2, #0
 801b616:	6822      	ldr	r2, [r4, #0]
 801b618:	bf18      	it	ne
 801b61a:	2301      	movne	r3, #1
 801b61c:	0692      	lsls	r2, r2, #26
 801b61e:	d42b      	bmi.n	801b678 <_printf_common+0xb0>
 801b620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b624:	4649      	mov	r1, r9
 801b626:	4638      	mov	r0, r7
 801b628:	47c0      	blx	r8
 801b62a:	3001      	adds	r0, #1
 801b62c:	d01e      	beq.n	801b66c <_printf_common+0xa4>
 801b62e:	6823      	ldr	r3, [r4, #0]
 801b630:	6922      	ldr	r2, [r4, #16]
 801b632:	f003 0306 	and.w	r3, r3, #6
 801b636:	2b04      	cmp	r3, #4
 801b638:	bf02      	ittt	eq
 801b63a:	68e5      	ldreq	r5, [r4, #12]
 801b63c:	6833      	ldreq	r3, [r6, #0]
 801b63e:	1aed      	subeq	r5, r5, r3
 801b640:	68a3      	ldr	r3, [r4, #8]
 801b642:	bf0c      	ite	eq
 801b644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b648:	2500      	movne	r5, #0
 801b64a:	4293      	cmp	r3, r2
 801b64c:	bfc4      	itt	gt
 801b64e:	1a9b      	subgt	r3, r3, r2
 801b650:	18ed      	addgt	r5, r5, r3
 801b652:	2600      	movs	r6, #0
 801b654:	341a      	adds	r4, #26
 801b656:	42b5      	cmp	r5, r6
 801b658:	d11a      	bne.n	801b690 <_printf_common+0xc8>
 801b65a:	2000      	movs	r0, #0
 801b65c:	e008      	b.n	801b670 <_printf_common+0xa8>
 801b65e:	2301      	movs	r3, #1
 801b660:	4652      	mov	r2, sl
 801b662:	4649      	mov	r1, r9
 801b664:	4638      	mov	r0, r7
 801b666:	47c0      	blx	r8
 801b668:	3001      	adds	r0, #1
 801b66a:	d103      	bne.n	801b674 <_printf_common+0xac>
 801b66c:	f04f 30ff 	mov.w	r0, #4294967295
 801b670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b674:	3501      	adds	r5, #1
 801b676:	e7c6      	b.n	801b606 <_printf_common+0x3e>
 801b678:	18e1      	adds	r1, r4, r3
 801b67a:	1c5a      	adds	r2, r3, #1
 801b67c:	2030      	movs	r0, #48	; 0x30
 801b67e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b682:	4422      	add	r2, r4
 801b684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b68c:	3302      	adds	r3, #2
 801b68e:	e7c7      	b.n	801b620 <_printf_common+0x58>
 801b690:	2301      	movs	r3, #1
 801b692:	4622      	mov	r2, r4
 801b694:	4649      	mov	r1, r9
 801b696:	4638      	mov	r0, r7
 801b698:	47c0      	blx	r8
 801b69a:	3001      	adds	r0, #1
 801b69c:	d0e6      	beq.n	801b66c <_printf_common+0xa4>
 801b69e:	3601      	adds	r6, #1
 801b6a0:	e7d9      	b.n	801b656 <_printf_common+0x8e>
	...

0801b6a4 <_printf_i>:
 801b6a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6a8:	7e0f      	ldrb	r7, [r1, #24]
 801b6aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b6ac:	2f78      	cmp	r7, #120	; 0x78
 801b6ae:	4691      	mov	r9, r2
 801b6b0:	4680      	mov	r8, r0
 801b6b2:	460c      	mov	r4, r1
 801b6b4:	469a      	mov	sl, r3
 801b6b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b6ba:	d807      	bhi.n	801b6cc <_printf_i+0x28>
 801b6bc:	2f62      	cmp	r7, #98	; 0x62
 801b6be:	d80a      	bhi.n	801b6d6 <_printf_i+0x32>
 801b6c0:	2f00      	cmp	r7, #0
 801b6c2:	f000 80d4 	beq.w	801b86e <_printf_i+0x1ca>
 801b6c6:	2f58      	cmp	r7, #88	; 0x58
 801b6c8:	f000 80c0 	beq.w	801b84c <_printf_i+0x1a8>
 801b6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b6d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b6d4:	e03a      	b.n	801b74c <_printf_i+0xa8>
 801b6d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b6da:	2b15      	cmp	r3, #21
 801b6dc:	d8f6      	bhi.n	801b6cc <_printf_i+0x28>
 801b6de:	a101      	add	r1, pc, #4	; (adr r1, 801b6e4 <_printf_i+0x40>)
 801b6e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b6e4:	0801b73d 	.word	0x0801b73d
 801b6e8:	0801b751 	.word	0x0801b751
 801b6ec:	0801b6cd 	.word	0x0801b6cd
 801b6f0:	0801b6cd 	.word	0x0801b6cd
 801b6f4:	0801b6cd 	.word	0x0801b6cd
 801b6f8:	0801b6cd 	.word	0x0801b6cd
 801b6fc:	0801b751 	.word	0x0801b751
 801b700:	0801b6cd 	.word	0x0801b6cd
 801b704:	0801b6cd 	.word	0x0801b6cd
 801b708:	0801b6cd 	.word	0x0801b6cd
 801b70c:	0801b6cd 	.word	0x0801b6cd
 801b710:	0801b855 	.word	0x0801b855
 801b714:	0801b77d 	.word	0x0801b77d
 801b718:	0801b80f 	.word	0x0801b80f
 801b71c:	0801b6cd 	.word	0x0801b6cd
 801b720:	0801b6cd 	.word	0x0801b6cd
 801b724:	0801b877 	.word	0x0801b877
 801b728:	0801b6cd 	.word	0x0801b6cd
 801b72c:	0801b77d 	.word	0x0801b77d
 801b730:	0801b6cd 	.word	0x0801b6cd
 801b734:	0801b6cd 	.word	0x0801b6cd
 801b738:	0801b817 	.word	0x0801b817
 801b73c:	682b      	ldr	r3, [r5, #0]
 801b73e:	1d1a      	adds	r2, r3, #4
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	602a      	str	r2, [r5, #0]
 801b744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b74c:	2301      	movs	r3, #1
 801b74e:	e09f      	b.n	801b890 <_printf_i+0x1ec>
 801b750:	6820      	ldr	r0, [r4, #0]
 801b752:	682b      	ldr	r3, [r5, #0]
 801b754:	0607      	lsls	r7, r0, #24
 801b756:	f103 0104 	add.w	r1, r3, #4
 801b75a:	6029      	str	r1, [r5, #0]
 801b75c:	d501      	bpl.n	801b762 <_printf_i+0xbe>
 801b75e:	681e      	ldr	r6, [r3, #0]
 801b760:	e003      	b.n	801b76a <_printf_i+0xc6>
 801b762:	0646      	lsls	r6, r0, #25
 801b764:	d5fb      	bpl.n	801b75e <_printf_i+0xba>
 801b766:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b76a:	2e00      	cmp	r6, #0
 801b76c:	da03      	bge.n	801b776 <_printf_i+0xd2>
 801b76e:	232d      	movs	r3, #45	; 0x2d
 801b770:	4276      	negs	r6, r6
 801b772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b776:	485a      	ldr	r0, [pc, #360]	; (801b8e0 <_printf_i+0x23c>)
 801b778:	230a      	movs	r3, #10
 801b77a:	e012      	b.n	801b7a2 <_printf_i+0xfe>
 801b77c:	682b      	ldr	r3, [r5, #0]
 801b77e:	6820      	ldr	r0, [r4, #0]
 801b780:	1d19      	adds	r1, r3, #4
 801b782:	6029      	str	r1, [r5, #0]
 801b784:	0605      	lsls	r5, r0, #24
 801b786:	d501      	bpl.n	801b78c <_printf_i+0xe8>
 801b788:	681e      	ldr	r6, [r3, #0]
 801b78a:	e002      	b.n	801b792 <_printf_i+0xee>
 801b78c:	0641      	lsls	r1, r0, #25
 801b78e:	d5fb      	bpl.n	801b788 <_printf_i+0xe4>
 801b790:	881e      	ldrh	r6, [r3, #0]
 801b792:	4853      	ldr	r0, [pc, #332]	; (801b8e0 <_printf_i+0x23c>)
 801b794:	2f6f      	cmp	r7, #111	; 0x6f
 801b796:	bf0c      	ite	eq
 801b798:	2308      	moveq	r3, #8
 801b79a:	230a      	movne	r3, #10
 801b79c:	2100      	movs	r1, #0
 801b79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b7a2:	6865      	ldr	r5, [r4, #4]
 801b7a4:	60a5      	str	r5, [r4, #8]
 801b7a6:	2d00      	cmp	r5, #0
 801b7a8:	bfa2      	ittt	ge
 801b7aa:	6821      	ldrge	r1, [r4, #0]
 801b7ac:	f021 0104 	bicge.w	r1, r1, #4
 801b7b0:	6021      	strge	r1, [r4, #0]
 801b7b2:	b90e      	cbnz	r6, 801b7b8 <_printf_i+0x114>
 801b7b4:	2d00      	cmp	r5, #0
 801b7b6:	d04b      	beq.n	801b850 <_printf_i+0x1ac>
 801b7b8:	4615      	mov	r5, r2
 801b7ba:	fbb6 f1f3 	udiv	r1, r6, r3
 801b7be:	fb03 6711 	mls	r7, r3, r1, r6
 801b7c2:	5dc7      	ldrb	r7, [r0, r7]
 801b7c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b7c8:	4637      	mov	r7, r6
 801b7ca:	42bb      	cmp	r3, r7
 801b7cc:	460e      	mov	r6, r1
 801b7ce:	d9f4      	bls.n	801b7ba <_printf_i+0x116>
 801b7d0:	2b08      	cmp	r3, #8
 801b7d2:	d10b      	bne.n	801b7ec <_printf_i+0x148>
 801b7d4:	6823      	ldr	r3, [r4, #0]
 801b7d6:	07de      	lsls	r6, r3, #31
 801b7d8:	d508      	bpl.n	801b7ec <_printf_i+0x148>
 801b7da:	6923      	ldr	r3, [r4, #16]
 801b7dc:	6861      	ldr	r1, [r4, #4]
 801b7de:	4299      	cmp	r1, r3
 801b7e0:	bfde      	ittt	le
 801b7e2:	2330      	movle	r3, #48	; 0x30
 801b7e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b7e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b7ec:	1b52      	subs	r2, r2, r5
 801b7ee:	6122      	str	r2, [r4, #16]
 801b7f0:	f8cd a000 	str.w	sl, [sp]
 801b7f4:	464b      	mov	r3, r9
 801b7f6:	aa03      	add	r2, sp, #12
 801b7f8:	4621      	mov	r1, r4
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	f7ff fee4 	bl	801b5c8 <_printf_common>
 801b800:	3001      	adds	r0, #1
 801b802:	d14a      	bne.n	801b89a <_printf_i+0x1f6>
 801b804:	f04f 30ff 	mov.w	r0, #4294967295
 801b808:	b004      	add	sp, #16
 801b80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b80e:	6823      	ldr	r3, [r4, #0]
 801b810:	f043 0320 	orr.w	r3, r3, #32
 801b814:	6023      	str	r3, [r4, #0]
 801b816:	4833      	ldr	r0, [pc, #204]	; (801b8e4 <_printf_i+0x240>)
 801b818:	2778      	movs	r7, #120	; 0x78
 801b81a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b81e:	6823      	ldr	r3, [r4, #0]
 801b820:	6829      	ldr	r1, [r5, #0]
 801b822:	061f      	lsls	r7, r3, #24
 801b824:	f851 6b04 	ldr.w	r6, [r1], #4
 801b828:	d402      	bmi.n	801b830 <_printf_i+0x18c>
 801b82a:	065f      	lsls	r7, r3, #25
 801b82c:	bf48      	it	mi
 801b82e:	b2b6      	uxthmi	r6, r6
 801b830:	07df      	lsls	r7, r3, #31
 801b832:	bf48      	it	mi
 801b834:	f043 0320 	orrmi.w	r3, r3, #32
 801b838:	6029      	str	r1, [r5, #0]
 801b83a:	bf48      	it	mi
 801b83c:	6023      	strmi	r3, [r4, #0]
 801b83e:	b91e      	cbnz	r6, 801b848 <_printf_i+0x1a4>
 801b840:	6823      	ldr	r3, [r4, #0]
 801b842:	f023 0320 	bic.w	r3, r3, #32
 801b846:	6023      	str	r3, [r4, #0]
 801b848:	2310      	movs	r3, #16
 801b84a:	e7a7      	b.n	801b79c <_printf_i+0xf8>
 801b84c:	4824      	ldr	r0, [pc, #144]	; (801b8e0 <_printf_i+0x23c>)
 801b84e:	e7e4      	b.n	801b81a <_printf_i+0x176>
 801b850:	4615      	mov	r5, r2
 801b852:	e7bd      	b.n	801b7d0 <_printf_i+0x12c>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	6826      	ldr	r6, [r4, #0]
 801b858:	6961      	ldr	r1, [r4, #20]
 801b85a:	1d18      	adds	r0, r3, #4
 801b85c:	6028      	str	r0, [r5, #0]
 801b85e:	0635      	lsls	r5, r6, #24
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	d501      	bpl.n	801b868 <_printf_i+0x1c4>
 801b864:	6019      	str	r1, [r3, #0]
 801b866:	e002      	b.n	801b86e <_printf_i+0x1ca>
 801b868:	0670      	lsls	r0, r6, #25
 801b86a:	d5fb      	bpl.n	801b864 <_printf_i+0x1c0>
 801b86c:	8019      	strh	r1, [r3, #0]
 801b86e:	2300      	movs	r3, #0
 801b870:	6123      	str	r3, [r4, #16]
 801b872:	4615      	mov	r5, r2
 801b874:	e7bc      	b.n	801b7f0 <_printf_i+0x14c>
 801b876:	682b      	ldr	r3, [r5, #0]
 801b878:	1d1a      	adds	r2, r3, #4
 801b87a:	602a      	str	r2, [r5, #0]
 801b87c:	681d      	ldr	r5, [r3, #0]
 801b87e:	6862      	ldr	r2, [r4, #4]
 801b880:	2100      	movs	r1, #0
 801b882:	4628      	mov	r0, r5
 801b884:	f7e4 fe5c 	bl	8000540 <memchr>
 801b888:	b108      	cbz	r0, 801b88e <_printf_i+0x1ea>
 801b88a:	1b40      	subs	r0, r0, r5
 801b88c:	6060      	str	r0, [r4, #4]
 801b88e:	6863      	ldr	r3, [r4, #4]
 801b890:	6123      	str	r3, [r4, #16]
 801b892:	2300      	movs	r3, #0
 801b894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b898:	e7aa      	b.n	801b7f0 <_printf_i+0x14c>
 801b89a:	6923      	ldr	r3, [r4, #16]
 801b89c:	462a      	mov	r2, r5
 801b89e:	4649      	mov	r1, r9
 801b8a0:	4640      	mov	r0, r8
 801b8a2:	47d0      	blx	sl
 801b8a4:	3001      	adds	r0, #1
 801b8a6:	d0ad      	beq.n	801b804 <_printf_i+0x160>
 801b8a8:	6823      	ldr	r3, [r4, #0]
 801b8aa:	079b      	lsls	r3, r3, #30
 801b8ac:	d413      	bmi.n	801b8d6 <_printf_i+0x232>
 801b8ae:	68e0      	ldr	r0, [r4, #12]
 801b8b0:	9b03      	ldr	r3, [sp, #12]
 801b8b2:	4298      	cmp	r0, r3
 801b8b4:	bfb8      	it	lt
 801b8b6:	4618      	movlt	r0, r3
 801b8b8:	e7a6      	b.n	801b808 <_printf_i+0x164>
 801b8ba:	2301      	movs	r3, #1
 801b8bc:	4632      	mov	r2, r6
 801b8be:	4649      	mov	r1, r9
 801b8c0:	4640      	mov	r0, r8
 801b8c2:	47d0      	blx	sl
 801b8c4:	3001      	adds	r0, #1
 801b8c6:	d09d      	beq.n	801b804 <_printf_i+0x160>
 801b8c8:	3501      	adds	r5, #1
 801b8ca:	68e3      	ldr	r3, [r4, #12]
 801b8cc:	9903      	ldr	r1, [sp, #12]
 801b8ce:	1a5b      	subs	r3, r3, r1
 801b8d0:	42ab      	cmp	r3, r5
 801b8d2:	dcf2      	bgt.n	801b8ba <_printf_i+0x216>
 801b8d4:	e7eb      	b.n	801b8ae <_printf_i+0x20a>
 801b8d6:	2500      	movs	r5, #0
 801b8d8:	f104 0619 	add.w	r6, r4, #25
 801b8dc:	e7f5      	b.n	801b8ca <_printf_i+0x226>
 801b8de:	bf00      	nop
 801b8e0:	0801bc99 	.word	0x0801bc99
 801b8e4:	0801bcaa 	.word	0x0801bcaa

0801b8e8 <memmove>:
 801b8e8:	4288      	cmp	r0, r1
 801b8ea:	b510      	push	{r4, lr}
 801b8ec:	eb01 0402 	add.w	r4, r1, r2
 801b8f0:	d902      	bls.n	801b8f8 <memmove+0x10>
 801b8f2:	4284      	cmp	r4, r0
 801b8f4:	4623      	mov	r3, r4
 801b8f6:	d807      	bhi.n	801b908 <memmove+0x20>
 801b8f8:	1e43      	subs	r3, r0, #1
 801b8fa:	42a1      	cmp	r1, r4
 801b8fc:	d008      	beq.n	801b910 <memmove+0x28>
 801b8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b902:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b906:	e7f8      	b.n	801b8fa <memmove+0x12>
 801b908:	4402      	add	r2, r0
 801b90a:	4601      	mov	r1, r0
 801b90c:	428a      	cmp	r2, r1
 801b90e:	d100      	bne.n	801b912 <memmove+0x2a>
 801b910:	bd10      	pop	{r4, pc}
 801b912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b91a:	e7f7      	b.n	801b90c <memmove+0x24>

0801b91c <_sbrk_r>:
 801b91c:	b538      	push	{r3, r4, r5, lr}
 801b91e:	4d06      	ldr	r5, [pc, #24]	; (801b938 <_sbrk_r+0x1c>)
 801b920:	2300      	movs	r3, #0
 801b922:	4604      	mov	r4, r0
 801b924:	4608      	mov	r0, r1
 801b926:	602b      	str	r3, [r5, #0]
 801b928:	f7e6 fd6c 	bl	8002404 <_sbrk>
 801b92c:	1c43      	adds	r3, r0, #1
 801b92e:	d102      	bne.n	801b936 <_sbrk_r+0x1a>
 801b930:	682b      	ldr	r3, [r5, #0]
 801b932:	b103      	cbz	r3, 801b936 <_sbrk_r+0x1a>
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	bd38      	pop	{r3, r4, r5, pc}
 801b938:	24004b0c 	.word	0x24004b0c

0801b93c <_realloc_r>:
 801b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b940:	4680      	mov	r8, r0
 801b942:	4614      	mov	r4, r2
 801b944:	460e      	mov	r6, r1
 801b946:	b921      	cbnz	r1, 801b952 <_realloc_r+0x16>
 801b948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b94c:	4611      	mov	r1, r2
 801b94e:	f7ff bc57 	b.w	801b200 <_malloc_r>
 801b952:	b92a      	cbnz	r2, 801b960 <_realloc_r+0x24>
 801b954:	f7ff fbe8 	bl	801b128 <_free_r>
 801b958:	4625      	mov	r5, r4
 801b95a:	4628      	mov	r0, r5
 801b95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b960:	f000 f81b 	bl	801b99a <_malloc_usable_size_r>
 801b964:	4284      	cmp	r4, r0
 801b966:	4607      	mov	r7, r0
 801b968:	d802      	bhi.n	801b970 <_realloc_r+0x34>
 801b96a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b96e:	d812      	bhi.n	801b996 <_realloc_r+0x5a>
 801b970:	4621      	mov	r1, r4
 801b972:	4640      	mov	r0, r8
 801b974:	f7ff fc44 	bl	801b200 <_malloc_r>
 801b978:	4605      	mov	r5, r0
 801b97a:	2800      	cmp	r0, #0
 801b97c:	d0ed      	beq.n	801b95a <_realloc_r+0x1e>
 801b97e:	42bc      	cmp	r4, r7
 801b980:	4622      	mov	r2, r4
 801b982:	4631      	mov	r1, r6
 801b984:	bf28      	it	cs
 801b986:	463a      	movcs	r2, r7
 801b988:	f7ff fbc0 	bl	801b10c <memcpy>
 801b98c:	4631      	mov	r1, r6
 801b98e:	4640      	mov	r0, r8
 801b990:	f7ff fbca 	bl	801b128 <_free_r>
 801b994:	e7e1      	b.n	801b95a <_realloc_r+0x1e>
 801b996:	4635      	mov	r5, r6
 801b998:	e7df      	b.n	801b95a <_realloc_r+0x1e>

0801b99a <_malloc_usable_size_r>:
 801b99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b99e:	1f18      	subs	r0, r3, #4
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	bfbc      	itt	lt
 801b9a4:	580b      	ldrlt	r3, [r1, r0]
 801b9a6:	18c0      	addlt	r0, r0, r3
 801b9a8:	4770      	bx	lr
	...

0801b9ac <_init>:
 801b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9ae:	bf00      	nop
 801b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9b2:	bc08      	pop	{r3}
 801b9b4:	469e      	mov	lr, r3
 801b9b6:	4770      	bx	lr

0801b9b8 <_fini>:
 801b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9ba:	bf00      	nop
 801b9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9be:	bc08      	pop	{r3}
 801b9c0:	469e      	mov	lr, r3
 801b9c2:	4770      	bx	lr
