
lcd_bsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d2c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fb4  08108fcc  08108fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810cf80  0810cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810cf84  0810cf84  0001cf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c8  24000000  0810cf88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ee4  240000c8  0810d050  000200c8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000fac  0810d050  00020fac  2**0
                  ALLOC
  8 .ARM.attributes 00000032  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019d89  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a1c  00000000  00000000  00039ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001480  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fb1  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e778  00000000  00000000  0003fd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d8bb  00000000  00000000  0007e491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00191ef5  00000000  00000000  0009bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005994  00000000  00000000  0022dc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  002335d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	240000c8 	.word	0x240000c8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08108fb4 	.word	0x08108fb4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	240000cc 	.word	0x240000cc
 81002dc:	08108fb4 	.word	0x08108fb4

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8100380:	b580      	push	{r7, lr}
 8100382:	b090      	sub	sp, #64	; 0x40
 8100384:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8100386:	f002 ff23 	bl	81031d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 810038a:	f000 f8a1 	bl	81004d0 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 810038e:	2101      	movs	r1, #1
 8100390:	2000      	movs	r0, #0
 8100392:	f001 fb9b 	bl	8101acc <BSP_LCD_Init>
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8100396:	483e      	ldr	r0, [pc, #248]	; (8100490 <main+0x110>)
 8100398:	f007 fe1e 	bl	8107fd8 <UTIL_LCD_SetFuncDriver>
	char desc[50];
	uint32_t x_size;
	uint32_t y_size;

	UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 810039c:	483d      	ldr	r0, [pc, #244]	; (8100494 <main+0x114>)
 810039e:	f007 fe99 	bl	81080d4 <UTIL_LCD_SetFont>

	/* Clear the LCD */
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 81003a2:	483d      	ldr	r0, [pc, #244]	; (8100498 <main+0x118>)
 81003a4:	f007 fe82 	bl	81080ac <UTIL_LCD_SetBackColor>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_GRAY);
 81003a8:	483b      	ldr	r0, [pc, #236]	; (8100498 <main+0x118>)
 81003aa:	f007 fec3 	bl	8108134 <UTIL_LCD_Clear>

	/* Set the LCD Text Color */
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 81003ae:	483b      	ldr	r0, [pc, #236]	; (810049c <main+0x11c>)
 81003b0:	f007 fe68 	bl	8108084 <UTIL_LCD_SetTextColor>

	/* Display LCD messages */
	UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"PFE 2024 SUJET 20", CENTER_MODE);
 81003b4:	2301      	movs	r3, #1
 81003b6:	4a3a      	ldr	r2, [pc, #232]	; (81004a0 <main+0x120>)
 81003b8:	210a      	movs	r1, #10
 81003ba:	2000      	movs	r0, #0
 81003bc:	f007 ff06 	bl	81081cc <UTIL_LCD_DisplayStringAt>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 81003c0:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 81003c4:	f007 fe5e 	bl	8108084 <UTIL_LCD_SetTextColor>
	UTIL_LCD_DisplayStringAt(0, 100, (uint8_t *)"ELHDI ZAIDI", CENTER_MODE);
 81003c8:	2301      	movs	r3, #1
 81003ca:	4a36      	ldr	r2, [pc, #216]	; (81004a4 <main+0x124>)
 81003cc:	2164      	movs	r1, #100	; 0x64
 81003ce:	2000      	movs	r0, #0
 81003d0:	f007 fefc 	bl	81081cc <UTIL_LCD_DisplayStringAt>

	BSP_LCD_GetXSize(0, &x_size);
 81003d4:	f107 0308 	add.w	r3, r7, #8
 81003d8:	4619      	mov	r1, r3
 81003da:	2000      	movs	r0, #0
 81003dc:	f001 fe28 	bl	8102030 <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 81003e0:	1d3b      	adds	r3, r7, #4
 81003e2:	4619      	mov	r1, r3
 81003e4:	2000      	movs	r0, #0
 81003e6:	f001 fe45 	bl	8102074 <BSP_LCD_GetYSize>

	/* Draw Bitmap */
	UTIL_LCD_DrawBitmap((x_size - 80)/2, 400, (uint8_t *)stlogo);
 81003ea:	68bb      	ldr	r3, [r7, #8]
 81003ec:	3b50      	subs	r3, #80	; 0x50
 81003ee:	085b      	lsrs	r3, r3, #1
 81003f0:	4a2d      	ldr	r2, [pc, #180]	; (81004a8 <main+0x128>)
 81003f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 81003f6:	4618      	mov	r0, r3
 81003f8:	f007 ff96 	bl	8108328 <UTIL_LCD_DrawBitmap>

	hTS.Width = x_size;
 81003fc:	68bb      	ldr	r3, [r7, #8]
 81003fe:	4a2b      	ldr	r2, [pc, #172]	; (81004ac <main+0x12c>)
 8100400:	6013      	str	r3, [r2, #0]
	hTS.Height = y_size;
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	4a29      	ldr	r2, [pc, #164]	; (81004ac <main+0x12c>)
 8100406:	6053      	str	r3, [r2, #4]
	hTS.Orientation = TS_SWAP_NONE;
 8100408:	4b28      	ldr	r3, [pc, #160]	; (81004ac <main+0x12c>)
 810040a:	2201      	movs	r2, #1
 810040c:	609a      	str	r2, [r3, #8]
	hTS.Accuracy = 1;
 810040e:	4b27      	ldr	r3, [pc, #156]	; (81004ac <main+0x12c>)
 8100410:	2201      	movs	r2, #1
 8100412:	60da      	str	r2, [r3, #12]
	ts_status = BSP_TS_Init(0, &hTS);
 8100414:	4925      	ldr	r1, [pc, #148]	; (81004ac <main+0x12c>)
 8100416:	2000      	movs	r0, #0
 8100418:	f002 fc5c 	bl	8102cd4 <BSP_TS_Init>
 810041c:	4603      	mov	r3, r0
 810041e:	461a      	mov	r2, r3
 8100420:	4b23      	ldr	r3, [pc, #140]	; (81004b0 <main+0x130>)
 8100422:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ts_status = BSP_TS_GetState(0, &TS_State);
 8100424:	4923      	ldr	r1, [pc, #140]	; (81004b4 <main+0x134>)
 8100426:	2000      	movs	r0, #0
 8100428:	f002 fcf4 	bl	8102e14 <BSP_TS_GetState>
 810042c:	4603      	mov	r3, r0
 810042e:	461a      	mov	r2, r3
 8100430:	4b1f      	ldr	r3, [pc, #124]	; (81004b0 <main+0x130>)
 8100432:	601a      	str	r2, [r3, #0]
		if(TS_State.TouchDetected)
 8100434:	4b1f      	ldr	r3, [pc, #124]	; (81004b4 <main+0x134>)
 8100436:	681b      	ldr	r3, [r3, #0]
 8100438:	2b00      	cmp	r3, #0
 810043a:	d0f3      	beq.n	8100424 <main+0xa4>
		{
			 x1 = TS_State.TouchX;
 810043c:	4b1d      	ldr	r3, [pc, #116]	; (81004b4 <main+0x134>)
 810043e:	685b      	ldr	r3, [r3, #4]
 8100440:	b29a      	uxth	r2, r3
 8100442:	4b1d      	ldr	r3, [pc, #116]	; (81004b8 <main+0x138>)
 8100444:	801a      	strh	r2, [r3, #0]
			 y = TS_State.TouchY;
 8100446:	4b1b      	ldr	r3, [pc, #108]	; (81004b4 <main+0x134>)
 8100448:	689b      	ldr	r3, [r3, #8]
 810044a:	b29a      	uxth	r2, r3
 810044c:	4b1b      	ldr	r3, [pc, #108]	; (81004bc <main+0x13c>)
 810044e:	801a      	strh	r2, [r3, #0]

			 sprintf(xTouchStr, "X: %3d",x1);
 8100450:	4b19      	ldr	r3, [pc, #100]	; (81004b8 <main+0x138>)
 8100452:	881b      	ldrh	r3, [r3, #0]
 8100454:	461a      	mov	r2, r3
 8100456:	491a      	ldr	r1, [pc, #104]	; (81004c0 <main+0x140>)
 8100458:	481a      	ldr	r0, [pc, #104]	; (81004c4 <main+0x144>)
 810045a:	f008 f90f 	bl	810867c <siprintf>
			 sprintf(yTouchStr, "Y: %3d",y);
 810045e:	4b17      	ldr	r3, [pc, #92]	; (81004bc <main+0x13c>)
 8100460:	881b      	ldrh	r3, [r3, #0]
 8100462:	461a      	mov	r2, r3
 8100464:	4918      	ldr	r1, [pc, #96]	; (81004c8 <main+0x148>)
 8100466:	4819      	ldr	r0, [pc, #100]	; (81004cc <main+0x14c>)
 8100468:	f008 f908 	bl	810867c <siprintf>
			 UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 810046c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8100470:	f007 fe08 	bl	8108084 <UTIL_LCD_SetTextColor>
			 UTIL_LCD_DisplayStringAt(0, 140, (uint8_t *)xTouchStr, CENTER_MODE);
 8100474:	2301      	movs	r3, #1
 8100476:	4a13      	ldr	r2, [pc, #76]	; (81004c4 <main+0x144>)
 8100478:	218c      	movs	r1, #140	; 0x8c
 810047a:	2000      	movs	r0, #0
 810047c:	f007 fea6 	bl	81081cc <UTIL_LCD_DisplayStringAt>
			 UTIL_LCD_DisplayStringAt(100, 140, (uint8_t *)yTouchStr, CENTER_MODE);
 8100480:	2301      	movs	r3, #1
 8100482:	4a12      	ldr	r2, [pc, #72]	; (81004cc <main+0x14c>)
 8100484:	218c      	movs	r1, #140	; 0x8c
 8100486:	2064      	movs	r0, #100	; 0x64
 8100488:	f007 fea0 	bl	81081cc <UTIL_LCD_DisplayStringAt>
		ts_status = BSP_TS_GetState(0, &TS_State);
 810048c:	e7ca      	b.n	8100424 <main+0xa4>
 810048e:	bf00      	nop
 8100490:	0810b468 	.word	0x0810b468
 8100494:	24000070 	.word	0x24000070
 8100498:	ff808080 	.word	0xff808080
 810049c:	ff000080 	.word	0xff000080
 81004a0:	08108fcc 	.word	0x08108fcc
 81004a4:	08108fe0 	.word	0x08108fe0
 81004a8:	08108ffc 	.word	0x08108ffc
 81004ac:	240000f0 	.word	0x240000f0
 81004b0:	2400011c 	.word	0x2400011c
 81004b4:	240000e4 	.word	0x240000e4
 81004b8:	24000116 	.word	0x24000116
 81004bc:	24000118 	.word	0x24000118
 81004c0:	08108fec 	.word	0x08108fec
 81004c4:	24000100 	.word	0x24000100
 81004c8:	08108ff4 	.word	0x08108ff4
 81004cc:	2400010c 	.word	0x2400010c

081004d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 81004d0:	b580      	push	{r7, lr}
 81004d2:	b09e      	sub	sp, #120	; 0x78
 81004d4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 81004d6:	2300      	movs	r3, #0
 81004d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 81004dc:	2002      	movs	r0, #2
 81004de:	f005 f85d 	bl	810559c <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 81004e2:	2300      	movs	r3, #0
 81004e4:	607b      	str	r3, [r7, #4]
 81004e6:	4b42      	ldr	r3, [pc, #264]	; (81005f0 <SystemClock_Config+0x120>)
 81004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81004ea:	4a41      	ldr	r2, [pc, #260]	; (81005f0 <SystemClock_Config+0x120>)
 81004ec:	f023 0301 	bic.w	r3, r3, #1
 81004f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 81004f2:	4b3f      	ldr	r3, [pc, #252]	; (81005f0 <SystemClock_Config+0x120>)
 81004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81004f6:	f003 0301 	and.w	r3, r3, #1
 81004fa:	607b      	str	r3, [r7, #4]
 81004fc:	4b3d      	ldr	r3, [pc, #244]	; (81005f4 <SystemClock_Config+0x124>)
 81004fe:	699b      	ldr	r3, [r3, #24]
 8100500:	4a3c      	ldr	r2, [pc, #240]	; (81005f4 <SystemClock_Config+0x124>)
 8100502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8100506:	6193      	str	r3, [r2, #24]
 8100508:	4b3a      	ldr	r3, [pc, #232]	; (81005f4 <SystemClock_Config+0x124>)
 810050a:	699b      	ldr	r3, [r3, #24]
 810050c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8100510:	607b      	str	r3, [r7, #4]
 8100512:	687b      	ldr	r3, [r7, #4]

	while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) {}
 8100514:	bf00      	nop
 8100516:	4b37      	ldr	r3, [pc, #220]	; (81005f4 <SystemClock_Config+0x124>)
 8100518:	699b      	ldr	r3, [r3, #24]
 810051a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810051e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100522:	d1f8      	bne.n	8100516 <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8100524:	2301      	movs	r3, #1
 8100526:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8100528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 810052c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 810052e:	2300      	movs	r3, #0
 8100530:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8100532:	2300      	movs	r3, #0
 8100534:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8100536:	2302      	movs	r3, #2
 8100538:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 810053a:	2302      	movs	r3, #2
 810053c:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 810053e:	2305      	movs	r3, #5
 8100540:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 8100542:	23a0      	movs	r3, #160	; 0xa0
 8100544:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8100546:	2300      	movs	r3, #0
 8100548:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 810054a:	2302      	movs	r3, #2
 810054c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 810054e:	2302      	movs	r3, #2
 8100550:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8100552:	2304      	movs	r3, #4
 8100554:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8100556:	2300      	movs	r3, #0
 8100558:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 810055a:	2308      	movs	r3, #8
 810055c:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 810055e:	f107 0308 	add.w	r3, r7, #8
 8100562:	4618      	mov	r0, r3
 8100564:	f005 f854 	bl	8105610 <HAL_RCC_OscConfig>
 8100568:	4603      	mov	r3, r0
 810056a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 810056e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8100572:	2b00      	cmp	r3, #0
 8100574:	d001      	beq.n	810057a <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8100576:	f000 f841 	bl	81005fc <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 810057a:	233f      	movs	r3, #63	; 0x3f
 810057c:	657b      	str	r3, [r7, #84]	; 0x54
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 810057e:	2303      	movs	r3, #3
 8100580:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8100582:	2300      	movs	r3, #0
 8100584:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8100586:	2308      	movs	r3, #8
 8100588:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 810058a:	2340      	movs	r3, #64	; 0x40
 810058c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 810058e:	2340      	movs	r3, #64	; 0x40
 8100590:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8100592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100596:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8100598:	2340      	movs	r3, #64	; 0x40
 810059a:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 810059c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 81005a0:	2104      	movs	r1, #4
 81005a2:	4618      	mov	r0, r3
 81005a4:	f005 fc8e 	bl	8105ec4 <HAL_RCC_ClockConfig>
 81005a8:	4603      	mov	r3, r0
 81005aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 81005ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 81005b2:	2b00      	cmp	r3, #0
 81005b4:	d001      	beq.n	81005ba <SystemClock_Config+0xea>
	{
		Error_Handler();
 81005b6:	f000 f821 	bl	81005fc <Error_Handler>
	}

	/*activate CSI clock mondatory for I/O Compensation Cell*/
	__HAL_RCC_CSI_ENABLE() ;
 81005ba:	4b0f      	ldr	r3, [pc, #60]	; (81005f8 <SystemClock_Config+0x128>)
 81005bc:	681b      	ldr	r3, [r3, #0]
 81005be:	4a0e      	ldr	r2, [pc, #56]	; (81005f8 <SystemClock_Config+0x128>)
 81005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81005c4:	6013      	str	r3, [r2, #0]

	/* Enable SYSCFG clock mondatory for I/O Compensation Cell */
	__HAL_RCC_SYSCFG_CLK_ENABLE() ;
 81005c6:	4b0c      	ldr	r3, [pc, #48]	; (81005f8 <SystemClock_Config+0x128>)
 81005c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81005cc:	4a0a      	ldr	r2, [pc, #40]	; (81005f8 <SystemClock_Config+0x128>)
 81005ce:	f043 0302 	orr.w	r3, r3, #2
 81005d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81005d6:	4b08      	ldr	r3, [pc, #32]	; (81005f8 <SystemClock_Config+0x128>)
 81005d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81005dc:	f003 0302 	and.w	r3, r3, #2
 81005e0:	603b      	str	r3, [r7, #0]
 81005e2:	683b      	ldr	r3, [r7, #0]

	/* Enables the I/O Compensation Cell */
	HAL_EnableCompensationCell();
 81005e4:	f002 feb6 	bl	8103354 <HAL_EnableCompensationCell>
}
 81005e8:	bf00      	nop
 81005ea:	3778      	adds	r7, #120	; 0x78
 81005ec:	46bd      	mov	sp, r7
 81005ee:	bd80      	pop	{r7, pc}
 81005f0:	58000400 	.word	0x58000400
 81005f4:	58024800 	.word	0x58024800
 81005f8:	58024400 	.word	0x58024400

081005fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 81005fc:	b480      	push	{r7}
 81005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100600:	b672      	cpsid	i
}
 8100602:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8100604:	e7fe      	b.n	8100604 <Error_Handler+0x8>
	...

08100608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100608:	b480      	push	{r7}
 810060a:	b083      	sub	sp, #12
 810060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810060e:	4b0a      	ldr	r3, [pc, #40]	; (8100638 <HAL_MspInit+0x30>)
 8100610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100614:	4a08      	ldr	r2, [pc, #32]	; (8100638 <HAL_MspInit+0x30>)
 8100616:	f043 0302 	orr.w	r3, r3, #2
 810061a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810061e:	4b06      	ldr	r3, [pc, #24]	; (8100638 <HAL_MspInit+0x30>)
 8100620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100624:	f003 0302 	and.w	r3, r3, #2
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810062c:	bf00      	nop
 810062e:	370c      	adds	r7, #12
 8100630:	46bd      	mov	sp, r7
 8100632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100636:	4770      	bx	lr
 8100638:	58024400 	.word	0x58024400

0810063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810063c:	b480      	push	{r7}
 810063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100640:	e7fe      	b.n	8100640 <NMI_Handler+0x4>

08100642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100642:	b480      	push	{r7}
 8100644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100646:	e7fe      	b.n	8100646 <HardFault_Handler+0x4>

08100648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100648:	b480      	push	{r7}
 810064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810064c:	e7fe      	b.n	810064c <MemManage_Handler+0x4>

0810064e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810064e:	b480      	push	{r7}
 8100650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100652:	e7fe      	b.n	8100652 <BusFault_Handler+0x4>

08100654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100654:	b480      	push	{r7}
 8100656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100658:	e7fe      	b.n	8100658 <UsageFault_Handler+0x4>

0810065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810065a:	b480      	push	{r7}
 810065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810065e:	bf00      	nop
 8100660:	46bd      	mov	sp, r7
 8100662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100666:	4770      	bx	lr

08100668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100668:	b480      	push	{r7}
 810066a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810066c:	bf00      	nop
 810066e:	46bd      	mov	sp, r7
 8100670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100674:	4770      	bx	lr

08100676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100676:	b480      	push	{r7}
 8100678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810067a:	bf00      	nop
 810067c:	46bd      	mov	sp, r7
 810067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100682:	4770      	bx	lr

08100684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100684:	b580      	push	{r7, lr}
 8100686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100688:	f002 fe14 	bl	81032b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810068c:	bf00      	nop
 810068e:	bd80      	pop	{r7, pc}

08100690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100690:	b580      	push	{r7, lr}
 8100692:	b086      	sub	sp, #24
 8100694:	af00      	add	r7, sp, #0
 8100696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100698:	4a14      	ldr	r2, [pc, #80]	; (81006ec <_sbrk+0x5c>)
 810069a:	4b15      	ldr	r3, [pc, #84]	; (81006f0 <_sbrk+0x60>)
 810069c:	1ad3      	subs	r3, r2, r3
 810069e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81006a0:	697b      	ldr	r3, [r7, #20]
 81006a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81006a4:	4b13      	ldr	r3, [pc, #76]	; (81006f4 <_sbrk+0x64>)
 81006a6:	681b      	ldr	r3, [r3, #0]
 81006a8:	2b00      	cmp	r3, #0
 81006aa:	d102      	bne.n	81006b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81006ac:	4b11      	ldr	r3, [pc, #68]	; (81006f4 <_sbrk+0x64>)
 81006ae:	4a12      	ldr	r2, [pc, #72]	; (81006f8 <_sbrk+0x68>)
 81006b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81006b2:	4b10      	ldr	r3, [pc, #64]	; (81006f4 <_sbrk+0x64>)
 81006b4:	681a      	ldr	r2, [r3, #0]
 81006b6:	687b      	ldr	r3, [r7, #4]
 81006b8:	4413      	add	r3, r2
 81006ba:	693a      	ldr	r2, [r7, #16]
 81006bc:	429a      	cmp	r2, r3
 81006be:	d207      	bcs.n	81006d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81006c0:	f007 fffc 	bl	81086bc <__errno>
 81006c4:	4603      	mov	r3, r0
 81006c6:	220c      	movs	r2, #12
 81006c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81006ca:	f04f 33ff 	mov.w	r3, #4294967295
 81006ce:	e009      	b.n	81006e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81006d0:	4b08      	ldr	r3, [pc, #32]	; (81006f4 <_sbrk+0x64>)
 81006d2:	681b      	ldr	r3, [r3, #0]
 81006d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81006d6:	4b07      	ldr	r3, [pc, #28]	; (81006f4 <_sbrk+0x64>)
 81006d8:	681a      	ldr	r2, [r3, #0]
 81006da:	687b      	ldr	r3, [r7, #4]
 81006dc:	4413      	add	r3, r2
 81006de:	4a05      	ldr	r2, [pc, #20]	; (81006f4 <_sbrk+0x64>)
 81006e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81006e2:	68fb      	ldr	r3, [r7, #12]
}
 81006e4:	4618      	mov	r0, r3
 81006e6:	3718      	adds	r7, #24
 81006e8:	46bd      	mov	sp, r7
 81006ea:	bd80      	pop	{r7, pc}
 81006ec:	24080000 	.word	0x24080000
 81006f0:	00000400 	.word	0x00000400
 81006f4:	24000120 	.word	0x24000120
 81006f8:	24000fb0 	.word	0x24000fb0

081006fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006fc:	b480      	push	{r7}
 81006fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100700:	4b37      	ldr	r3, [pc, #220]	; (81007e0 <SystemInit+0xe4>)
 8100702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100706:	4a36      	ldr	r2, [pc, #216]	; (81007e0 <SystemInit+0xe4>)
 8100708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8100710:	4b34      	ldr	r3, [pc, #208]	; (81007e4 <SystemInit+0xe8>)
 8100712:	681b      	ldr	r3, [r3, #0]
 8100714:	f003 030f 	and.w	r3, r3, #15
 8100718:	2b06      	cmp	r3, #6
 810071a:	d807      	bhi.n	810072c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 810071c:	4b31      	ldr	r3, [pc, #196]	; (81007e4 <SystemInit+0xe8>)
 810071e:	681b      	ldr	r3, [r3, #0]
 8100720:	f023 030f 	bic.w	r3, r3, #15
 8100724:	4a2f      	ldr	r2, [pc, #188]	; (81007e4 <SystemInit+0xe8>)
 8100726:	f043 0307 	orr.w	r3, r3, #7
 810072a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 810072c:	4b2e      	ldr	r3, [pc, #184]	; (81007e8 <SystemInit+0xec>)
 810072e:	681b      	ldr	r3, [r3, #0]
 8100730:	4a2d      	ldr	r2, [pc, #180]	; (81007e8 <SystemInit+0xec>)
 8100732:	f043 0301 	orr.w	r3, r3, #1
 8100736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8100738:	4b2b      	ldr	r3, [pc, #172]	; (81007e8 <SystemInit+0xec>)
 810073a:	2200      	movs	r2, #0
 810073c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 810073e:	4b2a      	ldr	r3, [pc, #168]	; (81007e8 <SystemInit+0xec>)
 8100740:	681a      	ldr	r2, [r3, #0]
 8100742:	4929      	ldr	r1, [pc, #164]	; (81007e8 <SystemInit+0xec>)
 8100744:	4b29      	ldr	r3, [pc, #164]	; (81007ec <SystemInit+0xf0>)
 8100746:	4013      	ands	r3, r2
 8100748:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 810074a:	4b26      	ldr	r3, [pc, #152]	; (81007e4 <SystemInit+0xe8>)
 810074c:	681b      	ldr	r3, [r3, #0]
 810074e:	f003 0308 	and.w	r3, r3, #8
 8100752:	2b00      	cmp	r3, #0
 8100754:	d007      	beq.n	8100766 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8100756:	4b23      	ldr	r3, [pc, #140]	; (81007e4 <SystemInit+0xe8>)
 8100758:	681b      	ldr	r3, [r3, #0]
 810075a:	f023 030f 	bic.w	r3, r3, #15
 810075e:	4a21      	ldr	r2, [pc, #132]	; (81007e4 <SystemInit+0xe8>)
 8100760:	f043 0307 	orr.w	r3, r3, #7
 8100764:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8100766:	4b20      	ldr	r3, [pc, #128]	; (81007e8 <SystemInit+0xec>)
 8100768:	2200      	movs	r2, #0
 810076a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 810076c:	4b1e      	ldr	r3, [pc, #120]	; (81007e8 <SystemInit+0xec>)
 810076e:	2200      	movs	r2, #0
 8100770:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8100772:	4b1d      	ldr	r3, [pc, #116]	; (81007e8 <SystemInit+0xec>)
 8100774:	2200      	movs	r2, #0
 8100776:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8100778:	4b1b      	ldr	r3, [pc, #108]	; (81007e8 <SystemInit+0xec>)
 810077a:	4a1d      	ldr	r2, [pc, #116]	; (81007f0 <SystemInit+0xf4>)
 810077c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 810077e:	4b1a      	ldr	r3, [pc, #104]	; (81007e8 <SystemInit+0xec>)
 8100780:	4a1c      	ldr	r2, [pc, #112]	; (81007f4 <SystemInit+0xf8>)
 8100782:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8100784:	4b18      	ldr	r3, [pc, #96]	; (81007e8 <SystemInit+0xec>)
 8100786:	4a1c      	ldr	r2, [pc, #112]	; (81007f8 <SystemInit+0xfc>)
 8100788:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 810078a:	4b17      	ldr	r3, [pc, #92]	; (81007e8 <SystemInit+0xec>)
 810078c:	2200      	movs	r2, #0
 810078e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8100790:	4b15      	ldr	r3, [pc, #84]	; (81007e8 <SystemInit+0xec>)
 8100792:	4a19      	ldr	r2, [pc, #100]	; (81007f8 <SystemInit+0xfc>)
 8100794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8100796:	4b14      	ldr	r3, [pc, #80]	; (81007e8 <SystemInit+0xec>)
 8100798:	2200      	movs	r2, #0
 810079a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 810079c:	4b12      	ldr	r3, [pc, #72]	; (81007e8 <SystemInit+0xec>)
 810079e:	4a16      	ldr	r2, [pc, #88]	; (81007f8 <SystemInit+0xfc>)
 81007a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 81007a2:	4b11      	ldr	r3, [pc, #68]	; (81007e8 <SystemInit+0xec>)
 81007a4:	2200      	movs	r2, #0
 81007a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 81007a8:	4b0f      	ldr	r3, [pc, #60]	; (81007e8 <SystemInit+0xec>)
 81007aa:	681b      	ldr	r3, [r3, #0]
 81007ac:	4a0e      	ldr	r2, [pc, #56]	; (81007e8 <SystemInit+0xec>)
 81007ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81007b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 81007b4:	4b0c      	ldr	r3, [pc, #48]	; (81007e8 <SystemInit+0xec>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 81007ba:	4b10      	ldr	r3, [pc, #64]	; (81007fc <SystemInit+0x100>)
 81007bc:	681a      	ldr	r2, [r3, #0]
 81007be:	4b10      	ldr	r3, [pc, #64]	; (8100800 <SystemInit+0x104>)
 81007c0:	4013      	ands	r3, r2
 81007c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81007c6:	d202      	bcs.n	81007ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 81007c8:	4b0e      	ldr	r3, [pc, #56]	; (8100804 <SystemInit+0x108>)
 81007ca:	2201      	movs	r2, #1
 81007cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 81007ce:	4b0e      	ldr	r3, [pc, #56]	; (8100808 <SystemInit+0x10c>)
 81007d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 81007d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 81007d6:	bf00      	nop
 81007d8:	46bd      	mov	sp, r7
 81007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007de:	4770      	bx	lr
 81007e0:	e000ed00 	.word	0xe000ed00
 81007e4:	52002000 	.word	0x52002000
 81007e8:	58024400 	.word	0x58024400
 81007ec:	eaf6ed7f 	.word	0xeaf6ed7f
 81007f0:	02020200 	.word	0x02020200
 81007f4:	01ff0000 	.word	0x01ff0000
 81007f8:	01010280 	.word	0x01010280
 81007fc:	5c001000 	.word	0x5c001000
 8100800:	ffff0000 	.word	0xffff0000
 8100804:	51008108 	.word	0x51008108
 8100808:	52004000 	.word	0x52004000

0810080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100810:	f7ff ff74 	bl	81006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100814:	480c      	ldr	r0, [pc, #48]	; (8100848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100816:	490d      	ldr	r1, [pc, #52]	; (810084c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100818:	4a0d      	ldr	r2, [pc, #52]	; (8100850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810081c:	e002      	b.n	8100824 <LoopCopyDataInit>

0810081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100822:	3304      	adds	r3, #4

08100824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100828:	d3f9      	bcc.n	810081e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810082a:	4a0a      	ldr	r2, [pc, #40]	; (8100854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810082c:	4c0a      	ldr	r4, [pc, #40]	; (8100858 <LoopFillZerobss+0x22>)
  movs r3, #0
 810082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100830:	e001      	b.n	8100836 <LoopFillZerobss>

08100832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100834:	3204      	adds	r2, #4

08100836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100838:	d3fb      	bcc.n	8100832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810083a:	f007 ff45 	bl	81086c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810083e:	f7ff fd9f 	bl	8100380 <main>
  bx  lr
 8100842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100844:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8100848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 810084c:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8100850:	0810cf88 	.word	0x0810cf88
  ldr r2, =_sbss
 8100854:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 8100858:	24000fac 	.word	0x24000fac

0810085c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810085c:	e7fe      	b.n	810085c <ADC3_IRQHandler>
	...

08100860 <EXC7200_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t EXC7200_RegisterBusIO (EXC7200_Object_t *pObj, EXC7200_IO_t *pIO)
{
 8100860:	b580      	push	{r7, lr}
 8100862:	b084      	sub	sp, #16
 8100864:	af00      	add	r7, sp, #0
 8100866:	6078      	str	r0, [r7, #4]
 8100868:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 810086a:	687b      	ldr	r3, [r7, #4]
 810086c:	2b00      	cmp	r3, #0
 810086e:	d103      	bne.n	8100878 <EXC7200_RegisterBusIO+0x18>
  {
    ret = EXC7200_ERROR;
 8100870:	f04f 33ff 	mov.w	r3, #4294967295
 8100874:	60fb      	str	r3, [r7, #12]
 8100876:	e02c      	b.n	81008d2 <EXC7200_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8100878:	683b      	ldr	r3, [r7, #0]
 810087a:	681a      	ldr	r2, [r3, #0]
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8100880:	683b      	ldr	r3, [r7, #0]
 8100882:	685a      	ldr	r2, [r3, #4]
 8100884:	687b      	ldr	r3, [r7, #4]
 8100886:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8100888:	683b      	ldr	r3, [r7, #0]
 810088a:	891a      	ldrh	r2, [r3, #8]
 810088c:	687b      	ldr	r3, [r7, #4]
 810088e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8100890:	683b      	ldr	r3, [r7, #0]
 8100892:	68da      	ldr	r2, [r3, #12]
 8100894:	687b      	ldr	r3, [r7, #4]
 8100896:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8100898:	683b      	ldr	r3, [r7, #0]
 810089a:	691a      	ldr	r2, [r3, #16]
 810089c:	687b      	ldr	r3, [r7, #4]
 810089e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 81008a0:	683b      	ldr	r3, [r7, #0]
 81008a2:	695a      	ldr	r2, [r3, #20]
 81008a4:	687b      	ldr	r3, [r7, #4]
 81008a6:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 81008a8:	687b      	ldr	r3, [r7, #4]
 81008aa:	4a0c      	ldr	r2, [pc, #48]	; (81008dc <EXC7200_RegisterBusIO+0x7c>)
 81008ac:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 81008ae:	687b      	ldr	r3, [r7, #4]
 81008b0:	4a0b      	ldr	r2, [pc, #44]	; (81008e0 <EXC7200_RegisterBusIO+0x80>)
 81008b2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	687a      	ldr	r2, [r7, #4]
 81008b8:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 81008ba:	687b      	ldr	r3, [r7, #4]
 81008bc:	681b      	ldr	r3, [r3, #0]
 81008be:	2b00      	cmp	r3, #0
 81008c0:	d004      	beq.n	81008cc <EXC7200_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 81008c2:	687b      	ldr	r3, [r7, #4]
 81008c4:	681b      	ldr	r3, [r3, #0]
 81008c6:	4798      	blx	r3
 81008c8:	60f8      	str	r0, [r7, #12]
 81008ca:	e002      	b.n	81008d2 <EXC7200_RegisterBusIO+0x72>
    }
    else
    {
      ret = EXC7200_ERROR;
 81008cc:	f04f 33ff 	mov.w	r3, #4294967295
 81008d0:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 81008d2:	68fb      	ldr	r3, [r7, #12]
}
 81008d4:	4618      	mov	r0, r3
 81008d6:	3710      	adds	r7, #16
 81008d8:	46bd      	mov	sp, r7
 81008da:	bd80      	pop	{r7, pc}
 81008dc:	08100b2d 	.word	0x08100b2d
 81008e0:	08100b61 	.word	0x08100b61

081008e4 <EXC7200_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to EXC7200 sensor capabilities
  * @retval Component status
  */
int32_t EXC7200_GetCapabilities(EXC7200_Object_t *pObj, EXC7200_Capabilities_t *Capabilities)
{
 81008e4:	b480      	push	{r7}
 81008e6:	b083      	sub	sp, #12
 81008e8:	af00      	add	r7, sp, #0
 81008ea:	6078      	str	r0, [r7, #4]
 81008ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
 81008ee:	683b      	ldr	r3, [r7, #0]
 81008f0:	2200      	movs	r2, #0
 81008f2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;
 81008f4:	683b      	ldr	r3, [r7, #0]
 81008f6:	2200      	movs	r2, #0
 81008f8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
 81008fa:	683b      	ldr	r3, [r7, #0]
 81008fc:	2201      	movs	r2, #1
 81008fe:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = EXC7200_MAX_X_LENGTH;
 8100900:	683b      	ldr	r3, [r7, #0]
 8100902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100906:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = EXC7200_MAX_Y_LENGTH;
 8100908:	683b      	ldr	r3, [r7, #0]
 810090a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 810090e:	609a      	str	r2, [r3, #8]
  
  return EXC7200_OK;
 8100910:	2300      	movs	r3, #0
}
 8100912:	4618      	mov	r0, r3
 8100914:	370c      	adds	r7, #12
 8100916:	46bd      	mov	sp, r7
 8100918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810091c:	4770      	bx	lr

0810091e <EXC7200_Init>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_Init(EXC7200_Object_t *pObj)
{
 810091e:	b580      	push	{r7, lr}
 8100920:	b084      	sub	sp, #16
 8100922:	af00      	add	r7, sp, #0
 8100924:	6078      	str	r0, [r7, #4]
  int32_t ret = EXC7200_OK;
 8100926:	2300      	movs	r3, #0
 8100928:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 810092a:	687b      	ldr	r3, [r7, #4]
 810092c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8100930:	2b00      	cmp	r3, #0
 8100932:	d10d      	bne.n	8100950 <EXC7200_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != EXC7200_OK)
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	681b      	ldr	r3, [r3, #0]
 8100938:	4798      	blx	r3
 810093a:	4603      	mov	r3, r0
 810093c:	2b00      	cmp	r3, #0
 810093e:	d003      	beq.n	8100948 <EXC7200_Init+0x2a>
    {
      ret = EXC7200_ERROR;
 8100940:	f04f 33ff 	mov.w	r3, #4294967295
 8100944:	60fb      	str	r3, [r7, #12]
 8100946:	e003      	b.n	8100950 <EXC7200_Init+0x32>
    }
    else
    {
      pObj->IsInitialized = 1;
 8100948:	687b      	ldr	r3, [r7, #4]
 810094a:	2201      	movs	r2, #1
 810094c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 8100950:	68fb      	ldr	r3, [r7, #12]
}
 8100952:	4618      	mov	r0, r3
 8100954:	3710      	adds	r7, #16
 8100956:	46bd      	mov	sp, r7
 8100958:	bd80      	pop	{r7, pc}

0810095a <EXC7200_DeInit>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_DeInit(EXC7200_Object_t *pObj)
{
 810095a:	b580      	push	{r7, lr}
 810095c:	b084      	sub	sp, #16
 810095e:	af00      	add	r7, sp, #0
 8100960:	6078      	str	r0, [r7, #4]
  int32_t ret = EXC7200_OK;
 8100962:	2300      	movs	r3, #0
 8100964:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 1U)
 8100966:	687b      	ldr	r3, [r7, #4]
 8100968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 810096c:	2b01      	cmp	r3, #1
 810096e:	d10d      	bne.n	810098c <EXC7200_DeInit+0x32>
  {
    if(pObj->IO.DeInit() != EXC7200_OK)
 8100970:	687b      	ldr	r3, [r7, #4]
 8100972:	685b      	ldr	r3, [r3, #4]
 8100974:	4798      	blx	r3
 8100976:	4603      	mov	r3, r0
 8100978:	2b00      	cmp	r3, #0
 810097a:	d003      	beq.n	8100984 <EXC7200_DeInit+0x2a>
    {
      ret = EXC7200_ERROR;
 810097c:	f04f 33ff 	mov.w	r3, #4294967295
 8100980:	60fb      	str	r3, [r7, #12]
 8100982:	e003      	b.n	810098c <EXC7200_DeInit+0x32>
    }
    else
    {
      pObj->IsInitialized = 0;
 8100984:	687b      	ldr	r3, [r7, #4]
 8100986:	2200      	movs	r2, #0
 8100988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 810098c:	68fb      	ldr	r3, [r7, #12]
}
 810098e:	4618      	mov	r0, r3
 8100990:	3710      	adds	r7, #16
 8100992:	46bd      	mov	sp, r7
 8100994:	bd80      	pop	{r7, pc}

08100996 <EXC7200_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t EXC7200_GestureConfig(EXC7200_Object_t *pObj, EXC7200_Gesture_Init_t *GestureInit)
{
 8100996:	b480      	push	{r7}
 8100998:	b083      	sub	sp, #12
 810099a:	af00      	add	r7, sp, #0
 810099c:	6078      	str	r0, [r7, #4]
 810099e:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR;  
 81009a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81009a4:	4618      	mov	r0, r3
 81009a6:	370c      	adds	r7, #12
 81009a8:	46bd      	mov	sp, r7
 81009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ae:	4770      	bx	lr

081009b0 <EXC7200_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t EXC7200_ReadID(EXC7200_Object_t *pObj, uint32_t *Id)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	b084      	sub	sp, #16
 81009b4:	af00      	add	r7, sp, #0
 81009b6:	6078      	str	r0, [r7, #4]
 81009b8:	6039      	str	r1, [r7, #0]
  int32_t ret = EXC7200_ERROR;
 81009ba:	f04f 33ff 	mov.w	r3, #4294967295
 81009be:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 81009c0:	687b      	ldr	r3, [r7, #4]
 81009c2:	f103 0018 	add.w	r0, r3, #24
 81009c6:	f107 020b 	add.w	r2, r7, #11
 81009ca:	2301      	movs	r3, #1
 81009cc:	2109      	movs	r1, #9
 81009ce:	f000 f8e1 	bl	8100b94 <exc7200_read_reg>
 81009d2:	4603      	mov	r3, r0
 81009d4:	2b00      	cmp	r3, #0
 81009d6:	d105      	bne.n	81009e4 <EXC7200_ReadID+0x34>
  {
    *Id = EXC7200_ID; 
 81009d8:	683b      	ldr	r3, [r7, #0]
 81009da:	f44f 42e4 	mov.w	r2, #29184	; 0x7200
 81009de:	601a      	str	r2, [r3, #0]
    ret = EXC7200_OK;
 81009e0:	2300      	movs	r3, #0
 81009e2:	60fb      	str	r3, [r7, #12]
  }  
  
  return ret;
 81009e4:	68fb      	ldr	r3, [r7, #12]
}
 81009e6:	4618      	mov	r0, r3
 81009e8:	3710      	adds	r7, #16
 81009ea:	46bd      	mov	sp, r7
 81009ec:	bd80      	pop	{r7, pc}

081009ee <EXC7200_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch stucture pointer
  * @retval Component status.
  */
int32_t EXC7200_GetState(EXC7200_Object_t *pObj, EXC7200_State_t *State)
{
 81009ee:	b580      	push	{r7, lr}
 81009f0:	b086      	sub	sp, #24
 81009f2:	af00      	add	r7, sp, #0
 81009f4:	6078      	str	r0, [r7, #4]
 81009f6:	6039      	str	r1, [r7, #0]
  uint8_t  data[10];
  
  State->TouchDetected = (uint32_t)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 81009f8:	f107 030c 	add.w	r3, r7, #12
 81009fc:	220a      	movs	r2, #10
 81009fe:	4619      	mov	r1, r3
 8100a00:	6878      	ldr	r0, [r7, #4]
 8100a02:	f000 f86e 	bl	8100ae2 <EXC7200_DetectTouch>
 8100a06:	4603      	mov	r3, r0
 8100a08:	461a      	mov	r2, r3
 8100a0a:	683b      	ldr	r3, [r7, #0]
 8100a0c:	601a      	str	r2, [r3, #0]
  
  /* Send back first ready X position to caller */
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 8100a0e:	7bfb      	ldrb	r3, [r7, #15]
 8100a10:	011b      	lsls	r3, r3, #4
 8100a12:	7bba      	ldrb	r2, [r7, #14]
 8100a14:	0912      	lsrs	r2, r2, #4
 8100a16:	b2d2      	uxtb	r2, r2
 8100a18:	4313      	orrs	r3, r2
 8100a1a:	005b      	lsls	r3, r3, #1
 8100a1c:	461a      	mov	r2, r3
 8100a1e:	683b      	ldr	r3, [r7, #0]
 8100a20:	605a      	str	r2, [r3, #4]
  /* Send back first ready Y position to caller */
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 8100a22:	7c7b      	ldrb	r3, [r7, #17]
 8100a24:	011b      	lsls	r3, r3, #4
 8100a26:	7c3a      	ldrb	r2, [r7, #16]
 8100a28:	0912      	lsrs	r2, r2, #4
 8100a2a:	b2d2      	uxtb	r2, r2
 8100a2c:	4313      	orrs	r3, r2
 8100a2e:	005b      	lsls	r3, r3, #1
 8100a30:	461a      	mov	r2, r3
 8100a32:	683b      	ldr	r3, [r7, #0]
 8100a34:	609a      	str	r2, [r3, #8]
  
  /* Dummy Read to deactivate read mode */
  (void)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 8100a36:	f107 030c 	add.w	r3, r7, #12
 8100a3a:	220a      	movs	r2, #10
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	6878      	ldr	r0, [r7, #4]
 8100a40:	f000 f84f 	bl	8100ae2 <EXC7200_DetectTouch>
  
  return EXC7200_OK;
 8100a44:	2300      	movs	r3, #0
}
 8100a46:	4618      	mov	r0, r3
 8100a48:	3718      	adds	r7, #24
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	bd80      	pop	{r7, pc}

08100a4e <EXC7200_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch stucture pointer
  * @retval Component status.
  */
int32_t EXC7200_GetMultiTouchState(EXC7200_Object_t *pObj, EXC7200_MultiTouch_State_t *State)
{
 8100a4e:	b480      	push	{r7}
 8100a50:	b083      	sub	sp, #12
 8100a52:	af00      	add	r7, sp, #0
 8100a54:	6078      	str	r0, [r7, #4]
 8100a56:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR; 
 8100a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a5c:	4618      	mov	r0, r3
 8100a5e:	370c      	adds	r7, #12
 8100a60:	46bd      	mov	sp, r7
 8100a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a66:	4770      	bx	lr

08100a68 <EXC7200_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status.
  */
int32_t EXC7200_GetGesture(EXC7200_Object_t *pObj, uint8_t *GestureId)
{  
 8100a68:	b480      	push	{r7}
 8100a6a:	b083      	sub	sp, #12
 8100a6c:	af00      	add	r7, sp, #0
 8100a6e:	6078      	str	r0, [r7, #4]
 8100a70:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR;
 8100a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a76:	4618      	mov	r0, r3
 8100a78:	370c      	adds	r7, #12
 8100a7a:	46bd      	mov	sp, r7
 8100a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a80:	4770      	bx	lr

08100a82 <EXC7200_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_EnableIT(EXC7200_Object_t *pObj)
{
 8100a82:	b480      	push	{r7}
 8100a84:	b083      	sub	sp, #12
 8100a86:	af00      	add	r7, sp, #0
 8100a88:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 8100a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a8e:	4618      	mov	r0, r3
 8100a90:	370c      	adds	r7, #12
 8100a92:	46bd      	mov	sp, r7
 8100a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a98:	4770      	bx	lr

08100a9a <EXC7200_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_DisableIT(EXC7200_Object_t *pObj)
{
 8100a9a:	b480      	push	{r7}
 8100a9c:	b083      	sub	sp, #12
 8100a9e:	af00      	add	r7, sp, #0
 8100aa0:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 8100aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100aa6:	4618      	mov	r0, r3
 8100aa8:	370c      	adds	r7, #12
 8100aaa:	46bd      	mov	sp, r7
 8100aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab0:	4770      	bx	lr

08100ab2 <EXC7200_ITStatus>:
  *         @note : This feature is not applicable to EXC7200.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_ITStatus(EXC7200_Object_t *pObj)
{
 8100ab2:	b480      	push	{r7}
 8100ab4:	b083      	sub	sp, #12
 8100ab6:	af00      	add	r7, sp, #0
 8100ab8:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 8100aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100abe:	4618      	mov	r0, r3
 8100ac0:	370c      	adds	r7, #12
 8100ac2:	46bd      	mov	sp, r7
 8100ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac8:	4770      	bx	lr

08100aca <EXC7200_ClearIT>:
  *         @note : This feature is not applicable to EXC7200.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_ClearIT(EXC7200_Object_t *pObj)
{
 8100aca:	b480      	push	{r7}
 8100acc:	b083      	sub	sp, #12
 8100ace:	af00      	add	r7, sp, #0
 8100ad0:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 8100ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100ad6:	4618      	mov	r0, r3
 8100ad8:	370c      	adds	r7, #12
 8100ada:	46bd      	mov	sp, r7
 8100adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae0:	4770      	bx	lr

08100ae2 <EXC7200_DetectTouch>:
  * @param  Length Number of data to read
  * @retval Number of active touches detected (can be 0 or 1) or EXC7200_ERROR
  *         in case of error
  */
static int32_t EXC7200_DetectTouch(EXC7200_Object_t *pObj, uint8_t *pData, uint32_t Length)
{
 8100ae2:	b580      	push	{r7, lr}
 8100ae4:	b086      	sub	sp, #24
 8100ae6:	af00      	add	r7, sp, #0
 8100ae8:	60f8      	str	r0, [r7, #12]
 8100aea:	60b9      	str	r1, [r7, #8]
 8100aec:	607a      	str	r2, [r7, #4]
  int32_t ret;
  
  /* Read TS data */
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 8100aee:	68fb      	ldr	r3, [r7, #12]
 8100af0:	f103 0018 	add.w	r0, r3, #24
 8100af4:	687b      	ldr	r3, [r7, #4]
 8100af6:	b29b      	uxth	r3, r3
 8100af8:	68ba      	ldr	r2, [r7, #8]
 8100afa:	2109      	movs	r1, #9
 8100afc:	f000 f84a 	bl	8100b94 <exc7200_read_reg>
 8100b00:	4603      	mov	r3, r0
 8100b02:	2b00      	cmp	r3, #0
 8100b04:	d003      	beq.n	8100b0e <EXC7200_DetectTouch+0x2c>
  {
    ret = EXC7200_ERROR;
 8100b06:	f04f 33ff 	mov.w	r3, #4294967295
 8100b0a:	617b      	str	r3, [r7, #20]
 8100b0c:	e009      	b.n	8100b22 <EXC7200_DetectTouch+0x40>
  }
  else
  {
    if(pData[1] == 0x83U)
 8100b0e:	68bb      	ldr	r3, [r7, #8]
 8100b10:	3301      	adds	r3, #1
 8100b12:	781b      	ldrb	r3, [r3, #0]
 8100b14:	2b83      	cmp	r3, #131	; 0x83
 8100b16:	d102      	bne.n	8100b1e <EXC7200_DetectTouch+0x3c>
    {
      /* Touch detected */
      ret = 1;
 8100b18:	2301      	movs	r3, #1
 8100b1a:	617b      	str	r3, [r7, #20]
 8100b1c:	e001      	b.n	8100b22 <EXC7200_DetectTouch+0x40>
    }
    else
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8100b1e:	2300      	movs	r3, #0
 8100b20:	617b      	str	r3, [r7, #20]
    }
  }
  
  return ret;
 8100b22:	697b      	ldr	r3, [r7, #20]
}
 8100b24:	4618      	mov	r0, r3
 8100b26:	3718      	adds	r7, #24
 8100b28:	46bd      	mov	sp, r7
 8100b2a:	bd80      	pop	{r7, pc}

08100b2c <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8100b2c:	b590      	push	{r4, r7, lr}
 8100b2e:	b087      	sub	sp, #28
 8100b30:	af00      	add	r7, sp, #0
 8100b32:	60f8      	str	r0, [r7, #12]
 8100b34:	607a      	str	r2, [r7, #4]
 8100b36:	461a      	mov	r2, r3
 8100b38:	460b      	mov	r3, r1
 8100b3a:	72fb      	strb	r3, [r7, #11]
 8100b3c:	4613      	mov	r3, r2
 8100b3e:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 8100b40:	68fb      	ldr	r3, [r7, #12]
 8100b42:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8100b44:	697b      	ldr	r3, [r7, #20]
 8100b46:	691c      	ldr	r4, [r3, #16]
 8100b48:	697b      	ldr	r3, [r7, #20]
 8100b4a:	8918      	ldrh	r0, [r3, #8]
 8100b4c:	7afb      	ldrb	r3, [r7, #11]
 8100b4e:	b299      	uxth	r1, r3
 8100b50:	893b      	ldrh	r3, [r7, #8]
 8100b52:	687a      	ldr	r2, [r7, #4]
 8100b54:	47a0      	blx	r4
 8100b56:	4603      	mov	r3, r0
}
 8100b58:	4618      	mov	r0, r3
 8100b5a:	371c      	adds	r7, #28
 8100b5c:	46bd      	mov	sp, r7
 8100b5e:	bd90      	pop	{r4, r7, pc}

08100b60 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8100b60:	b590      	push	{r4, r7, lr}
 8100b62:	b087      	sub	sp, #28
 8100b64:	af00      	add	r7, sp, #0
 8100b66:	60f8      	str	r0, [r7, #12]
 8100b68:	607a      	str	r2, [r7, #4]
 8100b6a:	461a      	mov	r2, r3
 8100b6c:	460b      	mov	r3, r1
 8100b6e:	72fb      	strb	r3, [r7, #11]
 8100b70:	4613      	mov	r3, r2
 8100b72:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 8100b74:	68fb      	ldr	r3, [r7, #12]
 8100b76:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8100b78:	697b      	ldr	r3, [r7, #20]
 8100b7a:	68dc      	ldr	r4, [r3, #12]
 8100b7c:	697b      	ldr	r3, [r7, #20]
 8100b7e:	8918      	ldrh	r0, [r3, #8]
 8100b80:	7afb      	ldrb	r3, [r7, #11]
 8100b82:	b299      	uxth	r1, r3
 8100b84:	893b      	ldrh	r3, [r7, #8]
 8100b86:	687a      	ldr	r2, [r7, #4]
 8100b88:	47a0      	blx	r4
 8100b8a:	4603      	mov	r3, r0
}
 8100b8c:	4618      	mov	r0, r3
 8100b8e:	371c      	adds	r7, #28
 8100b90:	46bd      	mov	sp, r7
 8100b92:	bd90      	pop	{r4, r7, pc}

08100b94 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8100b94:	b590      	push	{r4, r7, lr}
 8100b96:	b085      	sub	sp, #20
 8100b98:	af00      	add	r7, sp, #0
 8100b9a:	60f8      	str	r0, [r7, #12]
 8100b9c:	607a      	str	r2, [r7, #4]
 8100b9e:	461a      	mov	r2, r3
 8100ba0:	460b      	mov	r3, r1
 8100ba2:	72fb      	strb	r3, [r7, #11]
 8100ba4:	4613      	mov	r3, r2
 8100ba6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8100ba8:	68fb      	ldr	r3, [r7, #12]
 8100baa:	685c      	ldr	r4, [r3, #4]
 8100bac:	68fb      	ldr	r3, [r7, #12]
 8100bae:	6898      	ldr	r0, [r3, #8]
 8100bb0:	893b      	ldrh	r3, [r7, #8]
 8100bb2:	7af9      	ldrb	r1, [r7, #11]
 8100bb4:	687a      	ldr	r2, [r7, #4]
 8100bb6:	47a0      	blx	r4
 8100bb8:	4603      	mov	r3, r0
}
 8100bba:	4618      	mov	r0, r3
 8100bbc:	3714      	adds	r7, #20
 8100bbe:	46bd      	mov	sp, r7
 8100bc0:	bd90      	pop	{r4, r7, pc}

08100bc2 <IS42S32800G_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8100bc2:	b580      	push	{r7, lr}
 8100bc4:	b084      	sub	sp, #16
 8100bc6:	af00      	add	r7, sp, #0
 8100bc8:	6078      	str	r0, [r7, #4]
 8100bca:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800G_ERROR;
 8100bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8100bd0:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8100bd2:	683b      	ldr	r3, [r7, #0]
 8100bd4:	681b      	ldr	r3, [r3, #0]
 8100bd6:	4619      	mov	r1, r3
 8100bd8:	6878      	ldr	r0, [r7, #4]
 8100bda:	f000 f831 	bl	8100c40 <IS42S32800G_ClockEnable>
 8100bde:	4603      	mov	r3, r0
 8100be0:	2b00      	cmp	r3, #0
 8100be2:	d128      	bne.n	8100c36 <IS42S32800G_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800G_Delay(1);
 8100be4:	2001      	movs	r0, #1
 8100be6:	f000 f8e1 	bl	8100dac <IS42S32800G_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8100bea:	683b      	ldr	r3, [r7, #0]
 8100bec:	681b      	ldr	r3, [r3, #0]
 8100bee:	4619      	mov	r1, r3
 8100bf0:	6878      	ldr	r0, [r7, #4]
 8100bf2:	f000 f849 	bl	8100c88 <IS42S32800G_Precharge>
 8100bf6:	4603      	mov	r3, r0
 8100bf8:	2b00      	cmp	r3, #0
 8100bfa:	d11c      	bne.n	8100c36 <IS42S32800G_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8100bfc:	683b      	ldr	r3, [r7, #0]
 8100bfe:	6819      	ldr	r1, [r3, #0]
 8100c00:	683b      	ldr	r3, [r7, #0]
 8100c02:	685b      	ldr	r3, [r3, #4]
 8100c04:	461a      	mov	r2, r3
 8100c06:	6878      	ldr	r0, [r7, #4]
 8100c08:	f000 f896 	bl	8100d38 <IS42S32800G_RefreshMode>
 8100c0c:	4603      	mov	r3, r0
 8100c0e:	2b00      	cmp	r3, #0
 8100c10:	d111      	bne.n	8100c36 <IS42S32800G_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8100c12:	6839      	ldr	r1, [r7, #0]
 8100c14:	6878      	ldr	r0, [r7, #4]
 8100c16:	f000 f85b 	bl	8100cd0 <IS42S32800G_ModeRegConfig>
 8100c1a:	4603      	mov	r3, r0
 8100c1c:	2b00      	cmp	r3, #0
 8100c1e:	d10a      	bne.n	8100c36 <IS42S32800G_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8100c20:	683b      	ldr	r3, [r7, #0]
 8100c22:	689b      	ldr	r3, [r3, #8]
 8100c24:	4619      	mov	r1, r3
 8100c26:	6878      	ldr	r0, [r7, #4]
 8100c28:	f000 f8ac 	bl	8100d84 <IS42S32800G_RefreshRate>
 8100c2c:	4603      	mov	r3, r0
 8100c2e:	2b00      	cmp	r3, #0
 8100c30:	d101      	bne.n	8100c36 <IS42S32800G_Init+0x74>
          {
            ret = IS42S32800G_OK;
 8100c32:	2300      	movs	r3, #0
 8100c34:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8100c36:	68fb      	ldr	r3, [r7, #12]
}
 8100c38:	4618      	mov	r0, r3
 8100c3a:	3710      	adds	r7, #16
 8100c3c:	46bd      	mov	sp, r7
 8100c3e:	bd80      	pop	{r7, pc}

08100c40 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8100c40:	b580      	push	{r7, lr}
 8100c42:	b082      	sub	sp, #8
 8100c44:	af00      	add	r7, sp, #0
 8100c46:	6078      	str	r0, [r7, #4]
 8100c48:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8100c4a:	4b0e      	ldr	r3, [pc, #56]	; (8100c84 <IS42S32800G_ClockEnable+0x44>)
 8100c4c:	2201      	movs	r2, #1
 8100c4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8100c50:	4a0c      	ldr	r2, [pc, #48]	; (8100c84 <IS42S32800G_ClockEnable+0x44>)
 8100c52:	683b      	ldr	r3, [r7, #0]
 8100c54:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8100c56:	4b0b      	ldr	r3, [pc, #44]	; (8100c84 <IS42S32800G_ClockEnable+0x44>)
 8100c58:	2201      	movs	r2, #1
 8100c5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8100c5c:	4b09      	ldr	r3, [pc, #36]	; (8100c84 <IS42S32800G_ClockEnable+0x44>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8100c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100c66:	4907      	ldr	r1, [pc, #28]	; (8100c84 <IS42S32800G_ClockEnable+0x44>)
 8100c68:	6878      	ldr	r0, [r7, #4]
 8100c6a:	f007 f855 	bl	8107d18 <HAL_SDRAM_SendCommand>
 8100c6e:	4603      	mov	r3, r0
 8100c70:	2b00      	cmp	r3, #0
 8100c72:	d002      	beq.n	8100c7a <IS42S32800G_ClockEnable+0x3a>
  {
    return IS42S32800G_ERROR;
 8100c74:	f04f 33ff 	mov.w	r3, #4294967295
 8100c78:	e000      	b.n	8100c7c <IS42S32800G_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8100c7a:	2300      	movs	r3, #0
  }
}
 8100c7c:	4618      	mov	r0, r3
 8100c7e:	3708      	adds	r7, #8
 8100c80:	46bd      	mov	sp, r7
 8100c82:	bd80      	pop	{r7, pc}
 8100c84:	24000124 	.word	0x24000124

08100c88 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8100c88:	b580      	push	{r7, lr}
 8100c8a:	b082      	sub	sp, #8
 8100c8c:	af00      	add	r7, sp, #0
 8100c8e:	6078      	str	r0, [r7, #4]
 8100c90:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 8100c92:	4b0e      	ldr	r3, [pc, #56]	; (8100ccc <IS42S32800G_Precharge+0x44>)
 8100c94:	2202      	movs	r2, #2
 8100c96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8100c98:	4a0c      	ldr	r2, [pc, #48]	; (8100ccc <IS42S32800G_Precharge+0x44>)
 8100c9a:	683b      	ldr	r3, [r7, #0]
 8100c9c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8100c9e:	4b0b      	ldr	r3, [pc, #44]	; (8100ccc <IS42S32800G_Precharge+0x44>)
 8100ca0:	2201      	movs	r2, #1
 8100ca2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8100ca4:	4b09      	ldr	r3, [pc, #36]	; (8100ccc <IS42S32800G_Precharge+0x44>)
 8100ca6:	2200      	movs	r2, #0
 8100ca8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8100caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100cae:	4907      	ldr	r1, [pc, #28]	; (8100ccc <IS42S32800G_Precharge+0x44>)
 8100cb0:	6878      	ldr	r0, [r7, #4]
 8100cb2:	f007 f831 	bl	8107d18 <HAL_SDRAM_SendCommand>
 8100cb6:	4603      	mov	r3, r0
 8100cb8:	2b00      	cmp	r3, #0
 8100cba:	d002      	beq.n	8100cc2 <IS42S32800G_Precharge+0x3a>
  {
    return IS42S32800G_ERROR;
 8100cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8100cc0:	e000      	b.n	8100cc4 <IS42S32800G_Precharge+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8100cc2:	2300      	movs	r3, #0
  }
}
 8100cc4:	4618      	mov	r0, r3
 8100cc6:	3708      	adds	r7, #8
 8100cc8:	46bd      	mov	sp, r7
 8100cca:	bd80      	pop	{r7, pc}
 8100ccc:	24000124 	.word	0x24000124

08100cd0 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8100cd0:	b580      	push	{r7, lr}
 8100cd2:	b084      	sub	sp, #16
 8100cd4:	af00      	add	r7, sp, #0
 8100cd6:	6078      	str	r0, [r7, #4]
 8100cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8100cda:	683b      	ldr	r3, [r7, #0]
 8100cdc:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8100cde:	683b      	ldr	r3, [r7, #0]
 8100ce0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8100ce2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8100ce4:	683b      	ldr	r3, [r7, #0]
 8100ce6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8100ce8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8100cea:	683b      	ldr	r3, [r7, #0]
 8100cec:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8100cee:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8100cf0:	683b      	ldr	r3, [r7, #0]
 8100cf2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8100cf4:	4313      	orrs	r3, r2
 8100cf6:	60fb      	str	r3, [r7, #12]

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8100cf8:	4b0e      	ldr	r3, [pc, #56]	; (8100d34 <IS42S32800G_ModeRegConfig+0x64>)
 8100cfa:	2204      	movs	r2, #4
 8100cfc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8100cfe:	683b      	ldr	r3, [r7, #0]
 8100d00:	681b      	ldr	r3, [r3, #0]
 8100d02:	4a0c      	ldr	r2, [pc, #48]	; (8100d34 <IS42S32800G_ModeRegConfig+0x64>)
 8100d04:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8100d06:	4b0b      	ldr	r3, [pc, #44]	; (8100d34 <IS42S32800G_ModeRegConfig+0x64>)
 8100d08:	2201      	movs	r2, #1
 8100d0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8100d0c:	4a09      	ldr	r2, [pc, #36]	; (8100d34 <IS42S32800G_ModeRegConfig+0x64>)
 8100d0e:	68fb      	ldr	r3, [r7, #12]
 8100d10:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8100d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100d16:	4907      	ldr	r1, [pc, #28]	; (8100d34 <IS42S32800G_ModeRegConfig+0x64>)
 8100d18:	6878      	ldr	r0, [r7, #4]
 8100d1a:	f006 fffd 	bl	8107d18 <HAL_SDRAM_SendCommand>
 8100d1e:	4603      	mov	r3, r0
 8100d20:	2b00      	cmp	r3, #0
 8100d22:	d002      	beq.n	8100d2a <IS42S32800G_ModeRegConfig+0x5a>
  {
    return IS42S32800G_ERROR;
 8100d24:	f04f 33ff 	mov.w	r3, #4294967295
 8100d28:	e000      	b.n	8100d2c <IS42S32800G_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800G_OK;
 8100d2a:	2300      	movs	r3, #0
  }
}
 8100d2c:	4618      	mov	r0, r3
 8100d2e:	3710      	adds	r7, #16
 8100d30:	46bd      	mov	sp, r7
 8100d32:	bd80      	pop	{r7, pc}
 8100d34:	24000124 	.word	0x24000124

08100d38 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	b084      	sub	sp, #16
 8100d3c:	af00      	add	r7, sp, #0
 8100d3e:	60f8      	str	r0, [r7, #12]
 8100d40:	60b9      	str	r1, [r7, #8]
 8100d42:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8100d44:	4a0e      	ldr	r2, [pc, #56]	; (8100d80 <IS42S32800G_RefreshMode+0x48>)
 8100d46:	687b      	ldr	r3, [r7, #4]
 8100d48:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8100d4a:	4a0d      	ldr	r2, [pc, #52]	; (8100d80 <IS42S32800G_RefreshMode+0x48>)
 8100d4c:	68bb      	ldr	r3, [r7, #8]
 8100d4e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8100d50:	4b0b      	ldr	r3, [pc, #44]	; (8100d80 <IS42S32800G_RefreshMode+0x48>)
 8100d52:	2208      	movs	r2, #8
 8100d54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8100d56:	4b0a      	ldr	r3, [pc, #40]	; (8100d80 <IS42S32800G_RefreshMode+0x48>)
 8100d58:	2200      	movs	r2, #0
 8100d5a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8100d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100d60:	4907      	ldr	r1, [pc, #28]	; (8100d80 <IS42S32800G_RefreshMode+0x48>)
 8100d62:	68f8      	ldr	r0, [r7, #12]
 8100d64:	f006 ffd8 	bl	8107d18 <HAL_SDRAM_SendCommand>
 8100d68:	4603      	mov	r3, r0
 8100d6a:	2b00      	cmp	r3, #0
 8100d6c:	d002      	beq.n	8100d74 <IS42S32800G_RefreshMode+0x3c>
  {
    return IS42S32800G_ERROR;
 8100d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8100d72:	e000      	b.n	8100d76 <IS42S32800G_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800G_OK;
 8100d74:	2300      	movs	r3, #0
  }
}
 8100d76:	4618      	mov	r0, r3
 8100d78:	3710      	adds	r7, #16
 8100d7a:	46bd      	mov	sp, r7
 8100d7c:	bd80      	pop	{r7, pc}
 8100d7e:	bf00      	nop
 8100d80:	24000124 	.word	0x24000124

08100d84 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8100d84:	b580      	push	{r7, lr}
 8100d86:	b082      	sub	sp, #8
 8100d88:	af00      	add	r7, sp, #0
 8100d8a:	6078      	str	r0, [r7, #4]
 8100d8c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8100d8e:	6839      	ldr	r1, [r7, #0]
 8100d90:	6878      	ldr	r0, [r7, #4]
 8100d92:	f006 fff6 	bl	8107d82 <HAL_SDRAM_ProgramRefreshRate>
 8100d96:	4603      	mov	r3, r0
 8100d98:	2b00      	cmp	r3, #0
 8100d9a:	d002      	beq.n	8100da2 <IS42S32800G_RefreshRate+0x1e>
  {
    return IS42S32800G_ERROR;
 8100d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8100da0:	e000      	b.n	8100da4 <IS42S32800G_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800G_OK;
 8100da2:	2300      	movs	r3, #0
  }
}
 8100da4:	4618      	mov	r0, r3
 8100da6:	3708      	adds	r7, #8
 8100da8:	46bd      	mov	sp, r7
 8100daa:	bd80      	pop	{r7, pc}

08100dac <IS42S32800G_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 8100dac:	b580      	push	{r7, lr}
 8100dae:	b084      	sub	sp, #16
 8100db0:	af00      	add	r7, sp, #0
 8100db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8100db4:	f002 fa92 	bl	81032dc <HAL_GetTick>
 8100db8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8100dba:	bf00      	nop
 8100dbc:	f002 fa8e 	bl	81032dc <HAL_GetTick>
 8100dc0:	4602      	mov	r2, r0
 8100dc2:	68fb      	ldr	r3, [r7, #12]
 8100dc4:	1ad3      	subs	r3, r2, r3
 8100dc6:	687a      	ldr	r2, [r7, #4]
 8100dc8:	429a      	cmp	r2, r3
 8100dca:	d8f7      	bhi.n	8100dbc <IS42S32800G_Delay+0x10>
  {
  }
  return IS42S32800G_OK;
 8100dcc:	2300      	movs	r3, #0
}
 8100dce:	4618      	mov	r0, r3
 8100dd0:	3710      	adds	r7, #16
 8100dd2:	46bd      	mov	sp, r7
 8100dd4:	bd80      	pop	{r7, pc}
	...

08100dd8 <TS3510_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t TS3510_RegisterBusIO (TS3510_Object_t *pObj, TS3510_IO_t *pIO)
{
 8100dd8:	b580      	push	{r7, lr}
 8100dda:	b084      	sub	sp, #16
 8100ddc:	af00      	add	r7, sp, #0
 8100dde:	6078      	str	r0, [r7, #4]
 8100de0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	2b00      	cmp	r3, #0
 8100de6:	d103      	bne.n	8100df0 <TS3510_RegisterBusIO+0x18>
  {
    ret = TS3510_ERROR;
 8100de8:	f04f 33ff 	mov.w	r3, #4294967295
 8100dec:	60fb      	str	r3, [r7, #12]
 8100dee:	e02c      	b.n	8100e4a <TS3510_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8100df0:	683b      	ldr	r3, [r7, #0]
 8100df2:	681a      	ldr	r2, [r3, #0]
 8100df4:	687b      	ldr	r3, [r7, #4]
 8100df6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8100df8:	683b      	ldr	r3, [r7, #0]
 8100dfa:	685a      	ldr	r2, [r3, #4]
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8100e00:	683b      	ldr	r3, [r7, #0]
 8100e02:	891a      	ldrh	r2, [r3, #8]
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8100e08:	683b      	ldr	r3, [r7, #0]
 8100e0a:	68da      	ldr	r2, [r3, #12]
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8100e10:	683b      	ldr	r3, [r7, #0]
 8100e12:	691a      	ldr	r2, [r3, #16]
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8100e18:	683b      	ldr	r3, [r7, #0]
 8100e1a:	695a      	ldr	r2, [r3, #20]
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	4a0c      	ldr	r2, [pc, #48]	; (8100e54 <TS3510_RegisterBusIO+0x7c>)
 8100e24:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8100e26:	687b      	ldr	r3, [r7, #4]
 8100e28:	4a0b      	ldr	r2, [pc, #44]	; (8100e58 <TS3510_RegisterBusIO+0x80>)
 8100e2a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8100e2c:	687b      	ldr	r3, [r7, #4]
 8100e2e:	687a      	ldr	r2, [r7, #4]
 8100e30:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	2b00      	cmp	r3, #0
 8100e38:	d004      	beq.n	8100e44 <TS3510_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8100e3a:	687b      	ldr	r3, [r7, #4]
 8100e3c:	681b      	ldr	r3, [r3, #0]
 8100e3e:	4798      	blx	r3
 8100e40:	60f8      	str	r0, [r7, #12]
 8100e42:	e002      	b.n	8100e4a <TS3510_RegisterBusIO+0x72>
    }
    else
    {
      ret = TS3510_ERROR;
 8100e44:	f04f 33ff 	mov.w	r3, #4294967295
 8100e48:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 8100e4a:	68fb      	ldr	r3, [r7, #12]
}
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	3710      	adds	r7, #16
 8100e50:	46bd      	mov	sp, r7
 8100e52:	bd80      	pop	{r7, pc}
 8100e54:	08101157 	.word	0x08101157
 8100e58:	0810118b 	.word	0x0810118b

08100e5c <TS3510_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to TS3510 sensor capabilities
  * @retval Component status
  */
int32_t TS3510_GetCapabilities(TS3510_Object_t *pObj, TS3510_Capabilities_t *Capabilities)
{
 8100e5c:	b480      	push	{r7}
 8100e5e:	b083      	sub	sp, #12
 8100e60:	af00      	add	r7, sp, #0
 8100e62:	6078      	str	r0, [r7, #4]
 8100e64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
 8100e66:	683b      	ldr	r3, [r7, #0]
 8100e68:	2200      	movs	r2, #0
 8100e6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;
 8100e6c:	683b      	ldr	r3, [r7, #0]
 8100e6e:	2200      	movs	r2, #0
 8100e70:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
 8100e72:	683b      	ldr	r3, [r7, #0]
 8100e74:	2201      	movs	r2, #1
 8100e76:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = TS3510_MAX_X_LENGTH;
 8100e78:	683b      	ldr	r3, [r7, #0]
 8100e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100e7e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = TS3510_MAX_Y_LENGTH;
 8100e80:	683b      	ldr	r3, [r7, #0]
 8100e82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100e86:	609a      	str	r2, [r3, #8]
  
  return TS3510_OK;
 8100e88:	2300      	movs	r3, #0
}
 8100e8a:	4618      	mov	r0, r3
 8100e8c:	370c      	adds	r7, #12
 8100e8e:	46bd      	mov	sp, r7
 8100e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e94:	4770      	bx	lr

08100e96 <TS3510_Init>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_Init(TS3510_Object_t *pObj)
{
 8100e96:	b580      	push	{r7, lr}
 8100e98:	b084      	sub	sp, #16
 8100e9a:	af00      	add	r7, sp, #0
 8100e9c:	6078      	str	r0, [r7, #4]
  int32_t ret = TS3510_OK;
 8100e9e:	2300      	movs	r3, #0
 8100ea0:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8100ea8:	2b00      	cmp	r3, #0
 8100eaa:	d10d      	bne.n	8100ec8 <TS3510_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != TS3510_OK)
 8100eac:	687b      	ldr	r3, [r7, #4]
 8100eae:	681b      	ldr	r3, [r3, #0]
 8100eb0:	4798      	blx	r3
 8100eb2:	4603      	mov	r3, r0
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	d003      	beq.n	8100ec0 <TS3510_Init+0x2a>
    {
      ret = TS3510_ERROR;
 8100eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8100ebc:	60fb      	str	r3, [r7, #12]
 8100ebe:	e003      	b.n	8100ec8 <TS3510_Init+0x32>
    }
    else
    {
      pObj->IsInitialized = 1;
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	2201      	movs	r2, #1
 8100ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 8100ec8:	68fb      	ldr	r3, [r7, #12]
}
 8100eca:	4618      	mov	r0, r3
 8100ecc:	3710      	adds	r7, #16
 8100ece:	46bd      	mov	sp, r7
 8100ed0:	bd80      	pop	{r7, pc}

08100ed2 <TS3510_DeInit>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_DeInit(TS3510_Object_t *pObj)
{
 8100ed2:	b580      	push	{r7, lr}
 8100ed4:	b084      	sub	sp, #16
 8100ed6:	af00      	add	r7, sp, #0
 8100ed8:	6078      	str	r0, [r7, #4]
  int32_t ret = TS3510_OK;
 8100eda:	2300      	movs	r3, #0
 8100edc:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 1U)
 8100ede:	687b      	ldr	r3, [r7, #4]
 8100ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8100ee4:	2b01      	cmp	r3, #1
 8100ee6:	d10d      	bne.n	8100f04 <TS3510_DeInit+0x32>
  {
    if(pObj->IO.DeInit() != TS3510_OK)
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	685b      	ldr	r3, [r3, #4]
 8100eec:	4798      	blx	r3
 8100eee:	4603      	mov	r3, r0
 8100ef0:	2b00      	cmp	r3, #0
 8100ef2:	d003      	beq.n	8100efc <TS3510_DeInit+0x2a>
    {
      ret = TS3510_ERROR;
 8100ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8100ef8:	60fb      	str	r3, [r7, #12]
 8100efa:	e003      	b.n	8100f04 <TS3510_DeInit+0x32>
    }
    else
    {
      pObj->IsInitialized = 0;
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	2200      	movs	r2, #0
 8100f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 8100f04:	68fb      	ldr	r3, [r7, #12]
}
 8100f06:	4618      	mov	r0, r3
 8100f08:	3710      	adds	r7, #16
 8100f0a:	46bd      	mov	sp, r7
 8100f0c:	bd80      	pop	{r7, pc}

08100f0e <TS3510_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t TS3510_GestureConfig(TS3510_Object_t *pObj, TS3510_Gesture_Init_t *GestureInit)
{
 8100f0e:	b480      	push	{r7}
 8100f10:	b083      	sub	sp, #12
 8100f12:	af00      	add	r7, sp, #0
 8100f14:	6078      	str	r0, [r7, #4]
 8100f16:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR;  
 8100f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100f1c:	4618      	mov	r0, r3
 8100f1e:	370c      	adds	r7, #12
 8100f20:	46bd      	mov	sp, r7
 8100f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f26:	4770      	bx	lr

08100f28 <TS3510_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t TS3510_ReadID(TS3510_Object_t *pObj, uint32_t *Id)
{
 8100f28:	b580      	push	{r7, lr}
 8100f2a:	b086      	sub	sp, #24
 8100f2c:	af00      	add	r7, sp, #0
 8100f2e:	6078      	str	r0, [r7, #4]
 8100f30:	6039      	str	r1, [r7, #0]
  int32_t ret = TS3510_OK;
 8100f32:	2300      	movs	r3, #0
 8100f34:	617b      	str	r3, [r7, #20]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8100f36:	f640 0381 	movw	r3, #2177	; 0x881
 8100f3a:	823b      	strh	r3, [r7, #16]
  uint8_t  data;
  
  /* Prepare for LCD read data */
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8100f3c:	687b      	ldr	r3, [r7, #4]
 8100f3e:	f103 0018 	add.w	r0, r3, #24
 8100f42:	f107 0210 	add.w	r2, r7, #16
 8100f46:	2302      	movs	r3, #2
 8100f48:	218a      	movs	r1, #138	; 0x8a
 8100f4a:	f000 f94f 	bl	81011ec <ts3510_write_reg>
 8100f4e:	4603      	mov	r3, r0
 8100f50:	2b00      	cmp	r3, #0
 8100f52:	d003      	beq.n	8100f5c <TS3510_ReadID+0x34>
  {
    ret = TS3510_ERROR;
 8100f54:	f04f 33ff 	mov.w	r3, #4294967295
 8100f58:	617b      	str	r3, [r7, #20]
 8100f5a:	e013      	b.n	8100f84 <TS3510_ReadID+0x5c>
  }/* Read TS data from LCD */
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	f103 0018 	add.w	r0, r3, #24
 8100f62:	f107 020f 	add.w	r2, r7, #15
 8100f66:	2301      	movs	r3, #1
 8100f68:	218a      	movs	r1, #138	; 0x8a
 8100f6a:	f000 f928 	bl	81011be <ts3510_read_reg>
 8100f6e:	4603      	mov	r3, r0
 8100f70:	2b00      	cmp	r3, #0
 8100f72:	d003      	beq.n	8100f7c <TS3510_ReadID+0x54>
  {
    ret = TS3510_ERROR;
 8100f74:	f04f 33ff 	mov.w	r3, #4294967295
 8100f78:	617b      	str	r3, [r7, #20]
 8100f7a:	e003      	b.n	8100f84 <TS3510_ReadID+0x5c>
  }
  else
  {
    *Id = TS3510_ID;
 8100f7c:	683b      	ldr	r3, [r7, #0]
 8100f7e:	f243 5210 	movw	r2, #13584	; 0x3510
 8100f82:	601a      	str	r2, [r3, #0]
  }
  
  return ret;     
 8100f84:	697b      	ldr	r3, [r7, #20]
}
 8100f86:	4618      	mov	r0, r3
 8100f88:	3718      	adds	r7, #24
 8100f8a:	46bd      	mov	sp, r7
 8100f8c:	bd80      	pop	{r7, pc}
	...

08100f90 <TS3510_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch stucture pointer
  * @retval Component status.
  */
int32_t TS3510_GetState(TS3510_Object_t *pObj, TS3510_State_t *State)
{
 8100f90:	b580      	push	{r7, lr}
 8100f92:	b088      	sub	sp, #32
 8100f94:	af00      	add	r7, sp, #0
 8100f96:	6078      	str	r0, [r7, #4]
 8100f98:	6039      	str	r1, [r7, #0]
  int32_t ret = TS3510_OK;
 8100f9a:	2300      	movs	r3, #0
 8100f9c:	61fb      	str	r3, [r7, #28]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8100f9e:	f640 0381 	movw	r3, #2177	; 0x881
 8100fa2:	833b      	strh	r3, [r7, #24]
  uint8_t pData[11];
  
  /* Check if a touch is detected */
  State->TouchDetected = (uint32_t)TS3510_DetectTouch(pObj);
 8100fa4:	6878      	ldr	r0, [r7, #4]
 8100fa6:	f000 f899 	bl	81010dc <TS3510_DetectTouch>
 8100faa:	4603      	mov	r3, r0
 8100fac:	461a      	mov	r2, r3
 8100fae:	683b      	ldr	r3, [r7, #0]
 8100fb0:	601a      	str	r2, [r3, #0]
  
  if(State->TouchDetected == 1U)
 8100fb2:	683b      	ldr	r3, [r7, #0]
 8100fb4:	681b      	ldr	r3, [r3, #0]
 8100fb6:	2b01      	cmp	r3, #1
 8100fb8:	d13c      	bne.n	8101034 <TS3510_GetState+0xa4>
  {  
    /* Prepare for LCD read data */
    if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	f103 0018 	add.w	r0, r3, #24
 8100fc0:	f107 0218 	add.w	r2, r7, #24
 8100fc4:	2302      	movs	r3, #2
 8100fc6:	2100      	movs	r1, #0
 8100fc8:	f000 f910 	bl	81011ec <ts3510_write_reg>
 8100fcc:	4603      	mov	r3, r0
 8100fce:	2b00      	cmp	r3, #0
 8100fd0:	d003      	beq.n	8100fda <TS3510_GetState+0x4a>
    {
      ret = TS3510_ERROR;
 8100fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8100fd6:	61fb      	str	r3, [r7, #28]
 8100fd8:	e02c      	b.n	8101034 <TS3510_GetState+0xa4>
    }/* Read TS data from LCD */
    else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	f103 0018 	add.w	r0, r3, #24
 8100fe0:	f107 020c 	add.w	r2, r7, #12
 8100fe4:	230b      	movs	r3, #11
 8100fe6:	218a      	movs	r1, #138	; 0x8a
 8100fe8:	f000 f8e9 	bl	81011be <ts3510_read_reg>
 8100fec:	4603      	mov	r3, r0
 8100fee:	2b00      	cmp	r3, #0
 8100ff0:	d003      	beq.n	8100ffa <TS3510_GetState+0x6a>
    {
      ret = TS3510_ERROR;
 8100ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8100ff6:	61fb      	str	r3, [r7, #28]
 8100ff8:	e01c      	b.n	8101034 <TS3510_GetState+0xa4>
    }  
    else
    {
      /* Send back first ready X position to caller */
      State->TouchX = (((pData[1] << 8) | pData[2]) << 12) / 640;
 8100ffa:	7b7b      	ldrb	r3, [r7, #13]
 8100ffc:	021b      	lsls	r3, r3, #8
 8100ffe:	7bba      	ldrb	r2, [r7, #14]
 8101000:	4313      	orrs	r3, r2
 8101002:	031b      	lsls	r3, r3, #12
 8101004:	4a0e      	ldr	r2, [pc, #56]	; (8101040 <TS3510_GetState+0xb0>)
 8101006:	fb82 1203 	smull	r1, r2, r2, r3
 810100a:	1212      	asrs	r2, r2, #8
 810100c:	17db      	asrs	r3, r3, #31
 810100e:	1ad3      	subs	r3, r2, r3
 8101010:	461a      	mov	r2, r3
 8101012:	683b      	ldr	r3, [r7, #0]
 8101014:	605a      	str	r2, [r3, #4]
      /* Send back first ready Y position to caller */
      State->TouchY = (((pData[3] << 8) | pData[4]) << 12) / 480;
 8101016:	7bfb      	ldrb	r3, [r7, #15]
 8101018:	021b      	lsls	r3, r3, #8
 810101a:	7c3a      	ldrb	r2, [r7, #16]
 810101c:	4313      	orrs	r3, r2
 810101e:	031b      	lsls	r3, r3, #12
 8101020:	4a08      	ldr	r2, [pc, #32]	; (8101044 <TS3510_GetState+0xb4>)
 8101022:	fb82 1203 	smull	r1, r2, r2, r3
 8101026:	441a      	add	r2, r3
 8101028:	1212      	asrs	r2, r2, #8
 810102a:	17db      	asrs	r3, r3, #31
 810102c:	1ad3      	subs	r3, r2, r3
 810102e:	461a      	mov	r2, r3
 8101030:	683b      	ldr	r3, [r7, #0]
 8101032:	609a      	str	r2, [r3, #8]
    }
  }
  
  return ret;
 8101034:	69fb      	ldr	r3, [r7, #28]
}
 8101036:	4618      	mov	r0, r3
 8101038:	3720      	adds	r7, #32
 810103a:	46bd      	mov	sp, r7
 810103c:	bd80      	pop	{r7, pc}
 810103e:	bf00      	nop
 8101040:	66666667 	.word	0x66666667
 8101044:	88888889 	.word	0x88888889

08101048 <TS3510_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch stucture pointer
  * @retval Component status.
  */
int32_t TS3510_GetMultiTouchState(TS3510_Object_t *pObj, TS3510_MultiTouch_State_t *State)
{
 8101048:	b480      	push	{r7}
 810104a:	b083      	sub	sp, #12
 810104c:	af00      	add	r7, sp, #0
 810104e:	6078      	str	r0, [r7, #4]
 8101050:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR; 
 8101052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101056:	4618      	mov	r0, r3
 8101058:	370c      	adds	r7, #12
 810105a:	46bd      	mov	sp, r7
 810105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101060:	4770      	bx	lr

08101062 <TS3510_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status.
  */
int32_t TS3510_GetGesture(TS3510_Object_t *pObj, uint8_t *GestureId)
{  
 8101062:	b480      	push	{r7}
 8101064:	b083      	sub	sp, #12
 8101066:	af00      	add	r7, sp, #0
 8101068:	6078      	str	r0, [r7, #4]
 810106a:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR;
 810106c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101070:	4618      	mov	r0, r3
 8101072:	370c      	adds	r7, #12
 8101074:	46bd      	mov	sp, r7
 8101076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810107a:	4770      	bx	lr

0810107c <TS3510_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_EnableIT(TS3510_Object_t *pObj)
{
 810107c:	b480      	push	{r7}
 810107e:	b083      	sub	sp, #12
 8101080:	af00      	add	r7, sp, #0
 8101082:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 8101084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101088:	4618      	mov	r0, r3
 810108a:	370c      	adds	r7, #12
 810108c:	46bd      	mov	sp, r7
 810108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101092:	4770      	bx	lr

08101094 <TS3510_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_DisableIT(TS3510_Object_t *pObj)
{
 8101094:	b480      	push	{r7}
 8101096:	b083      	sub	sp, #12
 8101098:	af00      	add	r7, sp, #0
 810109a:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 810109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 81010a0:	4618      	mov	r0, r3
 81010a2:	370c      	adds	r7, #12
 81010a4:	46bd      	mov	sp, r7
 81010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010aa:	4770      	bx	lr

081010ac <TS3510_ITStatus>:
  *         @note : This feature is not applicable to TS3510.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_ITStatus(TS3510_Object_t *pObj)
{
 81010ac:	b480      	push	{r7}
 81010ae:	b083      	sub	sp, #12
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 81010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81010b8:	4618      	mov	r0, r3
 81010ba:	370c      	adds	r7, #12
 81010bc:	46bd      	mov	sp, r7
 81010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010c2:	4770      	bx	lr

081010c4 <TS3510_ClearIT>:
  *         @note : This feature is not applicable to TS3510.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_ClearIT(TS3510_Object_t *pObj)
{
 81010c4:	b480      	push	{r7}
 81010c6:	b083      	sub	sp, #12
 81010c8:	af00      	add	r7, sp, #0
 81010ca:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 81010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81010d0:	4618      	mov	r0, r3
 81010d2:	370c      	adds	r7, #12
 81010d4:	46bd      	mov	sp, r7
 81010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010da:	4770      	bx	lr

081010dc <TS3510_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0 or 1) or TS3510_ERROR
  *         in case of error
  */
static int32_t TS3510_DetectTouch(TS3510_Object_t *pObj)
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b088      	sub	sp, #32
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 81010e4:	f640 0381 	movw	r3, #2177	; 0x881
 81010e8:	833b      	strh	r3, [r7, #24]
  uint8_t pData[11];
  
  /* Prepare for LCD read data */
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	f103 0018 	add.w	r0, r3, #24
 81010f0:	f107 0218 	add.w	r2, r7, #24
 81010f4:	2302      	movs	r3, #2
 81010f6:	2100      	movs	r1, #0
 81010f8:	f000 f878 	bl	81011ec <ts3510_write_reg>
 81010fc:	4603      	mov	r3, r0
 81010fe:	2b00      	cmp	r3, #0
 8101100:	d003      	beq.n	810110a <TS3510_DetectTouch+0x2e>
  {
    ret = TS3510_ERROR;
 8101102:	f04f 33ff 	mov.w	r3, #4294967295
 8101106:	61fb      	str	r3, [r7, #28]
 8101108:	e020      	b.n	810114c <TS3510_DetectTouch+0x70>
  }/* Read TS data from LCD */
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 810110a:	687b      	ldr	r3, [r7, #4]
 810110c:	f103 0018 	add.w	r0, r3, #24
 8101110:	f107 020c 	add.w	r2, r7, #12
 8101114:	230b      	movs	r3, #11
 8101116:	218a      	movs	r1, #138	; 0x8a
 8101118:	f000 f851 	bl	81011be <ts3510_read_reg>
 810111c:	4603      	mov	r3, r0
 810111e:	2b00      	cmp	r3, #0
 8101120:	d003      	beq.n	810112a <TS3510_DetectTouch+0x4e>
  {
    ret = TS3510_ERROR;
 8101122:	f04f 33ff 	mov.w	r3, #4294967295
 8101126:	61fb      	str	r3, [r7, #28]
 8101128:	e010      	b.n	810114c <TS3510_DetectTouch+0x70>
  }
  else
  {
    if((pData[1] == 0xFF) && (pData[2] == 0xFF) && (pData[3] == 0xFF) && (pData[4] == 0xFF))
 810112a:	7b7b      	ldrb	r3, [r7, #13]
 810112c:	2bff      	cmp	r3, #255	; 0xff
 810112e:	d10b      	bne.n	8101148 <TS3510_DetectTouch+0x6c>
 8101130:	7bbb      	ldrb	r3, [r7, #14]
 8101132:	2bff      	cmp	r3, #255	; 0xff
 8101134:	d108      	bne.n	8101148 <TS3510_DetectTouch+0x6c>
 8101136:	7bfb      	ldrb	r3, [r7, #15]
 8101138:	2bff      	cmp	r3, #255	; 0xff
 810113a:	d105      	bne.n	8101148 <TS3510_DetectTouch+0x6c>
 810113c:	7c3b      	ldrb	r3, [r7, #16]
 810113e:	2bff      	cmp	r3, #255	; 0xff
 8101140:	d102      	bne.n	8101148 <TS3510_DetectTouch+0x6c>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8101142:	2300      	movs	r3, #0
 8101144:	61fb      	str	r3, [r7, #28]
 8101146:	e001      	b.n	810114c <TS3510_DetectTouch+0x70>
    }
    else
    {
      /* Touch detected */
      ret = 1;
 8101148:	2301      	movs	r3, #1
 810114a:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 810114c:	69fb      	ldr	r3, [r7, #28]
}
 810114e:	4618      	mov	r0, r3
 8101150:	3720      	adds	r7, #32
 8101152:	46bd      	mov	sp, r7
 8101154:	bd80      	pop	{r7, pc}

08101156 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8101156:	b590      	push	{r4, r7, lr}
 8101158:	b087      	sub	sp, #28
 810115a:	af00      	add	r7, sp, #0
 810115c:	60f8      	str	r0, [r7, #12]
 810115e:	607a      	str	r2, [r7, #4]
 8101160:	461a      	mov	r2, r3
 8101162:	460b      	mov	r3, r1
 8101164:	72fb      	strb	r3, [r7, #11]
 8101166:	4613      	mov	r3, r2
 8101168:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 810116a:	68fb      	ldr	r3, [r7, #12]
 810116c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	691c      	ldr	r4, [r3, #16]
 8101172:	697b      	ldr	r3, [r7, #20]
 8101174:	8918      	ldrh	r0, [r3, #8]
 8101176:	7afb      	ldrb	r3, [r7, #11]
 8101178:	b299      	uxth	r1, r3
 810117a:	893b      	ldrh	r3, [r7, #8]
 810117c:	687a      	ldr	r2, [r7, #4]
 810117e:	47a0      	blx	r4
 8101180:	4603      	mov	r3, r0
}
 8101182:	4618      	mov	r0, r3
 8101184:	371c      	adds	r7, #28
 8101186:	46bd      	mov	sp, r7
 8101188:	bd90      	pop	{r4, r7, pc}

0810118a <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 810118a:	b590      	push	{r4, r7, lr}
 810118c:	b087      	sub	sp, #28
 810118e:	af00      	add	r7, sp, #0
 8101190:	60f8      	str	r0, [r7, #12]
 8101192:	607a      	str	r2, [r7, #4]
 8101194:	461a      	mov	r2, r3
 8101196:	460b      	mov	r3, r1
 8101198:	72fb      	strb	r3, [r7, #11]
 810119a:	4613      	mov	r3, r2
 810119c:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 810119e:	68fb      	ldr	r3, [r7, #12]
 81011a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 81011a2:	697b      	ldr	r3, [r7, #20]
 81011a4:	68dc      	ldr	r4, [r3, #12]
 81011a6:	697b      	ldr	r3, [r7, #20]
 81011a8:	8918      	ldrh	r0, [r3, #8]
 81011aa:	7afb      	ldrb	r3, [r7, #11]
 81011ac:	b299      	uxth	r1, r3
 81011ae:	893b      	ldrh	r3, [r7, #8]
 81011b0:	687a      	ldr	r2, [r7, #4]
 81011b2:	47a0      	blx	r4
 81011b4:	4603      	mov	r3, r0
}
 81011b6:	4618      	mov	r0, r3
 81011b8:	371c      	adds	r7, #28
 81011ba:	46bd      	mov	sp, r7
 81011bc:	bd90      	pop	{r4, r7, pc}

081011be <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 81011be:	b590      	push	{r4, r7, lr}
 81011c0:	b085      	sub	sp, #20
 81011c2:	af00      	add	r7, sp, #0
 81011c4:	60f8      	str	r0, [r7, #12]
 81011c6:	607a      	str	r2, [r7, #4]
 81011c8:	461a      	mov	r2, r3
 81011ca:	460b      	mov	r3, r1
 81011cc:	72fb      	strb	r3, [r7, #11]
 81011ce:	4613      	mov	r3, r2
 81011d0:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 81011d2:	68fb      	ldr	r3, [r7, #12]
 81011d4:	685c      	ldr	r4, [r3, #4]
 81011d6:	68fb      	ldr	r3, [r7, #12]
 81011d8:	6898      	ldr	r0, [r3, #8]
 81011da:	893b      	ldrh	r3, [r7, #8]
 81011dc:	7af9      	ldrb	r1, [r7, #11]
 81011de:	687a      	ldr	r2, [r7, #4]
 81011e0:	47a0      	blx	r4
 81011e2:	4603      	mov	r3, r0
}
 81011e4:	4618      	mov	r0, r3
 81011e6:	3714      	adds	r7, #20
 81011e8:	46bd      	mov	sp, r7
 81011ea:	bd90      	pop	{r4, r7, pc}

081011ec <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 81011ec:	b590      	push	{r4, r7, lr}
 81011ee:	b085      	sub	sp, #20
 81011f0:	af00      	add	r7, sp, #0
 81011f2:	60f8      	str	r0, [r7, #12]
 81011f4:	607a      	str	r2, [r7, #4]
 81011f6:	461a      	mov	r2, r3
 81011f8:	460b      	mov	r3, r1
 81011fa:	72fb      	strb	r3, [r7, #11]
 81011fc:	4613      	mov	r3, r2
 81011fe:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8101200:	68fb      	ldr	r3, [r7, #12]
 8101202:	681c      	ldr	r4, [r3, #0]
 8101204:	68fb      	ldr	r3, [r7, #12]
 8101206:	6898      	ldr	r0, [r3, #8]
 8101208:	893b      	ldrh	r3, [r7, #8]
 810120a:	7af9      	ldrb	r1, [r7, #11]
 810120c:	687a      	ldr	r2, [r7, #4]
 810120e:	47a0      	blx	r4
 8101210:	4603      	mov	r3, r0
}
 8101212:	4618      	mov	r0, r3
 8101214:	3714      	adds	r7, #20
 8101216:	46bd      	mov	sp, r7
 8101218:	bd90      	pop	{r4, r7, pc}
	...

0810121c <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_Init(void)
{
 810121c:	b580      	push	{r7, lr}
 810121e:	b082      	sub	sp, #8
 8101220:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8101222:	2300      	movs	r3, #0
 8101224:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 8101226:	4b17      	ldr	r3, [pc, #92]	; (8101284 <BSP_I2C1_Init+0x68>)
 8101228:	4a17      	ldr	r2, [pc, #92]	; (8101288 <BSP_I2C1_Init+0x6c>)
 810122a:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 810122c:	4b17      	ldr	r3, [pc, #92]	; (810128c <BSP_I2C1_Init+0x70>)
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	2b00      	cmp	r3, #0
 8101232:	d122      	bne.n	810127a <BSP_I2C1_Init+0x5e>
  {
    I2c1InitCounter++;
 8101234:	4b15      	ldr	r3, [pc, #84]	; (810128c <BSP_I2C1_Init+0x70>)
 8101236:	681b      	ldr	r3, [r3, #0]
 8101238:	3301      	adds	r3, #1
 810123a:	4a14      	ldr	r2, [pc, #80]	; (810128c <BSP_I2C1_Init+0x70>)
 810123c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 810123e:	4811      	ldr	r0, [pc, #68]	; (8101284 <BSP_I2C1_Init+0x68>)
 8101240:	f003 fa54 	bl	81046ec <HAL_I2C_GetState>
 8101244:	4603      	mov	r3, r0
 8101246:	2b00      	cmp	r3, #0
 8101248:	d117      	bne.n	810127a <BSP_I2C1_Init+0x5e>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 810124a:	480e      	ldr	r0, [pc, #56]	; (8101284 <BSP_I2C1_Init+0x68>)
 810124c:	f000 fb66 	bl	810191c <I2C1_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	2b00      	cmp	r3, #0
 8101254:	d111      	bne.n	810127a <BSP_I2C1_Init+0x5e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8101256:	f005 f995 	bl	8106584 <HAL_RCC_GetPCLK1Freq>
 810125a:	4603      	mov	r3, r0
 810125c:	490c      	ldr	r1, [pc, #48]	; (8101290 <BSP_I2C1_Init+0x74>)
 810125e:	4618      	mov	r0, r3
 8101260:	f000 f8e6 	bl	8101430 <I2C_GetTiming>
 8101264:	4603      	mov	r3, r0
 8101266:	4619      	mov	r1, r3
 8101268:	4806      	ldr	r0, [pc, #24]	; (8101284 <BSP_I2C1_Init+0x68>)
 810126a:	f000 f83b 	bl	81012e4 <MX_I2C1_Init>
 810126e:	4603      	mov	r3, r0
 8101270:	2b00      	cmp	r3, #0
 8101272:	d002      	beq.n	810127a <BSP_I2C1_Init+0x5e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8101274:	f06f 0307 	mvn.w	r3, #7
 8101278:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 810127a:	687b      	ldr	r3, [r7, #4]
}
 810127c:	4618      	mov	r0, r3
 810127e:	3708      	adds	r7, #8
 8101280:	46bd      	mov	sp, r7
 8101282:	bd80      	pop	{r7, pc}
 8101284:	24000b3c 	.word	0x24000b3c
 8101288:	40005400 	.word	0x40005400
 810128c:	24000134 	.word	0x24000134
 8101290:	000186a0 	.word	0x000186a0

08101294 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_DeInit(void)
{
 8101294:	b580      	push	{r7, lr}
 8101296:	b082      	sub	sp, #8
 8101298:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 810129a:	2300      	movs	r3, #0
 810129c:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
 810129e:	4b0f      	ldr	r3, [pc, #60]	; (81012dc <BSP_I2C1_DeInit+0x48>)
 81012a0:	681b      	ldr	r3, [r3, #0]
 81012a2:	3b01      	subs	r3, #1
 81012a4:	4a0d      	ldr	r2, [pc, #52]	; (81012dc <BSP_I2C1_DeInit+0x48>)
 81012a6:	6013      	str	r3, [r2, #0]

  if (--I2c1InitCounter == 0U)
 81012a8:	4b0c      	ldr	r3, [pc, #48]	; (81012dc <BSP_I2C1_DeInit+0x48>)
 81012aa:	681b      	ldr	r3, [r3, #0]
 81012ac:	3b01      	subs	r3, #1
 81012ae:	4a0b      	ldr	r2, [pc, #44]	; (81012dc <BSP_I2C1_DeInit+0x48>)
 81012b0:	6013      	str	r3, [r2, #0]
 81012b2:	4b0a      	ldr	r3, [pc, #40]	; (81012dc <BSP_I2C1_DeInit+0x48>)
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	2b00      	cmp	r3, #0
 81012b8:	d10b      	bne.n	81012d2 <BSP_I2C1_DeInit+0x3e>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
 81012ba:	4809      	ldr	r0, [pc, #36]	; (81012e0 <BSP_I2C1_DeInit+0x4c>)
 81012bc:	f000 fb98 	bl	81019f0 <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 81012c0:	4807      	ldr	r0, [pc, #28]	; (81012e0 <BSP_I2C1_DeInit+0x4c>)
 81012c2:	f002 ffa1 	bl	8104208 <HAL_I2C_DeInit>
 81012c6:	4603      	mov	r3, r0
 81012c8:	2b00      	cmp	r3, #0
 81012ca:	d002      	beq.n	81012d2 <BSP_I2C1_DeInit+0x3e>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 81012cc:	f06f 0307 	mvn.w	r3, #7
 81012d0:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 81012d2:	687b      	ldr	r3, [r7, #4]
}
 81012d4:	4618      	mov	r0, r3
 81012d6:	3708      	adds	r7, #8
 81012d8:	46bd      	mov	sp, r7
 81012da:	bd80      	pop	{r7, pc}
 81012dc:	24000134 	.word	0x24000134
 81012e0:	24000b3c 	.word	0x24000b3c

081012e4 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 81012e4:	b580      	push	{r7, lr}
 81012e6:	b084      	sub	sp, #16
 81012e8:	af00      	add	r7, sp, #0
 81012ea:	6078      	str	r0, [r7, #4]
 81012ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81012ee:	2300      	movs	r3, #0
 81012f0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	683a      	ldr	r2, [r7, #0]
 81012f6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	2200      	movs	r2, #0
 81012fc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	2201      	movs	r2, #1
 8101302:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	2200      	movs	r2, #0
 8101308:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	2200      	movs	r2, #0
 810130e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	2200      	movs	r2, #0
 8101314:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	2200      	movs	r2, #0
 810131a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	2200      	movs	r2, #0
 8101320:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8101322:	6878      	ldr	r0, [r7, #4]
 8101324:	f002 fee0 	bl	81040e8 <HAL_I2C_Init>
 8101328:	4603      	mov	r3, r0
 810132a:	2b00      	cmp	r3, #0
 810132c:	d002      	beq.n	8101334 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 810132e:	2301      	movs	r3, #1
 8101330:	73fb      	strb	r3, [r7, #15]
 8101332:	e014      	b.n	810135e <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8101334:	2300      	movs	r3, #0
 8101336:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8101338:	68b9      	ldr	r1, [r7, #8]
 810133a:	6878      	ldr	r0, [r7, #4]
 810133c:	f003 fca8 	bl	8104c90 <HAL_I2CEx_ConfigAnalogFilter>
 8101340:	4603      	mov	r3, r0
 8101342:	2b00      	cmp	r3, #0
 8101344:	d002      	beq.n	810134c <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 8101346:	2301      	movs	r3, #1
 8101348:	73fb      	strb	r3, [r7, #15]
 810134a:	e008      	b.n	810135e <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 810134c:	2100      	movs	r1, #0
 810134e:	6878      	ldr	r0, [r7, #4]
 8101350:	f003 fce9 	bl	8104d26 <HAL_I2CEx_ConfigDigitalFilter>
 8101354:	4603      	mov	r3, r0
 8101356:	2b00      	cmp	r3, #0
 8101358:	d001      	beq.n	810135e <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 810135a:	2301      	movs	r3, #1
 810135c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 810135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8101360:	4618      	mov	r0, r3
 8101362:	3710      	adds	r7, #16
 8101364:	46bd      	mov	sp, r7
 8101366:	bd80      	pop	{r7, pc}

08101368 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8101368:	b580      	push	{r7, lr}
 810136a:	b088      	sub	sp, #32
 810136c:	af02      	add	r7, sp, #8
 810136e:	60ba      	str	r2, [r7, #8]
 8101370:	461a      	mov	r2, r3
 8101372:	4603      	mov	r3, r0
 8101374:	81fb      	strh	r3, [r7, #14]
 8101376:	460b      	mov	r3, r1
 8101378:	81bb      	strh	r3, [r7, #12]
 810137a:	4613      	mov	r3, r2
 810137c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 810137e:	89b9      	ldrh	r1, [r7, #12]
 8101380:	89f8      	ldrh	r0, [r7, #14]
 8101382:	88fb      	ldrh	r3, [r7, #6]
 8101384:	9300      	str	r3, [sp, #0]
 8101386:	68bb      	ldr	r3, [r7, #8]
 8101388:	2201      	movs	r2, #1
 810138a:	f000 fb53 	bl	8101a34 <I2C1_WriteReg>
 810138e:	4603      	mov	r3, r0
 8101390:	2b00      	cmp	r3, #0
 8101392:	d102      	bne.n	810139a <BSP_I2C1_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8101394:	2300      	movs	r3, #0
 8101396:	617b      	str	r3, [r7, #20]
 8101398:	e00c      	b.n	81013b4 <BSP_I2C1_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 810139a:	4809      	ldr	r0, [pc, #36]	; (81013c0 <BSP_I2C1_WriteReg+0x58>)
 810139c:	f003 f9b4 	bl	8104708 <HAL_I2C_GetError>
 81013a0:	4603      	mov	r3, r0
 81013a2:	2b04      	cmp	r3, #4
 81013a4:	d103      	bne.n	81013ae <BSP_I2C1_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 81013a6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 81013aa:	617b      	str	r3, [r7, #20]
 81013ac:	e002      	b.n	81013b4 <BSP_I2C1_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 81013ae:	f06f 0303 	mvn.w	r3, #3
 81013b2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 81013b4:	697b      	ldr	r3, [r7, #20]
}
 81013b6:	4618      	mov	r0, r3
 81013b8:	3718      	adds	r7, #24
 81013ba:	46bd      	mov	sp, r7
 81013bc:	bd80      	pop	{r7, pc}
 81013be:	bf00      	nop
 81013c0:	24000b3c 	.word	0x24000b3c

081013c4 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 81013c4:	b580      	push	{r7, lr}
 81013c6:	b088      	sub	sp, #32
 81013c8:	af02      	add	r7, sp, #8
 81013ca:	60ba      	str	r2, [r7, #8]
 81013cc:	461a      	mov	r2, r3
 81013ce:	4603      	mov	r3, r0
 81013d0:	81fb      	strh	r3, [r7, #14]
 81013d2:	460b      	mov	r3, r1
 81013d4:	81bb      	strh	r3, [r7, #12]
 81013d6:	4613      	mov	r3, r2
 81013d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 81013da:	89b9      	ldrh	r1, [r7, #12]
 81013dc:	89f8      	ldrh	r0, [r7, #14]
 81013de:	88fb      	ldrh	r3, [r7, #6]
 81013e0:	9300      	str	r3, [sp, #0]
 81013e2:	68bb      	ldr	r3, [r7, #8]
 81013e4:	2201      	movs	r2, #1
 81013e6:	f000 fb4b 	bl	8101a80 <I2C1_ReadReg>
 81013ea:	4603      	mov	r3, r0
 81013ec:	2b00      	cmp	r3, #0
 81013ee:	d102      	bne.n	81013f6 <BSP_I2C1_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 81013f0:	2300      	movs	r3, #0
 81013f2:	617b      	str	r3, [r7, #20]
 81013f4:	e00c      	b.n	8101410 <BSP_I2C1_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 81013f6:	4809      	ldr	r0, [pc, #36]	; (810141c <BSP_I2C1_ReadReg+0x58>)
 81013f8:	f003 f986 	bl	8104708 <HAL_I2C_GetError>
 81013fc:	4603      	mov	r3, r0
 81013fe:	2b04      	cmp	r3, #4
 8101400:	d103      	bne.n	810140a <BSP_I2C1_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8101402:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8101406:	617b      	str	r3, [r7, #20]
 8101408:	e002      	b.n	8101410 <BSP_I2C1_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 810140a:	f06f 0303 	mvn.w	r3, #3
 810140e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8101410:	697b      	ldr	r3, [r7, #20]
}
 8101412:	4618      	mov	r0, r3
 8101414:	3718      	adds	r7, #24
 8101416:	46bd      	mov	sp, r7
 8101418:	bd80      	pop	{r7, pc}
 810141a:	bf00      	nop
 810141c:	24000b3c 	.word	0x24000b3c

08101420 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8101420:	b580      	push	{r7, lr}
 8101422:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8101424:	f001 ff5a 	bl	81032dc <HAL_GetTick>
 8101428:	4603      	mov	r3, r0
}
 810142a:	4618      	mov	r0, r3
 810142c:	bd80      	pop	{r7, pc}
	...

08101430 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b086      	sub	sp, #24
 8101434:	af00      	add	r7, sp, #0
 8101436:	6078      	str	r0, [r7, #4]
 8101438:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 810143a:	2300      	movs	r3, #0
 810143c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	2b00      	cmp	r3, #0
 8101442:	d06b      	beq.n	810151c <I2C_GetTiming+0xec>
 8101444:	683b      	ldr	r3, [r7, #0]
 8101446:	2b00      	cmp	r3, #0
 8101448:	d068      	beq.n	810151c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 810144a:	2300      	movs	r3, #0
 810144c:	613b      	str	r3, [r7, #16]
 810144e:	e060      	b.n	8101512 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8101450:	4a35      	ldr	r2, [pc, #212]	; (8101528 <I2C_GetTiming+0xf8>)
 8101452:	693b      	ldr	r3, [r7, #16]
 8101454:	212c      	movs	r1, #44	; 0x2c
 8101456:	fb01 f303 	mul.w	r3, r1, r3
 810145a:	4413      	add	r3, r2
 810145c:	3304      	adds	r3, #4
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	683a      	ldr	r2, [r7, #0]
 8101462:	429a      	cmp	r2, r3
 8101464:	d352      	bcc.n	810150c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8101466:	4a30      	ldr	r2, [pc, #192]	; (8101528 <I2C_GetTiming+0xf8>)
 8101468:	693b      	ldr	r3, [r7, #16]
 810146a:	212c      	movs	r1, #44	; 0x2c
 810146c:	fb01 f303 	mul.w	r3, r1, r3
 8101470:	4413      	add	r3, r2
 8101472:	3308      	adds	r3, #8
 8101474:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8101476:	683a      	ldr	r2, [r7, #0]
 8101478:	429a      	cmp	r2, r3
 810147a:	d847      	bhi.n	810150c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 810147c:	6939      	ldr	r1, [r7, #16]
 810147e:	6878      	ldr	r0, [r7, #4]
 8101480:	f000 f856 	bl	8101530 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8101484:	6939      	ldr	r1, [r7, #16]
 8101486:	6878      	ldr	r0, [r7, #4]
 8101488:	f000 f940 	bl	810170c <I2C_Compute_SCLL_SCLH>
 810148c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 810148e:	68fb      	ldr	r3, [r7, #12]
 8101490:	2b7f      	cmp	r3, #127	; 0x7f
 8101492:	d842      	bhi.n	810151a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8101494:	4925      	ldr	r1, [pc, #148]	; (810152c <I2C_GetTiming+0xfc>)
 8101496:	68fa      	ldr	r2, [r7, #12]
 8101498:	4613      	mov	r3, r2
 810149a:	009b      	lsls	r3, r3, #2
 810149c:	4413      	add	r3, r2
 810149e:	009b      	lsls	r3, r3, #2
 81014a0:	440b      	add	r3, r1
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 81014a6:	4821      	ldr	r0, [pc, #132]	; (810152c <I2C_GetTiming+0xfc>)
 81014a8:	68fa      	ldr	r2, [r7, #12]
 81014aa:	4613      	mov	r3, r2
 81014ac:	009b      	lsls	r3, r3, #2
 81014ae:	4413      	add	r3, r2
 81014b0:	009b      	lsls	r3, r3, #2
 81014b2:	4403      	add	r3, r0
 81014b4:	3304      	adds	r3, #4
 81014b6:	681b      	ldr	r3, [r3, #0]
 81014b8:	051b      	lsls	r3, r3, #20
 81014ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 81014be:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 81014c0:	481a      	ldr	r0, [pc, #104]	; (810152c <I2C_GetTiming+0xfc>)
 81014c2:	68fa      	ldr	r2, [r7, #12]
 81014c4:	4613      	mov	r3, r2
 81014c6:	009b      	lsls	r3, r3, #2
 81014c8:	4413      	add	r3, r2
 81014ca:	009b      	lsls	r3, r3, #2
 81014cc:	4403      	add	r3, r0
 81014ce:	3308      	adds	r3, #8
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	041b      	lsls	r3, r3, #16
 81014d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 81014d8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 81014da:	4814      	ldr	r0, [pc, #80]	; (810152c <I2C_GetTiming+0xfc>)
 81014dc:	68fa      	ldr	r2, [r7, #12]
 81014de:	4613      	mov	r3, r2
 81014e0:	009b      	lsls	r3, r3, #2
 81014e2:	4413      	add	r3, r2
 81014e4:	009b      	lsls	r3, r3, #2
 81014e6:	4403      	add	r3, r0
 81014e8:	330c      	adds	r3, #12
 81014ea:	681b      	ldr	r3, [r3, #0]
 81014ec:	021b      	lsls	r3, r3, #8
 81014ee:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 81014f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 81014f2:	480e      	ldr	r0, [pc, #56]	; (810152c <I2C_GetTiming+0xfc>)
 81014f4:	68fa      	ldr	r2, [r7, #12]
 81014f6:	4613      	mov	r3, r2
 81014f8:	009b      	lsls	r3, r3, #2
 81014fa:	4413      	add	r3, r2
 81014fc:	009b      	lsls	r3, r3, #2
 81014fe:	4403      	add	r3, r0
 8101500:	3310      	adds	r3, #16
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8101506:	430b      	orrs	r3, r1
 8101508:	617b      	str	r3, [r7, #20]
        }
        break;
 810150a:	e006      	b.n	810151a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 810150c:	693b      	ldr	r3, [r7, #16]
 810150e:	3301      	adds	r3, #1
 8101510:	613b      	str	r3, [r7, #16]
 8101512:	693b      	ldr	r3, [r7, #16]
 8101514:	2b02      	cmp	r3, #2
 8101516:	d99b      	bls.n	8101450 <I2C_GetTiming+0x20>
 8101518:	e000      	b.n	810151c <I2C_GetTiming+0xec>
        break;
 810151a:	bf00      	nop
      }
    }
  }

  return ret;
 810151c:	697b      	ldr	r3, [r7, #20]
}
 810151e:	4618      	mov	r0, r3
 8101520:	3718      	adds	r7, #24
 8101522:	46bd      	mov	sp, r7
 8101524:	bd80      	pop	{r7, pc}
 8101526:	bf00      	nop
 8101528:	0810b3e4 	.word	0x0810b3e4
 810152c:	24000138 	.word	0x24000138

08101530 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8101530:	b480      	push	{r7}
 8101532:	b08f      	sub	sp, #60	; 0x3c
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
 8101538:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 810153a:	2310      	movs	r3, #16
 810153c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	085a      	lsrs	r2, r3, #1
 8101542:	4b6e      	ldr	r3, [pc, #440]	; (81016fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8101544:	4413      	add	r3, r2
 8101546:	687a      	ldr	r2, [r7, #4]
 8101548:	fbb3 f3f2 	udiv	r3, r3, r2
 810154c:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 810154e:	2332      	movs	r3, #50	; 0x32
 8101550:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8101552:	f44f 7382 	mov.w	r3, #260	; 0x104
 8101556:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8101558:	4a69      	ldr	r2, [pc, #420]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 810155a:	683b      	ldr	r3, [r7, #0]
 810155c:	212c      	movs	r1, #44	; 0x2c
 810155e:	fb01 f303 	mul.w	r3, r1, r3
 8101562:	4413      	add	r3, r2
 8101564:	3324      	adds	r3, #36	; 0x24
 8101566:	681b      	ldr	r3, [r3, #0]
 8101568:	4618      	mov	r0, r3
 810156a:	4a65      	ldr	r2, [pc, #404]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 810156c:	683b      	ldr	r3, [r7, #0]
 810156e:	212c      	movs	r1, #44	; 0x2c
 8101570:	fb01 f303 	mul.w	r3, r1, r3
 8101574:	4413      	add	r3, r2
 8101576:	330c      	adds	r3, #12
 8101578:	681b      	ldr	r3, [r3, #0]
 810157a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 810157c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 810157e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8101580:	495f      	ldr	r1, [pc, #380]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8101582:	683b      	ldr	r3, [r7, #0]
 8101584:	202c      	movs	r0, #44	; 0x2c
 8101586:	fb00 f303 	mul.w	r3, r0, r3
 810158a:	440b      	add	r3, r1
 810158c:	3328      	adds	r3, #40	; 0x28
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	3303      	adds	r3, #3
 8101592:	69f9      	ldr	r1, [r7, #28]
 8101594:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8101598:	1ad3      	subs	r3, r2, r3
 810159a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 810159c:	4a58      	ldr	r2, [pc, #352]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 810159e:	683b      	ldr	r3, [r7, #0]
 81015a0:	212c      	movs	r1, #44	; 0x2c
 81015a2:	fb01 f303 	mul.w	r3, r1, r3
 81015a6:	4413      	add	r3, r2
 81015a8:	3310      	adds	r3, #16
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	4618      	mov	r0, r3
 81015ae:	4a54      	ldr	r2, [pc, #336]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 81015b0:	683b      	ldr	r3, [r7, #0]
 81015b2:	212c      	movs	r1, #44	; 0x2c
 81015b4:	fb01 f303 	mul.w	r3, r1, r3
 81015b8:	4413      	add	r3, r2
 81015ba:	3320      	adds	r3, #32
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 81015c0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 81015c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 81015c4:	494e      	ldr	r1, [pc, #312]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 81015c6:	683b      	ldr	r3, [r7, #0]
 81015c8:	202c      	movs	r0, #44	; 0x2c
 81015ca:	fb00 f303 	mul.w	r3, r0, r3
 81015ce:	440b      	add	r3, r1
 81015d0:	3328      	adds	r3, #40	; 0x28
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	3304      	adds	r3, #4
 81015d6:	69f9      	ldr	r1, [r7, #28]
 81015d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 81015dc:	1ad3      	subs	r3, r2, r3
 81015de:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 81015e0:	4a47      	ldr	r2, [pc, #284]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 81015e2:	683b      	ldr	r3, [r7, #0]
 81015e4:	212c      	movs	r1, #44	; 0x2c
 81015e6:	fb01 f303 	mul.w	r3, r1, r3
 81015ea:	4413      	add	r3, r2
 81015ec:	3320      	adds	r3, #32
 81015ee:	681b      	ldr	r3, [r3, #0]
 81015f0:	4618      	mov	r0, r3
 81015f2:	4a43      	ldr	r2, [pc, #268]	; (8101700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 81015f4:	683b      	ldr	r3, [r7, #0]
 81015f6:	212c      	movs	r1, #44	; 0x2c
 81015f8:	fb01 f303 	mul.w	r3, r1, r3
 81015fc:	4413      	add	r3, r2
 81015fe:	3314      	adds	r3, #20
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	4403      	add	r3, r0
 8101604:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8101606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101608:	2b00      	cmp	r3, #0
 810160a:	dc01      	bgt.n	8101610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 810160c:	2300      	movs	r3, #0
 810160e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8101610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101612:	2b00      	cmp	r3, #0
 8101614:	dc01      	bgt.n	810161a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8101616:	2300      	movs	r3, #0
 8101618:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 810161a:	2300      	movs	r3, #0
 810161c:	62bb      	str	r3, [r7, #40]	; 0x28
 810161e:	e062      	b.n	81016e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8101620:	2300      	movs	r3, #0
 8101622:	627b      	str	r3, [r7, #36]	; 0x24
 8101624:	e059      	b.n	81016da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8101626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101628:	3301      	adds	r3, #1
 810162a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810162c:	3201      	adds	r2, #1
 810162e:	fb03 f202 	mul.w	r2, r3, r2
 8101632:	69fb      	ldr	r3, [r7, #28]
 8101634:	fb02 f303 	mul.w	r3, r2, r3
 8101638:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 810163a:	693b      	ldr	r3, [r7, #16]
 810163c:	68fa      	ldr	r2, [r7, #12]
 810163e:	429a      	cmp	r2, r3
 8101640:	d348      	bcc.n	81016d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8101642:	2300      	movs	r3, #0
 8101644:	623b      	str	r3, [r7, #32]
 8101646:	e042      	b.n	81016ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8101648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810164a:	3301      	adds	r3, #1
 810164c:	6a3a      	ldr	r2, [r7, #32]
 810164e:	fb03 f202 	mul.w	r2, r3, r2
 8101652:	69fb      	ldr	r3, [r7, #28]
 8101654:	fb02 f303 	mul.w	r3, r2, r3
 8101658:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 810165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810165c:	68ba      	ldr	r2, [r7, #8]
 810165e:	429a      	cmp	r2, r3
 8101660:	d332      	bcc.n	81016c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8101662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101664:	68ba      	ldr	r2, [r7, #8]
 8101666:	429a      	cmp	r2, r3
 8101668:	d82e      	bhi.n	81016c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 810166a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810166e:	429a      	cmp	r2, r3
 8101670:	d02a      	beq.n	81016c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8101672:	4b24      	ldr	r3, [pc, #144]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8101674:	681a      	ldr	r2, [r3, #0]
 8101676:	4924      	ldr	r1, [pc, #144]	; (8101708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8101678:	4613      	mov	r3, r2
 810167a:	009b      	lsls	r3, r3, #2
 810167c:	4413      	add	r3, r2
 810167e:	009b      	lsls	r3, r3, #2
 8101680:	440b      	add	r3, r1
 8101682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101684:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8101686:	4b1f      	ldr	r3, [pc, #124]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8101688:	681a      	ldr	r2, [r3, #0]
 810168a:	491f      	ldr	r1, [pc, #124]	; (8101708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 810168c:	4613      	mov	r3, r2
 810168e:	009b      	lsls	r3, r3, #2
 8101690:	4413      	add	r3, r2
 8101692:	009b      	lsls	r3, r3, #2
 8101694:	440b      	add	r3, r1
 8101696:	3304      	adds	r3, #4
 8101698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810169a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 810169c:	4b19      	ldr	r3, [pc, #100]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 810169e:	681a      	ldr	r2, [r3, #0]
 81016a0:	4919      	ldr	r1, [pc, #100]	; (8101708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 81016a2:	4613      	mov	r3, r2
 81016a4:	009b      	lsls	r3, r3, #2
 81016a6:	4413      	add	r3, r2
 81016a8:	009b      	lsls	r3, r3, #2
 81016aa:	440b      	add	r3, r1
 81016ac:	3308      	adds	r3, #8
 81016ae:	6a3a      	ldr	r2, [r7, #32]
 81016b0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 81016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016b4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 81016b6:	4b13      	ldr	r3, [pc, #76]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	3301      	adds	r3, #1
 81016bc:	4a11      	ldr	r2, [pc, #68]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 81016be:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 81016c0:	4b10      	ldr	r3, [pc, #64]	; (8101704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	2b7f      	cmp	r3, #127	; 0x7f
 81016c6:	d812      	bhi.n	81016ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 81016c8:	6a3b      	ldr	r3, [r7, #32]
 81016ca:	3301      	adds	r3, #1
 81016cc:	623b      	str	r3, [r7, #32]
 81016ce:	6a3b      	ldr	r3, [r7, #32]
 81016d0:	2b0f      	cmp	r3, #15
 81016d2:	d9b9      	bls.n	8101648 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 81016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016d6:	3301      	adds	r3, #1
 81016d8:	627b      	str	r3, [r7, #36]	; 0x24
 81016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016dc:	2b0f      	cmp	r3, #15
 81016de:	d9a2      	bls.n	8101626 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 81016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016e2:	3301      	adds	r3, #1
 81016e4:	62bb      	str	r3, [r7, #40]	; 0x28
 81016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016e8:	2b0f      	cmp	r3, #15
 81016ea:	d999      	bls.n	8101620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 81016ec:	e000      	b.n	81016f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 81016ee:	bf00      	nop
          }
        }
      }
    }
  }
}
 81016f0:	373c      	adds	r7, #60	; 0x3c
 81016f2:	46bd      	mov	sp, r7
 81016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f8:	4770      	bx	lr
 81016fa:	bf00      	nop
 81016fc:	3b9aca00 	.word	0x3b9aca00
 8101700:	0810b3e4 	.word	0x0810b3e4
 8101704:	24000b38 	.word	0x24000b38
 8101708:	24000138 	.word	0x24000138

0810170c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 810170c:	b480      	push	{r7}
 810170e:	b093      	sub	sp, #76	; 0x4c
 8101710:	af00      	add	r7, sp, #0
 8101712:	6078      	str	r0, [r7, #4]
 8101714:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8101716:	f04f 33ff 	mov.w	r3, #4294967295
 810171a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	085a      	lsrs	r2, r3, #1
 8101720:	4b7a      	ldr	r3, [pc, #488]	; (810190c <I2C_Compute_SCLL_SCLH+0x200>)
 8101722:	4413      	add	r3, r2
 8101724:	687a      	ldr	r2, [r7, #4]
 8101726:	fbb3 f3f2 	udiv	r3, r3, r2
 810172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 810172c:	4a78      	ldr	r2, [pc, #480]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 810172e:	683b      	ldr	r3, [r7, #0]
 8101730:	212c      	movs	r1, #44	; 0x2c
 8101732:	fb01 f303 	mul.w	r3, r1, r3
 8101736:	4413      	add	r3, r2
 8101738:	681b      	ldr	r3, [r3, #0]
 810173a:	085a      	lsrs	r2, r3, #1
 810173c:	4b73      	ldr	r3, [pc, #460]	; (810190c <I2C_Compute_SCLL_SCLH+0x200>)
 810173e:	4413      	add	r3, r2
 8101740:	4973      	ldr	r1, [pc, #460]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 8101742:	683a      	ldr	r2, [r7, #0]
 8101744:	202c      	movs	r0, #44	; 0x2c
 8101746:	fb00 f202 	mul.w	r2, r0, r2
 810174a:	440a      	add	r2, r1
 810174c:	6812      	ldr	r2, [r2, #0]
 810174e:	fbb3 f3f2 	udiv	r3, r3, r2
 8101752:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8101754:	2332      	movs	r3, #50	; 0x32
 8101756:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8101758:	4a6d      	ldr	r2, [pc, #436]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 810175a:	683b      	ldr	r3, [r7, #0]
 810175c:	212c      	movs	r1, #44	; 0x2c
 810175e:	fb01 f303 	mul.w	r3, r1, r3
 8101762:	4413      	add	r3, r2
 8101764:	3328      	adds	r3, #40	; 0x28
 8101766:	681a      	ldr	r2, [r3, #0]
 8101768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810176a:	fb02 f303 	mul.w	r3, r2, r3
 810176e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8101770:	4a67      	ldr	r2, [pc, #412]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 8101772:	683b      	ldr	r3, [r7, #0]
 8101774:	212c      	movs	r1, #44	; 0x2c
 8101776:	fb01 f303 	mul.w	r3, r1, r3
 810177a:	4413      	add	r3, r2
 810177c:	3304      	adds	r3, #4
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	4a62      	ldr	r2, [pc, #392]	; (810190c <I2C_Compute_SCLL_SCLH+0x200>)
 8101782:	fbb2 f3f3 	udiv	r3, r2, r3
 8101786:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8101788:	4a61      	ldr	r2, [pc, #388]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 810178a:	683b      	ldr	r3, [r7, #0]
 810178c:	212c      	movs	r1, #44	; 0x2c
 810178e:	fb01 f303 	mul.w	r3, r1, r3
 8101792:	4413      	add	r3, r2
 8101794:	3308      	adds	r3, #8
 8101796:	681b      	ldr	r3, [r3, #0]
 8101798:	4a5c      	ldr	r2, [pc, #368]	; (810190c <I2C_Compute_SCLL_SCLH+0x200>)
 810179a:	fbb2 f3f3 	udiv	r3, r2, r3
 810179e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 81017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017a2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 81017a4:	2300      	movs	r3, #0
 81017a6:	637b      	str	r3, [r7, #52]	; 0x34
 81017a8:	e0a3      	b.n	81018f2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 81017aa:	495a      	ldr	r1, [pc, #360]	; (8101914 <I2C_Compute_SCLL_SCLH+0x208>)
 81017ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81017ae:	4613      	mov	r3, r2
 81017b0:	009b      	lsls	r3, r3, #2
 81017b2:	4413      	add	r3, r2
 81017b4:	009b      	lsls	r3, r3, #2
 81017b6:	440b      	add	r3, r1
 81017b8:	681b      	ldr	r3, [r3, #0]
 81017ba:	1c5a      	adds	r2, r3, #1
 81017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81017be:	fb02 f303 	mul.w	r3, r2, r3
 81017c2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 81017c4:	2300      	movs	r3, #0
 81017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81017c8:	e08c      	b.n	81018e4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 81017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81017cc:	6a3b      	ldr	r3, [r7, #32]
 81017ce:	441a      	add	r2, r3
 81017d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81017d2:	3301      	adds	r3, #1
 81017d4:	6979      	ldr	r1, [r7, #20]
 81017d6:	fb03 f101 	mul.w	r1, r3, r1
 81017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81017dc:	005b      	lsls	r3, r3, #1
 81017de:	440b      	add	r3, r1
 81017e0:	4413      	add	r3, r2
 81017e2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 81017e4:	4a4a      	ldr	r2, [pc, #296]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 81017e6:	683b      	ldr	r3, [r7, #0]
 81017e8:	212c      	movs	r1, #44	; 0x2c
 81017ea:	fb01 f303 	mul.w	r3, r1, r3
 81017ee:	4413      	add	r3, r2
 81017f0:	3318      	adds	r3, #24
 81017f2:	681b      	ldr	r3, [r3, #0]
 81017f4:	693a      	ldr	r2, [r7, #16]
 81017f6:	429a      	cmp	r2, r3
 81017f8:	d971      	bls.n	81018de <I2C_Compute_SCLL_SCLH+0x1d2>
 81017fa:	693a      	ldr	r2, [r7, #16]
 81017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81017fe:	1ad2      	subs	r2, r2, r3
 8101800:	6a3b      	ldr	r3, [r7, #32]
 8101802:	1ad3      	subs	r3, r2, r3
 8101804:	089b      	lsrs	r3, r3, #2
 8101806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101808:	429a      	cmp	r2, r3
 810180a:	d268      	bcs.n	81018de <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 810180c:	2300      	movs	r3, #0
 810180e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101810:	e062      	b.n	81018d8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8101812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101814:	6a3b      	ldr	r3, [r7, #32]
 8101816:	441a      	add	r2, r3
 8101818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810181a:	3301      	adds	r3, #1
 810181c:	6979      	ldr	r1, [r7, #20]
 810181e:	fb03 f101 	mul.w	r1, r3, r1
 8101822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101824:	005b      	lsls	r3, r3, #1
 8101826:	440b      	add	r3, r1
 8101828:	4413      	add	r3, r2
 810182a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 810182c:	693a      	ldr	r2, [r7, #16]
 810182e:	68fb      	ldr	r3, [r7, #12]
 8101830:	441a      	add	r2, r3
 8101832:	4937      	ldr	r1, [pc, #220]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 8101834:	683b      	ldr	r3, [r7, #0]
 8101836:	202c      	movs	r0, #44	; 0x2c
 8101838:	fb00 f303 	mul.w	r3, r0, r3
 810183c:	440b      	add	r3, r1
 810183e:	3320      	adds	r3, #32
 8101840:	681b      	ldr	r3, [r3, #0]
 8101842:	441a      	add	r2, r3
 8101844:	4932      	ldr	r1, [pc, #200]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 8101846:	683b      	ldr	r3, [r7, #0]
 8101848:	202c      	movs	r0, #44	; 0x2c
 810184a:	fb00 f303 	mul.w	r3, r0, r3
 810184e:	440b      	add	r3, r1
 8101850:	3324      	adds	r3, #36	; 0x24
 8101852:	681b      	ldr	r3, [r3, #0]
 8101854:	4413      	add	r3, r2
 8101856:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8101858:	68ba      	ldr	r2, [r7, #8]
 810185a:	69bb      	ldr	r3, [r7, #24]
 810185c:	429a      	cmp	r2, r3
 810185e:	d338      	bcc.n	81018d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8101860:	68ba      	ldr	r2, [r7, #8]
 8101862:	69fb      	ldr	r3, [r7, #28]
 8101864:	429a      	cmp	r2, r3
 8101866:	d834      	bhi.n	81018d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8101868:	4a29      	ldr	r2, [pc, #164]	; (8101910 <I2C_Compute_SCLL_SCLH+0x204>)
 810186a:	683b      	ldr	r3, [r7, #0]
 810186c:	212c      	movs	r1, #44	; 0x2c
 810186e:	fb01 f303 	mul.w	r3, r1, r3
 8101872:	4413      	add	r3, r2
 8101874:	331c      	adds	r3, #28
 8101876:	681b      	ldr	r3, [r3, #0]
 8101878:	68fa      	ldr	r2, [r7, #12]
 810187a:	429a      	cmp	r2, r3
 810187c:	d329      	bcc.n	81018d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 810187e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101880:	68fb      	ldr	r3, [r7, #12]
 8101882:	429a      	cmp	r2, r3
 8101884:	d225      	bcs.n	81018d2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8101886:	68ba      	ldr	r2, [r7, #8]
 8101888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810188a:	1ad3      	subs	r3, r2, r3
 810188c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 810188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101890:	2b00      	cmp	r3, #0
 8101892:	da02      	bge.n	810189a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8101894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101896:	425b      	negs	r3, r3
 8101898:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 810189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810189c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810189e:	429a      	cmp	r2, r3
 81018a0:	d917      	bls.n	81018d2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 81018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018a4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 81018a6:	491b      	ldr	r1, [pc, #108]	; (8101914 <I2C_Compute_SCLL_SCLH+0x208>)
 81018a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81018aa:	4613      	mov	r3, r2
 81018ac:	009b      	lsls	r3, r3, #2
 81018ae:	4413      	add	r3, r2
 81018b0:	009b      	lsls	r3, r3, #2
 81018b2:	440b      	add	r3, r1
 81018b4:	3310      	adds	r3, #16
 81018b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81018b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 81018ba:	4916      	ldr	r1, [pc, #88]	; (8101914 <I2C_Compute_SCLL_SCLH+0x208>)
 81018bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81018be:	4613      	mov	r3, r2
 81018c0:	009b      	lsls	r3, r3, #2
 81018c2:	4413      	add	r3, r2
 81018c4:	009b      	lsls	r3, r3, #2
 81018c6:	440b      	add	r3, r1
 81018c8:	330c      	adds	r3, #12
 81018ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81018cc:	601a      	str	r2, [r3, #0]
              ret = count;
 81018ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81018d0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 81018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81018d4:	3301      	adds	r3, #1
 81018d6:	63bb      	str	r3, [r7, #56]	; 0x38
 81018d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81018da:	2bff      	cmp	r3, #255	; 0xff
 81018dc:	d999      	bls.n	8101812 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 81018de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81018e0:	3301      	adds	r3, #1
 81018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81018e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81018e6:	2bff      	cmp	r3, #255	; 0xff
 81018e8:	f67f af6f 	bls.w	81017ca <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 81018ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81018ee:	3301      	adds	r3, #1
 81018f0:	637b      	str	r3, [r7, #52]	; 0x34
 81018f2:	4b09      	ldr	r3, [pc, #36]	; (8101918 <I2C_Compute_SCLL_SCLH+0x20c>)
 81018f4:	681b      	ldr	r3, [r3, #0]
 81018f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81018f8:	429a      	cmp	r2, r3
 81018fa:	f4ff af56 	bcc.w	81017aa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 81018fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8101900:	4618      	mov	r0, r3
 8101902:	374c      	adds	r7, #76	; 0x4c
 8101904:	46bd      	mov	sp, r7
 8101906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810190a:	4770      	bx	lr
 810190c:	3b9aca00 	.word	0x3b9aca00
 8101910:	0810b3e4 	.word	0x0810b3e4
 8101914:	24000138 	.word	0x24000138
 8101918:	24000b38 	.word	0x24000b38

0810191c <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 810191c:	b580      	push	{r7, lr}
 810191e:	b08a      	sub	sp, #40	; 0x28
 8101920:	af00      	add	r7, sp, #0
 8101922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8101924:	4b30      	ldr	r3, [pc, #192]	; (81019e8 <I2C1_MspInit+0xcc>)
 8101926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810192a:	4a2f      	ldr	r2, [pc, #188]	; (81019e8 <I2C1_MspInit+0xcc>)
 810192c:	f043 0302 	orr.w	r3, r3, #2
 8101930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101934:	4b2c      	ldr	r3, [pc, #176]	; (81019e8 <I2C1_MspInit+0xcc>)
 8101936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810193a:	f003 0302 	and.w	r3, r3, #2
 810193e:	613b      	str	r3, [r7, #16]
 8101940:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8101942:	4b29      	ldr	r3, [pc, #164]	; (81019e8 <I2C1_MspInit+0xcc>)
 8101944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101948:	4a27      	ldr	r2, [pc, #156]	; (81019e8 <I2C1_MspInit+0xcc>)
 810194a:	f043 0302 	orr.w	r3, r3, #2
 810194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101952:	4b25      	ldr	r3, [pc, #148]	; (81019e8 <I2C1_MspInit+0xcc>)
 8101954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101958:	f003 0302 	and.w	r3, r3, #2
 810195c:	60fb      	str	r3, [r7, #12]
 810195e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
 8101960:	2340      	movs	r3, #64	; 0x40
 8101962:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8101964:	2312      	movs	r3, #18
 8101966:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8101968:	2300      	movs	r3, #0
 810196a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 810196c:	2302      	movs	r3, #2
 810196e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8101970:	2304      	movs	r3, #4
 8101972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8101974:	f107 0314 	add.w	r3, r7, #20
 8101978:	4619      	mov	r1, r3
 810197a:	481c      	ldr	r0, [pc, #112]	; (81019ec <I2C1_MspInit+0xd0>)
 810197c:	f002 f8e0 	bl	8103b40 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 8101980:	2380      	movs	r3, #128	; 0x80
 8101982:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8101984:	2312      	movs	r3, #18
 8101986:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 8101988:	2300      	movs	r3, #0
 810198a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 810198c:	2302      	movs	r3, #2
 810198e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 8101990:	2304      	movs	r3, #4
 8101992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8101994:	f107 0314 	add.w	r3, r7, #20
 8101998:	4619      	mov	r1, r3
 810199a:	4814      	ldr	r0, [pc, #80]	; (81019ec <I2C1_MspInit+0xd0>)
 810199c:	f002 f8d0 	bl	8103b40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 81019a0:	4b11      	ldr	r3, [pc, #68]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019a6:	4a10      	ldr	r2, [pc, #64]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81019ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81019b0:	4b0d      	ldr	r3, [pc, #52]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81019ba:	60bb      	str	r3, [r7, #8]
 81019bc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 81019be:	4b0a      	ldr	r3, [pc, #40]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81019c4:	4a08      	ldr	r2, [pc, #32]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81019ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 81019ce:	4b06      	ldr	r3, [pc, #24]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81019d4:	4a04      	ldr	r2, [pc, #16]	; (81019e8 <I2C1_MspInit+0xcc>)
 81019d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 81019de:	bf00      	nop
 81019e0:	3728      	adds	r7, #40	; 0x28
 81019e2:	46bd      	mov	sp, r7
 81019e4:	bd80      	pop	{r7, pc}
 81019e6:	bf00      	nop
 81019e8:	58024400 	.word	0x58024400
 81019ec:	58020400 	.word	0x58020400

081019f0 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 81019f0:	b580      	push	{r7, lr}
 81019f2:	b088      	sub	sp, #32
 81019f4:	af00      	add	r7, sp, #0
 81019f6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
 81019f8:	2340      	movs	r3, #64	; 0x40
 81019fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 81019fc:	68fb      	ldr	r3, [r7, #12]
 81019fe:	4619      	mov	r1, r3
 8101a00:	480a      	ldr	r0, [pc, #40]	; (8101a2c <I2C1_MspDeInit+0x3c>)
 8101a02:	f002 fa4d 	bl	8103ea0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
 8101a06:	2380      	movs	r3, #128	; 0x80
 8101a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8101a0a:	68fb      	ldr	r3, [r7, #12]
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	4807      	ldr	r0, [pc, #28]	; (8101a2c <I2C1_MspDeInit+0x3c>)
 8101a10:	f002 fa46 	bl	8103ea0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8101a14:	4b06      	ldr	r3, [pc, #24]	; (8101a30 <I2C1_MspDeInit+0x40>)
 8101a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a1a:	4a05      	ldr	r2, [pc, #20]	; (8101a30 <I2C1_MspDeInit+0x40>)
 8101a1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8101a24:	bf00      	nop
 8101a26:	3720      	adds	r7, #32
 8101a28:	46bd      	mov	sp, r7
 8101a2a:	bd80      	pop	{r7, pc}
 8101a2c:	58020400 	.word	0x58020400
 8101a30:	58024400 	.word	0x58024400

08101a34 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8101a34:	b580      	push	{r7, lr}
 8101a36:	b088      	sub	sp, #32
 8101a38:	af04      	add	r7, sp, #16
 8101a3a:	607b      	str	r3, [r7, #4]
 8101a3c:	4603      	mov	r3, r0
 8101a3e:	81fb      	strh	r3, [r7, #14]
 8101a40:	460b      	mov	r3, r1
 8101a42:	81bb      	strh	r3, [r7, #12]
 8101a44:	4613      	mov	r3, r2
 8101a46:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8101a48:	8978      	ldrh	r0, [r7, #10]
 8101a4a:	89ba      	ldrh	r2, [r7, #12]
 8101a4c:	89f9      	ldrh	r1, [r7, #14]
 8101a4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8101a52:	9302      	str	r3, [sp, #8]
 8101a54:	8b3b      	ldrh	r3, [r7, #24]
 8101a56:	9301      	str	r3, [sp, #4]
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	9300      	str	r3, [sp, #0]
 8101a5c:	4603      	mov	r3, r0
 8101a5e:	4807      	ldr	r0, [pc, #28]	; (8101a7c <I2C1_WriteReg+0x48>)
 8101a60:	f002 fc16 	bl	8104290 <HAL_I2C_Mem_Write>
 8101a64:	4603      	mov	r3, r0
 8101a66:	2b00      	cmp	r3, #0
 8101a68:	d101      	bne.n	8101a6e <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8101a6a:	2300      	movs	r3, #0
 8101a6c:	e001      	b.n	8101a72 <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8101a6e:	f06f 0307 	mvn.w	r3, #7
}
 8101a72:	4618      	mov	r0, r3
 8101a74:	3710      	adds	r7, #16
 8101a76:	46bd      	mov	sp, r7
 8101a78:	bd80      	pop	{r7, pc}
 8101a7a:	bf00      	nop
 8101a7c:	24000b3c 	.word	0x24000b3c

08101a80 <I2C1_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8101a80:	b580      	push	{r7, lr}
 8101a82:	b088      	sub	sp, #32
 8101a84:	af04      	add	r7, sp, #16
 8101a86:	607b      	str	r3, [r7, #4]
 8101a88:	4603      	mov	r3, r0
 8101a8a:	81fb      	strh	r3, [r7, #14]
 8101a8c:	460b      	mov	r3, r1
 8101a8e:	81bb      	strh	r3, [r7, #12]
 8101a90:	4613      	mov	r3, r2
 8101a92:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8101a94:	8978      	ldrh	r0, [r7, #10]
 8101a96:	89ba      	ldrh	r2, [r7, #12]
 8101a98:	89f9      	ldrh	r1, [r7, #14]
 8101a9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8101a9e:	9302      	str	r3, [sp, #8]
 8101aa0:	8b3b      	ldrh	r3, [r7, #24]
 8101aa2:	9301      	str	r3, [sp, #4]
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	9300      	str	r3, [sp, #0]
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	4807      	ldr	r0, [pc, #28]	; (8101ac8 <I2C1_ReadReg+0x48>)
 8101aac:	f002 fd04 	bl	81044b8 <HAL_I2C_Mem_Read>
 8101ab0:	4603      	mov	r3, r0
 8101ab2:	2b00      	cmp	r3, #0
 8101ab4:	d101      	bne.n	8101aba <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8101ab6:	2300      	movs	r3, #0
 8101ab8:	e001      	b.n	8101abe <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8101aba:	f06f 0307 	mvn.w	r3, #7
}
 8101abe:	4618      	mov	r0, r3
 8101ac0:	3710      	adds	r7, #16
 8101ac2:	46bd      	mov	sp, r7
 8101ac4:	bd80      	pop	{r7, pc}
 8101ac6:	bf00      	nop
 8101ac8:	24000b3c 	.word	0x24000b3c

08101acc <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8101acc:	b580      	push	{r7, lr}
 8101ace:	b084      	sub	sp, #16
 8101ad0:	af02      	add	r7, sp, #8
 8101ad2:	6078      	str	r0, [r7, #4]
 8101ad4:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8101ad6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8101ada:	9300      	str	r3, [sp, #0]
 8101adc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	6839      	ldr	r1, [r7, #0]
 8101ae4:	6878      	ldr	r0, [r7, #4]
 8101ae6:	f000 f805 	bl	8101af4 <BSP_LCD_InitEx>
 8101aea:	4603      	mov	r3, r0
}
 8101aec:	4618      	mov	r0, r3
 8101aee:	3708      	adds	r7, #8
 8101af0:	46bd      	mov	sp, r7
 8101af2:	bd80      	pop	{r7, pc}

08101af4 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8101af4:	b580      	push	{r7, lr}
 8101af6:	b0ae      	sub	sp, #184	; 0xb8
 8101af8:	af00      	add	r7, sp, #0
 8101afa:	60f8      	str	r0, [r7, #12]
 8101afc:	60b9      	str	r1, [r7, #8]
 8101afe:	607a      	str	r2, [r7, #4]
 8101b00:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8101b02:	2300      	movs	r3, #0
 8101b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  EXC7200_Object_t ts_comp_obj_2;
  EXC7200_IO_t     io_comp_ctx_2 ;
#endif
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 8101b08:	68bb      	ldr	r3, [r7, #8]
 8101b0a:	2b01      	cmp	r3, #1
 8101b0c:	d802      	bhi.n	8101b14 <BSP_LCD_InitEx+0x20>
 8101b0e:	68fb      	ldr	r3, [r7, #12]
 8101b10:	2b00      	cmp	r3, #0
 8101b12:	d004      	beq.n	8101b1e <BSP_LCD_InitEx+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8101b14:	f06f 0301 	mvn.w	r3, #1
 8101b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101b1c:	e0f9      	b.n	8101d12 <BSP_LCD_InitEx+0x21e>
  }
  else
  {
    switch(PixelFormat)
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	2b02      	cmp	r3, #2
 8101b22:	d106      	bne.n	8101b32 <BSP_LCD_InitEx+0x3e>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8101b24:	2302      	movs	r3, #2
 8101b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 2U;
 8101b2a:	4b7d      	ldr	r3, [pc, #500]	; (8101d20 <BSP_LCD_InitEx+0x22c>)
 8101b2c:	2202      	movs	r2, #2
 8101b2e:	601a      	str	r2, [r3, #0]
      break;
 8101b30:	e006      	b.n	8101b40 <BSP_LCD_InitEx+0x4c>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8101b32:	2300      	movs	r3, #0
 8101b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 4U;
 8101b38:	4b79      	ldr	r3, [pc, #484]	; (8101d20 <BSP_LCD_InitEx+0x22c>)
 8101b3a:	2204      	movs	r2, #4
 8101b3c:	601a      	str	r2, [r3, #0]
      break;
 8101b3e:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8101b40:	4978      	ldr	r1, [pc, #480]	; (8101d24 <BSP_LCD_InitEx+0x230>)
 8101b42:	68fa      	ldr	r2, [r7, #12]
 8101b44:	4613      	mov	r3, r2
 8101b46:	005b      	lsls	r3, r3, #1
 8101b48:	4413      	add	r3, r2
 8101b4a:	00db      	lsls	r3, r3, #3
 8101b4c:	440b      	add	r3, r1
 8101b4e:	330c      	adds	r3, #12
 8101b50:	687a      	ldr	r2, [r7, #4]
 8101b52:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8101b54:	4973      	ldr	r1, [pc, #460]	; (8101d24 <BSP_LCD_InitEx+0x230>)
 8101b56:	68fa      	ldr	r2, [r7, #12]
 8101b58:	4613      	mov	r3, r2
 8101b5a:	005b      	lsls	r3, r3, #1
 8101b5c:	4413      	add	r3, r2
 8101b5e:	00db      	lsls	r3, r3, #3
 8101b60:	440b      	add	r3, r1
 8101b62:	683a      	ldr	r2, [r7, #0]
 8101b64:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8101b66:	496f      	ldr	r1, [pc, #444]	; (8101d24 <BSP_LCD_InitEx+0x230>)
 8101b68:	68fa      	ldr	r2, [r7, #12]
 8101b6a:	4613      	mov	r3, r2
 8101b6c:	005b      	lsls	r3, r3, #1
 8101b6e:	4413      	add	r3, r2
 8101b70:	00db      	lsls	r3, r3, #3
 8101b72:	440b      	add	r3, r1
 8101b74:	3304      	adds	r3, #4
 8101b76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8101b7a:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8101b7c:	68f8      	ldr	r0, [r7, #12]
 8101b7e:	f000 f8df 	bl	8101d40 <BSP_LCD_Reset>

    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 8101b82:	f000 f917 	bl	8101db4 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8101b86:	4b68      	ldr	r3, [pc, #416]	; (8101d28 <BSP_LCD_InitEx+0x234>)
 8101b88:	4a68      	ldr	r2, [pc, #416]	; (8101d2c <BSP_LCD_InitEx+0x238>)
 8101b8a:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8101b8c:	4b68      	ldr	r3, [pc, #416]	; (8101d30 <BSP_LCD_InitEx+0x23c>)
 8101b8e:	4a69      	ldr	r2, [pc, #420]	; (8101d34 <BSP_LCD_InitEx+0x240>)
 8101b90:	601a      	str	r2, [r3, #0]
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8101b92:	4865      	ldr	r0, [pc, #404]	; (8101d28 <BSP_LCD_InitEx+0x234>)
 8101b94:	f000 fe2c 	bl	81027f0 <LTDC_MspInit>
#endif

    if(ret == BSP_ERROR_NONE)
 8101b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101b9c:	2b00      	cmp	r3, #0
 8101b9e:	f040 80b8 	bne.w	8101d12 <BSP_LCD_InitEx+0x21e>
    {
      DMA2D_MspInit(&hlcd_dma2d);
 8101ba2:	4863      	ldr	r0, [pc, #396]	; (8101d30 <BSP_LCD_InitEx+0x23c>)
 8101ba4:	f000 feae 	bl	8102904 <DMA2D_MspInit>
#if (USE_EXC7200_TS_CTRL == 1)
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 8101ba8:	4b63      	ldr	r3, [pc, #396]	; (8101d38 <BSP_LCD_InitEx+0x244>)
 8101baa:	62bb      	str	r3, [r7, #40]	; 0x28
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 8101bac:	4b63      	ldr	r3, [pc, #396]	; (8101d3c <BSP_LCD_InitEx+0x248>)
 8101bae:	63bb      	str	r3, [r7, #56]	; 0x38
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8101bb0:	2308      	movs	r3, #8
 8101bb2:	863b      	strh	r3, [r7, #48]	; 0x30
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8101bb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8101bb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8101bbc:	4611      	mov	r1, r2
 8101bbe:	4618      	mov	r0, r3
 8101bc0:	f7fe fe4e 	bl	8100860 <EXC7200_RegisterBusIO>
 8101bc4:	4603      	mov	r3, r0
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	da04      	bge.n	8101bd4 <BSP_LCD_InitEx+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8101bca:	f06f 0304 	mvn.w	r3, #4
 8101bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101bd2:	e017      	b.n	8101c04 <BSP_LCD_InitEx+0x110>
      }
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 8101bd4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8101bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8101bdc:	4611      	mov	r1, r2
 8101bde:	4618      	mov	r0, r3
 8101be0:	f7fe fee6 	bl	81009b0 <EXC7200_ReadID>
 8101be4:	4603      	mov	r3, r0
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	da04      	bge.n	8101bf4 <BSP_LCD_InitEx+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8101bea:	f06f 0304 	mvn.w	r3, #4
 8101bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101bf2:	e007      	b.n	8101c04 <BSP_LCD_InitEx+0x110>
      }
      else
      {
        if(exc7200_id != EXC7200_ID)
 8101bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101bf6:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 8101bfa:	d003      	beq.n	8101c04 <BSP_LCD_InitEx+0x110>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8101bfc:	f06f 0306 	mvn.w	r3, #6
 8101c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        }
      }
#endif
#if (USE_TS3510_TS_CTRL == 1)
      if(ret != BSP_ERROR_NONE)
 8101c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101c08:	2b00      	cmp	r3, #0
 8101c0a:	d030      	beq.n	8101c6e <BSP_LCD_InitEx+0x17a>
      {
        io_comp_ctx.Init    = BSP_I2C1_Init;
 8101c0c:	4b4a      	ldr	r3, [pc, #296]	; (8101d38 <BSP_LCD_InitEx+0x244>)
 8101c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 8101c10:	4b4a      	ldr	r3, [pc, #296]	; (8101d3c <BSP_LCD_InitEx+0x248>)
 8101c12:	67fb      	str	r3, [r7, #124]	; 0x7c
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 8101c14:	2380      	movs	r3, #128	; 0x80
 8101c16:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8101c1a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8101c1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8101c22:	4611      	mov	r1, r2
 8101c24:	4618      	mov	r0, r3
 8101c26:	f7ff f8d7 	bl	8100dd8 <TS3510_RegisterBusIO>
 8101c2a:	4603      	mov	r3, r0
 8101c2c:	2b00      	cmp	r3, #0
 8101c2e:	da04      	bge.n	8101c3a <BSP_LCD_InitEx+0x146>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8101c30:	f06f 0304 	mvn.w	r3, #4
 8101c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101c38:	e019      	b.n	8101c6e <BSP_LCD_InitEx+0x17a>
        }
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 8101c3a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8101c3e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8101c42:	4611      	mov	r1, r2
 8101c44:	4618      	mov	r0, r3
 8101c46:	f7ff f96f 	bl	8100f28 <TS3510_ReadID>
 8101c4a:	4603      	mov	r3, r0
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	da04      	bge.n	8101c5a <BSP_LCD_InitEx+0x166>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8101c50:	f06f 0304 	mvn.w	r3, #4
 8101c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101c58:	e009      	b.n	8101c6e <BSP_LCD_InitEx+0x17a>
        }
        else
        {
          if(ts3510_id != TS3510_ID)
 8101c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8101c5e:	f243 5210 	movw	r2, #13584	; 0x3510
 8101c62:	4293      	cmp	r3, r2
 8101c64:	d003      	beq.n	8101c6e <BSP_LCD_InitEx+0x17a>
          {
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8101c66:	f06f 0306 	mvn.w	r3, #6
 8101c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 8101c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101c72:	2b00      	cmp	r3, #0
 8101c74:	d14d      	bne.n	8101d12 <BSP_LCD_InitEx+0x21e>
      {
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8101c76:	482c      	ldr	r0, [pc, #176]	; (8101d28 <BSP_LCD_InitEx+0x234>)
 8101c78:	f000 f974 	bl	8101f64 <MX_LTDC_ClockConfig>
 8101c7c:	4603      	mov	r3, r0
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	d004      	beq.n	8101c8c <BSP_LCD_InitEx+0x198>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8101c82:	f06f 0303 	mvn.w	r3, #3
 8101c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101c8a:	e042      	b.n	8101d12 <BSP_LCD_InitEx+0x21e>
        }
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8101c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8101c90:	6839      	ldr	r1, [r7, #0]
 8101c92:	4825      	ldr	r0, [pc, #148]	; (8101d28 <BSP_LCD_InitEx+0x234>)
 8101c94:	f000 f8dc 	bl	8101e50 <MX_LTDC_Init>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d004      	beq.n	8101ca8 <BSP_LCD_InitEx+0x1b4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8101c9e:	f06f 0303 	mvn.w	r3, #3
 8101ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101ca6:	e034      	b.n	8101d12 <BSP_LCD_InitEx+0x21e>
        {
          /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)

          /* Initialize the SDRAM */
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8101ca8:	2000      	movs	r0, #0
 8101caa:	f000 fe59 	bl	8102960 <BSP_SDRAM_Init>
 8101cae:	4603      	mov	r3, r0
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d003      	beq.n	8101cbc <BSP_LCD_InitEx+0x1c8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8101cb4:	f06f 0303 	mvn.w	r3, #3
 8101cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
#endif /* DATA_IN_ExtSDRAM */
          if(ret == BSP_ERROR_NONE)
 8101cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d126      	bne.n	8101d12 <BSP_LCD_InitEx+0x21e>
          {
            /* Configure default LTDC Layer 0. This configuration can be override by calling
            BSP_LCD_ConfigLayer() at application level */
            config.X0          = 0;
 8101cc4:	2300      	movs	r3, #0
 8101cc6:	613b      	str	r3, [r7, #16]
            config.X1          = Width;
 8101cc8:	683b      	ldr	r3, [r7, #0]
 8101cca:	617b      	str	r3, [r7, #20]
            config.Y0          = 0;
 8101ccc:	2300      	movs	r3, #0
 8101cce:	61bb      	str	r3, [r7, #24]
            config.Y1          = Height;
 8101cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101cd4:	61fb      	str	r3, [r7, #28]
            config.PixelFormat = ltdc_pixel_format;
 8101cd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101cda:	623b      	str	r3, [r7, #32]
            config.Address     = LCD_FB_START_ADDRESS;
 8101cdc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8101ce0:	627b      	str	r3, [r7, #36]	; 0x24
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8101ce2:	f107 0310 	add.w	r3, r7, #16
 8101ce6:	461a      	mov	r2, r3
 8101ce8:	2100      	movs	r1, #0
 8101cea:	480f      	ldr	r0, [pc, #60]	; (8101d28 <BSP_LCD_InitEx+0x234>)
 8101cec:	f000 f8f8 	bl	8101ee0 <MX_LTDC_ConfigLayer>
 8101cf0:	4603      	mov	r3, r0
 8101cf2:	2b00      	cmp	r3, #0
 8101cf4:	d003      	beq.n	8101cfe <BSP_LCD_InitEx+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8101cf6:	f06f 0303 	mvn.w	r3, #3
 8101cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            }
            /* By default the reload is activated and executed immediately */
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 8101cfe:	4909      	ldr	r1, [pc, #36]	; (8101d24 <BSP_LCD_InitEx+0x230>)
 8101d00:	68fa      	ldr	r2, [r7, #12]
 8101d02:	4613      	mov	r3, r2
 8101d04:	005b      	lsls	r3, r3, #1
 8101d06:	4413      	add	r3, r2
 8101d08:	00db      	lsls	r3, r3, #3
 8101d0a:	440b      	add	r3, r1
 8101d0c:	3314      	adds	r3, #20
 8101d0e:	2201      	movs	r2, #1
 8101d10:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  return ret;
 8101d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 8101d16:	4618      	mov	r0, r3
 8101d18:	37b8      	adds	r7, #184	; 0xb8
 8101d1a:	46bd      	mov	sp, r7
 8101d1c:	bd80      	pop	{r7, pc}
 8101d1e:	bf00      	nop
 8101d20:	24000b90 	.word	0x24000b90
 8101d24:	24000ca4 	.word	0x24000ca4
 8101d28:	24000bfc 	.word	0x24000bfc
 8101d2c:	50001000 	.word	0x50001000
 8101d30:	24000b94 	.word	0x24000b94
 8101d34:	52001000 	.word	0x52001000
 8101d38:	0810121d 	.word	0x0810121d
 8101d3c:	081013c5 	.word	0x081013c5

08101d40 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8101d40:	b580      	push	{r7, lr}
 8101d42:	b088      	sub	sp, #32
 8101d44:	af00      	add	r7, sp, #0
 8101d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8101d48:	4b18      	ldr	r3, [pc, #96]	; (8101dac <BSP_LCD_Reset+0x6c>)
 8101d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d4e:	4a17      	ldr	r2, [pc, #92]	; (8101dac <BSP_LCD_Reset+0x6c>)
 8101d50:	f043 0301 	orr.w	r3, r3, #1
 8101d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d58:	4b14      	ldr	r3, [pc, #80]	; (8101dac <BSP_LCD_Reset+0x6c>)
 8101d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d5e:	f003 0301 	and.w	r3, r3, #1
 8101d62:	60bb      	str	r3, [r7, #8]
 8101d64:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8101d66:	2304      	movs	r3, #4
 8101d68:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8101d6a:	2301      	movs	r3, #1
 8101d6c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = LCD_RESET_PULL;
 8101d6e:	2300      	movs	r3, #0
 8101d70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101d72:	2303      	movs	r3, #3
 8101d74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8101d76:	f107 030c 	add.w	r3, r7, #12
 8101d7a:	4619      	mov	r1, r3
 8101d7c:	480c      	ldr	r0, [pc, #48]	; (8101db0 <BSP_LCD_Reset+0x70>)
 8101d7e:	f001 fedf 	bl	8103b40 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8101d82:	2200      	movs	r2, #0
 8101d84:	2104      	movs	r1, #4
 8101d86:	480a      	ldr	r0, [pc, #40]	; (8101db0 <BSP_LCD_Reset+0x70>)
 8101d88:	f002 f994 	bl	81040b4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8101d8c:	2014      	movs	r0, #20
 8101d8e:	f001 fab1 	bl	81032f4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8101d92:	2201      	movs	r2, #1
 8101d94:	2104      	movs	r1, #4
 8101d96:	4806      	ldr	r0, [pc, #24]	; (8101db0 <BSP_LCD_Reset+0x70>)
 8101d98:	f002 f98c 	bl	81040b4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8101d9c:	200a      	movs	r0, #10
 8101d9e:	f001 faa9 	bl	81032f4 <HAL_Delay>
}
 8101da2:	bf00      	nop
 8101da4:	3720      	adds	r7, #32
 8101da6:	46bd      	mov	sp, r7
 8101da8:	bd80      	pop	{r7, pc}
 8101daa:	bf00      	nop
 8101dac:	58024400 	.word	0x58024400
 8101db0:	58020000 	.word	0x58020000

08101db4 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	b088      	sub	sp, #32
 8101db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  /* LCD_DISP GPIO configuration */
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8101dba:	4b22      	ldr	r3, [pc, #136]	; (8101e44 <LCD_InitSequence+0x90>)
 8101dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dc0:	4a20      	ldr	r2, [pc, #128]	; (8101e44 <LCD_InitSequence+0x90>)
 8101dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101dca:	4b1e      	ldr	r3, [pc, #120]	; (8101e44 <LCD_InitSequence+0x90>)
 8101dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101dd4:	60bb      	str	r3, [r7, #8]
 8101dd6:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;
 8101dd8:	2380      	movs	r3, #128	; 0x80
 8101dda:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8101ddc:	2301      	movs	r3, #1
 8101dde:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8101de0:	2302      	movs	r3, #2
 8101de2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 8101de4:	f107 030c 	add.w	r3, r7, #12
 8101de8:	4619      	mov	r1, r3
 8101dea:	4817      	ldr	r0, [pc, #92]	; (8101e48 <LCD_InitSequence+0x94>)
 8101dec:	f001 fea8 	bl	8103b40 <HAL_GPIO_Init>
  /* Assert LCD_DISP  pin */
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8101df0:	2201      	movs	r2, #1
 8101df2:	2180      	movs	r1, #128	; 0x80
 8101df4:	4814      	ldr	r0, [pc, #80]	; (8101e48 <LCD_InitSequence+0x94>)
 8101df6:	f002 f95d 	bl	81040b4 <HAL_GPIO_WritePin>

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8101dfa:	4b12      	ldr	r3, [pc, #72]	; (8101e44 <LCD_InitSequence+0x90>)
 8101dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e00:	4a10      	ldr	r2, [pc, #64]	; (8101e44 <LCD_InitSequence+0x90>)
 8101e02:	f043 0301 	orr.w	r3, r3, #1
 8101e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e0a:	4b0e      	ldr	r3, [pc, #56]	; (8101e44 <LCD_InitSequence+0x90>)
 8101e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e10:	f003 0301 	and.w	r3, r3, #1
 8101e14:	607b      	str	r3, [r7, #4]
 8101e16:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8101e18:	2340      	movs	r3, #64	; 0x40
 8101e1a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8101e1c:	2301      	movs	r3, #1
 8101e1e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8101e20:	2302      	movs	r3, #2
 8101e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8101e24:	f107 030c 	add.w	r3, r7, #12
 8101e28:	4619      	mov	r1, r3
 8101e2a:	4808      	ldr	r0, [pc, #32]	; (8101e4c <LCD_InitSequence+0x98>)
 8101e2c:	f001 fe88 	bl	8103b40 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8101e30:	2201      	movs	r2, #1
 8101e32:	2140      	movs	r1, #64	; 0x40
 8101e34:	4805      	ldr	r0, [pc, #20]	; (8101e4c <LCD_InitSequence+0x98>)
 8101e36:	f002 f93d 	bl	81040b4 <HAL_GPIO_WritePin>
}
 8101e3a:	bf00      	nop
 8101e3c:	3720      	adds	r7, #32
 8101e3e:	46bd      	mov	sp, r7
 8101e40:	bd80      	pop	{r7, pc}
 8101e42:	bf00      	nop
 8101e44:	58024400 	.word	0x58024400
 8101e48:	58022800 	.word	0x58022800
 8101e4c:	58020000 	.word	0x58020000

08101e50 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8101e50:	b580      	push	{r7, lr}
 8101e52:	b084      	sub	sp, #16
 8101e54:	af00      	add	r7, sp, #0
 8101e56:	60f8      	str	r0, [r7, #12]
 8101e58:	60b9      	str	r1, [r7, #8]
 8101e5a:	607a      	str	r2, [r7, #4]
  hltdc->Instance                = LTDC;
 8101e5c:	68fb      	ldr	r3, [r7, #12]
 8101e5e:	4a1f      	ldr	r2, [pc, #124]	; (8101edc <MX_LTDC_Init+0x8c>)
 8101e60:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 8101e62:	68fb      	ldr	r3, [r7, #12]
 8101e64:	2200      	movs	r2, #0
 8101e66:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity         = LTDC_VSPOLARITY_AL;
 8101e68:	68fb      	ldr	r3, [r7, #12]
 8101e6a:	2200      	movs	r2, #0
 8101e6c:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 8101e6e:	68fb      	ldr	r3, [r7, #12]
 8101e70:	2200      	movs	r2, #0
 8101e72:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8101e74:	68fb      	ldr	r3, [r7, #12]
 8101e76:	2200      	movs	r2, #0
 8101e78:	611a      	str	r2, [r3, #16]
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 8101e7a:	68fb      	ldr	r3, [r7, #12]
 8101e7c:	221d      	movs	r2, #29
 8101e7e:	615a      	str	r2, [r3, #20]
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 8101e80:	68fb      	ldr	r3, [r7, #12]
 8101e82:	2202      	movs	r2, #2
 8101e84:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8101e86:	68fb      	ldr	r3, [r7, #12]
 8101e88:	228f      	movs	r2, #143	; 0x8f
 8101e8a:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8101e8c:	68fb      	ldr	r3, [r7, #12]
 8101e8e:	2222      	movs	r2, #34	; 0x22
 8101e90:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8101e92:	68fb      	ldr	r3, [r7, #12]
 8101e94:	f240 2202 	movw	r2, #514	; 0x202
 8101e98:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8101e9a:	68fb      	ldr	r3, [r7, #12]
 8101e9c:	f240 320f 	movw	r2, #783	; 0x30f
 8101ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 8101ea2:	68fb      	ldr	r3, [r7, #12]
 8101ea4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8101ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 8101eaa:	68fb      	ldr	r3, [r7, #12]
 8101eac:	f240 321f 	movw	r2, #799	; 0x31f
 8101eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8101eb2:	68fb      	ldr	r3, [r7, #12]
 8101eb4:	22ff      	movs	r2, #255	; 0xff
 8101eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8101eba:	68fb      	ldr	r3, [r7, #12]
 8101ebc:	22ff      	movs	r2, #255	; 0xff
 8101ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8101ec2:	68fb      	ldr	r3, [r7, #12]
 8101ec4:	22ff      	movs	r2, #255	; 0xff
 8101ec6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8101eca:	68f8      	ldr	r0, [r7, #12]
 8101ecc:	f002 ff78 	bl	8104dc0 <HAL_LTDC_Init>
 8101ed0:	4603      	mov	r3, r0
}
 8101ed2:	4618      	mov	r0, r3
 8101ed4:	3710      	adds	r7, #16
 8101ed6:	46bd      	mov	sp, r7
 8101ed8:	bd80      	pop	{r7, pc}
 8101eda:	bf00      	nop
 8101edc:	50001000 	.word	0x50001000

08101ee0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8101ee0:	b580      	push	{r7, lr}
 8101ee2:	b092      	sub	sp, #72	; 0x48
 8101ee4:	af00      	add	r7, sp, #0
 8101ee6:	60f8      	str	r0, [r7, #12]
 8101ee8:	60b9      	str	r1, [r7, #8]
 8101eea:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	685b      	ldr	r3, [r3, #4]
 8101ef6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	689b      	ldr	r3, [r3, #8]
 8101efc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	68db      	ldr	r3, [r3, #12]
 8101f02:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	691b      	ldr	r3, [r3, #16]
 8101f08:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8101f0a:	23ff      	movs	r3, #255	; 0xff
 8101f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8101f0e:	2300      	movs	r3, #0
 8101f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8101f12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8101f16:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8101f18:	2307      	movs	r3, #7
 8101f1a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	695b      	ldr	r3, [r3, #20]
 8101f20:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	685a      	ldr	r2, [r3, #4]
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	681b      	ldr	r3, [r3, #0]
 8101f2a:	1ad3      	subs	r3, r2, r3
 8101f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	68da      	ldr	r2, [r3, #12]
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	689b      	ldr	r3, [r3, #8]
 8101f36:	1ad3      	subs	r3, r2, r3
 8101f38:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8101f3a:	2300      	movs	r3, #0
 8101f3c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8101f40:	2300      	movs	r3, #0
 8101f42:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8101f46:	2300      	movs	r3, #0
 8101f48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8101f4c:	f107 0314 	add.w	r3, r7, #20
 8101f50:	68ba      	ldr	r2, [r7, #8]
 8101f52:	4619      	mov	r1, r3
 8101f54:	68f8      	ldr	r0, [r7, #12]
 8101f56:	f003 f80d 	bl	8104f74 <HAL_LTDC_ConfigLayer>
 8101f5a:	4603      	mov	r3, r0
}
 8101f5c:	4618      	mov	r0, r3
 8101f5e:	3748      	adds	r7, #72	; 0x48
 8101f60:	46bd      	mov	sp, r7
 8101f62:	bd80      	pop	{r7, pc}

08101f64 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8101f64:	b580      	push	{r7, lr}
 8101f66:	b0b2      	sub	sp, #200	; 0xc8
 8101f68:	af00      	add	r7, sp, #0
 8101f6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8101f6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101f70:	f04f 0300 	mov.w	r3, #0
 8101f74:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8101f78:	2305      	movs	r3, #5
 8101f7a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8101f7c:	23a0      	movs	r3, #160	; 0xa0
 8101f7e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8101f80:	2302      	movs	r3, #2
 8101f82:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8101f84:	2302      	movs	r3, #2
 8101f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 32;
 8101f88:	2320      	movs	r3, #32
 8101f8a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8101f90:	2300      	movs	r3, #0
 8101f92:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8101f94:	f107 0308 	add.w	r3, r7, #8
 8101f98:	4618      	mov	r0, r3
 8101f9a:	f004 fb09 	bl	81065b0 <HAL_RCCEx_PeriphCLKConfig>
 8101f9e:	4603      	mov	r3, r0
}
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	37c8      	adds	r7, #200	; 0xc8
 8101fa4:	46bd      	mov	sp, r7
 8101fa6:	bd80      	pop	{r7, pc}

08101fa8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8101fa8:	b480      	push	{r7}
 8101faa:	b085      	sub	sp, #20
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	6078      	str	r0, [r7, #4]
 8101fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8101fb2:	2300      	movs	r3, #0
 8101fb4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	2b00      	cmp	r3, #0
 8101fba:	d003      	beq.n	8101fc4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8101fbc:	f06f 0301 	mvn.w	r3, #1
 8101fc0:	60fb      	str	r3, [r7, #12]
 8101fc2:	e00a      	b.n	8101fda <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8101fc4:	4908      	ldr	r1, [pc, #32]	; (8101fe8 <BSP_LCD_GetPixelFormat+0x40>)
 8101fc6:	687a      	ldr	r2, [r7, #4]
 8101fc8:	4613      	mov	r3, r2
 8101fca:	005b      	lsls	r3, r3, #1
 8101fcc:	4413      	add	r3, r2
 8101fce:	00db      	lsls	r3, r3, #3
 8101fd0:	440b      	add	r3, r1
 8101fd2:	330c      	adds	r3, #12
 8101fd4:	681a      	ldr	r2, [r3, #0]
 8101fd6:	683b      	ldr	r3, [r7, #0]
 8101fd8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8101fda:	68fb      	ldr	r3, [r7, #12]
}
 8101fdc:	4618      	mov	r0, r3
 8101fde:	3714      	adds	r7, #20
 8101fe0:	46bd      	mov	sp, r7
 8101fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe6:	4770      	bx	lr
 8101fe8:	24000ca4 	.word	0x24000ca4

08101fec <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8101fec:	b480      	push	{r7}
 8101fee:	b085      	sub	sp, #20
 8101ff0:	af00      	add	r7, sp, #0
 8101ff2:	6078      	str	r0, [r7, #4]
 8101ff4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8101ff6:	2300      	movs	r3, #0
 8101ff8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d003      	beq.n	8102008 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8102000:	f06f 0301 	mvn.w	r3, #1
 8102004:	60fb      	str	r3, [r7, #12]
 8102006:	e009      	b.n	810201c <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8102008:	4908      	ldr	r1, [pc, #32]	; (810202c <BSP_LCD_SetActiveLayer+0x40>)
 810200a:	687a      	ldr	r2, [r7, #4]
 810200c:	4613      	mov	r3, r2
 810200e:	005b      	lsls	r3, r3, #1
 8102010:	4413      	add	r3, r2
 8102012:	00db      	lsls	r3, r3, #3
 8102014:	440b      	add	r3, r1
 8102016:	3308      	adds	r3, #8
 8102018:	683a      	ldr	r2, [r7, #0]
 810201a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 810201c:	68fb      	ldr	r3, [r7, #12]
}
 810201e:	4618      	mov	r0, r3
 8102020:	3714      	adds	r7, #20
 8102022:	46bd      	mov	sp, r7
 8102024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102028:	4770      	bx	lr
 810202a:	bf00      	nop
 810202c:	24000ca4 	.word	0x24000ca4

08102030 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8102030:	b480      	push	{r7}
 8102032:	b085      	sub	sp, #20
 8102034:	af00      	add	r7, sp, #0
 8102036:	6078      	str	r0, [r7, #4]
 8102038:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 810203a:	2300      	movs	r3, #0
 810203c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	2b00      	cmp	r3, #0
 8102042:	d003      	beq.n	810204c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8102044:	f06f 0301 	mvn.w	r3, #1
 8102048:	60fb      	str	r3, [r7, #12]
 810204a:	e009      	b.n	8102060 <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 810204c:	4908      	ldr	r1, [pc, #32]	; (8102070 <BSP_LCD_GetXSize+0x40>)
 810204e:	687a      	ldr	r2, [r7, #4]
 8102050:	4613      	mov	r3, r2
 8102052:	005b      	lsls	r3, r3, #1
 8102054:	4413      	add	r3, r2
 8102056:	00db      	lsls	r3, r3, #3
 8102058:	440b      	add	r3, r1
 810205a:	681a      	ldr	r2, [r3, #0]
 810205c:	683b      	ldr	r3, [r7, #0]
 810205e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8102060:	68fb      	ldr	r3, [r7, #12]
}
 8102062:	4618      	mov	r0, r3
 8102064:	3714      	adds	r7, #20
 8102066:	46bd      	mov	sp, r7
 8102068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810206c:	4770      	bx	lr
 810206e:	bf00      	nop
 8102070:	24000ca4 	.word	0x24000ca4

08102074 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8102074:	b480      	push	{r7}
 8102076:	b085      	sub	sp, #20
 8102078:	af00      	add	r7, sp, #0
 810207a:	6078      	str	r0, [r7, #4]
 810207c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 810207e:	2300      	movs	r3, #0
 8102080:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	2b00      	cmp	r3, #0
 8102086:	d003      	beq.n	8102090 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8102088:	f06f 0301 	mvn.w	r3, #1
 810208c:	60fb      	str	r3, [r7, #12]
 810208e:	e00a      	b.n	81020a6 <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8102090:	4908      	ldr	r1, [pc, #32]	; (81020b4 <BSP_LCD_GetYSize+0x40>)
 8102092:	687a      	ldr	r2, [r7, #4]
 8102094:	4613      	mov	r3, r2
 8102096:	005b      	lsls	r3, r3, #1
 8102098:	4413      	add	r3, r2
 810209a:	00db      	lsls	r3, r3, #3
 810209c:	440b      	add	r3, r1
 810209e:	3304      	adds	r3, #4
 81020a0:	681a      	ldr	r2, [r3, #0]
 81020a2:	683b      	ldr	r3, [r7, #0]
 81020a4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 81020a6:	68fb      	ldr	r3, [r7, #12]
}
 81020a8:	4618      	mov	r0, r3
 81020aa:	3714      	adds	r7, #20
 81020ac:	46bd      	mov	sp, r7
 81020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b2:	4770      	bx	lr
 81020b4:	24000ca4 	.word	0x24000ca4

081020b8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 81020b8:	b580      	push	{r7, lr}
 81020ba:	b08e      	sub	sp, #56	; 0x38
 81020bc:	af02      	add	r7, sp, #8
 81020be:	60f8      	str	r0, [r7, #12]
 81020c0:	60b9      	str	r1, [r7, #8]
 81020c2:	607a      	str	r2, [r7, #4]
 81020c4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 81020c6:	2300      	movs	r3, #0
 81020c8:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 81020ca:	683b      	ldr	r3, [r7, #0]
 81020cc:	330a      	adds	r3, #10
 81020ce:	781b      	ldrb	r3, [r3, #0]
 81020d0:	461a      	mov	r2, r3
 81020d2:	683b      	ldr	r3, [r7, #0]
 81020d4:	330b      	adds	r3, #11
 81020d6:	781b      	ldrb	r3, [r3, #0]
 81020d8:	021b      	lsls	r3, r3, #8
 81020da:	441a      	add	r2, r3
 81020dc:	683b      	ldr	r3, [r7, #0]
 81020de:	330c      	adds	r3, #12
 81020e0:	781b      	ldrb	r3, [r3, #0]
 81020e2:	041b      	lsls	r3, r3, #16
 81020e4:	441a      	add	r2, r3
 81020e6:	683b      	ldr	r3, [r7, #0]
 81020e8:	330d      	adds	r3, #13
 81020ea:	781b      	ldrb	r3, [r3, #0]
 81020ec:	061b      	lsls	r3, r3, #24
 81020ee:	4413      	add	r3, r2
 81020f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 81020f2:	683b      	ldr	r3, [r7, #0]
 81020f4:	3312      	adds	r3, #18
 81020f6:	781b      	ldrb	r3, [r3, #0]
 81020f8:	461a      	mov	r2, r3
 81020fa:	683b      	ldr	r3, [r7, #0]
 81020fc:	3313      	adds	r3, #19
 81020fe:	781b      	ldrb	r3, [r3, #0]
 8102100:	021b      	lsls	r3, r3, #8
 8102102:	441a      	add	r2, r3
 8102104:	683b      	ldr	r3, [r7, #0]
 8102106:	3314      	adds	r3, #20
 8102108:	781b      	ldrb	r3, [r3, #0]
 810210a:	041b      	lsls	r3, r3, #16
 810210c:	441a      	add	r2, r3
 810210e:	683b      	ldr	r3, [r7, #0]
 8102110:	3315      	adds	r3, #21
 8102112:	781b      	ldrb	r3, [r3, #0]
 8102114:	061b      	lsls	r3, r3, #24
 8102116:	4413      	add	r3, r2
 8102118:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 810211a:	683b      	ldr	r3, [r7, #0]
 810211c:	3316      	adds	r3, #22
 810211e:	781b      	ldrb	r3, [r3, #0]
 8102120:	461a      	mov	r2, r3
 8102122:	683b      	ldr	r3, [r7, #0]
 8102124:	3317      	adds	r3, #23
 8102126:	781b      	ldrb	r3, [r3, #0]
 8102128:	021b      	lsls	r3, r3, #8
 810212a:	441a      	add	r2, r3
 810212c:	683b      	ldr	r3, [r7, #0]
 810212e:	3318      	adds	r3, #24
 8102130:	781b      	ldrb	r3, [r3, #0]
 8102132:	041b      	lsls	r3, r3, #16
 8102134:	441a      	add	r2, r3
 8102136:	683b      	ldr	r3, [r7, #0]
 8102138:	3319      	adds	r3, #25
 810213a:	781b      	ldrb	r3, [r3, #0]
 810213c:	061b      	lsls	r3, r3, #24
 810213e:	4413      	add	r3, r2
 8102140:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8102142:	683b      	ldr	r3, [r7, #0]
 8102144:	331c      	adds	r3, #28
 8102146:	781b      	ldrb	r3, [r3, #0]
 8102148:	461a      	mov	r2, r3
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	331d      	adds	r3, #29
 810214e:	781b      	ldrb	r3, [r3, #0]
 8102150:	021b      	lsls	r3, r3, #8
 8102152:	4413      	add	r3, r2
 8102154:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8102156:	4938      	ldr	r1, [pc, #224]	; (8102238 <BSP_LCD_DrawBitmap+0x180>)
 8102158:	68fa      	ldr	r2, [r7, #12]
 810215a:	4613      	mov	r3, r2
 810215c:	005b      	lsls	r3, r3, #1
 810215e:	4413      	add	r3, r2
 8102160:	00db      	lsls	r3, r3, #3
 8102162:	440b      	add	r3, r1
 8102164:	3308      	adds	r3, #8
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	4a34      	ldr	r2, [pc, #208]	; (810223c <BSP_LCD_DrawBitmap+0x184>)
 810216a:	2134      	movs	r1, #52	; 0x34
 810216c:	fb01 f303 	mul.w	r3, r1, r3
 8102170:	4413      	add	r3, r2
 8102172:	335c      	adds	r3, #92	; 0x5c
 8102174:	6819      	ldr	r1, [r3, #0]
 8102176:	4830      	ldr	r0, [pc, #192]	; (8102238 <BSP_LCD_DrawBitmap+0x180>)
 8102178:	68fa      	ldr	r2, [r7, #12]
 810217a:	4613      	mov	r3, r2
 810217c:	005b      	lsls	r3, r3, #1
 810217e:	4413      	add	r3, r2
 8102180:	00db      	lsls	r3, r3, #3
 8102182:	4403      	add	r3, r0
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	687a      	ldr	r2, [r7, #4]
 8102188:	fb03 f202 	mul.w	r2, r3, r2
 810218c:	68bb      	ldr	r3, [r7, #8]
 810218e:	4413      	add	r3, r2
 8102190:	4a2b      	ldr	r2, [pc, #172]	; (8102240 <BSP_LCD_DrawBitmap+0x188>)
 8102192:	6812      	ldr	r2, [r2, #0]
 8102194:	fb02 f303 	mul.w	r3, r2, r3
 8102198:	440b      	add	r3, r1
 810219a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 810219c:	693b      	ldr	r3, [r7, #16]
 810219e:	3b20      	subs	r3, #32
 81021a0:	2b07      	cmp	r3, #7
 81021a2:	d802      	bhi.n	81021aa <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 81021a4:	2300      	movs	r3, #0
 81021a6:	627b      	str	r3, [r7, #36]	; 0x24
 81021a8:	e008      	b.n	81021bc <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 81021aa:	693b      	ldr	r3, [r7, #16]
 81021ac:	3b10      	subs	r3, #16
 81021ae:	2b07      	cmp	r3, #7
 81021b0:	d802      	bhi.n	81021b8 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 81021b2:	2302      	movs	r3, #2
 81021b4:	627b      	str	r3, [r7, #36]	; 0x24
 81021b6:	e001      	b.n	81021bc <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 81021b8:	2301      	movs	r3, #1
 81021ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 81021bc:	697b      	ldr	r3, [r7, #20]
 81021be:	3b01      	subs	r3, #1
 81021c0:	69ba      	ldr	r2, [r7, #24]
 81021c2:	fb02 f303 	mul.w	r3, r2, r3
 81021c6:	693a      	ldr	r2, [r7, #16]
 81021c8:	08d2      	lsrs	r2, r2, #3
 81021ca:	fb03 f202 	mul.w	r2, r3, r2
 81021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021d0:	4413      	add	r3, r2
 81021d2:	683a      	ldr	r2, [r7, #0]
 81021d4:	4413      	add	r3, r2
 81021d6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 81021d8:	2300      	movs	r3, #0
 81021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 81021dc:	e022      	b.n	8102224 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 81021de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81021e2:	9300      	str	r3, [sp, #0]
 81021e4:	69bb      	ldr	r3, [r7, #24]
 81021e6:	6a39      	ldr	r1, [r7, #32]
 81021e8:	68f8      	ldr	r0, [r7, #12]
 81021ea:	f000 faa9 	bl	8102740 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 81021ee:	4912      	ldr	r1, [pc, #72]	; (8102238 <BSP_LCD_DrawBitmap+0x180>)
 81021f0:	68fa      	ldr	r2, [r7, #12]
 81021f2:	4613      	mov	r3, r2
 81021f4:	005b      	lsls	r3, r3, #1
 81021f6:	4413      	add	r3, r2
 81021f8:	00db      	lsls	r3, r3, #3
 81021fa:	440b      	add	r3, r1
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	4a10      	ldr	r2, [pc, #64]	; (8102240 <BSP_LCD_DrawBitmap+0x188>)
 8102200:	6812      	ldr	r2, [r2, #0]
 8102202:	fb02 f303 	mul.w	r3, r2, r3
 8102206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102208:	4413      	add	r3, r2
 810220a:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 810220c:	693b      	ldr	r3, [r7, #16]
 810220e:	08db      	lsrs	r3, r3, #3
 8102210:	69ba      	ldr	r2, [r7, #24]
 8102212:	fb02 f303 	mul.w	r3, r2, r3
 8102216:	425b      	negs	r3, r3
 8102218:	6a3a      	ldr	r2, [r7, #32]
 810221a:	4413      	add	r3, r2
 810221c:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 810221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102220:	3301      	adds	r3, #1
 8102222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102226:	697b      	ldr	r3, [r7, #20]
 8102228:	429a      	cmp	r2, r3
 810222a:	d3d8      	bcc.n	81021de <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 810222c:	69fb      	ldr	r3, [r7, #28]
}
 810222e:	4618      	mov	r0, r3
 8102230:	3730      	adds	r7, #48	; 0x30
 8102232:	46bd      	mov	sp, r7
 8102234:	bd80      	pop	{r7, pc}
 8102236:	bf00      	nop
 8102238:	24000ca4 	.word	0x24000ca4
 810223c:	24000bfc 	.word	0x24000bfc
 8102240:	24000b90 	.word	0x24000b90

08102244 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8102244:	b580      	push	{r7, lr}
 8102246:	b088      	sub	sp, #32
 8102248:	af00      	add	r7, sp, #0
 810224a:	60f8      	str	r0, [r7, #12]
 810224c:	60b9      	str	r1, [r7, #8]
 810224e:	607a      	str	r2, [r7, #4]
 8102250:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8102252:	2300      	movs	r3, #0
 8102254:	61fb      	str	r3, [r7, #28]
 8102256:	e02e      	b.n	81022b6 <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8102258:	2300      	movs	r3, #0
 810225a:	61bb      	str	r3, [r7, #24]
 810225c:	e024      	b.n	81022a8 <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 810225e:	683b      	ldr	r3, [r7, #0]
 8102260:	781b      	ldrb	r3, [r3, #0]
 8102262:	461a      	mov	r2, r3
 8102264:	683b      	ldr	r3, [r7, #0]
 8102266:	3301      	adds	r3, #1
 8102268:	781b      	ldrb	r3, [r3, #0]
 810226a:	021b      	lsls	r3, r3, #8
 810226c:	431a      	orrs	r2, r3
 810226e:	683b      	ldr	r3, [r7, #0]
 8102270:	3302      	adds	r3, #2
 8102272:	781b      	ldrb	r3, [r3, #0]
 8102274:	041b      	lsls	r3, r3, #16
 8102276:	431a      	orrs	r2, r3
 8102278:	683b      	ldr	r3, [r7, #0]
 810227a:	3303      	adds	r3, #3
 810227c:	781b      	ldrb	r3, [r3, #0]
 810227e:	061b      	lsls	r3, r3, #24
 8102280:	4313      	orrs	r3, r2
 8102282:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8102284:	68ba      	ldr	r2, [r7, #8]
 8102286:	69bb      	ldr	r3, [r7, #24]
 8102288:	18d1      	adds	r1, r2, r3
 810228a:	687a      	ldr	r2, [r7, #4]
 810228c:	69fb      	ldr	r3, [r7, #28]
 810228e:	441a      	add	r2, r3
 8102290:	697b      	ldr	r3, [r7, #20]
 8102292:	68f8      	ldr	r0, [r7, #12]
 8102294:	f000 f976 	bl	8102584 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8102298:	4b0b      	ldr	r3, [pc, #44]	; (81022c8 <BSP_LCD_FillRGBRect+0x84>)
 810229a:	681b      	ldr	r3, [r3, #0]
 810229c:	683a      	ldr	r2, [r7, #0]
 810229e:	4413      	add	r3, r2
 81022a0:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 81022a2:	69bb      	ldr	r3, [r7, #24]
 81022a4:	3301      	adds	r3, #1
 81022a6:	61bb      	str	r3, [r7, #24]
 81022a8:	69ba      	ldr	r2, [r7, #24]
 81022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022ac:	429a      	cmp	r2, r3
 81022ae:	d3d6      	bcc.n	810225e <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 81022b0:	69fb      	ldr	r3, [r7, #28]
 81022b2:	3301      	adds	r3, #1
 81022b4:	61fb      	str	r3, [r7, #28]
 81022b6:	69fa      	ldr	r2, [r7, #28]
 81022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81022ba:	429a      	cmp	r2, r3
 81022bc:	d3cc      	bcc.n	8102258 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 81022be:	2300      	movs	r3, #0
}
 81022c0:	4618      	mov	r0, r3
 81022c2:	3720      	adds	r7, #32
 81022c4:	46bd      	mov	sp, r7
 81022c6:	bd80      	pop	{r7, pc}
 81022c8:	24000b90 	.word	0x24000b90

081022cc <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 81022cc:	b580      	push	{r7, lr}
 81022ce:	b08a      	sub	sp, #40	; 0x28
 81022d0:	af04      	add	r7, sp, #16
 81022d2:	60f8      	str	r0, [r7, #12]
 81022d4:	60b9      	str	r1, [r7, #8]
 81022d6:	607a      	str	r2, [r7, #4]
 81022d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 81022da:	491e      	ldr	r1, [pc, #120]	; (8102354 <BSP_LCD_DrawHLine+0x88>)
 81022dc:	68fa      	ldr	r2, [r7, #12]
 81022de:	4613      	mov	r3, r2
 81022e0:	005b      	lsls	r3, r3, #1
 81022e2:	4413      	add	r3, r2
 81022e4:	00db      	lsls	r3, r3, #3
 81022e6:	440b      	add	r3, r1
 81022e8:	3308      	adds	r3, #8
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	4a1a      	ldr	r2, [pc, #104]	; (8102358 <BSP_LCD_DrawHLine+0x8c>)
 81022ee:	2134      	movs	r1, #52	; 0x34
 81022f0:	fb01 f303 	mul.w	r3, r1, r3
 81022f4:	4413      	add	r3, r2
 81022f6:	335c      	adds	r3, #92	; 0x5c
 81022f8:	6819      	ldr	r1, [r3, #0]
 81022fa:	4816      	ldr	r0, [pc, #88]	; (8102354 <BSP_LCD_DrawHLine+0x88>)
 81022fc:	68fa      	ldr	r2, [r7, #12]
 81022fe:	4613      	mov	r3, r2
 8102300:	005b      	lsls	r3, r3, #1
 8102302:	4413      	add	r3, r2
 8102304:	00db      	lsls	r3, r3, #3
 8102306:	4403      	add	r3, r0
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	687a      	ldr	r2, [r7, #4]
 810230c:	fb03 f202 	mul.w	r2, r3, r2
 8102310:	68bb      	ldr	r3, [r7, #8]
 8102312:	4413      	add	r3, r2
 8102314:	4a11      	ldr	r2, [pc, #68]	; (810235c <BSP_LCD_DrawHLine+0x90>)
 8102316:	6812      	ldr	r2, [r2, #0]
 8102318:	fb02 f303 	mul.w	r3, r2, r3
 810231c:	440b      	add	r3, r1
 810231e:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8102320:	490c      	ldr	r1, [pc, #48]	; (8102354 <BSP_LCD_DrawHLine+0x88>)
 8102322:	68fa      	ldr	r2, [r7, #12]
 8102324:	4613      	mov	r3, r2
 8102326:	005b      	lsls	r3, r3, #1
 8102328:	4413      	add	r3, r2
 810232a:	00db      	lsls	r3, r3, #3
 810232c:	440b      	add	r3, r1
 810232e:	3308      	adds	r3, #8
 8102330:	6819      	ldr	r1, [r3, #0]
 8102332:	697a      	ldr	r2, [r7, #20]
 8102334:	6a3b      	ldr	r3, [r7, #32]
 8102336:	9302      	str	r3, [sp, #8]
 8102338:	2300      	movs	r3, #0
 810233a:	9301      	str	r3, [sp, #4]
 810233c:	2301      	movs	r3, #1
 810233e:	9300      	str	r3, [sp, #0]
 8102340:	683b      	ldr	r3, [r7, #0]
 8102342:	68f8      	ldr	r0, [r7, #12]
 8102344:	f000 f988 	bl	8102658 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8102348:	2300      	movs	r3, #0
}
 810234a:	4618      	mov	r0, r3
 810234c:	3718      	adds	r7, #24
 810234e:	46bd      	mov	sp, r7
 8102350:	bd80      	pop	{r7, pc}
 8102352:	bf00      	nop
 8102354:	24000ca4 	.word	0x24000ca4
 8102358:	24000bfc 	.word	0x24000bfc
 810235c:	24000b90 	.word	0x24000b90

08102360 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8102360:	b590      	push	{r4, r7, lr}
 8102362:	b08b      	sub	sp, #44	; 0x2c
 8102364:	af04      	add	r7, sp, #16
 8102366:	60f8      	str	r0, [r7, #12]
 8102368:	60b9      	str	r1, [r7, #8]
 810236a:	607a      	str	r2, [r7, #4]
 810236c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 810236e:	4922      	ldr	r1, [pc, #136]	; (81023f8 <BSP_LCD_DrawVLine+0x98>)
 8102370:	68fa      	ldr	r2, [r7, #12]
 8102372:	4613      	mov	r3, r2
 8102374:	005b      	lsls	r3, r3, #1
 8102376:	4413      	add	r3, r2
 8102378:	00db      	lsls	r3, r3, #3
 810237a:	440b      	add	r3, r1
 810237c:	3308      	adds	r3, #8
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a1e      	ldr	r2, [pc, #120]	; (81023fc <BSP_LCD_DrawVLine+0x9c>)
 8102382:	2134      	movs	r1, #52	; 0x34
 8102384:	fb01 f303 	mul.w	r3, r1, r3
 8102388:	4413      	add	r3, r2
 810238a:	335c      	adds	r3, #92	; 0x5c
 810238c:	6819      	ldr	r1, [r3, #0]
 810238e:	481a      	ldr	r0, [pc, #104]	; (81023f8 <BSP_LCD_DrawVLine+0x98>)
 8102390:	68fa      	ldr	r2, [r7, #12]
 8102392:	4613      	mov	r3, r2
 8102394:	005b      	lsls	r3, r3, #1
 8102396:	4413      	add	r3, r2
 8102398:	00db      	lsls	r3, r3, #3
 810239a:	4403      	add	r3, r0
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	687a      	ldr	r2, [r7, #4]
 81023a0:	fb03 f202 	mul.w	r2, r3, r2
 81023a4:	68bb      	ldr	r3, [r7, #8]
 81023a6:	4413      	add	r3, r2
 81023a8:	4a15      	ldr	r2, [pc, #84]	; (8102400 <BSP_LCD_DrawVLine+0xa0>)
 81023aa:	6812      	ldr	r2, [r2, #0]
 81023ac:	fb02 f303 	mul.w	r3, r2, r3
 81023b0:	440b      	add	r3, r1
 81023b2:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 81023b4:	4910      	ldr	r1, [pc, #64]	; (81023f8 <BSP_LCD_DrawVLine+0x98>)
 81023b6:	68fa      	ldr	r2, [r7, #12]
 81023b8:	4613      	mov	r3, r2
 81023ba:	005b      	lsls	r3, r3, #1
 81023bc:	4413      	add	r3, r2
 81023be:	00db      	lsls	r3, r3, #3
 81023c0:	440b      	add	r3, r1
 81023c2:	3308      	adds	r3, #8
 81023c4:	6819      	ldr	r1, [r3, #0]
 81023c6:	6978      	ldr	r0, [r7, #20]
 81023c8:	4c0b      	ldr	r4, [pc, #44]	; (81023f8 <BSP_LCD_DrawVLine+0x98>)
 81023ca:	68fa      	ldr	r2, [r7, #12]
 81023cc:	4613      	mov	r3, r2
 81023ce:	005b      	lsls	r3, r3, #1
 81023d0:	4413      	add	r3, r2
 81023d2:	00db      	lsls	r3, r3, #3
 81023d4:	4423      	add	r3, r4
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	3b01      	subs	r3, #1
 81023da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81023dc:	9202      	str	r2, [sp, #8]
 81023de:	9301      	str	r3, [sp, #4]
 81023e0:	683b      	ldr	r3, [r7, #0]
 81023e2:	9300      	str	r3, [sp, #0]
 81023e4:	2301      	movs	r3, #1
 81023e6:	4602      	mov	r2, r0
 81023e8:	68f8      	ldr	r0, [r7, #12]
 81023ea:	f000 f935 	bl	8102658 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 81023ee:	2300      	movs	r3, #0
}
 81023f0:	4618      	mov	r0, r3
 81023f2:	371c      	adds	r7, #28
 81023f4:	46bd      	mov	sp, r7
 81023f6:	bd90      	pop	{r4, r7, pc}
 81023f8:	24000ca4 	.word	0x24000ca4
 81023fc:	24000bfc 	.word	0x24000bfc
 8102400:	24000b90 	.word	0x24000b90

08102404 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8102404:	b590      	push	{r4, r7, lr}
 8102406:	b08b      	sub	sp, #44	; 0x2c
 8102408:	af04      	add	r7, sp, #16
 810240a:	60f8      	str	r0, [r7, #12]
 810240c:	60b9      	str	r1, [r7, #8]
 810240e:	607a      	str	r2, [r7, #4]
 8102410:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8102412:	4923      	ldr	r1, [pc, #140]	; (81024a0 <BSP_LCD_FillRect+0x9c>)
 8102414:	68fa      	ldr	r2, [r7, #12]
 8102416:	4613      	mov	r3, r2
 8102418:	005b      	lsls	r3, r3, #1
 810241a:	4413      	add	r3, r2
 810241c:	00db      	lsls	r3, r3, #3
 810241e:	440b      	add	r3, r1
 8102420:	3308      	adds	r3, #8
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a1f      	ldr	r2, [pc, #124]	; (81024a4 <BSP_LCD_FillRect+0xa0>)
 8102426:	2134      	movs	r1, #52	; 0x34
 8102428:	fb01 f303 	mul.w	r3, r1, r3
 810242c:	4413      	add	r3, r2
 810242e:	335c      	adds	r3, #92	; 0x5c
 8102430:	6819      	ldr	r1, [r3, #0]
 8102432:	481b      	ldr	r0, [pc, #108]	; (81024a0 <BSP_LCD_FillRect+0x9c>)
 8102434:	68fa      	ldr	r2, [r7, #12]
 8102436:	4613      	mov	r3, r2
 8102438:	005b      	lsls	r3, r3, #1
 810243a:	4413      	add	r3, r2
 810243c:	00db      	lsls	r3, r3, #3
 810243e:	4403      	add	r3, r0
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	687a      	ldr	r2, [r7, #4]
 8102444:	fb03 f202 	mul.w	r2, r3, r2
 8102448:	68bb      	ldr	r3, [r7, #8]
 810244a:	4413      	add	r3, r2
 810244c:	4a16      	ldr	r2, [pc, #88]	; (81024a8 <BSP_LCD_FillRect+0xa4>)
 810244e:	6812      	ldr	r2, [r2, #0]
 8102450:	fb02 f303 	mul.w	r3, r2, r3
 8102454:	440b      	add	r3, r1
 8102456:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8102458:	4911      	ldr	r1, [pc, #68]	; (81024a0 <BSP_LCD_FillRect+0x9c>)
 810245a:	68fa      	ldr	r2, [r7, #12]
 810245c:	4613      	mov	r3, r2
 810245e:	005b      	lsls	r3, r3, #1
 8102460:	4413      	add	r3, r2
 8102462:	00db      	lsls	r3, r3, #3
 8102464:	440b      	add	r3, r1
 8102466:	3308      	adds	r3, #8
 8102468:	6819      	ldr	r1, [r3, #0]
 810246a:	6978      	ldr	r0, [r7, #20]
 810246c:	4c0c      	ldr	r4, [pc, #48]	; (81024a0 <BSP_LCD_FillRect+0x9c>)
 810246e:	68fa      	ldr	r2, [r7, #12]
 8102470:	4613      	mov	r3, r2
 8102472:	005b      	lsls	r3, r3, #1
 8102474:	4413      	add	r3, r2
 8102476:	00db      	lsls	r3, r3, #3
 8102478:	4423      	add	r3, r4
 810247a:	681a      	ldr	r2, [r3, #0]
 810247c:	683b      	ldr	r3, [r7, #0]
 810247e:	1ad3      	subs	r3, r2, r3
 8102480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102482:	9202      	str	r2, [sp, #8]
 8102484:	9301      	str	r3, [sp, #4]
 8102486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102488:	9300      	str	r3, [sp, #0]
 810248a:	683b      	ldr	r3, [r7, #0]
 810248c:	4602      	mov	r2, r0
 810248e:	68f8      	ldr	r0, [r7, #12]
 8102490:	f000 f8e2 	bl	8102658 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8102494:	2300      	movs	r3, #0
}
 8102496:	4618      	mov	r0, r3
 8102498:	371c      	adds	r7, #28
 810249a:	46bd      	mov	sp, r7
 810249c:	bd90      	pop	{r4, r7, pc}
 810249e:	bf00      	nop
 81024a0:	24000ca4 	.word	0x24000ca4
 81024a4:	24000bfc 	.word	0x24000bfc
 81024a8:	24000b90 	.word	0x24000b90

081024ac <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 81024ac:	b480      	push	{r7}
 81024ae:	b085      	sub	sp, #20
 81024b0:	af00      	add	r7, sp, #0
 81024b2:	60f8      	str	r0, [r7, #12]
 81024b4:	60b9      	str	r1, [r7, #8]
 81024b6:	607a      	str	r2, [r7, #4]
 81024b8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 81024ba:	4930      	ldr	r1, [pc, #192]	; (810257c <BSP_LCD_ReadPixel+0xd0>)
 81024bc:	68fa      	ldr	r2, [r7, #12]
 81024be:	4613      	mov	r3, r2
 81024c0:	005b      	lsls	r3, r3, #1
 81024c2:	4413      	add	r3, r2
 81024c4:	00db      	lsls	r3, r3, #3
 81024c6:	440b      	add	r3, r1
 81024c8:	3308      	adds	r3, #8
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	4a2c      	ldr	r2, [pc, #176]	; (8102580 <BSP_LCD_ReadPixel+0xd4>)
 81024ce:	2134      	movs	r1, #52	; 0x34
 81024d0:	fb01 f303 	mul.w	r3, r1, r3
 81024d4:	4413      	add	r3, r2
 81024d6:	3348      	adds	r3, #72	; 0x48
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d122      	bne.n	8102524 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 81024de:	4927      	ldr	r1, [pc, #156]	; (810257c <BSP_LCD_ReadPixel+0xd0>)
 81024e0:	68fa      	ldr	r2, [r7, #12]
 81024e2:	4613      	mov	r3, r2
 81024e4:	005b      	lsls	r3, r3, #1
 81024e6:	4413      	add	r3, r2
 81024e8:	00db      	lsls	r3, r3, #3
 81024ea:	440b      	add	r3, r1
 81024ec:	3308      	adds	r3, #8
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4a23      	ldr	r2, [pc, #140]	; (8102580 <BSP_LCD_ReadPixel+0xd4>)
 81024f2:	2134      	movs	r1, #52	; 0x34
 81024f4:	fb01 f303 	mul.w	r3, r1, r3
 81024f8:	4413      	add	r3, r2
 81024fa:	335c      	adds	r3, #92	; 0x5c
 81024fc:	6819      	ldr	r1, [r3, #0]
 81024fe:	481f      	ldr	r0, [pc, #124]	; (810257c <BSP_LCD_ReadPixel+0xd0>)
 8102500:	68fa      	ldr	r2, [r7, #12]
 8102502:	4613      	mov	r3, r2
 8102504:	005b      	lsls	r3, r3, #1
 8102506:	4413      	add	r3, r2
 8102508:	00db      	lsls	r3, r3, #3
 810250a:	4403      	add	r3, r0
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	687a      	ldr	r2, [r7, #4]
 8102510:	fb03 f202 	mul.w	r2, r3, r2
 8102514:	68bb      	ldr	r3, [r7, #8]
 8102516:	4413      	add	r3, r2
 8102518:	009b      	lsls	r3, r3, #2
 810251a:	440b      	add	r3, r1
 810251c:	681a      	ldr	r2, [r3, #0]
 810251e:	683b      	ldr	r3, [r7, #0]
 8102520:	601a      	str	r2, [r3, #0]
 8102522:	e023      	b.n	810256c <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8102524:	4915      	ldr	r1, [pc, #84]	; (810257c <BSP_LCD_ReadPixel+0xd0>)
 8102526:	68fa      	ldr	r2, [r7, #12]
 8102528:	4613      	mov	r3, r2
 810252a:	005b      	lsls	r3, r3, #1
 810252c:	4413      	add	r3, r2
 810252e:	00db      	lsls	r3, r3, #3
 8102530:	440b      	add	r3, r1
 8102532:	3308      	adds	r3, #8
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	4a12      	ldr	r2, [pc, #72]	; (8102580 <BSP_LCD_ReadPixel+0xd4>)
 8102538:	2134      	movs	r1, #52	; 0x34
 810253a:	fb01 f303 	mul.w	r3, r1, r3
 810253e:	4413      	add	r3, r2
 8102540:	335c      	adds	r3, #92	; 0x5c
 8102542:	6819      	ldr	r1, [r3, #0]
 8102544:	480d      	ldr	r0, [pc, #52]	; (810257c <BSP_LCD_ReadPixel+0xd0>)
 8102546:	68fa      	ldr	r2, [r7, #12]
 8102548:	4613      	mov	r3, r2
 810254a:	005b      	lsls	r3, r3, #1
 810254c:	4413      	add	r3, r2
 810254e:	00db      	lsls	r3, r3, #3
 8102550:	4403      	add	r3, r0
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	687a      	ldr	r2, [r7, #4]
 8102556:	fb03 f202 	mul.w	r2, r3, r2
 810255a:	68bb      	ldr	r3, [r7, #8]
 810255c:	4413      	add	r3, r2
 810255e:	005b      	lsls	r3, r3, #1
 8102560:	440b      	add	r3, r1
 8102562:	881b      	ldrh	r3, [r3, #0]
 8102564:	b29b      	uxth	r3, r3
 8102566:	461a      	mov	r2, r3
 8102568:	683b      	ldr	r3, [r7, #0]
 810256a:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 810256c:	2300      	movs	r3, #0
}
 810256e:	4618      	mov	r0, r3
 8102570:	3714      	adds	r7, #20
 8102572:	46bd      	mov	sp, r7
 8102574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102578:	4770      	bx	lr
 810257a:	bf00      	nop
 810257c:	24000ca4 	.word	0x24000ca4
 8102580:	24000bfc 	.word	0x24000bfc

08102584 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8102584:	b480      	push	{r7}
 8102586:	b085      	sub	sp, #20
 8102588:	af00      	add	r7, sp, #0
 810258a:	60f8      	str	r0, [r7, #12]
 810258c:	60b9      	str	r1, [r7, #8]
 810258e:	607a      	str	r2, [r7, #4]
 8102590:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8102592:	492f      	ldr	r1, [pc, #188]	; (8102650 <BSP_LCD_WritePixel+0xcc>)
 8102594:	68fa      	ldr	r2, [r7, #12]
 8102596:	4613      	mov	r3, r2
 8102598:	005b      	lsls	r3, r3, #1
 810259a:	4413      	add	r3, r2
 810259c:	00db      	lsls	r3, r3, #3
 810259e:	440b      	add	r3, r1
 81025a0:	3308      	adds	r3, #8
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	4a2b      	ldr	r2, [pc, #172]	; (8102654 <BSP_LCD_WritePixel+0xd0>)
 81025a6:	2134      	movs	r1, #52	; 0x34
 81025a8:	fb01 f303 	mul.w	r3, r1, r3
 81025ac:	4413      	add	r3, r2
 81025ae:	3348      	adds	r3, #72	; 0x48
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	2b00      	cmp	r3, #0
 81025b4:	d122      	bne.n	81025fc <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 81025b6:	4926      	ldr	r1, [pc, #152]	; (8102650 <BSP_LCD_WritePixel+0xcc>)
 81025b8:	68fa      	ldr	r2, [r7, #12]
 81025ba:	4613      	mov	r3, r2
 81025bc:	005b      	lsls	r3, r3, #1
 81025be:	4413      	add	r3, r2
 81025c0:	00db      	lsls	r3, r3, #3
 81025c2:	440b      	add	r3, r1
 81025c4:	3308      	adds	r3, #8
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	4a22      	ldr	r2, [pc, #136]	; (8102654 <BSP_LCD_WritePixel+0xd0>)
 81025ca:	2134      	movs	r1, #52	; 0x34
 81025cc:	fb01 f303 	mul.w	r3, r1, r3
 81025d0:	4413      	add	r3, r2
 81025d2:	335c      	adds	r3, #92	; 0x5c
 81025d4:	6819      	ldr	r1, [r3, #0]
 81025d6:	481e      	ldr	r0, [pc, #120]	; (8102650 <BSP_LCD_WritePixel+0xcc>)
 81025d8:	68fa      	ldr	r2, [r7, #12]
 81025da:	4613      	mov	r3, r2
 81025dc:	005b      	lsls	r3, r3, #1
 81025de:	4413      	add	r3, r2
 81025e0:	00db      	lsls	r3, r3, #3
 81025e2:	4403      	add	r3, r0
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	687a      	ldr	r2, [r7, #4]
 81025e8:	fb03 f202 	mul.w	r2, r3, r2
 81025ec:	68bb      	ldr	r3, [r7, #8]
 81025ee:	4413      	add	r3, r2
 81025f0:	009b      	lsls	r3, r3, #2
 81025f2:	440b      	add	r3, r1
 81025f4:	461a      	mov	r2, r3
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	6013      	str	r3, [r2, #0]
 81025fa:	e021      	b.n	8102640 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 81025fc:	4914      	ldr	r1, [pc, #80]	; (8102650 <BSP_LCD_WritePixel+0xcc>)
 81025fe:	68fa      	ldr	r2, [r7, #12]
 8102600:	4613      	mov	r3, r2
 8102602:	005b      	lsls	r3, r3, #1
 8102604:	4413      	add	r3, r2
 8102606:	00db      	lsls	r3, r3, #3
 8102608:	440b      	add	r3, r1
 810260a:	3308      	adds	r3, #8
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	4a11      	ldr	r2, [pc, #68]	; (8102654 <BSP_LCD_WritePixel+0xd0>)
 8102610:	2134      	movs	r1, #52	; 0x34
 8102612:	fb01 f303 	mul.w	r3, r1, r3
 8102616:	4413      	add	r3, r2
 8102618:	335c      	adds	r3, #92	; 0x5c
 810261a:	6819      	ldr	r1, [r3, #0]
 810261c:	480c      	ldr	r0, [pc, #48]	; (8102650 <BSP_LCD_WritePixel+0xcc>)
 810261e:	68fa      	ldr	r2, [r7, #12]
 8102620:	4613      	mov	r3, r2
 8102622:	005b      	lsls	r3, r3, #1
 8102624:	4413      	add	r3, r2
 8102626:	00db      	lsls	r3, r3, #3
 8102628:	4403      	add	r3, r0
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	687a      	ldr	r2, [r7, #4]
 810262e:	fb03 f202 	mul.w	r2, r3, r2
 8102632:	68bb      	ldr	r3, [r7, #8]
 8102634:	4413      	add	r3, r2
 8102636:	005b      	lsls	r3, r3, #1
 8102638:	440b      	add	r3, r1
 810263a:	683a      	ldr	r2, [r7, #0]
 810263c:	b292      	uxth	r2, r2
 810263e:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8102640:	2300      	movs	r3, #0
}
 8102642:	4618      	mov	r0, r3
 8102644:	3714      	adds	r7, #20
 8102646:	46bd      	mov	sp, r7
 8102648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264c:	4770      	bx	lr
 810264e:	bf00      	nop
 8102650:	24000ca4 	.word	0x24000ca4
 8102654:	24000bfc 	.word	0x24000bfc

08102658 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8102658:	b580      	push	{r7, lr}
 810265a:	b088      	sub	sp, #32
 810265c:	af02      	add	r7, sp, #8
 810265e:	60f8      	str	r0, [r7, #12]
 8102660:	60b9      	str	r1, [r7, #8]
 8102662:	607a      	str	r2, [r7, #4]
 8102664:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8102666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102668:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 810266a:	4932      	ldr	r1, [pc, #200]	; (8102734 <LL_FillBuffer+0xdc>)
 810266c:	68fa      	ldr	r2, [r7, #12]
 810266e:	4613      	mov	r3, r2
 8102670:	005b      	lsls	r3, r3, #1
 8102672:	4413      	add	r3, r2
 8102674:	00db      	lsls	r3, r3, #3
 8102676:	440b      	add	r3, r1
 8102678:	330c      	adds	r3, #12
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	2b02      	cmp	r3, #2
 810267e:	d129      	bne.n	81026d4 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8102680:	2302      	movs	r3, #2
 8102682:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8102684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102686:	0adb      	lsrs	r3, r3, #11
 8102688:	f003 021f 	and.w	r2, r3, #31
 810268c:	4613      	mov	r3, r2
 810268e:	011b      	lsls	r3, r3, #4
 8102690:	4413      	add	r3, r2
 8102692:	015a      	lsls	r2, r3, #5
 8102694:	1ad3      	subs	r3, r2, r3
 8102696:	3317      	adds	r3, #23
 8102698:	099b      	lsrs	r3, r3, #6
 810269a:	0419      	lsls	r1, r3, #16
 810269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810269e:	095b      	lsrs	r3, r3, #5
 81026a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 81026a4:	4613      	mov	r3, r2
 81026a6:	01db      	lsls	r3, r3, #7
 81026a8:	4413      	add	r3, r2
 81026aa:	005b      	lsls	r3, r3, #1
 81026ac:	4413      	add	r3, r2
 81026ae:	3321      	adds	r3, #33	; 0x21
 81026b0:	099b      	lsrs	r3, r3, #6
 81026b2:	021b      	lsls	r3, r3, #8
 81026b4:	4319      	orrs	r1, r3
 81026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026b8:	f003 021f 	and.w	r2, r3, #31
 81026bc:	4613      	mov	r3, r2
 81026be:	011b      	lsls	r3, r3, #4
 81026c0:	4413      	add	r3, r2
 81026c2:	015a      	lsls	r2, r3, #5
 81026c4:	1ad3      	subs	r3, r2, r3
 81026c6:	3317      	adds	r3, #23
 81026c8:	099b      	lsrs	r3, r3, #6
 81026ca:	430b      	orrs	r3, r1
 81026cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 81026d0:	613b      	str	r3, [r7, #16]
    break;
 81026d2:	e002      	b.n	81026da <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 81026d4:	2300      	movs	r3, #0
 81026d6:	617b      	str	r3, [r7, #20]
    break;
 81026d8:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 81026da:	4b17      	ldr	r3, [pc, #92]	; (8102738 <LL_FillBuffer+0xe0>)
 81026dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81026e0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 81026e2:	4a15      	ldr	r2, [pc, #84]	; (8102738 <LL_FillBuffer+0xe0>)
 81026e4:	697b      	ldr	r3, [r7, #20]
 81026e6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 81026e8:	4a13      	ldr	r2, [pc, #76]	; (8102738 <LL_FillBuffer+0xe0>)
 81026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026ec:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 81026ee:	4b12      	ldr	r3, [pc, #72]	; (8102738 <LL_FillBuffer+0xe0>)
 81026f0:	4a12      	ldr	r2, [pc, #72]	; (810273c <LL_FillBuffer+0xe4>)
 81026f2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 81026f4:	4810      	ldr	r0, [pc, #64]	; (8102738 <LL_FillBuffer+0xe0>)
 81026f6:	f000 ff4d 	bl	8103594 <HAL_DMA2D_Init>
 81026fa:	4603      	mov	r3, r0
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d115      	bne.n	810272c <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8102700:	2101      	movs	r1, #1
 8102702:	480d      	ldr	r0, [pc, #52]	; (8102738 <LL_FillBuffer+0xe0>)
 8102704:	f001 f8c8 	bl	8103898 <HAL_DMA2D_ConfigLayer>
 8102708:	4603      	mov	r3, r0
 810270a:	2b00      	cmp	r3, #0
 810270c:	d10e      	bne.n	810272c <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 810270e:	687a      	ldr	r2, [r7, #4]
 8102710:	6a3b      	ldr	r3, [r7, #32]
 8102712:	9300      	str	r3, [sp, #0]
 8102714:	683b      	ldr	r3, [r7, #0]
 8102716:	6939      	ldr	r1, [r7, #16]
 8102718:	4807      	ldr	r0, [pc, #28]	; (8102738 <LL_FillBuffer+0xe0>)
 810271a:	f000 ffa9 	bl	8103670 <HAL_DMA2D_Start>
 810271e:	4603      	mov	r3, r0
 8102720:	2b00      	cmp	r3, #0
 8102722:	d103      	bne.n	810272c <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8102724:	2119      	movs	r1, #25
 8102726:	4804      	ldr	r0, [pc, #16]	; (8102738 <LL_FillBuffer+0xe0>)
 8102728:	f000 ffcd 	bl	81036c6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 810272c:	bf00      	nop
 810272e:	3718      	adds	r7, #24
 8102730:	46bd      	mov	sp, r7
 8102732:	bd80      	pop	{r7, pc}
 8102734:	24000ca4 	.word	0x24000ca4
 8102738:	24000b94 	.word	0x24000b94
 810273c:	52001000 	.word	0x52001000

08102740 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8102740:	b580      	push	{r7, lr}
 8102742:	b088      	sub	sp, #32
 8102744:	af02      	add	r7, sp, #8
 8102746:	60f8      	str	r0, [r7, #12]
 8102748:	60b9      	str	r1, [r7, #8]
 810274a:	607a      	str	r2, [r7, #4]
 810274c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 810274e:	4925      	ldr	r1, [pc, #148]	; (81027e4 <LL_ConvertLineToRGB+0xa4>)
 8102750:	68fa      	ldr	r2, [r7, #12]
 8102752:	4613      	mov	r3, r2
 8102754:	005b      	lsls	r3, r3, #1
 8102756:	4413      	add	r3, r2
 8102758:	00db      	lsls	r3, r3, #3
 810275a:	440b      	add	r3, r1
 810275c:	330c      	adds	r3, #12
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	2b02      	cmp	r3, #2
 8102762:	d102      	bne.n	810276a <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8102764:	2302      	movs	r3, #2
 8102766:	617b      	str	r3, [r7, #20]
    break;
 8102768:	e002      	b.n	8102770 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 810276a:	2300      	movs	r3, #0
 810276c:	617b      	str	r3, [r7, #20]
    break;
 810276e:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8102770:	4b1d      	ldr	r3, [pc, #116]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 8102772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102776:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8102778:	4a1b      	ldr	r2, [pc, #108]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 810277a:	697b      	ldr	r3, [r7, #20]
 810277c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 810277e:	4b1a      	ldr	r3, [pc, #104]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 8102780:	2200      	movs	r2, #0
 8102782:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8102784:	4b18      	ldr	r3, [pc, #96]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 8102786:	2200      	movs	r2, #0
 8102788:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 810278a:	4b17      	ldr	r3, [pc, #92]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 810278c:	22ff      	movs	r2, #255	; 0xff
 810278e:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8102790:	4a15      	ldr	r2, [pc, #84]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 8102792:	6a3b      	ldr	r3, [r7, #32]
 8102794:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8102796:	4b14      	ldr	r3, [pc, #80]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 8102798:	2200      	movs	r2, #0
 810279a:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 810279c:	4b12      	ldr	r3, [pc, #72]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 810279e:	4a13      	ldr	r2, [pc, #76]	; (81027ec <LL_ConvertLineToRGB+0xac>)
 81027a0:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 81027a2:	4811      	ldr	r0, [pc, #68]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 81027a4:	f000 fef6 	bl	8103594 <HAL_DMA2D_Init>
 81027a8:	4603      	mov	r3, r0
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d115      	bne.n	81027da <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 81027ae:	2101      	movs	r1, #1
 81027b0:	480d      	ldr	r0, [pc, #52]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 81027b2:	f001 f871 	bl	8103898 <HAL_DMA2D_ConfigLayer>
 81027b6:	4603      	mov	r3, r0
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d10e      	bne.n	81027da <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 81027bc:	68b9      	ldr	r1, [r7, #8]
 81027be:	687a      	ldr	r2, [r7, #4]
 81027c0:	2301      	movs	r3, #1
 81027c2:	9300      	str	r3, [sp, #0]
 81027c4:	683b      	ldr	r3, [r7, #0]
 81027c6:	4808      	ldr	r0, [pc, #32]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 81027c8:	f000 ff52 	bl	8103670 <HAL_DMA2D_Start>
 81027cc:	4603      	mov	r3, r0
 81027ce:	2b00      	cmp	r3, #0
 81027d0:	d103      	bne.n	81027da <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 81027d2:	2119      	movs	r1, #25
 81027d4:	4804      	ldr	r0, [pc, #16]	; (81027e8 <LL_ConvertLineToRGB+0xa8>)
 81027d6:	f000 ff76 	bl	81036c6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 81027da:	bf00      	nop
 81027dc:	3718      	adds	r7, #24
 81027de:	46bd      	mov	sp, r7
 81027e0:	bd80      	pop	{r7, pc}
 81027e2:	bf00      	nop
 81027e4:	24000ca4 	.word	0x24000ca4
 81027e8:	24000b94 	.word	0x24000b94
 81027ec:	52001000 	.word	0x52001000

081027f0 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 81027f0:	b580      	push	{r7, lr}
 81027f2:	b08c      	sub	sp, #48	; 0x30
 81027f4:	af00      	add	r7, sp, #0
 81027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	4a3c      	ldr	r2, [pc, #240]	; (81028f0 <LTDC_MspInit+0x100>)
 81027fe:	4293      	cmp	r3, r2
 8102800:	d171      	bne.n	81028e6 <LTDC_MspInit+0xf6>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8102802:	4b3c      	ldr	r3, [pc, #240]	; (81028f4 <LTDC_MspInit+0x104>)
 8102804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8102808:	4a3a      	ldr	r2, [pc, #232]	; (81028f4 <LTDC_MspInit+0x104>)
 810280a:	f043 0308 	orr.w	r3, r3, #8
 810280e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8102812:	4b38      	ldr	r3, [pc, #224]	; (81028f4 <LTDC_MspInit+0x104>)
 8102814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8102818:	f003 0308 	and.w	r3, r3, #8
 810281c:	61bb      	str	r3, [r7, #24]
 810281e:	69bb      	ldr	r3, [r7, #24]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102820:	4b34      	ldr	r3, [pc, #208]	; (81028f4 <LTDC_MspInit+0x104>)
 8102822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102826:	4a33      	ldr	r2, [pc, #204]	; (81028f4 <LTDC_MspInit+0x104>)
 8102828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810282c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102830:	4b30      	ldr	r3, [pc, #192]	; (81028f4 <LTDC_MspInit+0x104>)
 8102832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810283a:	617b      	str	r3, [r7, #20]
 810283c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810283e:	4b2d      	ldr	r3, [pc, #180]	; (81028f4 <LTDC_MspInit+0x104>)
 8102840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102844:	4a2b      	ldr	r2, [pc, #172]	; (81028f4 <LTDC_MspInit+0x104>)
 8102846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810284a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810284e:	4b29      	ldr	r3, [pc, #164]	; (81028f4 <LTDC_MspInit+0x104>)
 8102850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102858:	613b      	str	r3, [r7, #16]
 810285a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 810285c:	4b25      	ldr	r3, [pc, #148]	; (81028f4 <LTDC_MspInit+0x104>)
 810285e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102862:	4a24      	ldr	r2, [pc, #144]	; (81028f4 <LTDC_MspInit+0x104>)
 8102864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810286c:	4b21      	ldr	r3, [pc, #132]	; (81028f4 <LTDC_MspInit+0x104>)
 810286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102876:	60fb      	str	r3, [r7, #12]
 8102878:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 810287a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 810287e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8102880:	2302      	movs	r3, #2
 8102882:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8102884:	2300      	movs	r3, #0
 8102886:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8102888:	2302      	movs	r3, #2
 810288a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 810288c:	230e      	movs	r3, #14
 810288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8102890:	f107 031c 	add.w	r3, r7, #28
 8102894:	4619      	mov	r1, r3
 8102896:	4818      	ldr	r0, [pc, #96]	; (81028f8 <LTDC_MspInit+0x108>)
 8102898:	f001 f952 	bl	8103b40 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 810289c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81028a0:	61fb      	str	r3, [r7, #28]
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 81028a2:	230e      	movs	r3, #14
 81028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 81028a6:	f107 031c 	add.w	r3, r7, #28
 81028aa:	4619      	mov	r1, r3
 81028ac:	4813      	ldr	r0, [pc, #76]	; (81028fc <LTDC_MspInit+0x10c>)
 81028ae:	f001 f947 	bl	8103b40 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 81028b2:	23ff      	movs	r3, #255	; 0xff
 81028b4:	61fb      	str	r3, [r7, #28]
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 81028b6:	230e      	movs	r3, #14
 81028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 81028ba:	f107 031c 	add.w	r3, r7, #28
 81028be:	4619      	mov	r1, r3
 81028c0:	480f      	ldr	r0, [pc, #60]	; (8102900 <LTDC_MspInit+0x110>)
 81028c2:	f001 f93d 	bl	8103b40 <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 81028c6:	4b0b      	ldr	r3, [pc, #44]	; (81028f4 <LTDC_MspInit+0x104>)
 81028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81028cc:	4a09      	ldr	r2, [pc, #36]	; (81028f4 <LTDC_MspInit+0x104>)
 81028ce:	f043 0308 	orr.w	r3, r3, #8
 81028d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 81028d6:	4b07      	ldr	r3, [pc, #28]	; (81028f4 <LTDC_MspInit+0x104>)
 81028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81028dc:	4a05      	ldr	r2, [pc, #20]	; (81028f4 <LTDC_MspInit+0x104>)
 81028de:	f023 0308 	bic.w	r3, r3, #8
 81028e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 81028e6:	bf00      	nop
 81028e8:	3730      	adds	r7, #48	; 0x30
 81028ea:	46bd      	mov	sp, r7
 81028ec:	bd80      	pop	{r7, pc}
 81028ee:	bf00      	nop
 81028f0:	50001000 	.word	0x50001000
 81028f4:	58024400 	.word	0x58024400
 81028f8:	58022000 	.word	0x58022000
 81028fc:	58022400 	.word	0x58022400
 8102900:	58022800 	.word	0x58022800

08102904 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8102904:	b480      	push	{r7}
 8102906:	b085      	sub	sp, #20
 8102908:	af00      	add	r7, sp, #0
 810290a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	681b      	ldr	r3, [r3, #0]
 8102910:	4a11      	ldr	r2, [pc, #68]	; (8102958 <DMA2D_MspInit+0x54>)
 8102912:	4293      	cmp	r3, r2
 8102914:	d11a      	bne.n	810294c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8102916:	4b11      	ldr	r3, [pc, #68]	; (810295c <DMA2D_MspInit+0x58>)
 8102918:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810291c:	4a0f      	ldr	r2, [pc, #60]	; (810295c <DMA2D_MspInit+0x58>)
 810291e:	f043 0310 	orr.w	r3, r3, #16
 8102922:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8102926:	4b0d      	ldr	r3, [pc, #52]	; (810295c <DMA2D_MspInit+0x58>)
 8102928:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810292c:	f003 0310 	and.w	r3, r3, #16
 8102930:	60fb      	str	r3, [r7, #12]
 8102932:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8102934:	4b09      	ldr	r3, [pc, #36]	; (810295c <DMA2D_MspInit+0x58>)
 8102936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102938:	4a08      	ldr	r2, [pc, #32]	; (810295c <DMA2D_MspInit+0x58>)
 810293a:	f043 0310 	orr.w	r3, r3, #16
 810293e:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8102940:	4b06      	ldr	r3, [pc, #24]	; (810295c <DMA2D_MspInit+0x58>)
 8102942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102944:	4a05      	ldr	r2, [pc, #20]	; (810295c <DMA2D_MspInit+0x58>)
 8102946:	f023 0310 	bic.w	r3, r3, #16
 810294a:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 810294c:	bf00      	nop
 810294e:	3714      	adds	r7, #20
 8102950:	46bd      	mov	sp, r7
 8102952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102956:	4770      	bx	lr
 8102958:	52001000 	.word	0x52001000
 810295c:	58024400 	.word	0x58024400

08102960 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8102960:	b580      	push	{r7, lr}
 8102962:	b084      	sub	sp, #16
 8102964:	af00      	add	r7, sp, #0
 8102966:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800G_Context_t pRegMode;

  if(Instance >= SDRAM_INSTANCES_NBR)
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2b00      	cmp	r3, #0
 810296c:	d003      	beq.n	8102976 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 810296e:	f06f 0301 	mvn.w	r3, #1
 8102972:	60fb      	str	r3, [r7, #12]
 8102974:	e047      	b.n	8102a06 <BSP_SDRAM_Init+0xa6>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8102976:	2300      	movs	r3, #0
 8102978:	60fb      	str	r3, [r7, #12]
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	2234      	movs	r2, #52	; 0x34
 810297e:	fb02 f303 	mul.w	r3, r2, r3
 8102982:	4a23      	ldr	r2, [pc, #140]	; (8102a10 <BSP_SDRAM_Init+0xb0>)
 8102984:	4413      	add	r3, r2
 8102986:	4618      	mov	r0, r3
 8102988:	f000 f88e 	bl	8102aa8 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(ret == BSP_ERROR_NONE)
 810298c:	68fb      	ldr	r3, [r7, #12]
 810298e:	2b00      	cmp	r3, #0
 8102990:	d139      	bne.n	8102a06 <BSP_SDRAM_Init+0xa6>
    {
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	2234      	movs	r2, #52	; 0x34
 8102996:	fb02 f303 	mul.w	r3, r2, r3
 810299a:	4a1d      	ldr	r2, [pc, #116]	; (8102a10 <BSP_SDRAM_Init+0xb0>)
 810299c:	4413      	add	r3, r2
 810299e:	4618      	mov	r0, r3
 81029a0:	f000 f83a 	bl	8102a18 <MX_SDRAM_BANK2_Init>
 81029a4:	4603      	mov	r3, r0
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d003      	beq.n	81029b2 <BSP_SDRAM_Init+0x52>
      {
        ret = BSP_ERROR_NO_INIT;
 81029aa:	f04f 33ff 	mov.w	r3, #4294967295
 81029ae:	60fb      	str	r3, [r7, #12]
 81029b0:	e029      	b.n	8102a06 <BSP_SDRAM_Init+0xa6>
      }
      else
      {
        /* External memory mode register configuration */
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 81029b2:	4b18      	ldr	r3, [pc, #96]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029b4:	2208      	movs	r2, #8
 81029b6:	601a      	str	r2, [r3, #0]
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 81029b8:	4b16      	ldr	r3, [pc, #88]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029ba:	2203      	movs	r2, #3
 81029bc:	605a      	str	r2, [r3, #4]
        pRegMode.RefreshRate     = REFRESH_COUNT;
 81029be:	4b15      	ldr	r3, [pc, #84]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029c0:	f240 6203 	movw	r2, #1539	; 0x603
 81029c4:	609a      	str	r2, [r3, #8]
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 81029c6:	4b13      	ldr	r3, [pc, #76]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029c8:	2200      	movs	r2, #0
 81029ca:	60da      	str	r2, [r3, #12]
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 81029cc:	4b11      	ldr	r3, [pc, #68]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029ce:	2200      	movs	r2, #0
 81029d0:	611a      	str	r2, [r3, #16]
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 81029d2:	4b10      	ldr	r3, [pc, #64]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029d4:	2230      	movs	r2, #48	; 0x30
 81029d6:	615a      	str	r2, [r3, #20]
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 81029d8:	4b0e      	ldr	r3, [pc, #56]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029da:	2200      	movs	r2, #0
 81029dc:	619a      	str	r2, [r3, #24]
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 81029de:	4b0d      	ldr	r3, [pc, #52]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81029e4:	61da      	str	r2, [r3, #28]

        /* SDRAM initialization sequence */
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	2234      	movs	r2, #52	; 0x34
 81029ea:	fb02 f303 	mul.w	r3, r2, r3
 81029ee:	4a08      	ldr	r2, [pc, #32]	; (8102a10 <BSP_SDRAM_Init+0xb0>)
 81029f0:	4413      	add	r3, r2
 81029f2:	4908      	ldr	r1, [pc, #32]	; (8102a14 <BSP_SDRAM_Init+0xb4>)
 81029f4:	4618      	mov	r0, r3
 81029f6:	f7fe f8e4 	bl	8100bc2 <IS42S32800G_Init>
 81029fa:	4603      	mov	r3, r0
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d002      	beq.n	8102a06 <BSP_SDRAM_Init+0xa6>
        {
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 8102a00:	f06f 0304 	mvn.w	r3, #4
 8102a04:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8102a06:	68fb      	ldr	r3, [r7, #12]
}
 8102a08:	4618      	mov	r0, r3
 8102a0a:	3710      	adds	r7, #16
 8102a0c:	46bd      	mov	sp, r7
 8102a0e:	bd80      	pop	{r7, pc}
 8102a10:	24000cbc 	.word	0x24000cbc
 8102a14:	24000cf0 	.word	0x24000cf0

08102a18 <MX_SDRAM_BANK2_Init>:
  * @brief  Initializes the SDRAM periperal.
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram)
{
 8102a18:	b580      	push	{r7, lr}
 8102a1a:	b08a      	sub	sp, #40	; 0x28
 8102a1c:	af00      	add	r7, sp, #0
 8102a1e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	4a20      	ldr	r2, [pc, #128]	; (8102aa4 <MX_SDRAM_BANK2_Init+0x8c>)
 8102a24:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	2201      	movs	r2, #1
 8102a2a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	2201      	movs	r2, #1
 8102a30:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	2204      	movs	r2, #4
 8102a36:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	2220      	movs	r2, #32
 8102a3c:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	2240      	movs	r2, #64	; 0x40
 8102a42:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8102a4a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	2200      	movs	r2, #0
 8102a50:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102a58:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8102a60:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	2200      	movs	r2, #0
 8102a66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8102a68:	2302      	movs	r3, #2
 8102a6a:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8102a6c:	2307      	movs	r3, #7
 8102a6e:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8102a70:	2304      	movs	r3, #4
 8102a72:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8102a74:	2307      	movs	r3, #7
 8102a76:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8102a78:	2302      	movs	r3, #2
 8102a7a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8102a7c:	2302      	movs	r3, #2
 8102a7e:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8102a80:	2302      	movs	r3, #2
 8102a82:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8102a84:	f107 030c 	add.w	r3, r7, #12
 8102a88:	4619      	mov	r1, r3
 8102a8a:	6878      	ldr	r0, [r7, #4]
 8102a8c:	f005 f8fe 	bl	8107c8c <HAL_SDRAM_Init>
 8102a90:	4603      	mov	r3, r0
 8102a92:	2b00      	cmp	r3, #0
 8102a94:	d001      	beq.n	8102a9a <MX_SDRAM_BANK2_Init+0x82>
  {
    return  HAL_ERROR;
 8102a96:	2301      	movs	r3, #1
 8102a98:	e000      	b.n	8102a9c <MX_SDRAM_BANK2_Init+0x84>
  }

  return HAL_OK;
 8102a9a:	2300      	movs	r3, #0
}
 8102a9c:	4618      	mov	r0, r3
 8102a9e:	3728      	adds	r7, #40	; 0x28
 8102aa0:	46bd      	mov	sp, r7
 8102aa2:	bd80      	pop	{r7, pc}
 8102aa4:	52004140 	.word	0x52004140

08102aa8 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8102aa8:	b580      	push	{r7, lr}
 8102aaa:	b090      	sub	sp, #64	; 0x40
 8102aac:	af00      	add	r7, sp, #0
 8102aae:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8102ab0:	4b7f      	ldr	r3, [pc, #508]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102ab6:	4a7e      	ldr	r2, [pc, #504]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102abc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8102ac0:	4b7b      	ldr	r3, [pc, #492]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ac2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8102acc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8102ace:	4b78      	ldr	r3, [pc, #480]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ad0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102ad4:	4a76      	ldr	r2, [pc, #472]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ad6:	f043 0301 	orr.w	r3, r3, #1
 8102ada:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8102ade:	4b74      	ldr	r3, [pc, #464]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102ae0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8102ae4:	f003 0301 	and.w	r3, r3, #1
 8102ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8102aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102aec:	4b70      	ldr	r3, [pc, #448]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102af2:	4a6f      	ldr	r2, [pc, #444]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102af4:	f043 0308 	orr.w	r3, r3, #8
 8102af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102afc:	4b6c      	ldr	r3, [pc, #432]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b02:	f003 0308 	and.w	r3, r3, #8
 8102b06:	623b      	str	r3, [r7, #32]
 8102b08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102b0a:	4b69      	ldr	r3, [pc, #420]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b10:	4a67      	ldr	r2, [pc, #412]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b12:	f043 0310 	orr.w	r3, r3, #16
 8102b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b1a:	4b65      	ldr	r3, [pc, #404]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b20:	f003 0310 	and.w	r3, r3, #16
 8102b24:	61fb      	str	r3, [r7, #28]
 8102b26:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8102b28:	4b61      	ldr	r3, [pc, #388]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b2e:	4a60      	ldr	r2, [pc, #384]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b30:	f043 0320 	orr.w	r3, r3, #32
 8102b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b38:	4b5d      	ldr	r3, [pc, #372]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b3e:	f003 0320 	and.w	r3, r3, #32
 8102b42:	61bb      	str	r3, [r7, #24]
 8102b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102b46:	4b5a      	ldr	r3, [pc, #360]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b4c:	4a58      	ldr	r2, [pc, #352]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b56:	4b56      	ldr	r3, [pc, #344]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102b60:	617b      	str	r3, [r7, #20]
 8102b62:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8102b64:	4b52      	ldr	r3, [pc, #328]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b6a:	4a51      	ldr	r2, [pc, #324]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b74:	4b4e      	ldr	r3, [pc, #312]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102b7e:	613b      	str	r3, [r7, #16]
 8102b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8102b82:	4b4b      	ldr	r3, [pc, #300]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b88:	4a49      	ldr	r2, [pc, #292]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b92:	4b47      	ldr	r3, [pc, #284]	; (8102cb0 <SDRAM_MspInit+0x208>)
 8102b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102b9c:	60fb      	str	r3, [r7, #12]
 8102b9e:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8102ba0:	2302      	movs	r3, #2
 8102ba2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8102ba8:	2303      	movs	r3, #3
 8102baa:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8102bac:	230c      	movs	r3, #12
 8102bae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8102bb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8102bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8102bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102bba:	4619      	mov	r1, r3
 8102bbc:	483d      	ldr	r0, [pc, #244]	; (8102cb4 <SDRAM_MspInit+0x20c>)
 8102bbe:	f000 ffbf 	bl	8103b40 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8102bc2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8102bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8102bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102bcc:	4619      	mov	r1, r3
 8102bce:	483a      	ldr	r0, [pc, #232]	; (8102cb8 <SDRAM_MspInit+0x210>)
 8102bd0:	f000 ffb6 	bl	8103b40 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8102bd4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8102bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8102bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102bde:	4619      	mov	r1, r3
 8102be0:	4836      	ldr	r0, [pc, #216]	; (8102cbc <SDRAM_MspInit+0x214>)
 8102be2:	f000 ffad 	bl	8103b40 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8102be6:	f248 133f 	movw	r3, #33087	; 0x813f
 8102bea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8102bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102bf0:	4619      	mov	r1, r3
 8102bf2:	4833      	ldr	r0, [pc, #204]	; (8102cc0 <SDRAM_MspInit+0x218>)
 8102bf4:	f000 ffa4 	bl	8103b40 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8102bf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8102bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8102bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102c02:	4619      	mov	r1, r3
 8102c04:	482f      	ldr	r0, [pc, #188]	; (8102cc4 <SDRAM_MspInit+0x21c>)
 8102c06:	f000 ff9b 	bl	8103b40 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8102c0a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8102c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8102c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102c14:	4619      	mov	r1, r3
 8102c16:	482c      	ldr	r0, [pc, #176]	; (8102cc8 <SDRAM_MspInit+0x220>)
 8102c18:	f000 ff92 	bl	8103b40 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8102c1c:	4b2b      	ldr	r3, [pc, #172]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102c22:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8102c24:	4b29      	ldr	r3, [pc, #164]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102c2a:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8102c2c:	4b27      	ldr	r3, [pc, #156]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c2e:	2280      	movs	r2, #128	; 0x80
 8102c30:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8102c32:	4b26      	ldr	r3, [pc, #152]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c34:	2200      	movs	r2, #0
 8102c36:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8102c38:	4b24      	ldr	r3, [pc, #144]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c3a:	f240 2202 	movw	r2, #514	; 0x202
 8102c3e:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8102c40:	4b22      	ldr	r3, [pc, #136]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c42:	f640 0208 	movw	r2, #2056	; 0x808
 8102c46:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8102c48:	4b20      	ldr	r3, [pc, #128]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c4a:	2220      	movs	r2, #32
 8102c4c:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8102c4e:	4b1f      	ldr	r3, [pc, #124]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c50:	2280      	movs	r2, #128	; 0x80
 8102c52:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8102c54:	4b1d      	ldr	r3, [pc, #116]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8102c5a:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8102c5c:	4b1b      	ldr	r3, [pc, #108]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c5e:	2200      	movs	r2, #0
 8102c60:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8102c62:	4b1a      	ldr	r3, [pc, #104]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c64:	2200      	movs	r2, #0
 8102c66:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8102c68:	4b18      	ldr	r3, [pc, #96]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c6a:	2280      	movs	r2, #128	; 0x80
 8102c6c:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8102c6e:	4b17      	ldr	r3, [pc, #92]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c70:	2200      	movs	r2, #0
 8102c72:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8102c74:	4b15      	ldr	r3, [pc, #84]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c76:	2200      	movs	r2, #0
 8102c78:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8102c7a:	4b14      	ldr	r3, [pc, #80]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c7c:	4a14      	ldr	r2, [pc, #80]	; (8102cd0 <SDRAM_MspInit+0x228>)
 8102c7e:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8102c80:	687b      	ldr	r3, [r7, #4]
 8102c82:	4a12      	ldr	r2, [pc, #72]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c84:	631a      	str	r2, [r3, #48]	; 0x30
 8102c86:	4a11      	ldr	r2, [pc, #68]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	6413      	str	r3, [r2, #64]	; 0x40

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8102c8c:	480f      	ldr	r0, [pc, #60]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c8e:	f002 fb95 	bl	81053bc <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8102c92:	480e      	ldr	r0, [pc, #56]	; (8102ccc <SDRAM_MspInit+0x224>)
 8102c94:	f002 fb46 	bl	8105324 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8102c98:	2200      	movs	r2, #0
 8102c9a:	210f      	movs	r1, #15
 8102c9c:	207a      	movs	r0, #122	; 0x7a
 8102c9e:	f000 fc44 	bl	810352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8102ca2:	207a      	movs	r0, #122	; 0x7a
 8102ca4:	f000 fc5b 	bl	810355e <HAL_NVIC_EnableIRQ>
}
 8102ca8:	bf00      	nop
 8102caa:	3740      	adds	r7, #64	; 0x40
 8102cac:	46bd      	mov	sp, r7
 8102cae:	bd80      	pop	{r7, pc}
 8102cb0:	58024400 	.word	0x58024400
 8102cb4:	58020c00 	.word	0x58020c00
 8102cb8:	58021000 	.word	0x58021000
 8102cbc:	58021400 	.word	0x58021400
 8102cc0:	58021800 	.word	0x58021800
 8102cc4:	58021c00 	.word	0x58021c00
 8102cc8:	58022000 	.word	0x58022000
 8102ccc:	24000d10 	.word	0x24000d10
 8102cd0:	52000040 	.word	0x52000040

08102cd4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b086      	sub	sp, #24
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	6078      	str	r0, [r7, #4]
 8102cdc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8102cde:	2300      	movs	r3, #0
 8102ce0:	617b      	str	r3, [r7, #20]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	2b00      	cmp	r3, #0
 8102ce6:	d11c      	bne.n	8102d22 <BSP_TS_Init+0x4e>
 8102ce8:	683b      	ldr	r3, [r7, #0]
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	d018      	beq.n	8102d22 <BSP_TS_Init+0x4e>
 8102cf0:	683b      	ldr	r3, [r7, #0]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8102cf8:	d813      	bhi.n	8102d22 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8102cfa:	683b      	ldr	r3, [r7, #0]
 8102cfc:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8102cfe:	2b00      	cmp	r3, #0
 8102d00:	d00f      	beq.n	8102d22 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8102d02:	683b      	ldr	r3, [r7, #0]
 8102d04:	685b      	ldr	r3, [r3, #4]
 8102d06:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8102d0a:	d80a      	bhi.n	8102d22 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8102d0c:	683b      	ldr	r3, [r7, #0]
 8102d0e:	68da      	ldr	r2, [r3, #12]
 8102d10:	683b      	ldr	r3, [r7, #0]
 8102d12:	6819      	ldr	r1, [r3, #0]
 8102d14:	683b      	ldr	r3, [r7, #0]
 8102d16:	685b      	ldr	r3, [r3, #4]
 8102d18:	428b      	cmp	r3, r1
 8102d1a:	bf28      	it	cs
 8102d1c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8102d1e:	429a      	cmp	r2, r3
 8102d20:	d903      	bls.n	8102d2a <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8102d22:	f06f 0301 	mvn.w	r3, #1
 8102d26:	617b      	str	r3, [r7, #20]
 8102d28:	e068      	b.n	8102dfc <BSP_TS_Init+0x128>
  }
  else
  {
#if (USE_EXC7200_TS_CTRL == 1U)
    ret = EXC7200_Probe(Instance);
 8102d2a:	6878      	ldr	r0, [r7, #4]
 8102d2c:	f000 f986 	bl	810303c <EXC7200_Probe>
 8102d30:	6178      	str	r0, [r7, #20]
#endif
#if (USE_TS3510_TS_CTRL == 1U)
    if(ret != BSP_ERROR_NONE)
 8102d32:	697b      	ldr	r3, [r7, #20]
 8102d34:	2b00      	cmp	r3, #0
 8102d36:	d003      	beq.n	8102d40 <BSP_TS_Init+0x6c>
    {
      ret = TS3510_Probe(Instance);
 8102d38:	6878      	ldr	r0, [r7, #4]
 8102d3a:	f000 f9e3 	bl	8103104 <TS3510_Probe>
 8102d3e:	6178      	str	r0, [r7, #20]
    }
#endif
    if(ret != BSP_ERROR_NONE)
 8102d40:	697b      	ldr	r3, [r7, #20]
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d003      	beq.n	8102d4e <BSP_TS_Init+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8102d46:	f06f 0306 	mvn.w	r3, #6
 8102d4a:	617b      	str	r3, [r7, #20]
 8102d4c:	e056      	b.n	8102dfc <BSP_TS_Init+0x128>
    }
    else
    {
      TS_Capabilities_t Capabilities;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8102d4e:	683b      	ldr	r3, [r7, #0]
 8102d50:	681a      	ldr	r2, [r3, #0]
 8102d52:	492d      	ldr	r1, [pc, #180]	; (8102e08 <BSP_TS_Init+0x134>)
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	015b      	lsls	r3, r3, #5
 8102d58:	440b      	add	r3, r1
 8102d5a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8102d5c:	683b      	ldr	r3, [r7, #0]
 8102d5e:	685a      	ldr	r2, [r3, #4]
 8102d60:	4929      	ldr	r1, [pc, #164]	; (8102e08 <BSP_TS_Init+0x134>)
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	015b      	lsls	r3, r3, #5
 8102d66:	440b      	add	r3, r1
 8102d68:	3304      	adds	r3, #4
 8102d6a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8102d6c:	683b      	ldr	r3, [r7, #0]
 8102d6e:	689a      	ldr	r2, [r3, #8]
 8102d70:	4925      	ldr	r1, [pc, #148]	; (8102e08 <BSP_TS_Init+0x134>)
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	015b      	lsls	r3, r3, #5
 8102d76:	440b      	add	r3, r1
 8102d78:	3308      	adds	r3, #8
 8102d7a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8102d7c:	683b      	ldr	r3, [r7, #0]
 8102d7e:	68da      	ldr	r2, [r3, #12]
 8102d80:	4921      	ldr	r1, [pc, #132]	; (8102e08 <BSP_TS_Init+0x134>)
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	015b      	lsls	r3, r3, #5
 8102d86:	440b      	add	r3, r1
 8102d88:	330c      	adds	r3, #12
 8102d8a:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8102d8c:	4b1f      	ldr	r3, [pc, #124]	; (8102e0c <BSP_TS_Init+0x138>)
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	69db      	ldr	r3, [r3, #28]
 8102d92:	491f      	ldr	r1, [pc, #124]	; (8102e10 <BSP_TS_Init+0x13c>)
 8102d94:	687a      	ldr	r2, [r7, #4]
 8102d96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8102d9a:	f107 0108 	add.w	r1, r7, #8
 8102d9e:	4610      	mov	r0, r2
 8102da0:	4798      	blx	r3
 8102da2:	4603      	mov	r3, r0
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	da03      	bge.n	8102db0 <BSP_TS_Init+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8102da8:	f06f 0304 	mvn.w	r3, #4
 8102dac:	617b      	str	r3, [r7, #20]
 8102dae:	e025      	b.n	8102dfc <BSP_TS_Init+0x128>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8102db0:	68fa      	ldr	r2, [r7, #12]
 8102db2:	4915      	ldr	r1, [pc, #84]	; (8102e08 <BSP_TS_Init+0x134>)
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	015b      	lsls	r3, r3, #5
 8102db8:	440b      	add	r3, r1
 8102dba:	3310      	adds	r3, #16
 8102dbc:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8102dbe:	693a      	ldr	r2, [r7, #16]
 8102dc0:	4911      	ldr	r1, [pc, #68]	; (8102e08 <BSP_TS_Init+0x134>)
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	015b      	lsls	r3, r3, #5
 8102dc6:	440b      	add	r3, r1
 8102dc8:	3314      	adds	r3, #20
 8102dca:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8102dcc:	683b      	ldr	r3, [r7, #0]
 8102dce:	681a      	ldr	r2, [r3, #0]
 8102dd0:	683b      	ldr	r3, [r7, #0]
 8102dd2:	68db      	ldr	r3, [r3, #12]
 8102dd4:	4413      	add	r3, r2
 8102dd6:	1c5a      	adds	r2, r3, #1
 8102dd8:	490b      	ldr	r1, [pc, #44]	; (8102e08 <BSP_TS_Init+0x134>)
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	015b      	lsls	r3, r3, #5
 8102dde:	440b      	add	r3, r1
 8102de0:	3318      	adds	r3, #24
 8102de2:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8102de4:	683b      	ldr	r3, [r7, #0]
 8102de6:	685a      	ldr	r2, [r3, #4]
 8102de8:	683b      	ldr	r3, [r7, #0]
 8102dea:	68db      	ldr	r3, [r3, #12]
 8102dec:	4413      	add	r3, r2
 8102dee:	1c5a      	adds	r2, r3, #1
 8102df0:	4905      	ldr	r1, [pc, #20]	; (8102e08 <BSP_TS_Init+0x134>)
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	015b      	lsls	r3, r3, #5
 8102df6:	440b      	add	r3, r1
 8102df8:	331c      	adds	r3, #28
 8102dfa:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return ret;
 8102dfc:	697b      	ldr	r3, [r7, #20]
}
 8102dfe:	4618      	mov	r0, r3
 8102e00:	3718      	adds	r7, #24
 8102e02:	46bd      	mov	sp, r7
 8102e04:	bd80      	pop	{r7, pc}
 8102e06:	bf00      	nop
 8102e08:	24000d84 	.word	0x24000d84
 8102e0c:	24000d7c 	.word	0x24000d7c
 8102e10:	24000d80 	.word	0x24000d80

08102e14 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8102e14:	b580      	push	{r7, lr}
 8102e16:	b08a      	sub	sp, #40	; 0x28
 8102e18:	af00      	add	r7, sp, #0
 8102e1a:	6078      	str	r0, [r7, #4]
 8102e1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8102e1e:	2300      	movs	r3, #0
 8102e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	2b00      	cmp	r3, #0
 8102e26:	d003      	beq.n	8102e30 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8102e28:	f06f 0301 	mvn.w	r3, #1
 8102e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8102e2e:	e0f9      	b.n	8103024 <BSP_TS_GetState+0x210>
  else
  {
    EXC7200_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8102e30:	4b7f      	ldr	r3, [pc, #508]	; (8103030 <BSP_TS_GetState+0x21c>)
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	691b      	ldr	r3, [r3, #16]
 8102e36:	497f      	ldr	r1, [pc, #508]	; (8103034 <BSP_TS_GetState+0x220>)
 8102e38:	687a      	ldr	r2, [r7, #4]
 8102e3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8102e3e:	f107 0108 	add.w	r1, r7, #8
 8102e42:	4610      	mov	r0, r2
 8102e44:	4798      	blx	r3
 8102e46:	4603      	mov	r3, r0
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	da03      	bge.n	8102e54 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8102e4c:	f06f 0304 	mvn.w	r3, #4
 8102e50:	627b      	str	r3, [r7, #36]	; 0x24
 8102e52:	e0e7      	b.n	8103024 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8102e54:	68bb      	ldr	r3, [r7, #8]
 8102e56:	2b00      	cmp	r3, #0
 8102e58:	f000 80d1 	beq.w	8102ffe <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8102e60:	693b      	ldr	r3, [r7, #16]
 8102e62:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8102e64:	4a74      	ldr	r2, [pc, #464]	; (8103038 <BSP_TS_GetState+0x224>)
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	015b      	lsls	r3, r3, #5
 8102e6a:	4413      	add	r3, r2
 8102e6c:	3308      	adds	r3, #8
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	f003 0308 	and.w	r3, r3, #8
 8102e74:	2b00      	cmp	r3, #0
 8102e76:	d003      	beq.n	8102e80 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8102e78:	693b      	ldr	r3, [r7, #16]
 8102e7a:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8102e80:	4a6d      	ldr	r2, [pc, #436]	; (8103038 <BSP_TS_GetState+0x224>)
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	015b      	lsls	r3, r3, #5
 8102e86:	4413      	add	r3, r2
 8102e88:	3308      	adds	r3, #8
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	f003 0302 	and.w	r3, r3, #2
 8102e90:	2b00      	cmp	r3, #0
 8102e92:	d009      	beq.n	8102ea8 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8102e94:	4a68      	ldr	r2, [pc, #416]	; (8103038 <BSP_TS_GetState+0x224>)
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	015b      	lsls	r3, r3, #5
 8102e9a:	4413      	add	r3, r2
 8102e9c:	3310      	adds	r3, #16
 8102e9e:	681a      	ldr	r2, [r3, #0]
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	1ad3      	subs	r3, r2, r3
 8102ea4:	3b01      	subs	r3, #1
 8102ea6:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8102ea8:	4a63      	ldr	r2, [pc, #396]	; (8103038 <BSP_TS_GetState+0x224>)
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	015b      	lsls	r3, r3, #5
 8102eae:	4413      	add	r3, r2
 8102eb0:	3308      	adds	r3, #8
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	f003 0304 	and.w	r3, r3, #4
 8102eb8:	2b00      	cmp	r3, #0
 8102eba:	d008      	beq.n	8102ece <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8102ebc:	4a5e      	ldr	r2, [pc, #376]	; (8103038 <BSP_TS_GetState+0x224>)
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	015b      	lsls	r3, r3, #5
 8102ec2:	4413      	add	r3, r2
 8102ec4:	3314      	adds	r3, #20
 8102ec6:	681a      	ldr	r2, [r3, #0]
 8102ec8:	693b      	ldr	r3, [r7, #16]
 8102eca:	1ad3      	subs	r3, r2, r3
 8102ecc:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8102ece:	4a5a      	ldr	r2, [pc, #360]	; (8103038 <BSP_TS_GetState+0x224>)
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	015b      	lsls	r3, r3, #5
 8102ed4:	4413      	add	r3, r2
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	6a3a      	ldr	r2, [r7, #32]
 8102eda:	fb03 f202 	mul.w	r2, r3, r2
 8102ede:	4956      	ldr	r1, [pc, #344]	; (8103038 <BSP_TS_GetState+0x224>)
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	015b      	lsls	r3, r3, #5
 8102ee4:	440b      	add	r3, r1
 8102ee6:	3310      	adds	r3, #16
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8102eee:	683b      	ldr	r3, [r7, #0]
 8102ef0:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8102ef2:	4a51      	ldr	r2, [pc, #324]	; (8103038 <BSP_TS_GetState+0x224>)
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	015b      	lsls	r3, r3, #5
 8102ef8:	4413      	add	r3, r2
 8102efa:	3304      	adds	r3, #4
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	69fa      	ldr	r2, [r7, #28]
 8102f00:	fb03 f202 	mul.w	r2, r3, r2
 8102f04:	494c      	ldr	r1, [pc, #304]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	015b      	lsls	r3, r3, #5
 8102f0a:	440b      	add	r3, r1
 8102f0c:	3314      	adds	r3, #20
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8102f14:	683b      	ldr	r3, [r7, #0]
 8102f16:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8102f18:	68ba      	ldr	r2, [r7, #8]
 8102f1a:	683b      	ldr	r3, [r7, #0]
 8102f1c:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8102f1e:	683b      	ldr	r3, [r7, #0]
 8102f20:	685a      	ldr	r2, [r3, #4]
 8102f22:	4945      	ldr	r1, [pc, #276]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	015b      	lsls	r3, r3, #5
 8102f28:	440b      	add	r3, r1
 8102f2a:	3318      	adds	r3, #24
 8102f2c:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8102f2e:	429a      	cmp	r2, r3
 8102f30:	d909      	bls.n	8102f46 <BSP_TS_GetState+0x132>
 8102f32:	683b      	ldr	r3, [r7, #0]
 8102f34:	685a      	ldr	r2, [r3, #4]
 8102f36:	4940      	ldr	r1, [pc, #256]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	015b      	lsls	r3, r3, #5
 8102f3c:	440b      	add	r3, r1
 8102f3e:	3318      	adds	r3, #24
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	1ad3      	subs	r3, r2, r3
 8102f44:	e008      	b.n	8102f58 <BSP_TS_GetState+0x144>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8102f46:	4a3c      	ldr	r2, [pc, #240]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	015b      	lsls	r3, r3, #5
 8102f4c:	4413      	add	r3, r2
 8102f4e:	3318      	adds	r3, #24
 8102f50:	681a      	ldr	r2, [r3, #0]
 8102f52:	683b      	ldr	r3, [r7, #0]
 8102f54:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8102f56:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8102f58:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8102f5a:	683b      	ldr	r3, [r7, #0]
 8102f5c:	689a      	ldr	r2, [r3, #8]
 8102f5e:	4936      	ldr	r1, [pc, #216]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	015b      	lsls	r3, r3, #5
 8102f64:	440b      	add	r3, r1
 8102f66:	331c      	adds	r3, #28
 8102f68:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8102f6a:	429a      	cmp	r2, r3
 8102f6c:	d909      	bls.n	8102f82 <BSP_TS_GetState+0x16e>
 8102f6e:	683b      	ldr	r3, [r7, #0]
 8102f70:	689a      	ldr	r2, [r3, #8]
 8102f72:	4931      	ldr	r1, [pc, #196]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	015b      	lsls	r3, r3, #5
 8102f78:	440b      	add	r3, r1
 8102f7a:	331c      	adds	r3, #28
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	1ad3      	subs	r3, r2, r3
 8102f80:	e008      	b.n	8102f94 <BSP_TS_GetState+0x180>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8102f82:	4a2d      	ldr	r2, [pc, #180]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	015b      	lsls	r3, r3, #5
 8102f88:	4413      	add	r3, r2
 8102f8a:	331c      	adds	r3, #28
 8102f8c:	681a      	ldr	r2, [r3, #0]
 8102f8e:	683b      	ldr	r3, [r7, #0]
 8102f90:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8102f92:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8102f94:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8102f96:	4a28      	ldr	r2, [pc, #160]	; (8103038 <BSP_TS_GetState+0x224>)
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	015b      	lsls	r3, r3, #5
 8102f9c:	4413      	add	r3, r2
 8102f9e:	330c      	adds	r3, #12
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	69ba      	ldr	r2, [r7, #24]
 8102fa4:	429a      	cmp	r2, r3
 8102fa6:	d808      	bhi.n	8102fba <BSP_TS_GetState+0x1a6>
 8102fa8:	4a23      	ldr	r2, [pc, #140]	; (8103038 <BSP_TS_GetState+0x224>)
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	015b      	lsls	r3, r3, #5
 8102fae:	4413      	add	r3, r2
 8102fb0:	330c      	adds	r3, #12
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	697a      	ldr	r2, [r7, #20]
 8102fb6:	429a      	cmp	r2, r3
 8102fb8:	d910      	bls.n	8102fdc <BSP_TS_GetState+0x1c8>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8102fba:	683b      	ldr	r3, [r7, #0]
 8102fbc:	685a      	ldr	r2, [r3, #4]
 8102fbe:	491e      	ldr	r1, [pc, #120]	; (8103038 <BSP_TS_GetState+0x224>)
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	015b      	lsls	r3, r3, #5
 8102fc4:	440b      	add	r3, r1
 8102fc6:	3318      	adds	r3, #24
 8102fc8:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8102fca:	683b      	ldr	r3, [r7, #0]
 8102fcc:	689a      	ldr	r2, [r3, #8]
 8102fce:	491a      	ldr	r1, [pc, #104]	; (8103038 <BSP_TS_GetState+0x224>)
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	015b      	lsls	r3, r3, #5
 8102fd4:	440b      	add	r3, r1
 8102fd6:	331c      	adds	r3, #28
 8102fd8:	601a      	str	r2, [r3, #0]
 8102fda:	e023      	b.n	8103024 <BSP_TS_GetState+0x210>
      }
      else
      {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8102fdc:	4a16      	ldr	r2, [pc, #88]	; (8103038 <BSP_TS_GetState+0x224>)
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	015b      	lsls	r3, r3, #5
 8102fe2:	4413      	add	r3, r2
 8102fe4:	3318      	adds	r3, #24
 8102fe6:	681a      	ldr	r2, [r3, #0]
 8102fe8:	683b      	ldr	r3, [r7, #0]
 8102fea:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8102fec:	4a12      	ldr	r2, [pc, #72]	; (8103038 <BSP_TS_GetState+0x224>)
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	015b      	lsls	r3, r3, #5
 8102ff2:	4413      	add	r3, r2
 8102ff4:	331c      	adds	r3, #28
 8102ff6:	681a      	ldr	r2, [r3, #0]
 8102ff8:	683b      	ldr	r3, [r7, #0]
 8102ffa:	609a      	str	r2, [r3, #8]
 8102ffc:	e012      	b.n	8103024 <BSP_TS_GetState+0x210>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8102ffe:	683b      	ldr	r3, [r7, #0]
 8103000:	2200      	movs	r2, #0
 8103002:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8103004:	4a0c      	ldr	r2, [pc, #48]	; (8103038 <BSP_TS_GetState+0x224>)
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	015b      	lsls	r3, r3, #5
 810300a:	4413      	add	r3, r2
 810300c:	3318      	adds	r3, #24
 810300e:	681a      	ldr	r2, [r3, #0]
 8103010:	683b      	ldr	r3, [r7, #0]
 8103012:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8103014:	4a08      	ldr	r2, [pc, #32]	; (8103038 <BSP_TS_GetState+0x224>)
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	015b      	lsls	r3, r3, #5
 810301a:	4413      	add	r3, r2
 810301c:	331c      	adds	r3, #28
 810301e:	681a      	ldr	r2, [r3, #0]
 8103020:	683b      	ldr	r3, [r7, #0]
 8103022:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8103024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8103026:	4618      	mov	r0, r3
 8103028:	3728      	adds	r7, #40	; 0x28
 810302a:	46bd      	mov	sp, r7
 810302c:	bd80      	pop	{r7, pc}
 810302e:	bf00      	nop
 8103030:	24000d7c 	.word	0x24000d7c
 8103034:	24000d80 	.word	0x24000d80
 8103038:	24000d84 	.word	0x24000d84

0810303c <EXC7200_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t EXC7200_Probe(uint32_t Instance)
{
 810303c:	b580      	push	{r7, lr}
 810303e:	b08a      	sub	sp, #40	; 0x28
 8103040:	af00      	add	r7, sp, #0
 8103042:	6078      	str	r0, [r7, #4]
  int32_t ret               = BSP_ERROR_NONE;
 8103044:	2300      	movs	r3, #0
 8103046:	627b      	str	r3, [r7, #36]	; 0x24
  EXC7200_IO_t              IOCtx;
  static EXC7200_Object_t   EXC7200Obj;
  uint32_t exc7200_id       = 0U;
 8103048:	2300      	movs	r3, #0
 810304a:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 810304c:	2308      	movs	r3, #8
 810304e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
 8103050:	4b23      	ldr	r3, [pc, #140]	; (81030e0 <EXC7200_Probe+0xa4>)
 8103052:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8103054:	4b23      	ldr	r3, [pc, #140]	; (81030e4 <EXC7200_Probe+0xa8>)
 8103056:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8103058:	4b23      	ldr	r3, [pc, #140]	; (81030e8 <EXC7200_Probe+0xac>)
 810305a:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 810305c:	4b23      	ldr	r3, [pc, #140]	; (81030ec <EXC7200_Probe+0xb0>)
 810305e:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8103060:	4b23      	ldr	r3, [pc, #140]	; (81030f0 <EXC7200_Probe+0xb4>)
 8103062:	623b      	str	r3, [r7, #32]

  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8103064:	f107 030c 	add.w	r3, r7, #12
 8103068:	4619      	mov	r1, r3
 810306a:	4822      	ldr	r0, [pc, #136]	; (81030f4 <EXC7200_Probe+0xb8>)
 810306c:	f7fd fbf8 	bl	8100860 <EXC7200_RegisterBusIO>
 8103070:	4603      	mov	r3, r0
 8103072:	2b00      	cmp	r3, #0
 8103074:	d003      	beq.n	810307e <EXC7200_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8103076:	f06f 0307 	mvn.w	r3, #7
 810307a:	627b      	str	r3, [r7, #36]	; 0x24
 810307c:	e02b      	b.n	81030d6 <EXC7200_Probe+0x9a>
  }
  else if(EXC7200_ReadID(&EXC7200Obj, &exc7200_id) != EXC7200_OK)
 810307e:	f107 0308 	add.w	r3, r7, #8
 8103082:	4619      	mov	r1, r3
 8103084:	481b      	ldr	r0, [pc, #108]	; (81030f4 <EXC7200_Probe+0xb8>)
 8103086:	f7fd fc93 	bl	81009b0 <EXC7200_ReadID>
 810308a:	4603      	mov	r3, r0
 810308c:	2b00      	cmp	r3, #0
 810308e:	d003      	beq.n	8103098 <EXC7200_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8103090:	f06f 0304 	mvn.w	r3, #4
 8103094:	627b      	str	r3, [r7, #36]	; 0x24
 8103096:	e01e      	b.n	81030d6 <EXC7200_Probe+0x9a>
  }
  else if(exc7200_id != EXC7200_ID)
 8103098:	68bb      	ldr	r3, [r7, #8]
 810309a:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 810309e:	d003      	beq.n	81030a8 <EXC7200_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 81030a0:	f06f 0306 	mvn.w	r3, #6
 81030a4:	627b      	str	r3, [r7, #36]	; 0x24
 81030a6:	e016      	b.n	81030d6 <EXC7200_Probe+0x9a>
  }
  else
  {
    Ts_CompObj[Instance] = &EXC7200Obj;
 81030a8:	4a13      	ldr	r2, [pc, #76]	; (81030f8 <EXC7200_Probe+0xbc>)
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	4911      	ldr	r1, [pc, #68]	; (81030f4 <EXC7200_Probe+0xb8>)
 81030ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 81030b2:	4b12      	ldr	r3, [pc, #72]	; (81030fc <EXC7200_Probe+0xc0>)
 81030b4:	4a12      	ldr	r2, [pc, #72]	; (8103100 <EXC7200_Probe+0xc4>)
 81030b6:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 81030b8:	4b10      	ldr	r3, [pc, #64]	; (81030fc <EXC7200_Probe+0xc0>)
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	490e      	ldr	r1, [pc, #56]	; (81030f8 <EXC7200_Probe+0xbc>)
 81030c0:	687a      	ldr	r2, [r7, #4]
 81030c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 81030c6:	4610      	mov	r0, r2
 81030c8:	4798      	blx	r3
 81030ca:	4603      	mov	r3, r0
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d002      	beq.n	81030d6 <EXC7200_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 81030d0:	f06f 0304 	mvn.w	r3, #4
 81030d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 81030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81030d8:	4618      	mov	r0, r3
 81030da:	3728      	adds	r7, #40	; 0x28
 81030dc:	46bd      	mov	sp, r7
 81030de:	bd80      	pop	{r7, pc}
 81030e0:	0810121d 	.word	0x0810121d
 81030e4:	08101295 	.word	0x08101295
 81030e8:	081013c5 	.word	0x081013c5
 81030ec:	08101369 	.word	0x08101369
 81030f0:	08101421 	.word	0x08101421
 81030f4:	24000da4 	.word	0x24000da4
 81030f8:	24000d80 	.word	0x24000d80
 81030fc:	24000d7c 	.word	0x24000d7c
 8103100:	24000008 	.word	0x24000008

08103104 <TS3510_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t TS3510_Probe(uint32_t Instance)
{
 8103104:	b580      	push	{r7, lr}
 8103106:	b08a      	sub	sp, #40	; 0x28
 8103108:	af00      	add	r7, sp, #0
 810310a:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 810310c:	2300      	movs	r3, #0
 810310e:	627b      	str	r3, [r7, #36]	; 0x24
  TS3510_IO_t              IOCtx;
  static TS3510_Object_t   TS3510Obj;
  uint32_t ts3510_id       = 0U;
 8103110:	2300      	movs	r3, #0
 8103112:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8103114:	2380      	movs	r3, #128	; 0x80
 8103116:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
 8103118:	4b24      	ldr	r3, [pc, #144]	; (81031ac <TS3510_Probe+0xa8>)
 810311a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 810311c:	4b24      	ldr	r3, [pc, #144]	; (81031b0 <TS3510_Probe+0xac>)
 810311e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8103120:	4b24      	ldr	r3, [pc, #144]	; (81031b4 <TS3510_Probe+0xb0>)
 8103122:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8103124:	4b24      	ldr	r3, [pc, #144]	; (81031b8 <TS3510_Probe+0xb4>)
 8103126:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8103128:	4b24      	ldr	r3, [pc, #144]	; (81031bc <TS3510_Probe+0xb8>)
 810312a:	623b      	str	r3, [r7, #32]

  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 810312c:	f107 030c 	add.w	r3, r7, #12
 8103130:	4619      	mov	r1, r3
 8103132:	4823      	ldr	r0, [pc, #140]	; (81031c0 <TS3510_Probe+0xbc>)
 8103134:	f7fd fe50 	bl	8100dd8 <TS3510_RegisterBusIO>
 8103138:	4603      	mov	r3, r0
 810313a:	2b00      	cmp	r3, #0
 810313c:	d003      	beq.n	8103146 <TS3510_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 810313e:	f06f 0307 	mvn.w	r3, #7
 8103142:	627b      	str	r3, [r7, #36]	; 0x24
 8103144:	e02c      	b.n	81031a0 <TS3510_Probe+0x9c>
  }
  else if(TS3510_ReadID(&TS3510Obj, &ts3510_id) != TS3510_OK)
 8103146:	f107 0308 	add.w	r3, r7, #8
 810314a:	4619      	mov	r1, r3
 810314c:	481c      	ldr	r0, [pc, #112]	; (81031c0 <TS3510_Probe+0xbc>)
 810314e:	f7fd feeb 	bl	8100f28 <TS3510_ReadID>
 8103152:	4603      	mov	r3, r0
 8103154:	2b00      	cmp	r3, #0
 8103156:	d003      	beq.n	8103160 <TS3510_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8103158:	f06f 0304 	mvn.w	r3, #4
 810315c:	627b      	str	r3, [r7, #36]	; 0x24
 810315e:	e01f      	b.n	81031a0 <TS3510_Probe+0x9c>
  }
  else if(ts3510_id != TS3510_ID)
 8103160:	68bb      	ldr	r3, [r7, #8]
 8103162:	f243 5210 	movw	r2, #13584	; 0x3510
 8103166:	4293      	cmp	r3, r2
 8103168:	d003      	beq.n	8103172 <TS3510_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 810316a:	f06f 0306 	mvn.w	r3, #6
 810316e:	627b      	str	r3, [r7, #36]	; 0x24
 8103170:	e016      	b.n	81031a0 <TS3510_Probe+0x9c>
  }
  else
  {
    Ts_CompObj[Instance] = &TS3510Obj;
 8103172:	4a14      	ldr	r2, [pc, #80]	; (81031c4 <TS3510_Probe+0xc0>)
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	4912      	ldr	r1, [pc, #72]	; (81031c0 <TS3510_Probe+0xbc>)
 8103178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 810317c:	4b12      	ldr	r3, [pc, #72]	; (81031c8 <TS3510_Probe+0xc4>)
 810317e:	4a13      	ldr	r2, [pc, #76]	; (81031cc <TS3510_Probe+0xc8>)
 8103180:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8103182:	4b11      	ldr	r3, [pc, #68]	; (81031c8 <TS3510_Probe+0xc4>)
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	490e      	ldr	r1, [pc, #56]	; (81031c4 <TS3510_Probe+0xc0>)
 810318a:	687a      	ldr	r2, [r7, #4]
 810318c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8103190:	4610      	mov	r0, r2
 8103192:	4798      	blx	r3
 8103194:	4603      	mov	r3, r0
 8103196:	2b00      	cmp	r3, #0
 8103198:	d002      	beq.n	81031a0 <TS3510_Probe+0x9c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 810319a:	f06f 0304 	mvn.w	r3, #4
 810319e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 81031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81031a2:	4618      	mov	r0, r3
 81031a4:	3728      	adds	r7, #40	; 0x28
 81031a6:	46bd      	mov	sp, r7
 81031a8:	bd80      	pop	{r7, pc}
 81031aa:	bf00      	nop
 81031ac:	0810121d 	.word	0x0810121d
 81031b0:	08101295 	.word	0x08101295
 81031b4:	081013c5 	.word	0x081013c5
 81031b8:	08101369 	.word	0x08101369
 81031bc:	08101421 	.word	0x08101421
 81031c0:	24000dcc 	.word	0x24000dcc
 81031c4:	24000d80 	.word	0x24000d80
 81031c8:	24000d7c 	.word	0x24000d7c
 81031cc:	24000038 	.word	0x24000038

081031d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81031d0:	b580      	push	{r7, lr}
 81031d2:	b082      	sub	sp, #8
 81031d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81031d6:	2003      	movs	r0, #3
 81031d8:	f000 f99c 	bl	8103514 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81031dc:	f003 f828 	bl	8106230 <HAL_RCC_GetSysClockFreq>
 81031e0:	4602      	mov	r2, r0
 81031e2:	4b15      	ldr	r3, [pc, #84]	; (8103238 <HAL_Init+0x68>)
 81031e4:	699b      	ldr	r3, [r3, #24]
 81031e6:	0a1b      	lsrs	r3, r3, #8
 81031e8:	f003 030f 	and.w	r3, r3, #15
 81031ec:	4913      	ldr	r1, [pc, #76]	; (810323c <HAL_Init+0x6c>)
 81031ee:	5ccb      	ldrb	r3, [r1, r3]
 81031f0:	f003 031f 	and.w	r3, r3, #31
 81031f4:	fa22 f303 	lsr.w	r3, r2, r3
 81031f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81031fa:	4b0f      	ldr	r3, [pc, #60]	; (8103238 <HAL_Init+0x68>)
 81031fc:	699b      	ldr	r3, [r3, #24]
 81031fe:	f003 030f 	and.w	r3, r3, #15
 8103202:	4a0e      	ldr	r2, [pc, #56]	; (810323c <HAL_Init+0x6c>)
 8103204:	5cd3      	ldrb	r3, [r2, r3]
 8103206:	f003 031f 	and.w	r3, r3, #31
 810320a:	687a      	ldr	r2, [r7, #4]
 810320c:	fa22 f303 	lsr.w	r3, r2, r3
 8103210:	4a0b      	ldr	r2, [pc, #44]	; (8103240 <HAL_Init+0x70>)
 8103212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8103214:	4a0b      	ldr	r2, [pc, #44]	; (8103244 <HAL_Init+0x74>)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810321a:	2000      	movs	r0, #0
 810321c:	f000 f814 	bl	8103248 <HAL_InitTick>
 8103220:	4603      	mov	r3, r0
 8103222:	2b00      	cmp	r3, #0
 8103224:	d001      	beq.n	810322a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8103226:	2301      	movs	r3, #1
 8103228:	e002      	b.n	8103230 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810322a:	f7fd f9ed 	bl	8100608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810322e:	2300      	movs	r3, #0
}
 8103230:	4618      	mov	r0, r3
 8103232:	3708      	adds	r7, #8
 8103234:	46bd      	mov	sp, r7
 8103236:	bd80      	pop	{r7, pc}
 8103238:	58024400 	.word	0x58024400
 810323c:	0810b3d4 	.word	0x0810b3d4
 8103240:	24000004 	.word	0x24000004
 8103244:	24000000 	.word	0x24000000

08103248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103248:	b580      	push	{r7, lr}
 810324a:	b082      	sub	sp, #8
 810324c:	af00      	add	r7, sp, #0
 810324e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103250:	4b15      	ldr	r3, [pc, #84]	; (81032a8 <HAL_InitTick+0x60>)
 8103252:	781b      	ldrb	r3, [r3, #0]
 8103254:	2b00      	cmp	r3, #0
 8103256:	d101      	bne.n	810325c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103258:	2301      	movs	r3, #1
 810325a:	e021      	b.n	81032a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810325c:	4b13      	ldr	r3, [pc, #76]	; (81032ac <HAL_InitTick+0x64>)
 810325e:	681a      	ldr	r2, [r3, #0]
 8103260:	4b11      	ldr	r3, [pc, #68]	; (81032a8 <HAL_InitTick+0x60>)
 8103262:	781b      	ldrb	r3, [r3, #0]
 8103264:	4619      	mov	r1, r3
 8103266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810326a:	fbb3 f3f1 	udiv	r3, r3, r1
 810326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103272:	4618      	mov	r0, r3
 8103274:	f000 f981 	bl	810357a <HAL_SYSTICK_Config>
 8103278:	4603      	mov	r3, r0
 810327a:	2b00      	cmp	r3, #0
 810327c:	d001      	beq.n	8103282 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810327e:	2301      	movs	r3, #1
 8103280:	e00e      	b.n	81032a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	2b0f      	cmp	r3, #15
 8103286:	d80a      	bhi.n	810329e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103288:	2200      	movs	r2, #0
 810328a:	6879      	ldr	r1, [r7, #4]
 810328c:	f04f 30ff 	mov.w	r0, #4294967295
 8103290:	f000 f94b 	bl	810352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103294:	4a06      	ldr	r2, [pc, #24]	; (81032b0 <HAL_InitTick+0x68>)
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810329a:	2300      	movs	r3, #0
 810329c:	e000      	b.n	81032a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810329e:	2301      	movs	r3, #1
}
 81032a0:	4618      	mov	r0, r3
 81032a2:	3708      	adds	r7, #8
 81032a4:	46bd      	mov	sp, r7
 81032a6:	bd80      	pop	{r7, pc}
 81032a8:	2400006c 	.word	0x2400006c
 81032ac:	24000000 	.word	0x24000000
 81032b0:	24000068 	.word	0x24000068

081032b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81032b4:	b480      	push	{r7}
 81032b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81032b8:	4b06      	ldr	r3, [pc, #24]	; (81032d4 <HAL_IncTick+0x20>)
 81032ba:	781b      	ldrb	r3, [r3, #0]
 81032bc:	461a      	mov	r2, r3
 81032be:	4b06      	ldr	r3, [pc, #24]	; (81032d8 <HAL_IncTick+0x24>)
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4413      	add	r3, r2
 81032c4:	4a04      	ldr	r2, [pc, #16]	; (81032d8 <HAL_IncTick+0x24>)
 81032c6:	6013      	str	r3, [r2, #0]
}
 81032c8:	bf00      	nop
 81032ca:	46bd      	mov	sp, r7
 81032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032d0:	4770      	bx	lr
 81032d2:	bf00      	nop
 81032d4:	2400006c 	.word	0x2400006c
 81032d8:	24000df4 	.word	0x24000df4

081032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81032dc:	b480      	push	{r7}
 81032de:	af00      	add	r7, sp, #0
  return uwTick;
 81032e0:	4b03      	ldr	r3, [pc, #12]	; (81032f0 <HAL_GetTick+0x14>)
 81032e2:	681b      	ldr	r3, [r3, #0]
}
 81032e4:	4618      	mov	r0, r3
 81032e6:	46bd      	mov	sp, r7
 81032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ec:	4770      	bx	lr
 81032ee:	bf00      	nop
 81032f0:	24000df4 	.word	0x24000df4

081032f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81032f4:	b580      	push	{r7, lr}
 81032f6:	b084      	sub	sp, #16
 81032f8:	af00      	add	r7, sp, #0
 81032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81032fc:	f7ff ffee 	bl	81032dc <HAL_GetTick>
 8103300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103306:	68fb      	ldr	r3, [r7, #12]
 8103308:	f1b3 3fff 	cmp.w	r3, #4294967295
 810330c:	d005      	beq.n	810331a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810330e:	4b0a      	ldr	r3, [pc, #40]	; (8103338 <HAL_Delay+0x44>)
 8103310:	781b      	ldrb	r3, [r3, #0]
 8103312:	461a      	mov	r2, r3
 8103314:	68fb      	ldr	r3, [r7, #12]
 8103316:	4413      	add	r3, r2
 8103318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810331a:	bf00      	nop
 810331c:	f7ff ffde 	bl	81032dc <HAL_GetTick>
 8103320:	4602      	mov	r2, r0
 8103322:	68bb      	ldr	r3, [r7, #8]
 8103324:	1ad3      	subs	r3, r2, r3
 8103326:	68fa      	ldr	r2, [r7, #12]
 8103328:	429a      	cmp	r2, r3
 810332a:	d8f7      	bhi.n	810331c <HAL_Delay+0x28>
  {
  }
}
 810332c:	bf00      	nop
 810332e:	bf00      	nop
 8103330:	3710      	adds	r7, #16
 8103332:	46bd      	mov	sp, r7
 8103334:	bd80      	pop	{r7, pc}
 8103336:	bf00      	nop
 8103338:	2400006c 	.word	0x2400006c

0810333c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810333c:	b480      	push	{r7}
 810333e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103340:	4b03      	ldr	r3, [pc, #12]	; (8103350 <HAL_GetREVID+0x14>)
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	0c1b      	lsrs	r3, r3, #16
}
 8103346:	4618      	mov	r0, r3
 8103348:	46bd      	mov	sp, r7
 810334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334e:	4770      	bx	lr
 8103350:	5c001000 	.word	0x5c001000

08103354 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8103354:	b480      	push	{r7}
 8103356:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8103358:	4b05      	ldr	r3, [pc, #20]	; (8103370 <HAL_EnableCompensationCell+0x1c>)
 810335a:	6a1b      	ldr	r3, [r3, #32]
 810335c:	4a04      	ldr	r2, [pc, #16]	; (8103370 <HAL_EnableCompensationCell+0x1c>)
 810335e:	f043 0301 	orr.w	r3, r3, #1
 8103362:	6213      	str	r3, [r2, #32]
}
 8103364:	bf00      	nop
 8103366:	46bd      	mov	sp, r7
 8103368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810336c:	4770      	bx	lr
 810336e:	bf00      	nop
 8103370:	58000400 	.word	0x58000400

08103374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103374:	b480      	push	{r7}
 8103376:	b085      	sub	sp, #20
 8103378:	af00      	add	r7, sp, #0
 810337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	f003 0307 	and.w	r3, r3, #7
 8103382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103384:	4b0b      	ldr	r3, [pc, #44]	; (81033b4 <__NVIC_SetPriorityGrouping+0x40>)
 8103386:	68db      	ldr	r3, [r3, #12]
 8103388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810338a:	68ba      	ldr	r2, [r7, #8]
 810338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103390:	4013      	ands	r3, r2
 8103392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103394:	68fb      	ldr	r3, [r7, #12]
 8103396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103398:	68bb      	ldr	r3, [r7, #8]
 810339a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 810339c:	4b06      	ldr	r3, [pc, #24]	; (81033b8 <__NVIC_SetPriorityGrouping+0x44>)
 810339e:	4313      	orrs	r3, r2
 81033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81033a2:	4a04      	ldr	r2, [pc, #16]	; (81033b4 <__NVIC_SetPriorityGrouping+0x40>)
 81033a4:	68bb      	ldr	r3, [r7, #8]
 81033a6:	60d3      	str	r3, [r2, #12]
}
 81033a8:	bf00      	nop
 81033aa:	3714      	adds	r7, #20
 81033ac:	46bd      	mov	sp, r7
 81033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033b2:	4770      	bx	lr
 81033b4:	e000ed00 	.word	0xe000ed00
 81033b8:	05fa0000 	.word	0x05fa0000

081033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81033bc:	b480      	push	{r7}
 81033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81033c0:	4b04      	ldr	r3, [pc, #16]	; (81033d4 <__NVIC_GetPriorityGrouping+0x18>)
 81033c2:	68db      	ldr	r3, [r3, #12]
 81033c4:	0a1b      	lsrs	r3, r3, #8
 81033c6:	f003 0307 	and.w	r3, r3, #7
}
 81033ca:	4618      	mov	r0, r3
 81033cc:	46bd      	mov	sp, r7
 81033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d2:	4770      	bx	lr
 81033d4:	e000ed00 	.word	0xe000ed00

081033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81033d8:	b480      	push	{r7}
 81033da:	b083      	sub	sp, #12
 81033dc:	af00      	add	r7, sp, #0
 81033de:	4603      	mov	r3, r0
 81033e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81033e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	db0b      	blt.n	8103402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81033ea:	88fb      	ldrh	r3, [r7, #6]
 81033ec:	f003 021f 	and.w	r2, r3, #31
 81033f0:	4907      	ldr	r1, [pc, #28]	; (8103410 <__NVIC_EnableIRQ+0x38>)
 81033f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033f6:	095b      	lsrs	r3, r3, #5
 81033f8:	2001      	movs	r0, #1
 81033fa:	fa00 f202 	lsl.w	r2, r0, r2
 81033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103402:	bf00      	nop
 8103404:	370c      	adds	r7, #12
 8103406:	46bd      	mov	sp, r7
 8103408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340c:	4770      	bx	lr
 810340e:	bf00      	nop
 8103410:	e000e100 	.word	0xe000e100

08103414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103414:	b480      	push	{r7}
 8103416:	b083      	sub	sp, #12
 8103418:	af00      	add	r7, sp, #0
 810341a:	4603      	mov	r3, r0
 810341c:	6039      	str	r1, [r7, #0]
 810341e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103424:	2b00      	cmp	r3, #0
 8103426:	db0a      	blt.n	810343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103428:	683b      	ldr	r3, [r7, #0]
 810342a:	b2da      	uxtb	r2, r3
 810342c:	490c      	ldr	r1, [pc, #48]	; (8103460 <__NVIC_SetPriority+0x4c>)
 810342e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103432:	0112      	lsls	r2, r2, #4
 8103434:	b2d2      	uxtb	r2, r2
 8103436:	440b      	add	r3, r1
 8103438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810343c:	e00a      	b.n	8103454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810343e:	683b      	ldr	r3, [r7, #0]
 8103440:	b2da      	uxtb	r2, r3
 8103442:	4908      	ldr	r1, [pc, #32]	; (8103464 <__NVIC_SetPriority+0x50>)
 8103444:	88fb      	ldrh	r3, [r7, #6]
 8103446:	f003 030f 	and.w	r3, r3, #15
 810344a:	3b04      	subs	r3, #4
 810344c:	0112      	lsls	r2, r2, #4
 810344e:	b2d2      	uxtb	r2, r2
 8103450:	440b      	add	r3, r1
 8103452:	761a      	strb	r2, [r3, #24]
}
 8103454:	bf00      	nop
 8103456:	370c      	adds	r7, #12
 8103458:	46bd      	mov	sp, r7
 810345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345e:	4770      	bx	lr
 8103460:	e000e100 	.word	0xe000e100
 8103464:	e000ed00 	.word	0xe000ed00

08103468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103468:	b480      	push	{r7}
 810346a:	b089      	sub	sp, #36	; 0x24
 810346c:	af00      	add	r7, sp, #0
 810346e:	60f8      	str	r0, [r7, #12]
 8103470:	60b9      	str	r1, [r7, #8]
 8103472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103474:	68fb      	ldr	r3, [r7, #12]
 8103476:	f003 0307 	and.w	r3, r3, #7
 810347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810347c:	69fb      	ldr	r3, [r7, #28]
 810347e:	f1c3 0307 	rsb	r3, r3, #7
 8103482:	2b04      	cmp	r3, #4
 8103484:	bf28      	it	cs
 8103486:	2304      	movcs	r3, #4
 8103488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810348a:	69fb      	ldr	r3, [r7, #28]
 810348c:	3304      	adds	r3, #4
 810348e:	2b06      	cmp	r3, #6
 8103490:	d902      	bls.n	8103498 <NVIC_EncodePriority+0x30>
 8103492:	69fb      	ldr	r3, [r7, #28]
 8103494:	3b03      	subs	r3, #3
 8103496:	e000      	b.n	810349a <NVIC_EncodePriority+0x32>
 8103498:	2300      	movs	r3, #0
 810349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810349c:	f04f 32ff 	mov.w	r2, #4294967295
 81034a0:	69bb      	ldr	r3, [r7, #24]
 81034a2:	fa02 f303 	lsl.w	r3, r2, r3
 81034a6:	43da      	mvns	r2, r3
 81034a8:	68bb      	ldr	r3, [r7, #8]
 81034aa:	401a      	ands	r2, r3
 81034ac:	697b      	ldr	r3, [r7, #20]
 81034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81034b0:	f04f 31ff 	mov.w	r1, #4294967295
 81034b4:	697b      	ldr	r3, [r7, #20]
 81034b6:	fa01 f303 	lsl.w	r3, r1, r3
 81034ba:	43d9      	mvns	r1, r3
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034c0:	4313      	orrs	r3, r2
         );
}
 81034c2:	4618      	mov	r0, r3
 81034c4:	3724      	adds	r7, #36	; 0x24
 81034c6:	46bd      	mov	sp, r7
 81034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034cc:	4770      	bx	lr
	...

081034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81034d0:	b580      	push	{r7, lr}
 81034d2:	b082      	sub	sp, #8
 81034d4:	af00      	add	r7, sp, #0
 81034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	3b01      	subs	r3, #1
 81034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81034e0:	d301      	bcc.n	81034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81034e2:	2301      	movs	r3, #1
 81034e4:	e00f      	b.n	8103506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81034e6:	4a0a      	ldr	r2, [pc, #40]	; (8103510 <SysTick_Config+0x40>)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	3b01      	subs	r3, #1
 81034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81034ee:	210f      	movs	r1, #15
 81034f0:	f04f 30ff 	mov.w	r0, #4294967295
 81034f4:	f7ff ff8e 	bl	8103414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81034f8:	4b05      	ldr	r3, [pc, #20]	; (8103510 <SysTick_Config+0x40>)
 81034fa:	2200      	movs	r2, #0
 81034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81034fe:	4b04      	ldr	r3, [pc, #16]	; (8103510 <SysTick_Config+0x40>)
 8103500:	2207      	movs	r2, #7
 8103502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103504:	2300      	movs	r3, #0
}
 8103506:	4618      	mov	r0, r3
 8103508:	3708      	adds	r7, #8
 810350a:	46bd      	mov	sp, r7
 810350c:	bd80      	pop	{r7, pc}
 810350e:	bf00      	nop
 8103510:	e000e010 	.word	0xe000e010

08103514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103514:	b580      	push	{r7, lr}
 8103516:	b082      	sub	sp, #8
 8103518:	af00      	add	r7, sp, #0
 810351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810351c:	6878      	ldr	r0, [r7, #4]
 810351e:	f7ff ff29 	bl	8103374 <__NVIC_SetPriorityGrouping>
}
 8103522:	bf00      	nop
 8103524:	3708      	adds	r7, #8
 8103526:	46bd      	mov	sp, r7
 8103528:	bd80      	pop	{r7, pc}

0810352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810352a:	b580      	push	{r7, lr}
 810352c:	b086      	sub	sp, #24
 810352e:	af00      	add	r7, sp, #0
 8103530:	4603      	mov	r3, r0
 8103532:	60b9      	str	r1, [r7, #8]
 8103534:	607a      	str	r2, [r7, #4]
 8103536:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103538:	f7ff ff40 	bl	81033bc <__NVIC_GetPriorityGrouping>
 810353c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810353e:	687a      	ldr	r2, [r7, #4]
 8103540:	68b9      	ldr	r1, [r7, #8]
 8103542:	6978      	ldr	r0, [r7, #20]
 8103544:	f7ff ff90 	bl	8103468 <NVIC_EncodePriority>
 8103548:	4602      	mov	r2, r0
 810354a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810354e:	4611      	mov	r1, r2
 8103550:	4618      	mov	r0, r3
 8103552:	f7ff ff5f 	bl	8103414 <__NVIC_SetPriority>
}
 8103556:	bf00      	nop
 8103558:	3718      	adds	r7, #24
 810355a:	46bd      	mov	sp, r7
 810355c:	bd80      	pop	{r7, pc}

0810355e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810355e:	b580      	push	{r7, lr}
 8103560:	b082      	sub	sp, #8
 8103562:	af00      	add	r7, sp, #0
 8103564:	4603      	mov	r3, r0
 8103566:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810356c:	4618      	mov	r0, r3
 810356e:	f7ff ff33 	bl	81033d8 <__NVIC_EnableIRQ>
}
 8103572:	bf00      	nop
 8103574:	3708      	adds	r7, #8
 8103576:	46bd      	mov	sp, r7
 8103578:	bd80      	pop	{r7, pc}

0810357a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810357a:	b580      	push	{r7, lr}
 810357c:	b082      	sub	sp, #8
 810357e:	af00      	add	r7, sp, #0
 8103580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103582:	6878      	ldr	r0, [r7, #4]
 8103584:	f7ff ffa4 	bl	81034d0 <SysTick_Config>
 8103588:	4603      	mov	r3, r0
}
 810358a:	4618      	mov	r0, r3
 810358c:	3708      	adds	r7, #8
 810358e:	46bd      	mov	sp, r7
 8103590:	bd80      	pop	{r7, pc}
	...

08103594 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8103594:	b580      	push	{r7, lr}
 8103596:	b082      	sub	sp, #8
 8103598:	af00      	add	r7, sp, #0
 810359a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d101      	bne.n	81035a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 81035a2:	2301      	movs	r3, #1
 81035a4:	e04f      	b.n	8103646 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 81035ac:	b2db      	uxtb	r3, r3
 81035ae:	2b00      	cmp	r3, #0
 81035b0:	d106      	bne.n	81035c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	2200      	movs	r2, #0
 81035b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 81035ba:	6878      	ldr	r0, [r7, #4]
 81035bc:	f000 f84e 	bl	810365c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	2202      	movs	r2, #2
 81035c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	681a      	ldr	r2, [r3, #0]
 81035ce:	4b20      	ldr	r3, [pc, #128]	; (8103650 <HAL_DMA2D_Init+0xbc>)
 81035d0:	4013      	ands	r3, r2
 81035d2:	687a      	ldr	r2, [r7, #4]
 81035d4:	6851      	ldr	r1, [r2, #4]
 81035d6:	687a      	ldr	r2, [r7, #4]
 81035d8:	69d2      	ldr	r2, [r2, #28]
 81035da:	4311      	orrs	r1, r2
 81035dc:	687a      	ldr	r2, [r7, #4]
 81035de:	6812      	ldr	r2, [r2, #0]
 81035e0:	430b      	orrs	r3, r1
 81035e2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81035ea:	4b1a      	ldr	r3, [pc, #104]	; (8103654 <HAL_DMA2D_Init+0xc0>)
 81035ec:	4013      	ands	r3, r2
 81035ee:	687a      	ldr	r2, [r7, #4]
 81035f0:	6891      	ldr	r1, [r2, #8]
 81035f2:	687a      	ldr	r2, [r7, #4]
 81035f4:	6992      	ldr	r2, [r2, #24]
 81035f6:	4311      	orrs	r1, r2
 81035f8:	687a      	ldr	r2, [r7, #4]
 81035fa:	6812      	ldr	r2, [r2, #0]
 81035fc:	430b      	orrs	r3, r1
 81035fe:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103606:	4b14      	ldr	r3, [pc, #80]	; (8103658 <HAL_DMA2D_Init+0xc4>)
 8103608:	4013      	ands	r3, r2
 810360a:	687a      	ldr	r2, [r7, #4]
 810360c:	68d1      	ldr	r1, [r2, #12]
 810360e:	687a      	ldr	r2, [r7, #4]
 8103610:	6812      	ldr	r2, [r2, #0]
 8103612:	430b      	orrs	r3, r1
 8103614:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810361c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	691b      	ldr	r3, [r3, #16]
 8103624:	051a      	lsls	r2, r3, #20
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	695b      	ldr	r3, [r3, #20]
 810362a:	055b      	lsls	r3, r3, #21
 810362c:	431a      	orrs	r2, r3
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	430a      	orrs	r2, r1
 8103634:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	2200      	movs	r2, #0
 810363a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	2201      	movs	r2, #1
 8103640:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8103644:	2300      	movs	r3, #0
}
 8103646:	4618      	mov	r0, r3
 8103648:	3708      	adds	r7, #8
 810364a:	46bd      	mov	sp, r7
 810364c:	bd80      	pop	{r7, pc}
 810364e:	bf00      	nop
 8103650:	fff8ffbf 	.word	0xfff8ffbf
 8103654:	fffffef8 	.word	0xfffffef8
 8103658:	ffff0000 	.word	0xffff0000

0810365c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 810365c:	b480      	push	{r7}
 810365e:	b083      	sub	sp, #12
 8103660:	af00      	add	r7, sp, #0
 8103662:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8103664:	bf00      	nop
 8103666:	370c      	adds	r7, #12
 8103668:	46bd      	mov	sp, r7
 810366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810366e:	4770      	bx	lr

08103670 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8103670:	b580      	push	{r7, lr}
 8103672:	b086      	sub	sp, #24
 8103674:	af02      	add	r7, sp, #8
 8103676:	60f8      	str	r0, [r7, #12]
 8103678:	60b9      	str	r1, [r7, #8]
 810367a:	607a      	str	r2, [r7, #4]
 810367c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 810367e:	68fb      	ldr	r3, [r7, #12]
 8103680:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8103684:	2b01      	cmp	r3, #1
 8103686:	d101      	bne.n	810368c <HAL_DMA2D_Start+0x1c>
 8103688:	2302      	movs	r3, #2
 810368a:	e018      	b.n	81036be <HAL_DMA2D_Start+0x4e>
 810368c:	68fb      	ldr	r3, [r7, #12]
 810368e:	2201      	movs	r2, #1
 8103690:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8103694:	68fb      	ldr	r3, [r7, #12]
 8103696:	2202      	movs	r2, #2
 8103698:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 810369c:	69bb      	ldr	r3, [r7, #24]
 810369e:	9300      	str	r3, [sp, #0]
 81036a0:	683b      	ldr	r3, [r7, #0]
 81036a2:	687a      	ldr	r2, [r7, #4]
 81036a4:	68b9      	ldr	r1, [r7, #8]
 81036a6:	68f8      	ldr	r0, [r7, #12]
 81036a8:	f000 f9a4 	bl	81039f4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 81036ac:	68fb      	ldr	r3, [r7, #12]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	681a      	ldr	r2, [r3, #0]
 81036b2:	68fb      	ldr	r3, [r7, #12]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	f042 0201 	orr.w	r2, r2, #1
 81036ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 81036bc:	2300      	movs	r3, #0
}
 81036be:	4618      	mov	r0, r3
 81036c0:	3710      	adds	r7, #16
 81036c2:	46bd      	mov	sp, r7
 81036c4:	bd80      	pop	{r7, pc}

081036c6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 81036c6:	b580      	push	{r7, lr}
 81036c8:	b086      	sub	sp, #24
 81036ca:	af00      	add	r7, sp, #0
 81036cc:	6078      	str	r0, [r7, #4]
 81036ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 81036d0:	2300      	movs	r3, #0
 81036d2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	f003 0301 	and.w	r3, r3, #1
 81036de:	2b00      	cmp	r3, #0
 81036e0:	d056      	beq.n	8103790 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 81036e2:	f7ff fdfb 	bl	81032dc <HAL_GetTick>
 81036e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 81036e8:	e04b      	b.n	8103782 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 81036ea:	687b      	ldr	r3, [r7, #4]
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	685b      	ldr	r3, [r3, #4]
 81036f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 81036f2:	68fb      	ldr	r3, [r7, #12]
 81036f4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 81036f8:	2b00      	cmp	r3, #0
 81036fa:	d023      	beq.n	8103744 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 81036fc:	68fb      	ldr	r3, [r7, #12]
 81036fe:	f003 0320 	and.w	r3, r3, #32
 8103702:	2b00      	cmp	r3, #0
 8103704:	d005      	beq.n	8103712 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810370a:	f043 0202 	orr.w	r2, r3, #2
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8103712:	68fb      	ldr	r3, [r7, #12]
 8103714:	f003 0301 	and.w	r3, r3, #1
 8103718:	2b00      	cmp	r3, #0
 810371a:	d005      	beq.n	8103728 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103720:	f043 0201 	orr.w	r2, r3, #1
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	2221      	movs	r2, #33	; 0x21
 810372e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	2204      	movs	r2, #4
 8103734:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	2200      	movs	r2, #0
 810373c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8103740:	2301      	movs	r3, #1
 8103742:	e0a5      	b.n	8103890 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8103744:	683b      	ldr	r3, [r7, #0]
 8103746:	f1b3 3fff 	cmp.w	r3, #4294967295
 810374a:	d01a      	beq.n	8103782 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810374c:	f7ff fdc6 	bl	81032dc <HAL_GetTick>
 8103750:	4602      	mov	r2, r0
 8103752:	697b      	ldr	r3, [r7, #20]
 8103754:	1ad3      	subs	r3, r2, r3
 8103756:	683a      	ldr	r2, [r7, #0]
 8103758:	429a      	cmp	r2, r3
 810375a:	d302      	bcc.n	8103762 <HAL_DMA2D_PollForTransfer+0x9c>
 810375c:	683b      	ldr	r3, [r7, #0]
 810375e:	2b00      	cmp	r3, #0
 8103760:	d10f      	bne.n	8103782 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103766:	f043 0220 	orr.w	r2, r3, #32
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	2203      	movs	r2, #3
 8103772:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	2200      	movs	r2, #0
 810377a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 810377e:	2303      	movs	r3, #3
 8103780:	e086      	b.n	8103890 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	685b      	ldr	r3, [r3, #4]
 8103788:	f003 0302 	and.w	r3, r3, #2
 810378c:	2b00      	cmp	r3, #0
 810378e:	d0ac      	beq.n	81036ea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	69db      	ldr	r3, [r3, #28]
 8103796:	f003 0320 	and.w	r3, r3, #32
 810379a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037a2:	f003 0320 	and.w	r3, r3, #32
 81037a6:	693a      	ldr	r2, [r7, #16]
 81037a8:	4313      	orrs	r3, r2
 81037aa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 81037ac:	693b      	ldr	r3, [r7, #16]
 81037ae:	2b00      	cmp	r3, #0
 81037b0:	d061      	beq.n	8103876 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 81037b2:	f7ff fd93 	bl	81032dc <HAL_GetTick>
 81037b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 81037b8:	e056      	b.n	8103868 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	685b      	ldr	r3, [r3, #4]
 81037c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 81037c2:	68fb      	ldr	r3, [r7, #12]
 81037c4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 81037c8:	2b00      	cmp	r3, #0
 81037ca:	d02e      	beq.n	810382a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 81037cc:	68fb      	ldr	r3, [r7, #12]
 81037ce:	f003 0308 	and.w	r3, r3, #8
 81037d2:	2b00      	cmp	r3, #0
 81037d4:	d005      	beq.n	81037e2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81037da:	f043 0204 	orr.w	r2, r3, #4
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 81037e2:	68fb      	ldr	r3, [r7, #12]
 81037e4:	f003 0320 	and.w	r3, r3, #32
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d005      	beq.n	81037f8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81037f0:	f043 0202 	orr.w	r2, r3, #2
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 81037f8:	68fb      	ldr	r3, [r7, #12]
 81037fa:	f003 0301 	and.w	r3, r3, #1
 81037fe:	2b00      	cmp	r3, #0
 8103800:	d005      	beq.n	810380e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103806:	f043 0201 	orr.w	r2, r3, #1
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	2229      	movs	r2, #41	; 0x29
 8103814:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	2204      	movs	r2, #4
 810381a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	2200      	movs	r2, #0
 8103822:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8103826:	2301      	movs	r3, #1
 8103828:	e032      	b.n	8103890 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810382a:	683b      	ldr	r3, [r7, #0]
 810382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103830:	d01a      	beq.n	8103868 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103832:	f7ff fd53 	bl	81032dc <HAL_GetTick>
 8103836:	4602      	mov	r2, r0
 8103838:	697b      	ldr	r3, [r7, #20]
 810383a:	1ad3      	subs	r3, r2, r3
 810383c:	683a      	ldr	r2, [r7, #0]
 810383e:	429a      	cmp	r2, r3
 8103840:	d302      	bcc.n	8103848 <HAL_DMA2D_PollForTransfer+0x182>
 8103842:	683b      	ldr	r3, [r7, #0]
 8103844:	2b00      	cmp	r3, #0
 8103846:	d10f      	bne.n	8103868 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810384c:	f043 0220 	orr.w	r2, r3, #32
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	2203      	movs	r2, #3
 8103858:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	2200      	movs	r2, #0
 8103860:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8103864:	2303      	movs	r3, #3
 8103866:	e013      	b.n	8103890 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	685b      	ldr	r3, [r3, #4]
 810386e:	f003 0310 	and.w	r3, r3, #16
 8103872:	2b00      	cmp	r3, #0
 8103874:	d0a1      	beq.n	81037ba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	2212      	movs	r2, #18
 810387c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	2201      	movs	r2, #1
 8103882:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	2200      	movs	r2, #0
 810388a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 810388e:	2300      	movs	r3, #0
}
 8103890:	4618      	mov	r0, r3
 8103892:	3718      	adds	r7, #24
 8103894:	46bd      	mov	sp, r7
 8103896:	bd80      	pop	{r7, pc}

08103898 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8103898:	b480      	push	{r7}
 810389a:	b087      	sub	sp, #28
 810389c:	af00      	add	r7, sp, #0
 810389e:	6078      	str	r0, [r7, #4]
 81038a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	685b      	ldr	r3, [r3, #4]
 81038a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 81038aa:	683b      	ldr	r3, [r7, #0]
 81038ac:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 81038b4:	2b01      	cmp	r3, #1
 81038b6:	d101      	bne.n	81038bc <HAL_DMA2D_ConfigLayer+0x24>
 81038b8:	2302      	movs	r3, #2
 81038ba:	e092      	b.n	81039e2 <HAL_DMA2D_ConfigLayer+0x14a>
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	2201      	movs	r2, #1
 81038c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	2202      	movs	r2, #2
 81038c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 81038cc:	683a      	ldr	r2, [r7, #0]
 81038ce:	4613      	mov	r3, r2
 81038d0:	00db      	lsls	r3, r3, #3
 81038d2:	1a9b      	subs	r3, r3, r2
 81038d4:	009b      	lsls	r3, r3, #2
 81038d6:	3328      	adds	r3, #40	; 0x28
 81038d8:	687a      	ldr	r2, [r7, #4]
 81038da:	4413      	add	r3, r2
 81038dc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81038de:	68fb      	ldr	r3, [r7, #12]
 81038e0:	685a      	ldr	r2, [r3, #4]
 81038e2:	68fb      	ldr	r3, [r7, #12]
 81038e4:	689b      	ldr	r3, [r3, #8]
 81038e6:	041b      	lsls	r3, r3, #16
 81038e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 81038ea:	68fb      	ldr	r3, [r7, #12]
 81038ec:	691b      	ldr	r3, [r3, #16]
 81038ee:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81038f0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 81038f2:	68fb      	ldr	r3, [r7, #12]
 81038f4:	695b      	ldr	r3, [r3, #20]
 81038f6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81038f8:	4313      	orrs	r3, r2
 81038fa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 81038fc:	4b3c      	ldr	r3, [pc, #240]	; (81039f0 <HAL_DMA2D_ConfigLayer+0x158>)
 81038fe:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8103900:	68fb      	ldr	r3, [r7, #12]
 8103902:	685b      	ldr	r3, [r3, #4]
 8103904:	2b0a      	cmp	r3, #10
 8103906:	d003      	beq.n	8103910 <HAL_DMA2D_ConfigLayer+0x78>
 8103908:	68fb      	ldr	r3, [r7, #12]
 810390a:	685b      	ldr	r3, [r3, #4]
 810390c:	2b09      	cmp	r3, #9
 810390e:	d107      	bne.n	8103920 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8103910:	68fb      	ldr	r3, [r7, #12]
 8103912:	68db      	ldr	r3, [r3, #12]
 8103914:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8103918:	693a      	ldr	r2, [r7, #16]
 810391a:	4313      	orrs	r3, r2
 810391c:	613b      	str	r3, [r7, #16]
 810391e:	e005      	b.n	810392c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8103920:	68fb      	ldr	r3, [r7, #12]
 8103922:	68db      	ldr	r3, [r3, #12]
 8103924:	061b      	lsls	r3, r3, #24
 8103926:	693a      	ldr	r2, [r7, #16]
 8103928:	4313      	orrs	r3, r2
 810392a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 810392c:	683b      	ldr	r3, [r7, #0]
 810392e:	2b00      	cmp	r3, #0
 8103930:	d120      	bne.n	8103974 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103938:	697b      	ldr	r3, [r7, #20]
 810393a:	43db      	mvns	r3, r3
 810393c:	ea02 0103 	and.w	r1, r2, r3
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	693a      	ldr	r2, [r7, #16]
 8103946:	430a      	orrs	r2, r1
 8103948:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	68fa      	ldr	r2, [r7, #12]
 8103950:	6812      	ldr	r2, [r2, #0]
 8103952:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8103954:	68fb      	ldr	r3, [r7, #12]
 8103956:	685b      	ldr	r3, [r3, #4]
 8103958:	2b0a      	cmp	r3, #10
 810395a:	d003      	beq.n	8103964 <HAL_DMA2D_ConfigLayer+0xcc>
 810395c:	68fb      	ldr	r3, [r7, #12]
 810395e:	685b      	ldr	r3, [r3, #4]
 8103960:	2b09      	cmp	r3, #9
 8103962:	d135      	bne.n	81039d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	68da      	ldr	r2, [r3, #12]
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8103970:	629a      	str	r2, [r3, #40]	; 0x28
 8103972:	e02d      	b.n	81039d0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8103974:	68fb      	ldr	r3, [r7, #12]
 8103976:	685b      	ldr	r3, [r3, #4]
 8103978:	2b0b      	cmp	r3, #11
 810397a:	d109      	bne.n	8103990 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 810397c:	68fb      	ldr	r3, [r7, #12]
 810397e:	699b      	ldr	r3, [r3, #24]
 8103980:	049b      	lsls	r3, r3, #18
 8103982:	693a      	ldr	r2, [r7, #16]
 8103984:	4313      	orrs	r3, r2
 8103986:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8103988:	697b      	ldr	r3, [r7, #20]
 810398a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 810398e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	69da      	ldr	r2, [r3, #28]
 8103996:	697b      	ldr	r3, [r7, #20]
 8103998:	43db      	mvns	r3, r3
 810399a:	ea02 0103 	and.w	r1, r2, r3
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	693a      	ldr	r2, [r7, #16]
 81039a4:	430a      	orrs	r2, r1
 81039a6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	68fa      	ldr	r2, [r7, #12]
 81039ae:	6812      	ldr	r2, [r2, #0]
 81039b0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 81039b2:	68fb      	ldr	r3, [r7, #12]
 81039b4:	685b      	ldr	r3, [r3, #4]
 81039b6:	2b0a      	cmp	r3, #10
 81039b8:	d003      	beq.n	81039c2 <HAL_DMA2D_ConfigLayer+0x12a>
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	685b      	ldr	r3, [r3, #4]
 81039be:	2b09      	cmp	r3, #9
 81039c0:	d106      	bne.n	81039d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 81039c2:	68fb      	ldr	r3, [r7, #12]
 81039c4:	68da      	ldr	r2, [r3, #12]
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 81039ce:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	2201      	movs	r2, #1
 81039d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	2200      	movs	r2, #0
 81039dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 81039e0:	2300      	movs	r3, #0
}
 81039e2:	4618      	mov	r0, r3
 81039e4:	371c      	adds	r7, #28
 81039e6:	46bd      	mov	sp, r7
 81039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039ec:	4770      	bx	lr
 81039ee:	bf00      	nop
 81039f0:	ff33000f 	.word	0xff33000f

081039f4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 81039f4:	b480      	push	{r7}
 81039f6:	b08b      	sub	sp, #44	; 0x2c
 81039f8:	af00      	add	r7, sp, #0
 81039fa:	60f8      	str	r0, [r7, #12]
 81039fc:	60b9      	str	r1, [r7, #8]
 81039fe:	607a      	str	r2, [r7, #4]
 8103a00:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8103a02:	68fb      	ldr	r3, [r7, #12]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a08:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8103a0c:	683b      	ldr	r3, [r7, #0]
 8103a0e:	041a      	lsls	r2, r3, #16
 8103a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a12:	431a      	orrs	r2, r3
 8103a14:	68fb      	ldr	r3, [r7, #12]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	430a      	orrs	r2, r1
 8103a1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8103a1c:	68fb      	ldr	r3, [r7, #12]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	687a      	ldr	r2, [r7, #4]
 8103a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	685b      	ldr	r3, [r3, #4]
 8103a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103a2c:	d174      	bne.n	8103b18 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8103a2e:	68bb      	ldr	r3, [r7, #8]
 8103a30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8103a34:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8103a36:	68bb      	ldr	r3, [r7, #8]
 8103a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8103a3c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8103a3e:	68bb      	ldr	r3, [r7, #8]
 8103a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8103a44:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8103a46:	68bb      	ldr	r3, [r7, #8]
 8103a48:	b2db      	uxtb	r3, r3
 8103a4a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8103a4c:	68fb      	ldr	r3, [r7, #12]
 8103a4e:	689b      	ldr	r3, [r3, #8]
 8103a50:	2b00      	cmp	r3, #0
 8103a52:	d108      	bne.n	8103a66 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8103a54:	69ba      	ldr	r2, [r7, #24]
 8103a56:	69fb      	ldr	r3, [r7, #28]
 8103a58:	431a      	orrs	r2, r3
 8103a5a:	6a3b      	ldr	r3, [r7, #32]
 8103a5c:	4313      	orrs	r3, r2
 8103a5e:	697a      	ldr	r2, [r7, #20]
 8103a60:	4313      	orrs	r3, r2
 8103a62:	627b      	str	r3, [r7, #36]	; 0x24
 8103a64:	e053      	b.n	8103b0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8103a66:	68fb      	ldr	r3, [r7, #12]
 8103a68:	689b      	ldr	r3, [r3, #8]
 8103a6a:	2b01      	cmp	r3, #1
 8103a6c:	d106      	bne.n	8103a7c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8103a6e:	69ba      	ldr	r2, [r7, #24]
 8103a70:	69fb      	ldr	r3, [r7, #28]
 8103a72:	4313      	orrs	r3, r2
 8103a74:	697a      	ldr	r2, [r7, #20]
 8103a76:	4313      	orrs	r3, r2
 8103a78:	627b      	str	r3, [r7, #36]	; 0x24
 8103a7a:	e048      	b.n	8103b0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8103a7c:	68fb      	ldr	r3, [r7, #12]
 8103a7e:	689b      	ldr	r3, [r3, #8]
 8103a80:	2b02      	cmp	r3, #2
 8103a82:	d111      	bne.n	8103aa8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8103a84:	69fb      	ldr	r3, [r7, #28]
 8103a86:	0cdb      	lsrs	r3, r3, #19
 8103a88:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8103a8a:	69bb      	ldr	r3, [r7, #24]
 8103a8c:	0a9b      	lsrs	r3, r3, #10
 8103a8e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8103a90:	697b      	ldr	r3, [r7, #20]
 8103a92:	08db      	lsrs	r3, r3, #3
 8103a94:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8103a96:	69bb      	ldr	r3, [r7, #24]
 8103a98:	015a      	lsls	r2, r3, #5
 8103a9a:	69fb      	ldr	r3, [r7, #28]
 8103a9c:	02db      	lsls	r3, r3, #11
 8103a9e:	4313      	orrs	r3, r2
 8103aa0:	697a      	ldr	r2, [r7, #20]
 8103aa2:	4313      	orrs	r3, r2
 8103aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8103aa6:	e032      	b.n	8103b0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	689b      	ldr	r3, [r3, #8]
 8103aac:	2b03      	cmp	r3, #3
 8103aae:	d117      	bne.n	8103ae0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8103ab0:	6a3b      	ldr	r3, [r7, #32]
 8103ab2:	0fdb      	lsrs	r3, r3, #31
 8103ab4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8103ab6:	69fb      	ldr	r3, [r7, #28]
 8103ab8:	0cdb      	lsrs	r3, r3, #19
 8103aba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8103abc:	69bb      	ldr	r3, [r7, #24]
 8103abe:	0adb      	lsrs	r3, r3, #11
 8103ac0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8103ac2:	697b      	ldr	r3, [r7, #20]
 8103ac4:	08db      	lsrs	r3, r3, #3
 8103ac6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8103ac8:	69bb      	ldr	r3, [r7, #24]
 8103aca:	015a      	lsls	r2, r3, #5
 8103acc:	69fb      	ldr	r3, [r7, #28]
 8103ace:	029b      	lsls	r3, r3, #10
 8103ad0:	431a      	orrs	r2, r3
 8103ad2:	6a3b      	ldr	r3, [r7, #32]
 8103ad4:	03db      	lsls	r3, r3, #15
 8103ad6:	4313      	orrs	r3, r2
 8103ad8:	697a      	ldr	r2, [r7, #20]
 8103ada:	4313      	orrs	r3, r2
 8103adc:	627b      	str	r3, [r7, #36]	; 0x24
 8103ade:	e016      	b.n	8103b0e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8103ae0:	6a3b      	ldr	r3, [r7, #32]
 8103ae2:	0f1b      	lsrs	r3, r3, #28
 8103ae4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8103ae6:	69fb      	ldr	r3, [r7, #28]
 8103ae8:	0d1b      	lsrs	r3, r3, #20
 8103aea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8103aec:	69bb      	ldr	r3, [r7, #24]
 8103aee:	0b1b      	lsrs	r3, r3, #12
 8103af0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8103af2:	697b      	ldr	r3, [r7, #20]
 8103af4:	091b      	lsrs	r3, r3, #4
 8103af6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8103af8:	69bb      	ldr	r3, [r7, #24]
 8103afa:	011a      	lsls	r2, r3, #4
 8103afc:	69fb      	ldr	r3, [r7, #28]
 8103afe:	021b      	lsls	r3, r3, #8
 8103b00:	431a      	orrs	r2, r3
 8103b02:	6a3b      	ldr	r3, [r7, #32]
 8103b04:	031b      	lsls	r3, r3, #12
 8103b06:	4313      	orrs	r3, r2
 8103b08:	697a      	ldr	r2, [r7, #20]
 8103b0a:	4313      	orrs	r3, r2
 8103b0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8103b0e:	68fb      	ldr	r3, [r7, #12]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103b14:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8103b16:	e00d      	b.n	8103b34 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8103b18:	68fb      	ldr	r3, [r7, #12]
 8103b1a:	685b      	ldr	r3, [r3, #4]
 8103b1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103b20:	d104      	bne.n	8103b2c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8103b22:	68fb      	ldr	r3, [r7, #12]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	68ba      	ldr	r2, [r7, #8]
 8103b28:	615a      	str	r2, [r3, #20]
}
 8103b2a:	e003      	b.n	8103b34 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8103b2c:	68fb      	ldr	r3, [r7, #12]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	68ba      	ldr	r2, [r7, #8]
 8103b32:	60da      	str	r2, [r3, #12]
}
 8103b34:	bf00      	nop
 8103b36:	372c      	adds	r7, #44	; 0x2c
 8103b38:	46bd      	mov	sp, r7
 8103b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b3e:	4770      	bx	lr

08103b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103b40:	b480      	push	{r7}
 8103b42:	b089      	sub	sp, #36	; 0x24
 8103b44:	af00      	add	r7, sp, #0
 8103b46:	6078      	str	r0, [r7, #4]
 8103b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103b4a:	2300      	movs	r3, #0
 8103b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8103b4e:	4b89      	ldr	r3, [pc, #548]	; (8103d74 <HAL_GPIO_Init+0x234>)
 8103b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b52:	e194      	b.n	8103e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103b54:	683b      	ldr	r3, [r7, #0]
 8103b56:	681a      	ldr	r2, [r3, #0]
 8103b58:	2101      	movs	r1, #1
 8103b5a:	69fb      	ldr	r3, [r7, #28]
 8103b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8103b60:	4013      	ands	r3, r2
 8103b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103b64:	693b      	ldr	r3, [r7, #16]
 8103b66:	2b00      	cmp	r3, #0
 8103b68:	f000 8186 	beq.w	8103e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103b6c:	683b      	ldr	r3, [r7, #0]
 8103b6e:	685b      	ldr	r3, [r3, #4]
 8103b70:	f003 0303 	and.w	r3, r3, #3
 8103b74:	2b01      	cmp	r3, #1
 8103b76:	d005      	beq.n	8103b84 <HAL_GPIO_Init+0x44>
 8103b78:	683b      	ldr	r3, [r7, #0]
 8103b7a:	685b      	ldr	r3, [r3, #4]
 8103b7c:	f003 0303 	and.w	r3, r3, #3
 8103b80:	2b02      	cmp	r3, #2
 8103b82:	d130      	bne.n	8103be6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	689b      	ldr	r3, [r3, #8]
 8103b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103b8a:	69fb      	ldr	r3, [r7, #28]
 8103b8c:	005b      	lsls	r3, r3, #1
 8103b8e:	2203      	movs	r2, #3
 8103b90:	fa02 f303 	lsl.w	r3, r2, r3
 8103b94:	43db      	mvns	r3, r3
 8103b96:	69ba      	ldr	r2, [r7, #24]
 8103b98:	4013      	ands	r3, r2
 8103b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103b9c:	683b      	ldr	r3, [r7, #0]
 8103b9e:	68da      	ldr	r2, [r3, #12]
 8103ba0:	69fb      	ldr	r3, [r7, #28]
 8103ba2:	005b      	lsls	r3, r3, #1
 8103ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8103ba8:	69ba      	ldr	r2, [r7, #24]
 8103baa:	4313      	orrs	r3, r2
 8103bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	69ba      	ldr	r2, [r7, #24]
 8103bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	685b      	ldr	r3, [r3, #4]
 8103bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103bba:	2201      	movs	r2, #1
 8103bbc:	69fb      	ldr	r3, [r7, #28]
 8103bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8103bc2:	43db      	mvns	r3, r3
 8103bc4:	69ba      	ldr	r2, [r7, #24]
 8103bc6:	4013      	ands	r3, r2
 8103bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103bca:	683b      	ldr	r3, [r7, #0]
 8103bcc:	685b      	ldr	r3, [r3, #4]
 8103bce:	091b      	lsrs	r3, r3, #4
 8103bd0:	f003 0201 	and.w	r2, r3, #1
 8103bd4:	69fb      	ldr	r3, [r7, #28]
 8103bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8103bda:	69ba      	ldr	r2, [r7, #24]
 8103bdc:	4313      	orrs	r3, r2
 8103bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	69ba      	ldr	r2, [r7, #24]
 8103be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103be6:	683b      	ldr	r3, [r7, #0]
 8103be8:	685b      	ldr	r3, [r3, #4]
 8103bea:	f003 0303 	and.w	r3, r3, #3
 8103bee:	2b03      	cmp	r3, #3
 8103bf0:	d017      	beq.n	8103c22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	68db      	ldr	r3, [r3, #12]
 8103bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103bf8:	69fb      	ldr	r3, [r7, #28]
 8103bfa:	005b      	lsls	r3, r3, #1
 8103bfc:	2203      	movs	r2, #3
 8103bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8103c02:	43db      	mvns	r3, r3
 8103c04:	69ba      	ldr	r2, [r7, #24]
 8103c06:	4013      	ands	r3, r2
 8103c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103c0a:	683b      	ldr	r3, [r7, #0]
 8103c0c:	689a      	ldr	r2, [r3, #8]
 8103c0e:	69fb      	ldr	r3, [r7, #28]
 8103c10:	005b      	lsls	r3, r3, #1
 8103c12:	fa02 f303 	lsl.w	r3, r2, r3
 8103c16:	69ba      	ldr	r2, [r7, #24]
 8103c18:	4313      	orrs	r3, r2
 8103c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	69ba      	ldr	r2, [r7, #24]
 8103c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103c22:	683b      	ldr	r3, [r7, #0]
 8103c24:	685b      	ldr	r3, [r3, #4]
 8103c26:	f003 0303 	and.w	r3, r3, #3
 8103c2a:	2b02      	cmp	r3, #2
 8103c2c:	d123      	bne.n	8103c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103c2e:	69fb      	ldr	r3, [r7, #28]
 8103c30:	08da      	lsrs	r2, r3, #3
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	3208      	adds	r2, #8
 8103c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103c3c:	69fb      	ldr	r3, [r7, #28]
 8103c3e:	f003 0307 	and.w	r3, r3, #7
 8103c42:	009b      	lsls	r3, r3, #2
 8103c44:	220f      	movs	r2, #15
 8103c46:	fa02 f303 	lsl.w	r3, r2, r3
 8103c4a:	43db      	mvns	r3, r3
 8103c4c:	69ba      	ldr	r2, [r7, #24]
 8103c4e:	4013      	ands	r3, r2
 8103c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103c52:	683b      	ldr	r3, [r7, #0]
 8103c54:	691a      	ldr	r2, [r3, #16]
 8103c56:	69fb      	ldr	r3, [r7, #28]
 8103c58:	f003 0307 	and.w	r3, r3, #7
 8103c5c:	009b      	lsls	r3, r3, #2
 8103c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8103c62:	69ba      	ldr	r2, [r7, #24]
 8103c64:	4313      	orrs	r3, r2
 8103c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103c68:	69fb      	ldr	r3, [r7, #28]
 8103c6a:	08da      	lsrs	r2, r3, #3
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	3208      	adds	r2, #8
 8103c70:	69b9      	ldr	r1, [r7, #24]
 8103c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	681b      	ldr	r3, [r3, #0]
 8103c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103c7c:	69fb      	ldr	r3, [r7, #28]
 8103c7e:	005b      	lsls	r3, r3, #1
 8103c80:	2203      	movs	r2, #3
 8103c82:	fa02 f303 	lsl.w	r3, r2, r3
 8103c86:	43db      	mvns	r3, r3
 8103c88:	69ba      	ldr	r2, [r7, #24]
 8103c8a:	4013      	ands	r3, r2
 8103c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103c8e:	683b      	ldr	r3, [r7, #0]
 8103c90:	685b      	ldr	r3, [r3, #4]
 8103c92:	f003 0203 	and.w	r2, r3, #3
 8103c96:	69fb      	ldr	r3, [r7, #28]
 8103c98:	005b      	lsls	r3, r3, #1
 8103c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8103c9e:	69ba      	ldr	r2, [r7, #24]
 8103ca0:	4313      	orrs	r3, r2
 8103ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	69ba      	ldr	r2, [r7, #24]
 8103ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103caa:	683b      	ldr	r3, [r7, #0]
 8103cac:	685b      	ldr	r3, [r3, #4]
 8103cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	f000 80e0 	beq.w	8103e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103cb8:	4b2f      	ldr	r3, [pc, #188]	; (8103d78 <HAL_GPIO_Init+0x238>)
 8103cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103cbe:	4a2e      	ldr	r2, [pc, #184]	; (8103d78 <HAL_GPIO_Init+0x238>)
 8103cc0:	f043 0302 	orr.w	r3, r3, #2
 8103cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103cc8:	4b2b      	ldr	r3, [pc, #172]	; (8103d78 <HAL_GPIO_Init+0x238>)
 8103cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103cce:	f003 0302 	and.w	r3, r3, #2
 8103cd2:	60fb      	str	r3, [r7, #12]
 8103cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103cd6:	4a29      	ldr	r2, [pc, #164]	; (8103d7c <HAL_GPIO_Init+0x23c>)
 8103cd8:	69fb      	ldr	r3, [r7, #28]
 8103cda:	089b      	lsrs	r3, r3, #2
 8103cdc:	3302      	adds	r3, #2
 8103cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103ce4:	69fb      	ldr	r3, [r7, #28]
 8103ce6:	f003 0303 	and.w	r3, r3, #3
 8103cea:	009b      	lsls	r3, r3, #2
 8103cec:	220f      	movs	r2, #15
 8103cee:	fa02 f303 	lsl.w	r3, r2, r3
 8103cf2:	43db      	mvns	r3, r3
 8103cf4:	69ba      	ldr	r2, [r7, #24]
 8103cf6:	4013      	ands	r3, r2
 8103cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	4a20      	ldr	r2, [pc, #128]	; (8103d80 <HAL_GPIO_Init+0x240>)
 8103cfe:	4293      	cmp	r3, r2
 8103d00:	d052      	beq.n	8103da8 <HAL_GPIO_Init+0x268>
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	4a1f      	ldr	r2, [pc, #124]	; (8103d84 <HAL_GPIO_Init+0x244>)
 8103d06:	4293      	cmp	r3, r2
 8103d08:	d031      	beq.n	8103d6e <HAL_GPIO_Init+0x22e>
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	4a1e      	ldr	r2, [pc, #120]	; (8103d88 <HAL_GPIO_Init+0x248>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d02b      	beq.n	8103d6a <HAL_GPIO_Init+0x22a>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	4a1d      	ldr	r2, [pc, #116]	; (8103d8c <HAL_GPIO_Init+0x24c>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d025      	beq.n	8103d66 <HAL_GPIO_Init+0x226>
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	4a1c      	ldr	r2, [pc, #112]	; (8103d90 <HAL_GPIO_Init+0x250>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d01f      	beq.n	8103d62 <HAL_GPIO_Init+0x222>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	4a1b      	ldr	r2, [pc, #108]	; (8103d94 <HAL_GPIO_Init+0x254>)
 8103d26:	4293      	cmp	r3, r2
 8103d28:	d019      	beq.n	8103d5e <HAL_GPIO_Init+0x21e>
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	4a1a      	ldr	r2, [pc, #104]	; (8103d98 <HAL_GPIO_Init+0x258>)
 8103d2e:	4293      	cmp	r3, r2
 8103d30:	d013      	beq.n	8103d5a <HAL_GPIO_Init+0x21a>
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	4a19      	ldr	r2, [pc, #100]	; (8103d9c <HAL_GPIO_Init+0x25c>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d00d      	beq.n	8103d56 <HAL_GPIO_Init+0x216>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	4a18      	ldr	r2, [pc, #96]	; (8103da0 <HAL_GPIO_Init+0x260>)
 8103d3e:	4293      	cmp	r3, r2
 8103d40:	d007      	beq.n	8103d52 <HAL_GPIO_Init+0x212>
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	4a17      	ldr	r2, [pc, #92]	; (8103da4 <HAL_GPIO_Init+0x264>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	d101      	bne.n	8103d4e <HAL_GPIO_Init+0x20e>
 8103d4a:	2309      	movs	r3, #9
 8103d4c:	e02d      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d4e:	230a      	movs	r3, #10
 8103d50:	e02b      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d52:	2308      	movs	r3, #8
 8103d54:	e029      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d56:	2307      	movs	r3, #7
 8103d58:	e027      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d5a:	2306      	movs	r3, #6
 8103d5c:	e025      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d5e:	2305      	movs	r3, #5
 8103d60:	e023      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d62:	2304      	movs	r3, #4
 8103d64:	e021      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d66:	2303      	movs	r3, #3
 8103d68:	e01f      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d6a:	2302      	movs	r3, #2
 8103d6c:	e01d      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d6e:	2301      	movs	r3, #1
 8103d70:	e01b      	b.n	8103daa <HAL_GPIO_Init+0x26a>
 8103d72:	bf00      	nop
 8103d74:	58000080 	.word	0x58000080
 8103d78:	58024400 	.word	0x58024400
 8103d7c:	58000400 	.word	0x58000400
 8103d80:	58020000 	.word	0x58020000
 8103d84:	58020400 	.word	0x58020400
 8103d88:	58020800 	.word	0x58020800
 8103d8c:	58020c00 	.word	0x58020c00
 8103d90:	58021000 	.word	0x58021000
 8103d94:	58021400 	.word	0x58021400
 8103d98:	58021800 	.word	0x58021800
 8103d9c:	58021c00 	.word	0x58021c00
 8103da0:	58022000 	.word	0x58022000
 8103da4:	58022400 	.word	0x58022400
 8103da8:	2300      	movs	r3, #0
 8103daa:	69fa      	ldr	r2, [r7, #28]
 8103dac:	f002 0203 	and.w	r2, r2, #3
 8103db0:	0092      	lsls	r2, r2, #2
 8103db2:	4093      	lsls	r3, r2
 8103db4:	69ba      	ldr	r2, [r7, #24]
 8103db6:	4313      	orrs	r3, r2
 8103db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103dba:	4938      	ldr	r1, [pc, #224]	; (8103e9c <HAL_GPIO_Init+0x35c>)
 8103dbc:	69fb      	ldr	r3, [r7, #28]
 8103dbe:	089b      	lsrs	r3, r3, #2
 8103dc0:	3302      	adds	r3, #2
 8103dc2:	69ba      	ldr	r2, [r7, #24]
 8103dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103dd0:	693b      	ldr	r3, [r7, #16]
 8103dd2:	43db      	mvns	r3, r3
 8103dd4:	69ba      	ldr	r2, [r7, #24]
 8103dd6:	4013      	ands	r3, r2
 8103dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103dda:	683b      	ldr	r3, [r7, #0]
 8103ddc:	685b      	ldr	r3, [r3, #4]
 8103dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	d003      	beq.n	8103dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103de6:	69ba      	ldr	r2, [r7, #24]
 8103de8:	693b      	ldr	r3, [r7, #16]
 8103dea:	4313      	orrs	r3, r2
 8103dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103df2:	69bb      	ldr	r3, [r7, #24]
 8103df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103dfa:	685b      	ldr	r3, [r3, #4]
 8103dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103dfe:	693b      	ldr	r3, [r7, #16]
 8103e00:	43db      	mvns	r3, r3
 8103e02:	69ba      	ldr	r2, [r7, #24]
 8103e04:	4013      	ands	r3, r2
 8103e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103e08:	683b      	ldr	r3, [r7, #0]
 8103e0a:	685b      	ldr	r3, [r3, #4]
 8103e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	d003      	beq.n	8103e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103e14:	69ba      	ldr	r2, [r7, #24]
 8103e16:	693b      	ldr	r3, [r7, #16]
 8103e18:	4313      	orrs	r3, r2
 8103e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103e20:	69bb      	ldr	r3, [r7, #24]
 8103e22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103e24:	697b      	ldr	r3, [r7, #20]
 8103e26:	685b      	ldr	r3, [r3, #4]
 8103e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103e2a:	693b      	ldr	r3, [r7, #16]
 8103e2c:	43db      	mvns	r3, r3
 8103e2e:	69ba      	ldr	r2, [r7, #24]
 8103e30:	4013      	ands	r3, r2
 8103e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103e34:	683b      	ldr	r3, [r7, #0]
 8103e36:	685b      	ldr	r3, [r3, #4]
 8103e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d003      	beq.n	8103e48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103e40:	69ba      	ldr	r2, [r7, #24]
 8103e42:	693b      	ldr	r3, [r7, #16]
 8103e44:	4313      	orrs	r3, r2
 8103e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103e48:	697b      	ldr	r3, [r7, #20]
 8103e4a:	69ba      	ldr	r2, [r7, #24]
 8103e4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103e4e:	697b      	ldr	r3, [r7, #20]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103e54:	693b      	ldr	r3, [r7, #16]
 8103e56:	43db      	mvns	r3, r3
 8103e58:	69ba      	ldr	r2, [r7, #24]
 8103e5a:	4013      	ands	r3, r2
 8103e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103e5e:	683b      	ldr	r3, [r7, #0]
 8103e60:	685b      	ldr	r3, [r3, #4]
 8103e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	d003      	beq.n	8103e72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103e6a:	69ba      	ldr	r2, [r7, #24]
 8103e6c:	693b      	ldr	r3, [r7, #16]
 8103e6e:	4313      	orrs	r3, r2
 8103e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103e72:	697b      	ldr	r3, [r7, #20]
 8103e74:	69ba      	ldr	r2, [r7, #24]
 8103e76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103e78:	69fb      	ldr	r3, [r7, #28]
 8103e7a:	3301      	adds	r3, #1
 8103e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103e7e:	683b      	ldr	r3, [r7, #0]
 8103e80:	681a      	ldr	r2, [r3, #0]
 8103e82:	69fb      	ldr	r3, [r7, #28]
 8103e84:	fa22 f303 	lsr.w	r3, r2, r3
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	f47f ae63 	bne.w	8103b54 <HAL_GPIO_Init+0x14>
  }
}
 8103e8e:	bf00      	nop
 8103e90:	bf00      	nop
 8103e92:	3724      	adds	r7, #36	; 0x24
 8103e94:	46bd      	mov	sp, r7
 8103e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e9a:	4770      	bx	lr
 8103e9c:	58000400 	.word	0x58000400

08103ea0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8103ea0:	b480      	push	{r7}
 8103ea2:	b087      	sub	sp, #28
 8103ea4:	af00      	add	r7, sp, #0
 8103ea6:	6078      	str	r0, [r7, #4]
 8103ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103eaa:	2300      	movs	r3, #0
 8103eac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8103eae:	4b75      	ldr	r3, [pc, #468]	; (8104084 <HAL_GPIO_DeInit+0x1e4>)
 8103eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8103eb2:	e0d9      	b.n	8104068 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8103eb4:	2201      	movs	r2, #1
 8103eb6:	697b      	ldr	r3, [r7, #20]
 8103eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8103ebc:	683a      	ldr	r2, [r7, #0]
 8103ebe:	4013      	ands	r3, r2
 8103ec0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	f000 80cc 	beq.w	8104062 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8103eca:	4a6f      	ldr	r2, [pc, #444]	; (8104088 <HAL_GPIO_DeInit+0x1e8>)
 8103ecc:	697b      	ldr	r3, [r7, #20]
 8103ece:	089b      	lsrs	r3, r3, #2
 8103ed0:	3302      	adds	r3, #2
 8103ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103ed6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8103ed8:	697b      	ldr	r3, [r7, #20]
 8103eda:	f003 0303 	and.w	r3, r3, #3
 8103ede:	009b      	lsls	r3, r3, #2
 8103ee0:	220f      	movs	r2, #15
 8103ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8103ee6:	68ba      	ldr	r2, [r7, #8]
 8103ee8:	4013      	ands	r3, r2
 8103eea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	4a67      	ldr	r2, [pc, #412]	; (810408c <HAL_GPIO_DeInit+0x1ec>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d037      	beq.n	8103f64 <HAL_GPIO_DeInit+0xc4>
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	4a66      	ldr	r2, [pc, #408]	; (8104090 <HAL_GPIO_DeInit+0x1f0>)
 8103ef8:	4293      	cmp	r3, r2
 8103efa:	d031      	beq.n	8103f60 <HAL_GPIO_DeInit+0xc0>
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	4a65      	ldr	r2, [pc, #404]	; (8104094 <HAL_GPIO_DeInit+0x1f4>)
 8103f00:	4293      	cmp	r3, r2
 8103f02:	d02b      	beq.n	8103f5c <HAL_GPIO_DeInit+0xbc>
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	4a64      	ldr	r2, [pc, #400]	; (8104098 <HAL_GPIO_DeInit+0x1f8>)
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d025      	beq.n	8103f58 <HAL_GPIO_DeInit+0xb8>
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	4a63      	ldr	r2, [pc, #396]	; (810409c <HAL_GPIO_DeInit+0x1fc>)
 8103f10:	4293      	cmp	r3, r2
 8103f12:	d01f      	beq.n	8103f54 <HAL_GPIO_DeInit+0xb4>
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	4a62      	ldr	r2, [pc, #392]	; (81040a0 <HAL_GPIO_DeInit+0x200>)
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d019      	beq.n	8103f50 <HAL_GPIO_DeInit+0xb0>
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	4a61      	ldr	r2, [pc, #388]	; (81040a4 <HAL_GPIO_DeInit+0x204>)
 8103f20:	4293      	cmp	r3, r2
 8103f22:	d013      	beq.n	8103f4c <HAL_GPIO_DeInit+0xac>
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	4a60      	ldr	r2, [pc, #384]	; (81040a8 <HAL_GPIO_DeInit+0x208>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d00d      	beq.n	8103f48 <HAL_GPIO_DeInit+0xa8>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	4a5f      	ldr	r2, [pc, #380]	; (81040ac <HAL_GPIO_DeInit+0x20c>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d007      	beq.n	8103f44 <HAL_GPIO_DeInit+0xa4>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	4a5e      	ldr	r2, [pc, #376]	; (81040b0 <HAL_GPIO_DeInit+0x210>)
 8103f38:	4293      	cmp	r3, r2
 8103f3a:	d101      	bne.n	8103f40 <HAL_GPIO_DeInit+0xa0>
 8103f3c:	2309      	movs	r3, #9
 8103f3e:	e012      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f40:	230a      	movs	r3, #10
 8103f42:	e010      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f44:	2308      	movs	r3, #8
 8103f46:	e00e      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f48:	2307      	movs	r3, #7
 8103f4a:	e00c      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f4c:	2306      	movs	r3, #6
 8103f4e:	e00a      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f50:	2305      	movs	r3, #5
 8103f52:	e008      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f54:	2304      	movs	r3, #4
 8103f56:	e006      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f58:	2303      	movs	r3, #3
 8103f5a:	e004      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f5c:	2302      	movs	r3, #2
 8103f5e:	e002      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f60:	2301      	movs	r3, #1
 8103f62:	e000      	b.n	8103f66 <HAL_GPIO_DeInit+0xc6>
 8103f64:	2300      	movs	r3, #0
 8103f66:	697a      	ldr	r2, [r7, #20]
 8103f68:	f002 0203 	and.w	r2, r2, #3
 8103f6c:	0092      	lsls	r2, r2, #2
 8103f6e:	4093      	lsls	r3, r2
 8103f70:	68ba      	ldr	r2, [r7, #8]
 8103f72:	429a      	cmp	r2, r3
 8103f74:	d136      	bne.n	8103fe4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8103f76:	693b      	ldr	r3, [r7, #16]
 8103f78:	681a      	ldr	r2, [r3, #0]
 8103f7a:	68fb      	ldr	r3, [r7, #12]
 8103f7c:	43db      	mvns	r3, r3
 8103f7e:	401a      	ands	r2, r3
 8103f80:	693b      	ldr	r3, [r7, #16]
 8103f82:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8103f84:	693b      	ldr	r3, [r7, #16]
 8103f86:	685a      	ldr	r2, [r3, #4]
 8103f88:	68fb      	ldr	r3, [r7, #12]
 8103f8a:	43db      	mvns	r3, r3
 8103f8c:	401a      	ands	r2, r3
 8103f8e:	693b      	ldr	r3, [r7, #16]
 8103f90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8103f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103f96:	685a      	ldr	r2, [r3, #4]
 8103f98:	68fb      	ldr	r3, [r7, #12]
 8103f9a:	43db      	mvns	r3, r3
 8103f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8103fa0:	4013      	ands	r3, r2
 8103fa2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8103fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103fa8:	681a      	ldr	r2, [r3, #0]
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	43db      	mvns	r3, r3
 8103fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8103fb2:	4013      	ands	r3, r2
 8103fb4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8103fb6:	697b      	ldr	r3, [r7, #20]
 8103fb8:	f003 0303 	and.w	r3, r3, #3
 8103fbc:	009b      	lsls	r3, r3, #2
 8103fbe:	220f      	movs	r2, #15
 8103fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8103fc4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8103fc6:	4a30      	ldr	r2, [pc, #192]	; (8104088 <HAL_GPIO_DeInit+0x1e8>)
 8103fc8:	697b      	ldr	r3, [r7, #20]
 8103fca:	089b      	lsrs	r3, r3, #2
 8103fcc:	3302      	adds	r3, #2
 8103fce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8103fd2:	68bb      	ldr	r3, [r7, #8]
 8103fd4:	43da      	mvns	r2, r3
 8103fd6:	482c      	ldr	r0, [pc, #176]	; (8104088 <HAL_GPIO_DeInit+0x1e8>)
 8103fd8:	697b      	ldr	r3, [r7, #20]
 8103fda:	089b      	lsrs	r3, r3, #2
 8103fdc:	400a      	ands	r2, r1
 8103fde:	3302      	adds	r3, #2
 8103fe0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681a      	ldr	r2, [r3, #0]
 8103fe8:	697b      	ldr	r3, [r7, #20]
 8103fea:	005b      	lsls	r3, r3, #1
 8103fec:	2103      	movs	r1, #3
 8103fee:	fa01 f303 	lsl.w	r3, r1, r3
 8103ff2:	431a      	orrs	r2, r3
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8103ff8:	697b      	ldr	r3, [r7, #20]
 8103ffa:	08da      	lsrs	r2, r3, #3
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	3208      	adds	r2, #8
 8104000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8104004:	697b      	ldr	r3, [r7, #20]
 8104006:	f003 0307 	and.w	r3, r3, #7
 810400a:	009b      	lsls	r3, r3, #2
 810400c:	220f      	movs	r2, #15
 810400e:	fa02 f303 	lsl.w	r3, r2, r3
 8104012:	43db      	mvns	r3, r3
 8104014:	697a      	ldr	r2, [r7, #20]
 8104016:	08d2      	lsrs	r2, r2, #3
 8104018:	4019      	ands	r1, r3
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	3208      	adds	r2, #8
 810401e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	68da      	ldr	r2, [r3, #12]
 8104026:	697b      	ldr	r3, [r7, #20]
 8104028:	005b      	lsls	r3, r3, #1
 810402a:	2103      	movs	r1, #3
 810402c:	fa01 f303 	lsl.w	r3, r1, r3
 8104030:	43db      	mvns	r3, r3
 8104032:	401a      	ands	r2, r3
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	685a      	ldr	r2, [r3, #4]
 810403c:	2101      	movs	r1, #1
 810403e:	697b      	ldr	r3, [r7, #20]
 8104040:	fa01 f303 	lsl.w	r3, r1, r3
 8104044:	43db      	mvns	r3, r3
 8104046:	401a      	ands	r2, r3
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	689a      	ldr	r2, [r3, #8]
 8104050:	697b      	ldr	r3, [r7, #20]
 8104052:	005b      	lsls	r3, r3, #1
 8104054:	2103      	movs	r1, #3
 8104056:	fa01 f303 	lsl.w	r3, r1, r3
 810405a:	43db      	mvns	r3, r3
 810405c:	401a      	ands	r2, r3
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	609a      	str	r2, [r3, #8]
    }

    position++;
 8104062:	697b      	ldr	r3, [r7, #20]
 8104064:	3301      	adds	r3, #1
 8104066:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8104068:	683a      	ldr	r2, [r7, #0]
 810406a:	697b      	ldr	r3, [r7, #20]
 810406c:	fa22 f303 	lsr.w	r3, r2, r3
 8104070:	2b00      	cmp	r3, #0
 8104072:	f47f af1f 	bne.w	8103eb4 <HAL_GPIO_DeInit+0x14>
  }
}
 8104076:	bf00      	nop
 8104078:	bf00      	nop
 810407a:	371c      	adds	r7, #28
 810407c:	46bd      	mov	sp, r7
 810407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104082:	4770      	bx	lr
 8104084:	58000080 	.word	0x58000080
 8104088:	58000400 	.word	0x58000400
 810408c:	58020000 	.word	0x58020000
 8104090:	58020400 	.word	0x58020400
 8104094:	58020800 	.word	0x58020800
 8104098:	58020c00 	.word	0x58020c00
 810409c:	58021000 	.word	0x58021000
 81040a0:	58021400 	.word	0x58021400
 81040a4:	58021800 	.word	0x58021800
 81040a8:	58021c00 	.word	0x58021c00
 81040ac:	58022000 	.word	0x58022000
 81040b0:	58022400 	.word	0x58022400

081040b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81040b4:	b480      	push	{r7}
 81040b6:	b083      	sub	sp, #12
 81040b8:	af00      	add	r7, sp, #0
 81040ba:	6078      	str	r0, [r7, #4]
 81040bc:	460b      	mov	r3, r1
 81040be:	807b      	strh	r3, [r7, #2]
 81040c0:	4613      	mov	r3, r2
 81040c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81040c4:	787b      	ldrb	r3, [r7, #1]
 81040c6:	2b00      	cmp	r3, #0
 81040c8:	d003      	beq.n	81040d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81040ca:	887a      	ldrh	r2, [r7, #2]
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81040d0:	e003      	b.n	81040da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81040d2:	887b      	ldrh	r3, [r7, #2]
 81040d4:	041a      	lsls	r2, r3, #16
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	619a      	str	r2, [r3, #24]
}
 81040da:	bf00      	nop
 81040dc:	370c      	adds	r7, #12
 81040de:	46bd      	mov	sp, r7
 81040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040e4:	4770      	bx	lr
	...

081040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81040e8:	b580      	push	{r7, lr}
 81040ea:	b082      	sub	sp, #8
 81040ec:	af00      	add	r7, sp, #0
 81040ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	2b00      	cmp	r3, #0
 81040f4:	d101      	bne.n	81040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81040f6:	2301      	movs	r3, #1
 81040f8:	e07f      	b.n	81041fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104100:	b2db      	uxtb	r3, r3
 8104102:	2b00      	cmp	r3, #0
 8104104:	d106      	bne.n	8104114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	2200      	movs	r2, #0
 810410a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810410e:	6878      	ldr	r0, [r7, #4]
 8104110:	f000 f8a9 	bl	8104266 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	2224      	movs	r2, #36	; 0x24
 8104118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	681a      	ldr	r2, [r3, #0]
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	f022 0201 	bic.w	r2, r2, #1
 810412a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	685a      	ldr	r2, [r3, #4]
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	689a      	ldr	r2, [r3, #8]
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	68db      	ldr	r3, [r3, #12]
 810414e:	2b01      	cmp	r3, #1
 8104150:	d107      	bne.n	8104162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	689a      	ldr	r2, [r3, #8]
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810415e:	609a      	str	r2, [r3, #8]
 8104160:	e006      	b.n	8104170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	689a      	ldr	r2, [r3, #8]
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810416e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	68db      	ldr	r3, [r3, #12]
 8104174:	2b02      	cmp	r3, #2
 8104176:	d104      	bne.n	8104182 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104180:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	6859      	ldr	r1, [r3, #4]
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	681a      	ldr	r2, [r3, #0]
 810418c:	4b1d      	ldr	r3, [pc, #116]	; (8104204 <HAL_I2C_Init+0x11c>)
 810418e:	430b      	orrs	r3, r1
 8104190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	68da      	ldr	r2, [r3, #12]
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81041a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	691a      	ldr	r2, [r3, #16]
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	695b      	ldr	r3, [r3, #20]
 81041aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	699b      	ldr	r3, [r3, #24]
 81041b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	430a      	orrs	r2, r1
 81041ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	69d9      	ldr	r1, [r3, #28]
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	6a1a      	ldr	r2, [r3, #32]
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	430a      	orrs	r2, r1
 81041ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	681a      	ldr	r2, [r3, #0]
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	f042 0201 	orr.w	r2, r2, #1
 81041da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	2200      	movs	r2, #0
 81041e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	2220      	movs	r2, #32
 81041e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	2200      	movs	r2, #0
 81041ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	2200      	movs	r2, #0
 81041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81041f8:	2300      	movs	r3, #0
}
 81041fa:	4618      	mov	r0, r3
 81041fc:	3708      	adds	r7, #8
 81041fe:	46bd      	mov	sp, r7
 8104200:	bd80      	pop	{r7, pc}
 8104202:	bf00      	nop
 8104204:	02008000 	.word	0x02008000

08104208 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8104208:	b580      	push	{r7, lr}
 810420a:	b082      	sub	sp, #8
 810420c:	af00      	add	r7, sp, #0
 810420e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	2b00      	cmp	r3, #0
 8104214:	d101      	bne.n	810421a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8104216:	2301      	movs	r3, #1
 8104218:	e021      	b.n	810425e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	2224      	movs	r2, #36	; 0x24
 810421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	681a      	ldr	r2, [r3, #0]
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	681b      	ldr	r3, [r3, #0]
 810422c:	f022 0201 	bic.w	r2, r2, #1
 8104230:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8104232:	6878      	ldr	r0, [r7, #4]
 8104234:	f000 f821 	bl	810427a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	2200      	movs	r2, #0
 810423c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	2200      	movs	r2, #0
 8104242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	2200      	movs	r2, #0
 810424a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	2200      	movs	r2, #0
 8104250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	2200      	movs	r2, #0
 8104258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810425c:	2300      	movs	r3, #0
}
 810425e:	4618      	mov	r0, r3
 8104260:	3708      	adds	r7, #8
 8104262:	46bd      	mov	sp, r7
 8104264:	bd80      	pop	{r7, pc}

08104266 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8104266:	b480      	push	{r7}
 8104268:	b083      	sub	sp, #12
 810426a:	af00      	add	r7, sp, #0
 810426c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 810426e:	bf00      	nop
 8104270:	370c      	adds	r7, #12
 8104272:	46bd      	mov	sp, r7
 8104274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104278:	4770      	bx	lr

0810427a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 810427a:	b480      	push	{r7}
 810427c:	b083      	sub	sp, #12
 810427e:	af00      	add	r7, sp, #0
 8104280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8104282:	bf00      	nop
 8104284:	370c      	adds	r7, #12
 8104286:	46bd      	mov	sp, r7
 8104288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428c:	4770      	bx	lr
	...

08104290 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104290:	b580      	push	{r7, lr}
 8104292:	b088      	sub	sp, #32
 8104294:	af02      	add	r7, sp, #8
 8104296:	60f8      	str	r0, [r7, #12]
 8104298:	4608      	mov	r0, r1
 810429a:	4611      	mov	r1, r2
 810429c:	461a      	mov	r2, r3
 810429e:	4603      	mov	r3, r0
 81042a0:	817b      	strh	r3, [r7, #10]
 81042a2:	460b      	mov	r3, r1
 81042a4:	813b      	strh	r3, [r7, #8]
 81042a6:	4613      	mov	r3, r2
 81042a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81042b0:	b2db      	uxtb	r3, r3
 81042b2:	2b20      	cmp	r3, #32
 81042b4:	f040 80f9 	bne.w	81044aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81042b8:	6a3b      	ldr	r3, [r7, #32]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d002      	beq.n	81042c4 <HAL_I2C_Mem_Write+0x34>
 81042be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	d105      	bne.n	81042d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81042c4:	68fb      	ldr	r3, [r7, #12]
 81042c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81042ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81042cc:	2301      	movs	r3, #1
 81042ce:	e0ed      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81042d0:	68fb      	ldr	r3, [r7, #12]
 81042d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81042d6:	2b01      	cmp	r3, #1
 81042d8:	d101      	bne.n	81042de <HAL_I2C_Mem_Write+0x4e>
 81042da:	2302      	movs	r3, #2
 81042dc:	e0e6      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
 81042de:	68fb      	ldr	r3, [r7, #12]
 81042e0:	2201      	movs	r2, #1
 81042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81042e6:	f7fe fff9 	bl	81032dc <HAL_GetTick>
 81042ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81042ec:	697b      	ldr	r3, [r7, #20]
 81042ee:	9300      	str	r3, [sp, #0]
 81042f0:	2319      	movs	r3, #25
 81042f2:	2201      	movs	r2, #1
 81042f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81042f8:	68f8      	ldr	r0, [r7, #12]
 81042fa:	f000 fadd 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 81042fe:	4603      	mov	r3, r0
 8104300:	2b00      	cmp	r3, #0
 8104302:	d001      	beq.n	8104308 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104304:	2301      	movs	r3, #1
 8104306:	e0d1      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	2221      	movs	r2, #33	; 0x21
 810430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	2240      	movs	r2, #64	; 0x40
 8104314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104318:	68fb      	ldr	r3, [r7, #12]
 810431a:	2200      	movs	r2, #0
 810431c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810431e:	68fb      	ldr	r3, [r7, #12]
 8104320:	6a3a      	ldr	r2, [r7, #32]
 8104322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	2200      	movs	r2, #0
 810432e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104330:	88f8      	ldrh	r0, [r7, #6]
 8104332:	893a      	ldrh	r2, [r7, #8]
 8104334:	8979      	ldrh	r1, [r7, #10]
 8104336:	697b      	ldr	r3, [r7, #20]
 8104338:	9301      	str	r3, [sp, #4]
 810433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810433c:	9300      	str	r3, [sp, #0]
 810433e:	4603      	mov	r3, r0
 8104340:	68f8      	ldr	r0, [r7, #12]
 8104342:	f000 f9ed 	bl	8104720 <I2C_RequestMemoryWrite>
 8104346:	4603      	mov	r3, r0
 8104348:	2b00      	cmp	r3, #0
 810434a:	d005      	beq.n	8104358 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810434c:	68fb      	ldr	r3, [r7, #12]
 810434e:	2200      	movs	r2, #0
 8104350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104354:	2301      	movs	r3, #1
 8104356:	e0a9      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810435c:	b29b      	uxth	r3, r3
 810435e:	2bff      	cmp	r3, #255	; 0xff
 8104360:	d90e      	bls.n	8104380 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104362:	68fb      	ldr	r3, [r7, #12]
 8104364:	22ff      	movs	r2, #255	; 0xff
 8104366:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810436c:	b2da      	uxtb	r2, r3
 810436e:	8979      	ldrh	r1, [r7, #10]
 8104370:	2300      	movs	r3, #0
 8104372:	9300      	str	r3, [sp, #0]
 8104374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104378:	68f8      	ldr	r0, [r7, #12]
 810437a:	f000 fc57 	bl	8104c2c <I2C_TransferConfig>
 810437e:	e00f      	b.n	81043a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104380:	68fb      	ldr	r3, [r7, #12]
 8104382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104384:	b29a      	uxth	r2, r3
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810438a:	68fb      	ldr	r3, [r7, #12]
 810438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810438e:	b2da      	uxtb	r2, r3
 8104390:	8979      	ldrh	r1, [r7, #10]
 8104392:	2300      	movs	r3, #0
 8104394:	9300      	str	r3, [sp, #0]
 8104396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810439a:	68f8      	ldr	r0, [r7, #12]
 810439c:	f000 fc46 	bl	8104c2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81043a0:	697a      	ldr	r2, [r7, #20]
 81043a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81043a4:	68f8      	ldr	r0, [r7, #12]
 81043a6:	f000 fad6 	bl	8104956 <I2C_WaitOnTXISFlagUntilTimeout>
 81043aa:	4603      	mov	r3, r0
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d001      	beq.n	81043b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81043b0:	2301      	movs	r3, #1
 81043b2:	e07b      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81043b8:	781a      	ldrb	r2, [r3, #0]
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81043c4:	1c5a      	adds	r2, r3, #1
 81043c6:	68fb      	ldr	r3, [r7, #12]
 81043c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81043ce:	b29b      	uxth	r3, r3
 81043d0:	3b01      	subs	r3, #1
 81043d2:	b29a      	uxth	r2, r3
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81043dc:	3b01      	subs	r3, #1
 81043de:	b29a      	uxth	r2, r3
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81043e4:	68fb      	ldr	r3, [r7, #12]
 81043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81043e8:	b29b      	uxth	r3, r3
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d034      	beq.n	8104458 <HAL_I2C_Mem_Write+0x1c8>
 81043ee:	68fb      	ldr	r3, [r7, #12]
 81043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d130      	bne.n	8104458 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81043f6:	697b      	ldr	r3, [r7, #20]
 81043f8:	9300      	str	r3, [sp, #0]
 81043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043fc:	2200      	movs	r2, #0
 81043fe:	2180      	movs	r1, #128	; 0x80
 8104400:	68f8      	ldr	r0, [r7, #12]
 8104402:	f000 fa59 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104406:	4603      	mov	r3, r0
 8104408:	2b00      	cmp	r3, #0
 810440a:	d001      	beq.n	8104410 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 810440c:	2301      	movs	r3, #1
 810440e:	e04d      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104414:	b29b      	uxth	r3, r3
 8104416:	2bff      	cmp	r3, #255	; 0xff
 8104418:	d90e      	bls.n	8104438 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	22ff      	movs	r2, #255	; 0xff
 810441e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104420:	68fb      	ldr	r3, [r7, #12]
 8104422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104424:	b2da      	uxtb	r2, r3
 8104426:	8979      	ldrh	r1, [r7, #10]
 8104428:	2300      	movs	r3, #0
 810442a:	9300      	str	r3, [sp, #0]
 810442c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104430:	68f8      	ldr	r0, [r7, #12]
 8104432:	f000 fbfb 	bl	8104c2c <I2C_TransferConfig>
 8104436:	e00f      	b.n	8104458 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810443c:	b29a      	uxth	r2, r3
 810443e:	68fb      	ldr	r3, [r7, #12]
 8104440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104446:	b2da      	uxtb	r2, r3
 8104448:	8979      	ldrh	r1, [r7, #10]
 810444a:	2300      	movs	r3, #0
 810444c:	9300      	str	r3, [sp, #0]
 810444e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104452:	68f8      	ldr	r0, [r7, #12]
 8104454:	f000 fbea 	bl	8104c2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810445c:	b29b      	uxth	r3, r3
 810445e:	2b00      	cmp	r3, #0
 8104460:	d19e      	bne.n	81043a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104462:	697a      	ldr	r2, [r7, #20]
 8104464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104466:	68f8      	ldr	r0, [r7, #12]
 8104468:	f000 fabc 	bl	81049e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 810446c:	4603      	mov	r3, r0
 810446e:	2b00      	cmp	r3, #0
 8104470:	d001      	beq.n	8104476 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104472:	2301      	movs	r3, #1
 8104474:	e01a      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104476:	68fb      	ldr	r3, [r7, #12]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	2220      	movs	r2, #32
 810447c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	6859      	ldr	r1, [r3, #4]
 8104484:	68fb      	ldr	r3, [r7, #12]
 8104486:	681a      	ldr	r2, [r3, #0]
 8104488:	4b0a      	ldr	r3, [pc, #40]	; (81044b4 <HAL_I2C_Mem_Write+0x224>)
 810448a:	400b      	ands	r3, r1
 810448c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	2220      	movs	r2, #32
 8104492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	2200      	movs	r2, #0
 810449a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810449e:	68fb      	ldr	r3, [r7, #12]
 81044a0:	2200      	movs	r2, #0
 81044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81044a6:	2300      	movs	r3, #0
 81044a8:	e000      	b.n	81044ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81044aa:	2302      	movs	r3, #2
  }
}
 81044ac:	4618      	mov	r0, r3
 81044ae:	3718      	adds	r7, #24
 81044b0:	46bd      	mov	sp, r7
 81044b2:	bd80      	pop	{r7, pc}
 81044b4:	fe00e800 	.word	0xfe00e800

081044b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81044b8:	b580      	push	{r7, lr}
 81044ba:	b088      	sub	sp, #32
 81044bc:	af02      	add	r7, sp, #8
 81044be:	60f8      	str	r0, [r7, #12]
 81044c0:	4608      	mov	r0, r1
 81044c2:	4611      	mov	r1, r2
 81044c4:	461a      	mov	r2, r3
 81044c6:	4603      	mov	r3, r0
 81044c8:	817b      	strh	r3, [r7, #10]
 81044ca:	460b      	mov	r3, r1
 81044cc:	813b      	strh	r3, [r7, #8]
 81044ce:	4613      	mov	r3, r2
 81044d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81044d8:	b2db      	uxtb	r3, r3
 81044da:	2b20      	cmp	r3, #32
 81044dc:	f040 80fd 	bne.w	81046da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81044e0:	6a3b      	ldr	r3, [r7, #32]
 81044e2:	2b00      	cmp	r3, #0
 81044e4:	d002      	beq.n	81044ec <HAL_I2C_Mem_Read+0x34>
 81044e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81044e8:	2b00      	cmp	r3, #0
 81044ea:	d105      	bne.n	81044f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 81044f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81044f4:	2301      	movs	r3, #1
 81044f6:	e0f1      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81044fe:	2b01      	cmp	r3, #1
 8104500:	d101      	bne.n	8104506 <HAL_I2C_Mem_Read+0x4e>
 8104502:	2302      	movs	r3, #2
 8104504:	e0ea      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
 8104506:	68fb      	ldr	r3, [r7, #12]
 8104508:	2201      	movs	r2, #1
 810450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810450e:	f7fe fee5 	bl	81032dc <HAL_GetTick>
 8104512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104514:	697b      	ldr	r3, [r7, #20]
 8104516:	9300      	str	r3, [sp, #0]
 8104518:	2319      	movs	r3, #25
 810451a:	2201      	movs	r2, #1
 810451c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104520:	68f8      	ldr	r0, [r7, #12]
 8104522:	f000 f9c9 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104526:	4603      	mov	r3, r0
 8104528:	2b00      	cmp	r3, #0
 810452a:	d001      	beq.n	8104530 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810452c:	2301      	movs	r3, #1
 810452e:	e0d5      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	2222      	movs	r2, #34	; 0x22
 8104534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104538:	68fb      	ldr	r3, [r7, #12]
 810453a:	2240      	movs	r2, #64	; 0x40
 810453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	2200      	movs	r2, #0
 8104544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104546:	68fb      	ldr	r3, [r7, #12]
 8104548:	6a3a      	ldr	r2, [r7, #32]
 810454a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	2200      	movs	r2, #0
 8104556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104558:	88f8      	ldrh	r0, [r7, #6]
 810455a:	893a      	ldrh	r2, [r7, #8]
 810455c:	8979      	ldrh	r1, [r7, #10]
 810455e:	697b      	ldr	r3, [r7, #20]
 8104560:	9301      	str	r3, [sp, #4]
 8104562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104564:	9300      	str	r3, [sp, #0]
 8104566:	4603      	mov	r3, r0
 8104568:	68f8      	ldr	r0, [r7, #12]
 810456a:	f000 f92d 	bl	81047c8 <I2C_RequestMemoryRead>
 810456e:	4603      	mov	r3, r0
 8104570:	2b00      	cmp	r3, #0
 8104572:	d005      	beq.n	8104580 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104574:	68fb      	ldr	r3, [r7, #12]
 8104576:	2200      	movs	r2, #0
 8104578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810457c:	2301      	movs	r3, #1
 810457e:	e0ad      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104580:	68fb      	ldr	r3, [r7, #12]
 8104582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104584:	b29b      	uxth	r3, r3
 8104586:	2bff      	cmp	r3, #255	; 0xff
 8104588:	d90e      	bls.n	81045a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810458a:	68fb      	ldr	r3, [r7, #12]
 810458c:	22ff      	movs	r2, #255	; 0xff
 810458e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104594:	b2da      	uxtb	r2, r3
 8104596:	8979      	ldrh	r1, [r7, #10]
 8104598:	4b52      	ldr	r3, [pc, #328]	; (81046e4 <HAL_I2C_Mem_Read+0x22c>)
 810459a:	9300      	str	r3, [sp, #0]
 810459c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81045a0:	68f8      	ldr	r0, [r7, #12]
 81045a2:	f000 fb43 	bl	8104c2c <I2C_TransferConfig>
 81045a6:	e00f      	b.n	81045c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81045a8:	68fb      	ldr	r3, [r7, #12]
 81045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81045ac:	b29a      	uxth	r2, r3
 81045ae:	68fb      	ldr	r3, [r7, #12]
 81045b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81045b6:	b2da      	uxtb	r2, r3
 81045b8:	8979      	ldrh	r1, [r7, #10]
 81045ba:	4b4a      	ldr	r3, [pc, #296]	; (81046e4 <HAL_I2C_Mem_Read+0x22c>)
 81045bc:	9300      	str	r3, [sp, #0]
 81045be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81045c2:	68f8      	ldr	r0, [r7, #12]
 81045c4:	f000 fb32 	bl	8104c2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81045c8:	697b      	ldr	r3, [r7, #20]
 81045ca:	9300      	str	r3, [sp, #0]
 81045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81045ce:	2200      	movs	r2, #0
 81045d0:	2104      	movs	r1, #4
 81045d2:	68f8      	ldr	r0, [r7, #12]
 81045d4:	f000 f970 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 81045d8:	4603      	mov	r3, r0
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d001      	beq.n	81045e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81045de:	2301      	movs	r3, #1
 81045e0:	e07c      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045ec:	b2d2      	uxtb	r2, r2
 81045ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045f4:	1c5a      	adds	r2, r3, #1
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81045fa:	68fb      	ldr	r3, [r7, #12]
 81045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81045fe:	3b01      	subs	r3, #1
 8104600:	b29a      	uxth	r2, r3
 8104602:	68fb      	ldr	r3, [r7, #12]
 8104604:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810460a:	b29b      	uxth	r3, r3
 810460c:	3b01      	subs	r3, #1
 810460e:	b29a      	uxth	r2, r3
 8104610:	68fb      	ldr	r3, [r7, #12]
 8104612:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104614:	68fb      	ldr	r3, [r7, #12]
 8104616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104618:	b29b      	uxth	r3, r3
 810461a:	2b00      	cmp	r3, #0
 810461c:	d034      	beq.n	8104688 <HAL_I2C_Mem_Read+0x1d0>
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104622:	2b00      	cmp	r3, #0
 8104624:	d130      	bne.n	8104688 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104626:	697b      	ldr	r3, [r7, #20]
 8104628:	9300      	str	r3, [sp, #0]
 810462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810462c:	2200      	movs	r2, #0
 810462e:	2180      	movs	r1, #128	; 0x80
 8104630:	68f8      	ldr	r0, [r7, #12]
 8104632:	f000 f941 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104636:	4603      	mov	r3, r0
 8104638:	2b00      	cmp	r3, #0
 810463a:	d001      	beq.n	8104640 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810463c:	2301      	movs	r3, #1
 810463e:	e04d      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104640:	68fb      	ldr	r3, [r7, #12]
 8104642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104644:	b29b      	uxth	r3, r3
 8104646:	2bff      	cmp	r3, #255	; 0xff
 8104648:	d90e      	bls.n	8104668 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	22ff      	movs	r2, #255	; 0xff
 810464e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104654:	b2da      	uxtb	r2, r3
 8104656:	8979      	ldrh	r1, [r7, #10]
 8104658:	2300      	movs	r3, #0
 810465a:	9300      	str	r3, [sp, #0]
 810465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104660:	68f8      	ldr	r0, [r7, #12]
 8104662:	f000 fae3 	bl	8104c2c <I2C_TransferConfig>
 8104666:	e00f      	b.n	8104688 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810466c:	b29a      	uxth	r2, r3
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104676:	b2da      	uxtb	r2, r3
 8104678:	8979      	ldrh	r1, [r7, #10]
 810467a:	2300      	movs	r3, #0
 810467c:	9300      	str	r3, [sp, #0]
 810467e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104682:	68f8      	ldr	r0, [r7, #12]
 8104684:	f000 fad2 	bl	8104c2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810468c:	b29b      	uxth	r3, r3
 810468e:	2b00      	cmp	r3, #0
 8104690:	d19a      	bne.n	81045c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104692:	697a      	ldr	r2, [r7, #20]
 8104694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104696:	68f8      	ldr	r0, [r7, #12]
 8104698:	f000 f9a4 	bl	81049e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 810469c:	4603      	mov	r3, r0
 810469e:	2b00      	cmp	r3, #0
 81046a0:	d001      	beq.n	81046a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81046a2:	2301      	movs	r3, #1
 81046a4:	e01a      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81046a6:	68fb      	ldr	r3, [r7, #12]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	2220      	movs	r2, #32
 81046ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81046ae:	68fb      	ldr	r3, [r7, #12]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	6859      	ldr	r1, [r3, #4]
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681a      	ldr	r2, [r3, #0]
 81046b8:	4b0b      	ldr	r3, [pc, #44]	; (81046e8 <HAL_I2C_Mem_Read+0x230>)
 81046ba:	400b      	ands	r3, r1
 81046bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	2220      	movs	r2, #32
 81046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81046c6:	68fb      	ldr	r3, [r7, #12]
 81046c8:	2200      	movs	r2, #0
 81046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81046ce:	68fb      	ldr	r3, [r7, #12]
 81046d0:	2200      	movs	r2, #0
 81046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81046d6:	2300      	movs	r3, #0
 81046d8:	e000      	b.n	81046dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81046da:	2302      	movs	r3, #2
  }
}
 81046dc:	4618      	mov	r0, r3
 81046de:	3718      	adds	r7, #24
 81046e0:	46bd      	mov	sp, r7
 81046e2:	bd80      	pop	{r7, pc}
 81046e4:	80002400 	.word	0x80002400
 81046e8:	fe00e800 	.word	0xfe00e800

081046ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 81046ec:	b480      	push	{r7}
 81046ee:	b083      	sub	sp, #12
 81046f0:	af00      	add	r7, sp, #0
 81046f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81046fa:	b2db      	uxtb	r3, r3
}
 81046fc:	4618      	mov	r0, r3
 81046fe:	370c      	adds	r7, #12
 8104700:	46bd      	mov	sp, r7
 8104702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104706:	4770      	bx	lr

08104708 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8104708:	b480      	push	{r7}
 810470a:	b083      	sub	sp, #12
 810470c:	af00      	add	r7, sp, #0
 810470e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8104714:	4618      	mov	r0, r3
 8104716:	370c      	adds	r7, #12
 8104718:	46bd      	mov	sp, r7
 810471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810471e:	4770      	bx	lr

08104720 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104720:	b580      	push	{r7, lr}
 8104722:	b086      	sub	sp, #24
 8104724:	af02      	add	r7, sp, #8
 8104726:	60f8      	str	r0, [r7, #12]
 8104728:	4608      	mov	r0, r1
 810472a:	4611      	mov	r1, r2
 810472c:	461a      	mov	r2, r3
 810472e:	4603      	mov	r3, r0
 8104730:	817b      	strh	r3, [r7, #10]
 8104732:	460b      	mov	r3, r1
 8104734:	813b      	strh	r3, [r7, #8]
 8104736:	4613      	mov	r3, r2
 8104738:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810473a:	88fb      	ldrh	r3, [r7, #6]
 810473c:	b2da      	uxtb	r2, r3
 810473e:	8979      	ldrh	r1, [r7, #10]
 8104740:	4b20      	ldr	r3, [pc, #128]	; (81047c4 <I2C_RequestMemoryWrite+0xa4>)
 8104742:	9300      	str	r3, [sp, #0]
 8104744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104748:	68f8      	ldr	r0, [r7, #12]
 810474a:	f000 fa6f 	bl	8104c2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810474e:	69fa      	ldr	r2, [r7, #28]
 8104750:	69b9      	ldr	r1, [r7, #24]
 8104752:	68f8      	ldr	r0, [r7, #12]
 8104754:	f000 f8ff 	bl	8104956 <I2C_WaitOnTXISFlagUntilTimeout>
 8104758:	4603      	mov	r3, r0
 810475a:	2b00      	cmp	r3, #0
 810475c:	d001      	beq.n	8104762 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810475e:	2301      	movs	r3, #1
 8104760:	e02c      	b.n	81047bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104762:	88fb      	ldrh	r3, [r7, #6]
 8104764:	2b01      	cmp	r3, #1
 8104766:	d105      	bne.n	8104774 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104768:	893b      	ldrh	r3, [r7, #8]
 810476a:	b2da      	uxtb	r2, r3
 810476c:	68fb      	ldr	r3, [r7, #12]
 810476e:	681b      	ldr	r3, [r3, #0]
 8104770:	629a      	str	r2, [r3, #40]	; 0x28
 8104772:	e015      	b.n	81047a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104774:	893b      	ldrh	r3, [r7, #8]
 8104776:	0a1b      	lsrs	r3, r3, #8
 8104778:	b29b      	uxth	r3, r3
 810477a:	b2da      	uxtb	r2, r3
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	681b      	ldr	r3, [r3, #0]
 8104780:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104782:	69fa      	ldr	r2, [r7, #28]
 8104784:	69b9      	ldr	r1, [r7, #24]
 8104786:	68f8      	ldr	r0, [r7, #12]
 8104788:	f000 f8e5 	bl	8104956 <I2C_WaitOnTXISFlagUntilTimeout>
 810478c:	4603      	mov	r3, r0
 810478e:	2b00      	cmp	r3, #0
 8104790:	d001      	beq.n	8104796 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8104792:	2301      	movs	r3, #1
 8104794:	e012      	b.n	81047bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104796:	893b      	ldrh	r3, [r7, #8]
 8104798:	b2da      	uxtb	r2, r3
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81047a0:	69fb      	ldr	r3, [r7, #28]
 81047a2:	9300      	str	r3, [sp, #0]
 81047a4:	69bb      	ldr	r3, [r7, #24]
 81047a6:	2200      	movs	r2, #0
 81047a8:	2180      	movs	r1, #128	; 0x80
 81047aa:	68f8      	ldr	r0, [r7, #12]
 81047ac:	f000 f884 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 81047b0:	4603      	mov	r3, r0
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d001      	beq.n	81047ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81047b6:	2301      	movs	r3, #1
 81047b8:	e000      	b.n	81047bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81047ba:	2300      	movs	r3, #0
}
 81047bc:	4618      	mov	r0, r3
 81047be:	3710      	adds	r7, #16
 81047c0:	46bd      	mov	sp, r7
 81047c2:	bd80      	pop	{r7, pc}
 81047c4:	80002000 	.word	0x80002000

081047c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 81047c8:	b580      	push	{r7, lr}
 81047ca:	b086      	sub	sp, #24
 81047cc:	af02      	add	r7, sp, #8
 81047ce:	60f8      	str	r0, [r7, #12]
 81047d0:	4608      	mov	r0, r1
 81047d2:	4611      	mov	r1, r2
 81047d4:	461a      	mov	r2, r3
 81047d6:	4603      	mov	r3, r0
 81047d8:	817b      	strh	r3, [r7, #10]
 81047da:	460b      	mov	r3, r1
 81047dc:	813b      	strh	r3, [r7, #8]
 81047de:	4613      	mov	r3, r2
 81047e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81047e2:	88fb      	ldrh	r3, [r7, #6]
 81047e4:	b2da      	uxtb	r2, r3
 81047e6:	8979      	ldrh	r1, [r7, #10]
 81047e8:	4b20      	ldr	r3, [pc, #128]	; (810486c <I2C_RequestMemoryRead+0xa4>)
 81047ea:	9300      	str	r3, [sp, #0]
 81047ec:	2300      	movs	r3, #0
 81047ee:	68f8      	ldr	r0, [r7, #12]
 81047f0:	f000 fa1c 	bl	8104c2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81047f4:	69fa      	ldr	r2, [r7, #28]
 81047f6:	69b9      	ldr	r1, [r7, #24]
 81047f8:	68f8      	ldr	r0, [r7, #12]
 81047fa:	f000 f8ac 	bl	8104956 <I2C_WaitOnTXISFlagUntilTimeout>
 81047fe:	4603      	mov	r3, r0
 8104800:	2b00      	cmp	r3, #0
 8104802:	d001      	beq.n	8104808 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104804:	2301      	movs	r3, #1
 8104806:	e02c      	b.n	8104862 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104808:	88fb      	ldrh	r3, [r7, #6]
 810480a:	2b01      	cmp	r3, #1
 810480c:	d105      	bne.n	810481a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810480e:	893b      	ldrh	r3, [r7, #8]
 8104810:	b2da      	uxtb	r2, r3
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	629a      	str	r2, [r3, #40]	; 0x28
 8104818:	e015      	b.n	8104846 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810481a:	893b      	ldrh	r3, [r7, #8]
 810481c:	0a1b      	lsrs	r3, r3, #8
 810481e:	b29b      	uxth	r3, r3
 8104820:	b2da      	uxtb	r2, r3
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104828:	69fa      	ldr	r2, [r7, #28]
 810482a:	69b9      	ldr	r1, [r7, #24]
 810482c:	68f8      	ldr	r0, [r7, #12]
 810482e:	f000 f892 	bl	8104956 <I2C_WaitOnTXISFlagUntilTimeout>
 8104832:	4603      	mov	r3, r0
 8104834:	2b00      	cmp	r3, #0
 8104836:	d001      	beq.n	810483c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104838:	2301      	movs	r3, #1
 810483a:	e012      	b.n	8104862 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810483c:	893b      	ldrh	r3, [r7, #8]
 810483e:	b2da      	uxtb	r2, r3
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104846:	69fb      	ldr	r3, [r7, #28]
 8104848:	9300      	str	r3, [sp, #0]
 810484a:	69bb      	ldr	r3, [r7, #24]
 810484c:	2200      	movs	r2, #0
 810484e:	2140      	movs	r1, #64	; 0x40
 8104850:	68f8      	ldr	r0, [r7, #12]
 8104852:	f000 f831 	bl	81048b8 <I2C_WaitOnFlagUntilTimeout>
 8104856:	4603      	mov	r3, r0
 8104858:	2b00      	cmp	r3, #0
 810485a:	d001      	beq.n	8104860 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810485c:	2301      	movs	r3, #1
 810485e:	e000      	b.n	8104862 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8104860:	2300      	movs	r3, #0
}
 8104862:	4618      	mov	r0, r3
 8104864:	3710      	adds	r7, #16
 8104866:	46bd      	mov	sp, r7
 8104868:	bd80      	pop	{r7, pc}
 810486a:	bf00      	nop
 810486c:	80002000 	.word	0x80002000

08104870 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104870:	b480      	push	{r7}
 8104872:	b083      	sub	sp, #12
 8104874:	af00      	add	r7, sp, #0
 8104876:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	699b      	ldr	r3, [r3, #24]
 810487e:	f003 0302 	and.w	r3, r3, #2
 8104882:	2b02      	cmp	r3, #2
 8104884:	d103      	bne.n	810488e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	2200      	movs	r2, #0
 810488c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	699b      	ldr	r3, [r3, #24]
 8104894:	f003 0301 	and.w	r3, r3, #1
 8104898:	2b01      	cmp	r3, #1
 810489a:	d007      	beq.n	81048ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	699a      	ldr	r2, [r3, #24]
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	f042 0201 	orr.w	r2, r2, #1
 81048aa:	619a      	str	r2, [r3, #24]
  }
}
 81048ac:	bf00      	nop
 81048ae:	370c      	adds	r7, #12
 81048b0:	46bd      	mov	sp, r7
 81048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b6:	4770      	bx	lr

081048b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b084      	sub	sp, #16
 81048bc:	af00      	add	r7, sp, #0
 81048be:	60f8      	str	r0, [r7, #12]
 81048c0:	60b9      	str	r1, [r7, #8]
 81048c2:	603b      	str	r3, [r7, #0]
 81048c4:	4613      	mov	r3, r2
 81048c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81048c8:	e031      	b.n	810492e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81048ca:	683b      	ldr	r3, [r7, #0]
 81048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81048d0:	d02d      	beq.n	810492e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81048d2:	f7fe fd03 	bl	81032dc <HAL_GetTick>
 81048d6:	4602      	mov	r2, r0
 81048d8:	69bb      	ldr	r3, [r7, #24]
 81048da:	1ad3      	subs	r3, r2, r3
 81048dc:	683a      	ldr	r2, [r7, #0]
 81048de:	429a      	cmp	r2, r3
 81048e0:	d302      	bcc.n	81048e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 81048e2:	683b      	ldr	r3, [r7, #0]
 81048e4:	2b00      	cmp	r3, #0
 81048e6:	d122      	bne.n	810492e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81048e8:	68fb      	ldr	r3, [r7, #12]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	699a      	ldr	r2, [r3, #24]
 81048ee:	68bb      	ldr	r3, [r7, #8]
 81048f0:	4013      	ands	r3, r2
 81048f2:	68ba      	ldr	r2, [r7, #8]
 81048f4:	429a      	cmp	r2, r3
 81048f6:	bf0c      	ite	eq
 81048f8:	2301      	moveq	r3, #1
 81048fa:	2300      	movne	r3, #0
 81048fc:	b2db      	uxtb	r3, r3
 81048fe:	461a      	mov	r2, r3
 8104900:	79fb      	ldrb	r3, [r7, #7]
 8104902:	429a      	cmp	r2, r3
 8104904:	d113      	bne.n	810492e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104906:	68fb      	ldr	r3, [r7, #12]
 8104908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810490a:	f043 0220 	orr.w	r2, r3, #32
 810490e:	68fb      	ldr	r3, [r7, #12]
 8104910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104912:	68fb      	ldr	r3, [r7, #12]
 8104914:	2220      	movs	r2, #32
 8104916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810491a:	68fb      	ldr	r3, [r7, #12]
 810491c:	2200      	movs	r2, #0
 810491e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	2200      	movs	r2, #0
 8104926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 810492a:	2301      	movs	r3, #1
 810492c:	e00f      	b.n	810494e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	699a      	ldr	r2, [r3, #24]
 8104934:	68bb      	ldr	r3, [r7, #8]
 8104936:	4013      	ands	r3, r2
 8104938:	68ba      	ldr	r2, [r7, #8]
 810493a:	429a      	cmp	r2, r3
 810493c:	bf0c      	ite	eq
 810493e:	2301      	moveq	r3, #1
 8104940:	2300      	movne	r3, #0
 8104942:	b2db      	uxtb	r3, r3
 8104944:	461a      	mov	r2, r3
 8104946:	79fb      	ldrb	r3, [r7, #7]
 8104948:	429a      	cmp	r2, r3
 810494a:	d0be      	beq.n	81048ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810494c:	2300      	movs	r3, #0
}
 810494e:	4618      	mov	r0, r3
 8104950:	3710      	adds	r7, #16
 8104952:	46bd      	mov	sp, r7
 8104954:	bd80      	pop	{r7, pc}

08104956 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104956:	b580      	push	{r7, lr}
 8104958:	b084      	sub	sp, #16
 810495a:	af00      	add	r7, sp, #0
 810495c:	60f8      	str	r0, [r7, #12]
 810495e:	60b9      	str	r1, [r7, #8]
 8104960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104962:	e033      	b.n	81049cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104964:	687a      	ldr	r2, [r7, #4]
 8104966:	68b9      	ldr	r1, [r7, #8]
 8104968:	68f8      	ldr	r0, [r7, #12]
 810496a:	f000 f87f 	bl	8104a6c <I2C_IsErrorOccurred>
 810496e:	4603      	mov	r3, r0
 8104970:	2b00      	cmp	r3, #0
 8104972:	d001      	beq.n	8104978 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104974:	2301      	movs	r3, #1
 8104976:	e031      	b.n	81049dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104978:	68bb      	ldr	r3, [r7, #8]
 810497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810497e:	d025      	beq.n	81049cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104980:	f7fe fcac 	bl	81032dc <HAL_GetTick>
 8104984:	4602      	mov	r2, r0
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	1ad3      	subs	r3, r2, r3
 810498a:	68ba      	ldr	r2, [r7, #8]
 810498c:	429a      	cmp	r2, r3
 810498e:	d302      	bcc.n	8104996 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8104990:	68bb      	ldr	r3, [r7, #8]
 8104992:	2b00      	cmp	r3, #0
 8104994:	d11a      	bne.n	81049cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	681b      	ldr	r3, [r3, #0]
 810499a:	699b      	ldr	r3, [r3, #24]
 810499c:	f003 0302 	and.w	r3, r3, #2
 81049a0:	2b02      	cmp	r3, #2
 81049a2:	d013      	beq.n	81049cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81049a8:	f043 0220 	orr.w	r2, r3, #32
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81049b0:	68fb      	ldr	r3, [r7, #12]
 81049b2:	2220      	movs	r2, #32
 81049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	2200      	movs	r2, #0
 81049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81049c0:	68fb      	ldr	r3, [r7, #12]
 81049c2:	2200      	movs	r2, #0
 81049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81049c8:	2301      	movs	r3, #1
 81049ca:	e007      	b.n	81049dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81049cc:	68fb      	ldr	r3, [r7, #12]
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	699b      	ldr	r3, [r3, #24]
 81049d2:	f003 0302 	and.w	r3, r3, #2
 81049d6:	2b02      	cmp	r3, #2
 81049d8:	d1c4      	bne.n	8104964 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81049da:	2300      	movs	r3, #0
}
 81049dc:	4618      	mov	r0, r3
 81049de:	3710      	adds	r7, #16
 81049e0:	46bd      	mov	sp, r7
 81049e2:	bd80      	pop	{r7, pc}

081049e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81049e4:	b580      	push	{r7, lr}
 81049e6:	b084      	sub	sp, #16
 81049e8:	af00      	add	r7, sp, #0
 81049ea:	60f8      	str	r0, [r7, #12]
 81049ec:	60b9      	str	r1, [r7, #8]
 81049ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81049f0:	e02f      	b.n	8104a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81049f2:	687a      	ldr	r2, [r7, #4]
 81049f4:	68b9      	ldr	r1, [r7, #8]
 81049f6:	68f8      	ldr	r0, [r7, #12]
 81049f8:	f000 f838 	bl	8104a6c <I2C_IsErrorOccurred>
 81049fc:	4603      	mov	r3, r0
 81049fe:	2b00      	cmp	r3, #0
 8104a00:	d001      	beq.n	8104a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104a02:	2301      	movs	r3, #1
 8104a04:	e02d      	b.n	8104a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104a06:	f7fe fc69 	bl	81032dc <HAL_GetTick>
 8104a0a:	4602      	mov	r2, r0
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	1ad3      	subs	r3, r2, r3
 8104a10:	68ba      	ldr	r2, [r7, #8]
 8104a12:	429a      	cmp	r2, r3
 8104a14:	d302      	bcc.n	8104a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104a16:	68bb      	ldr	r3, [r7, #8]
 8104a18:	2b00      	cmp	r3, #0
 8104a1a:	d11a      	bne.n	8104a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	699b      	ldr	r3, [r3, #24]
 8104a22:	f003 0320 	and.w	r3, r3, #32
 8104a26:	2b20      	cmp	r3, #32
 8104a28:	d013      	beq.n	8104a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a2a:	68fb      	ldr	r3, [r7, #12]
 8104a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a2e:	f043 0220 	orr.w	r2, r3, #32
 8104a32:	68fb      	ldr	r3, [r7, #12]
 8104a34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104a36:	68fb      	ldr	r3, [r7, #12]
 8104a38:	2220      	movs	r2, #32
 8104a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	2200      	movs	r2, #0
 8104a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	2200      	movs	r2, #0
 8104a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104a4e:	2301      	movs	r3, #1
 8104a50:	e007      	b.n	8104a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104a52:	68fb      	ldr	r3, [r7, #12]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	699b      	ldr	r3, [r3, #24]
 8104a58:	f003 0320 	and.w	r3, r3, #32
 8104a5c:	2b20      	cmp	r3, #32
 8104a5e:	d1c8      	bne.n	81049f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104a60:	2300      	movs	r3, #0
}
 8104a62:	4618      	mov	r0, r3
 8104a64:	3710      	adds	r7, #16
 8104a66:	46bd      	mov	sp, r7
 8104a68:	bd80      	pop	{r7, pc}
	...

08104a6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104a6c:	b580      	push	{r7, lr}
 8104a6e:	b08a      	sub	sp, #40	; 0x28
 8104a70:	af00      	add	r7, sp, #0
 8104a72:	60f8      	str	r0, [r7, #12]
 8104a74:	60b9      	str	r1, [r7, #8]
 8104a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104a78:	2300      	movs	r3, #0
 8104a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	699b      	ldr	r3, [r3, #24]
 8104a84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8104a86:	2300      	movs	r3, #0
 8104a88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8104a8e:	69bb      	ldr	r3, [r7, #24]
 8104a90:	f003 0310 	and.w	r3, r3, #16
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d068      	beq.n	8104b6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	2210      	movs	r2, #16
 8104a9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104aa0:	e049      	b.n	8104b36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104aa2:	68bb      	ldr	r3, [r7, #8]
 8104aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104aa8:	d045      	beq.n	8104b36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104aaa:	f7fe fc17 	bl	81032dc <HAL_GetTick>
 8104aae:	4602      	mov	r2, r0
 8104ab0:	69fb      	ldr	r3, [r7, #28]
 8104ab2:	1ad3      	subs	r3, r2, r3
 8104ab4:	68ba      	ldr	r2, [r7, #8]
 8104ab6:	429a      	cmp	r2, r3
 8104ab8:	d302      	bcc.n	8104ac0 <I2C_IsErrorOccurred+0x54>
 8104aba:	68bb      	ldr	r3, [r7, #8]
 8104abc:	2b00      	cmp	r3, #0
 8104abe:	d13a      	bne.n	8104b36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	685b      	ldr	r3, [r3, #4]
 8104ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104aca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104acc:	68fb      	ldr	r3, [r7, #12]
 8104ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8104ad2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104ad4:	68fb      	ldr	r3, [r7, #12]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	699b      	ldr	r3, [r3, #24]
 8104ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104ae2:	d121      	bne.n	8104b28 <I2C_IsErrorOccurred+0xbc>
 8104ae4:	697b      	ldr	r3, [r7, #20]
 8104ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104aea:	d01d      	beq.n	8104b28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8104aec:	7cfb      	ldrb	r3, [r7, #19]
 8104aee:	2b20      	cmp	r3, #32
 8104af0:	d01a      	beq.n	8104b28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104af2:	68fb      	ldr	r3, [r7, #12]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	685a      	ldr	r2, [r3, #4]
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104b00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104b02:	f7fe fbeb 	bl	81032dc <HAL_GetTick>
 8104b06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104b08:	e00e      	b.n	8104b28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8104b0a:	f7fe fbe7 	bl	81032dc <HAL_GetTick>
 8104b0e:	4602      	mov	r2, r0
 8104b10:	69fb      	ldr	r3, [r7, #28]
 8104b12:	1ad3      	subs	r3, r2, r3
 8104b14:	2b19      	cmp	r3, #25
 8104b16:	d907      	bls.n	8104b28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8104b18:	6a3b      	ldr	r3, [r7, #32]
 8104b1a:	f043 0320 	orr.w	r3, r3, #32
 8104b1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8104b20:	2301      	movs	r3, #1
 8104b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8104b26:	e006      	b.n	8104b36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104b28:	68fb      	ldr	r3, [r7, #12]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	699b      	ldr	r3, [r3, #24]
 8104b2e:	f003 0320 	and.w	r3, r3, #32
 8104b32:	2b20      	cmp	r3, #32
 8104b34:	d1e9      	bne.n	8104b0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	681b      	ldr	r3, [r3, #0]
 8104b3a:	699b      	ldr	r3, [r3, #24]
 8104b3c:	f003 0320 	and.w	r3, r3, #32
 8104b40:	2b20      	cmp	r3, #32
 8104b42:	d003      	beq.n	8104b4c <I2C_IsErrorOccurred+0xe0>
 8104b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d0aa      	beq.n	8104aa2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104b50:	2b00      	cmp	r3, #0
 8104b52:	d103      	bne.n	8104b5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	2220      	movs	r2, #32
 8104b5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8104b5c:	6a3b      	ldr	r3, [r7, #32]
 8104b5e:	f043 0304 	orr.w	r3, r3, #4
 8104b62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8104b64:	2301      	movs	r3, #1
 8104b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8104b6a:	68fb      	ldr	r3, [r7, #12]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	699b      	ldr	r3, [r3, #24]
 8104b70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8104b72:	69bb      	ldr	r3, [r7, #24]
 8104b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b78:	2b00      	cmp	r3, #0
 8104b7a:	d00b      	beq.n	8104b94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8104b7c:	6a3b      	ldr	r3, [r7, #32]
 8104b7e:	f043 0301 	orr.w	r3, r3, #1
 8104b82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104b8e:	2301      	movs	r3, #1
 8104b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8104b94:	69bb      	ldr	r3, [r7, #24]
 8104b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	d00b      	beq.n	8104bb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104b9e:	6a3b      	ldr	r3, [r7, #32]
 8104ba0:	f043 0308 	orr.w	r3, r3, #8
 8104ba4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104ba6:	68fb      	ldr	r3, [r7, #12]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104bb0:	2301      	movs	r3, #1
 8104bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104bb6:	69bb      	ldr	r3, [r7, #24]
 8104bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104bbc:	2b00      	cmp	r3, #0
 8104bbe:	d00b      	beq.n	8104bd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8104bc0:	6a3b      	ldr	r3, [r7, #32]
 8104bc2:	f043 0302 	orr.w	r3, r3, #2
 8104bc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104bc8:	68fb      	ldr	r3, [r7, #12]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104bd2:	2301      	movs	r3, #1
 8104bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8104bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104bdc:	2b00      	cmp	r3, #0
 8104bde:	d01c      	beq.n	8104c1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104be0:	68f8      	ldr	r0, [r7, #12]
 8104be2:	f7ff fe45 	bl	8104870 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	681b      	ldr	r3, [r3, #0]
 8104bea:	6859      	ldr	r1, [r3, #4]
 8104bec:	68fb      	ldr	r3, [r7, #12]
 8104bee:	681a      	ldr	r2, [r3, #0]
 8104bf0:	4b0d      	ldr	r3, [pc, #52]	; (8104c28 <I2C_IsErrorOccurred+0x1bc>)
 8104bf2:	400b      	ands	r3, r1
 8104bf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104bfa:	6a3b      	ldr	r3, [r7, #32]
 8104bfc:	431a      	orrs	r2, r3
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	2220      	movs	r2, #32
 8104c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	2200      	movs	r2, #0
 8104c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104c12:	68fb      	ldr	r3, [r7, #12]
 8104c14:	2200      	movs	r2, #0
 8104c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104c1e:	4618      	mov	r0, r3
 8104c20:	3728      	adds	r7, #40	; 0x28
 8104c22:	46bd      	mov	sp, r7
 8104c24:	bd80      	pop	{r7, pc}
 8104c26:	bf00      	nop
 8104c28:	fe00e800 	.word	0xfe00e800

08104c2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104c2c:	b480      	push	{r7}
 8104c2e:	b087      	sub	sp, #28
 8104c30:	af00      	add	r7, sp, #0
 8104c32:	60f8      	str	r0, [r7, #12]
 8104c34:	607b      	str	r3, [r7, #4]
 8104c36:	460b      	mov	r3, r1
 8104c38:	817b      	strh	r3, [r7, #10]
 8104c3a:	4613      	mov	r3, r2
 8104c3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104c3e:	897b      	ldrh	r3, [r7, #10]
 8104c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104c44:	7a7b      	ldrb	r3, [r7, #9]
 8104c46:	041b      	lsls	r3, r3, #16
 8104c48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104c4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104c52:	6a3b      	ldr	r3, [r7, #32]
 8104c54:	4313      	orrs	r3, r2
 8104c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8104c5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	685a      	ldr	r2, [r3, #4]
 8104c62:	6a3b      	ldr	r3, [r7, #32]
 8104c64:	0d5b      	lsrs	r3, r3, #21
 8104c66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8104c6a:	4b08      	ldr	r3, [pc, #32]	; (8104c8c <I2C_TransferConfig+0x60>)
 8104c6c:	430b      	orrs	r3, r1
 8104c6e:	43db      	mvns	r3, r3
 8104c70:	ea02 0103 	and.w	r1, r2, r3
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	697a      	ldr	r2, [r7, #20]
 8104c7a:	430a      	orrs	r2, r1
 8104c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8104c7e:	bf00      	nop
 8104c80:	371c      	adds	r7, #28
 8104c82:	46bd      	mov	sp, r7
 8104c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c88:	4770      	bx	lr
 8104c8a:	bf00      	nop
 8104c8c:	03ff63ff 	.word	0x03ff63ff

08104c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104c90:	b480      	push	{r7}
 8104c92:	b083      	sub	sp, #12
 8104c94:	af00      	add	r7, sp, #0
 8104c96:	6078      	str	r0, [r7, #4]
 8104c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104ca0:	b2db      	uxtb	r3, r3
 8104ca2:	2b20      	cmp	r3, #32
 8104ca4:	d138      	bne.n	8104d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104cac:	2b01      	cmp	r3, #1
 8104cae:	d101      	bne.n	8104cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104cb0:	2302      	movs	r3, #2
 8104cb2:	e032      	b.n	8104d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	2201      	movs	r2, #1
 8104cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	2224      	movs	r2, #36	; 0x24
 8104cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	681a      	ldr	r2, [r3, #0]
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	f022 0201 	bic.w	r2, r2, #1
 8104cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	681a      	ldr	r2, [r3, #0]
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	681b      	ldr	r3, [r3, #0]
 8104ce8:	6819      	ldr	r1, [r3, #0]
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	683a      	ldr	r2, [r7, #0]
 8104cf0:	430a      	orrs	r2, r1
 8104cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	681a      	ldr	r2, [r3, #0]
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	f042 0201 	orr.w	r2, r2, #1
 8104d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	2220      	movs	r2, #32
 8104d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	2200      	movs	r2, #0
 8104d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104d14:	2300      	movs	r3, #0
 8104d16:	e000      	b.n	8104d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104d18:	2302      	movs	r3, #2
  }
}
 8104d1a:	4618      	mov	r0, r3
 8104d1c:	370c      	adds	r7, #12
 8104d1e:	46bd      	mov	sp, r7
 8104d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d24:	4770      	bx	lr

08104d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104d26:	b480      	push	{r7}
 8104d28:	b085      	sub	sp, #20
 8104d2a:	af00      	add	r7, sp, #0
 8104d2c:	6078      	str	r0, [r7, #4]
 8104d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d30:	687b      	ldr	r3, [r7, #4]
 8104d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104d36:	b2db      	uxtb	r3, r3
 8104d38:	2b20      	cmp	r3, #32
 8104d3a:	d139      	bne.n	8104db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d42:	2b01      	cmp	r3, #1
 8104d44:	d101      	bne.n	8104d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8104d46:	2302      	movs	r3, #2
 8104d48:	e033      	b.n	8104db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	2201      	movs	r2, #1
 8104d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	2224      	movs	r2, #36	; 0x24
 8104d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	681a      	ldr	r2, [r3, #0]
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	f022 0201 	bic.w	r2, r2, #1
 8104d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	681b      	ldr	r3, [r3, #0]
 8104d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104d7a:	683b      	ldr	r3, [r7, #0]
 8104d7c:	021b      	lsls	r3, r3, #8
 8104d7e:	68fa      	ldr	r2, [r7, #12]
 8104d80:	4313      	orrs	r3, r2
 8104d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	68fa      	ldr	r2, [r7, #12]
 8104d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	681a      	ldr	r2, [r3, #0]
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	681b      	ldr	r3, [r3, #0]
 8104d96:	f042 0201 	orr.w	r2, r2, #1
 8104d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	2220      	movs	r2, #32
 8104da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	2200      	movs	r2, #0
 8104da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104dac:	2300      	movs	r3, #0
 8104dae:	e000      	b.n	8104db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104db0:	2302      	movs	r3, #2
  }
}
 8104db2:	4618      	mov	r0, r3
 8104db4:	3714      	adds	r7, #20
 8104db6:	46bd      	mov	sp, r7
 8104db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dbc:	4770      	bx	lr
	...

08104dc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8104dc0:	b580      	push	{r7, lr}
 8104dc2:	b084      	sub	sp, #16
 8104dc4:	af00      	add	r7, sp, #0
 8104dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d101      	bne.n	8104dd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8104dce:	2301      	movs	r3, #1
 8104dd0:	e0bf      	b.n	8104f52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8104dd8:	b2db      	uxtb	r3, r3
 8104dda:	2b00      	cmp	r3, #0
 8104ddc:	d106      	bne.n	8104dec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	2200      	movs	r2, #0
 8104de2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8104de6:	6878      	ldr	r0, [r7, #4]
 8104de8:	f000 f8ba 	bl	8104f60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	2202      	movs	r2, #2
 8104df0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	699a      	ldr	r2, [r3, #24]
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8104e02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	6999      	ldr	r1, [r3, #24]
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	685a      	ldr	r2, [r3, #4]
 8104e0e:	687b      	ldr	r3, [r7, #4]
 8104e10:	689b      	ldr	r3, [r3, #8]
 8104e12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104e18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	691b      	ldr	r3, [r3, #16]
 8104e1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	430a      	orrs	r2, r1
 8104e26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	6899      	ldr	r1, [r3, #8]
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681a      	ldr	r2, [r3, #0]
 8104e32:	4b4a      	ldr	r3, [pc, #296]	; (8104f5c <HAL_LTDC_Init+0x19c>)
 8104e34:	400b      	ands	r3, r1
 8104e36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	695b      	ldr	r3, [r3, #20]
 8104e3c:	041b      	lsls	r3, r3, #16
 8104e3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	6899      	ldr	r1, [r3, #8]
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	699a      	ldr	r2, [r3, #24]
 8104e4a:	68fb      	ldr	r3, [r7, #12]
 8104e4c:	431a      	orrs	r2, r3
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	430a      	orrs	r2, r1
 8104e54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	68d9      	ldr	r1, [r3, #12]
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	681a      	ldr	r2, [r3, #0]
 8104e60:	4b3e      	ldr	r3, [pc, #248]	; (8104f5c <HAL_LTDC_Init+0x19c>)
 8104e62:	400b      	ands	r3, r1
 8104e64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	69db      	ldr	r3, [r3, #28]
 8104e6a:	041b      	lsls	r3, r3, #16
 8104e6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	68d9      	ldr	r1, [r3, #12]
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	6a1a      	ldr	r2, [r3, #32]
 8104e78:	68fb      	ldr	r3, [r7, #12]
 8104e7a:	431a      	orrs	r2, r3
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	430a      	orrs	r2, r1
 8104e82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	6919      	ldr	r1, [r3, #16]
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	681a      	ldr	r2, [r3, #0]
 8104e8e:	4b33      	ldr	r3, [pc, #204]	; (8104f5c <HAL_LTDC_Init+0x19c>)
 8104e90:	400b      	ands	r3, r1
 8104e92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e98:	041b      	lsls	r3, r3, #16
 8104e9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	6919      	ldr	r1, [r3, #16]
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8104ea6:	68fb      	ldr	r3, [r7, #12]
 8104ea8:	431a      	orrs	r2, r3
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	430a      	orrs	r2, r1
 8104eb0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	6959      	ldr	r1, [r3, #20]
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681a      	ldr	r2, [r3, #0]
 8104ebc:	4b27      	ldr	r3, [pc, #156]	; (8104f5c <HAL_LTDC_Init+0x19c>)
 8104ebe:	400b      	ands	r3, r1
 8104ec0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec6:	041b      	lsls	r3, r3, #16
 8104ec8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	681b      	ldr	r3, [r3, #0]
 8104ece:	6959      	ldr	r1, [r3, #20]
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8104ed4:	68fb      	ldr	r3, [r7, #12]
 8104ed6:	431a      	orrs	r2, r3
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	430a      	orrs	r2, r1
 8104ede:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104ee6:	021b      	lsls	r3, r3, #8
 8104ee8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8104ef0:	041b      	lsls	r3, r3, #16
 8104ef2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8104f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8104f0a:	68ba      	ldr	r2, [r7, #8]
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	4313      	orrs	r3, r2
 8104f10:	687a      	ldr	r2, [r7, #4]
 8104f12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8104f16:	431a      	orrs	r2, r3
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	430a      	orrs	r2, r1
 8104f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f042 0206 	orr.w	r2, r2, #6
 8104f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	699a      	ldr	r2, [r3, #24]
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	f042 0201 	orr.w	r2, r2, #1
 8104f3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	2200      	movs	r2, #0
 8104f44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	2201      	movs	r2, #1
 8104f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8104f50:	2300      	movs	r3, #0
}
 8104f52:	4618      	mov	r0, r3
 8104f54:	3710      	adds	r7, #16
 8104f56:	46bd      	mov	sp, r7
 8104f58:	bd80      	pop	{r7, pc}
 8104f5a:	bf00      	nop
 8104f5c:	f000f800 	.word	0xf000f800

08104f60 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8104f60:	b480      	push	{r7}
 8104f62:	b083      	sub	sp, #12
 8104f64:	af00      	add	r7, sp, #0
 8104f66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8104f68:	bf00      	nop
 8104f6a:	370c      	adds	r7, #12
 8104f6c:	46bd      	mov	sp, r7
 8104f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f72:	4770      	bx	lr

08104f74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8104f74:	b5b0      	push	{r4, r5, r7, lr}
 8104f76:	b084      	sub	sp, #16
 8104f78:	af00      	add	r7, sp, #0
 8104f7a:	60f8      	str	r0, [r7, #12]
 8104f7c:	60b9      	str	r1, [r7, #8]
 8104f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8104f80:	68fb      	ldr	r3, [r7, #12]
 8104f82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8104f86:	2b01      	cmp	r3, #1
 8104f88:	d101      	bne.n	8104f8e <HAL_LTDC_ConfigLayer+0x1a>
 8104f8a:	2302      	movs	r3, #2
 8104f8c:	e02c      	b.n	8104fe8 <HAL_LTDC_ConfigLayer+0x74>
 8104f8e:	68fb      	ldr	r3, [r7, #12]
 8104f90:	2201      	movs	r2, #1
 8104f92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8104f96:	68fb      	ldr	r3, [r7, #12]
 8104f98:	2202      	movs	r2, #2
 8104f9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8104f9e:	68fa      	ldr	r2, [r7, #12]
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	2134      	movs	r1, #52	; 0x34
 8104fa4:	fb01 f303 	mul.w	r3, r1, r3
 8104fa8:	4413      	add	r3, r2
 8104faa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8104fae:	68bb      	ldr	r3, [r7, #8]
 8104fb0:	4614      	mov	r4, r2
 8104fb2:	461d      	mov	r5, r3
 8104fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104fc0:	682b      	ldr	r3, [r5, #0]
 8104fc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8104fc4:	687a      	ldr	r2, [r7, #4]
 8104fc6:	68b9      	ldr	r1, [r7, #8]
 8104fc8:	68f8      	ldr	r0, [r7, #12]
 8104fca:	f000 f811 	bl	8104ff0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	2201      	movs	r2, #1
 8104fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8104fd6:	68fb      	ldr	r3, [r7, #12]
 8104fd8:	2201      	movs	r2, #1
 8104fda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8104fde:	68fb      	ldr	r3, [r7, #12]
 8104fe0:	2200      	movs	r2, #0
 8104fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8104fe6:	2300      	movs	r3, #0
}
 8104fe8:	4618      	mov	r0, r3
 8104fea:	3710      	adds	r7, #16
 8104fec:	46bd      	mov	sp, r7
 8104fee:	bdb0      	pop	{r4, r5, r7, pc}

08104ff0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8104ff0:	b480      	push	{r7}
 8104ff2:	b089      	sub	sp, #36	; 0x24
 8104ff4:	af00      	add	r7, sp, #0
 8104ff6:	60f8      	str	r0, [r7, #12]
 8104ff8:	60b9      	str	r1, [r7, #8]
 8104ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8104ffc:	68bb      	ldr	r3, [r7, #8]
 8104ffe:	685a      	ldr	r2, [r3, #4]
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	68db      	ldr	r3, [r3, #12]
 8105006:	0c1b      	lsrs	r3, r3, #16
 8105008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810500c:	4413      	add	r3, r2
 810500e:	041b      	lsls	r3, r3, #16
 8105010:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	461a      	mov	r2, r3
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	01db      	lsls	r3, r3, #7
 810501c:	4413      	add	r3, r2
 810501e:	3384      	adds	r3, #132	; 0x84
 8105020:	685b      	ldr	r3, [r3, #4]
 8105022:	68fa      	ldr	r2, [r7, #12]
 8105024:	6812      	ldr	r2, [r2, #0]
 8105026:	4611      	mov	r1, r2
 8105028:	687a      	ldr	r2, [r7, #4]
 810502a:	01d2      	lsls	r2, r2, #7
 810502c:	440a      	add	r2, r1
 810502e:	3284      	adds	r2, #132	; 0x84
 8105030:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8105034:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105036:	68bb      	ldr	r3, [r7, #8]
 8105038:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 810503a:	68fb      	ldr	r3, [r7, #12]
 810503c:	681b      	ldr	r3, [r3, #0]
 810503e:	68db      	ldr	r3, [r3, #12]
 8105040:	0c1b      	lsrs	r3, r3, #16
 8105042:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105046:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8105048:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 810504a:	68fb      	ldr	r3, [r7, #12]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	4619      	mov	r1, r3
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	01db      	lsls	r3, r3, #7
 8105054:	440b      	add	r3, r1
 8105056:	3384      	adds	r3, #132	; 0x84
 8105058:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 810505a:	69fb      	ldr	r3, [r7, #28]
 810505c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 810505e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8105060:	68bb      	ldr	r3, [r7, #8]
 8105062:	68da      	ldr	r2, [r3, #12]
 8105064:	68fb      	ldr	r3, [r7, #12]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	68db      	ldr	r3, [r3, #12]
 810506a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810506e:	4413      	add	r3, r2
 8105070:	041b      	lsls	r3, r3, #16
 8105072:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8105074:	68fb      	ldr	r3, [r7, #12]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	461a      	mov	r2, r3
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	01db      	lsls	r3, r3, #7
 810507e:	4413      	add	r3, r2
 8105080:	3384      	adds	r3, #132	; 0x84
 8105082:	689b      	ldr	r3, [r3, #8]
 8105084:	68fa      	ldr	r2, [r7, #12]
 8105086:	6812      	ldr	r2, [r2, #0]
 8105088:	4611      	mov	r1, r2
 810508a:	687a      	ldr	r2, [r7, #4]
 810508c:	01d2      	lsls	r2, r2, #7
 810508e:	440a      	add	r2, r1
 8105090:	3284      	adds	r2, #132	; 0x84
 8105092:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8105096:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8105098:	68bb      	ldr	r3, [r7, #8]
 810509a:	689a      	ldr	r2, [r3, #8]
 810509c:	68fb      	ldr	r3, [r7, #12]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	68db      	ldr	r3, [r3, #12]
 81050a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81050a6:	4413      	add	r3, r2
 81050a8:	1c5a      	adds	r2, r3, #1
 81050aa:	68fb      	ldr	r3, [r7, #12]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4619      	mov	r1, r3
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	01db      	lsls	r3, r3, #7
 81050b4:	440b      	add	r3, r1
 81050b6:	3384      	adds	r3, #132	; 0x84
 81050b8:	4619      	mov	r1, r3
 81050ba:	69fb      	ldr	r3, [r7, #28]
 81050bc:	4313      	orrs	r3, r2
 81050be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 81050c0:	68fb      	ldr	r3, [r7, #12]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	461a      	mov	r2, r3
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	01db      	lsls	r3, r3, #7
 81050ca:	4413      	add	r3, r2
 81050cc:	3384      	adds	r3, #132	; 0x84
 81050ce:	691b      	ldr	r3, [r3, #16]
 81050d0:	68fa      	ldr	r2, [r7, #12]
 81050d2:	6812      	ldr	r2, [r2, #0]
 81050d4:	4611      	mov	r1, r2
 81050d6:	687a      	ldr	r2, [r7, #4]
 81050d8:	01d2      	lsls	r2, r2, #7
 81050da:	440a      	add	r2, r1
 81050dc:	3284      	adds	r2, #132	; 0x84
 81050de:	f023 0307 	bic.w	r3, r3, #7
 81050e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 81050e4:	68fb      	ldr	r3, [r7, #12]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	461a      	mov	r2, r3
 81050ea:	687b      	ldr	r3, [r7, #4]
 81050ec:	01db      	lsls	r3, r3, #7
 81050ee:	4413      	add	r3, r2
 81050f0:	3384      	adds	r3, #132	; 0x84
 81050f2:	461a      	mov	r2, r3
 81050f4:	68bb      	ldr	r3, [r7, #8]
 81050f6:	691b      	ldr	r3, [r3, #16]
 81050f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 81050fa:	68bb      	ldr	r3, [r7, #8]
 81050fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8105100:	021b      	lsls	r3, r3, #8
 8105102:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8105104:	68bb      	ldr	r3, [r7, #8]
 8105106:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810510a:	041b      	lsls	r3, r3, #16
 810510c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 810510e:	68bb      	ldr	r3, [r7, #8]
 8105110:	699b      	ldr	r3, [r3, #24]
 8105112:	061b      	lsls	r3, r3, #24
 8105114:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8105116:	68fb      	ldr	r3, [r7, #12]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	461a      	mov	r2, r3
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	01db      	lsls	r3, r3, #7
 8105120:	4413      	add	r3, r2
 8105122:	3384      	adds	r3, #132	; 0x84
 8105124:	699b      	ldr	r3, [r3, #24]
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	681b      	ldr	r3, [r3, #0]
 810512a:	461a      	mov	r2, r3
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	01db      	lsls	r3, r3, #7
 8105130:	4413      	add	r3, r2
 8105132:	3384      	adds	r3, #132	; 0x84
 8105134:	461a      	mov	r2, r3
 8105136:	2300      	movs	r3, #0
 8105138:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 810513a:	68bb      	ldr	r3, [r7, #8]
 810513c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8105140:	461a      	mov	r2, r3
 8105142:	69fb      	ldr	r3, [r7, #28]
 8105144:	431a      	orrs	r2, r3
 8105146:	69bb      	ldr	r3, [r7, #24]
 8105148:	431a      	orrs	r2, r3
 810514a:	68fb      	ldr	r3, [r7, #12]
 810514c:	681b      	ldr	r3, [r3, #0]
 810514e:	4619      	mov	r1, r3
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	01db      	lsls	r3, r3, #7
 8105154:	440b      	add	r3, r1
 8105156:	3384      	adds	r3, #132	; 0x84
 8105158:	4619      	mov	r1, r3
 810515a:	697b      	ldr	r3, [r7, #20]
 810515c:	4313      	orrs	r3, r2
 810515e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	461a      	mov	r2, r3
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	01db      	lsls	r3, r3, #7
 810516a:	4413      	add	r3, r2
 810516c:	3384      	adds	r3, #132	; 0x84
 810516e:	695b      	ldr	r3, [r3, #20]
 8105170:	68fa      	ldr	r2, [r7, #12]
 8105172:	6812      	ldr	r2, [r2, #0]
 8105174:	4611      	mov	r1, r2
 8105176:	687a      	ldr	r2, [r7, #4]
 8105178:	01d2      	lsls	r2, r2, #7
 810517a:	440a      	add	r2, r1
 810517c:	3284      	adds	r2, #132	; 0x84
 810517e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8105182:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	461a      	mov	r2, r3
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	01db      	lsls	r3, r3, #7
 810518e:	4413      	add	r3, r2
 8105190:	3384      	adds	r3, #132	; 0x84
 8105192:	461a      	mov	r2, r3
 8105194:	68bb      	ldr	r3, [r7, #8]
 8105196:	695b      	ldr	r3, [r3, #20]
 8105198:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	461a      	mov	r2, r3
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	01db      	lsls	r3, r3, #7
 81051a4:	4413      	add	r3, r2
 81051a6:	3384      	adds	r3, #132	; 0x84
 81051a8:	69da      	ldr	r2, [r3, #28]
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4619      	mov	r1, r3
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	01db      	lsls	r3, r3, #7
 81051b4:	440b      	add	r3, r1
 81051b6:	3384      	adds	r3, #132	; 0x84
 81051b8:	4619      	mov	r1, r3
 81051ba:	4b58      	ldr	r3, [pc, #352]	; (810531c <LTDC_SetConfig+0x32c>)
 81051bc:	4013      	ands	r3, r2
 81051be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 81051c0:	68bb      	ldr	r3, [r7, #8]
 81051c2:	69da      	ldr	r2, [r3, #28]
 81051c4:	68bb      	ldr	r3, [r7, #8]
 81051c6:	6a1b      	ldr	r3, [r3, #32]
 81051c8:	68f9      	ldr	r1, [r7, #12]
 81051ca:	6809      	ldr	r1, [r1, #0]
 81051cc:	4608      	mov	r0, r1
 81051ce:	6879      	ldr	r1, [r7, #4]
 81051d0:	01c9      	lsls	r1, r1, #7
 81051d2:	4401      	add	r1, r0
 81051d4:	3184      	adds	r1, #132	; 0x84
 81051d6:	4313      	orrs	r3, r2
 81051d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 81051da:	68fb      	ldr	r3, [r7, #12]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	461a      	mov	r2, r3
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	01db      	lsls	r3, r3, #7
 81051e4:	4413      	add	r3, r2
 81051e6:	3384      	adds	r3, #132	; 0x84
 81051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	461a      	mov	r2, r3
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	01db      	lsls	r3, r3, #7
 81051f4:	4413      	add	r3, r2
 81051f6:	3384      	adds	r3, #132	; 0x84
 81051f8:	461a      	mov	r2, r3
 81051fa:	2300      	movs	r3, #0
 81051fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 81051fe:	68fb      	ldr	r3, [r7, #12]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	461a      	mov	r2, r3
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	01db      	lsls	r3, r3, #7
 8105208:	4413      	add	r3, r2
 810520a:	3384      	adds	r3, #132	; 0x84
 810520c:	461a      	mov	r2, r3
 810520e:	68bb      	ldr	r3, [r7, #8]
 8105210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105212:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8105214:	68bb      	ldr	r3, [r7, #8]
 8105216:	691b      	ldr	r3, [r3, #16]
 8105218:	2b00      	cmp	r3, #0
 810521a:	d102      	bne.n	8105222 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 810521c:	2304      	movs	r3, #4
 810521e:	61fb      	str	r3, [r7, #28]
 8105220:	e01b      	b.n	810525a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8105222:	68bb      	ldr	r3, [r7, #8]
 8105224:	691b      	ldr	r3, [r3, #16]
 8105226:	2b01      	cmp	r3, #1
 8105228:	d102      	bne.n	8105230 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 810522a:	2303      	movs	r3, #3
 810522c:	61fb      	str	r3, [r7, #28]
 810522e:	e014      	b.n	810525a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8105230:	68bb      	ldr	r3, [r7, #8]
 8105232:	691b      	ldr	r3, [r3, #16]
 8105234:	2b04      	cmp	r3, #4
 8105236:	d00b      	beq.n	8105250 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8105238:	68bb      	ldr	r3, [r7, #8]
 810523a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 810523c:	2b02      	cmp	r3, #2
 810523e:	d007      	beq.n	8105250 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8105240:	68bb      	ldr	r3, [r7, #8]
 8105242:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8105244:	2b03      	cmp	r3, #3
 8105246:	d003      	beq.n	8105250 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8105248:	68bb      	ldr	r3, [r7, #8]
 810524a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 810524c:	2b07      	cmp	r3, #7
 810524e:	d102      	bne.n	8105256 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8105250:	2302      	movs	r3, #2
 8105252:	61fb      	str	r3, [r7, #28]
 8105254:	e001      	b.n	810525a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8105256:	2301      	movs	r3, #1
 8105258:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 810525a:	68fb      	ldr	r3, [r7, #12]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	461a      	mov	r2, r3
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	01db      	lsls	r3, r3, #7
 8105264:	4413      	add	r3, r2
 8105266:	3384      	adds	r3, #132	; 0x84
 8105268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810526a:	68fa      	ldr	r2, [r7, #12]
 810526c:	6812      	ldr	r2, [r2, #0]
 810526e:	4611      	mov	r1, r2
 8105270:	687a      	ldr	r2, [r7, #4]
 8105272:	01d2      	lsls	r2, r2, #7
 8105274:	440a      	add	r2, r1
 8105276:	3284      	adds	r2, #132	; 0x84
 8105278:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 810527c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 810527e:	68bb      	ldr	r3, [r7, #8]
 8105280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105282:	69fa      	ldr	r2, [r7, #28]
 8105284:	fb02 f303 	mul.w	r3, r2, r3
 8105288:	041a      	lsls	r2, r3, #16
 810528a:	68bb      	ldr	r3, [r7, #8]
 810528c:	6859      	ldr	r1, [r3, #4]
 810528e:	68bb      	ldr	r3, [r7, #8]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	1acb      	subs	r3, r1, r3
 8105294:	69f9      	ldr	r1, [r7, #28]
 8105296:	fb01 f303 	mul.w	r3, r1, r3
 810529a:	3307      	adds	r3, #7
 810529c:	68f9      	ldr	r1, [r7, #12]
 810529e:	6809      	ldr	r1, [r1, #0]
 81052a0:	4608      	mov	r0, r1
 81052a2:	6879      	ldr	r1, [r7, #4]
 81052a4:	01c9      	lsls	r1, r1, #7
 81052a6:	4401      	add	r1, r0
 81052a8:	3184      	adds	r1, #132	; 0x84
 81052aa:	4313      	orrs	r3, r2
 81052ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 81052ae:	68fb      	ldr	r3, [r7, #12]
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	461a      	mov	r2, r3
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	01db      	lsls	r3, r3, #7
 81052b8:	4413      	add	r3, r2
 81052ba:	3384      	adds	r3, #132	; 0x84
 81052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81052be:	68fb      	ldr	r3, [r7, #12]
 81052c0:	681b      	ldr	r3, [r3, #0]
 81052c2:	4619      	mov	r1, r3
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	01db      	lsls	r3, r3, #7
 81052c8:	440b      	add	r3, r1
 81052ca:	3384      	adds	r3, #132	; 0x84
 81052cc:	4619      	mov	r1, r3
 81052ce:	4b14      	ldr	r3, [pc, #80]	; (8105320 <LTDC_SetConfig+0x330>)
 81052d0:	4013      	ands	r3, r2
 81052d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 81052d4:	68fb      	ldr	r3, [r7, #12]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	461a      	mov	r2, r3
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	01db      	lsls	r3, r3, #7
 81052de:	4413      	add	r3, r2
 81052e0:	3384      	adds	r3, #132	; 0x84
 81052e2:	461a      	mov	r2, r3
 81052e4:	68bb      	ldr	r3, [r7, #8]
 81052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 81052ea:	68fb      	ldr	r3, [r7, #12]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	461a      	mov	r2, r3
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	01db      	lsls	r3, r3, #7
 81052f4:	4413      	add	r3, r2
 81052f6:	3384      	adds	r3, #132	; 0x84
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	68fa      	ldr	r2, [r7, #12]
 81052fc:	6812      	ldr	r2, [r2, #0]
 81052fe:	4611      	mov	r1, r2
 8105300:	687a      	ldr	r2, [r7, #4]
 8105302:	01d2      	lsls	r2, r2, #7
 8105304:	440a      	add	r2, r1
 8105306:	3284      	adds	r2, #132	; 0x84
 8105308:	f043 0301 	orr.w	r3, r3, #1
 810530c:	6013      	str	r3, [r2, #0]
}
 810530e:	bf00      	nop
 8105310:	3724      	adds	r7, #36	; 0x24
 8105312:	46bd      	mov	sp, r7
 8105314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105318:	4770      	bx	lr
 810531a:	bf00      	nop
 810531c:	fffff8f8 	.word	0xfffff8f8
 8105320:	fffff800 	.word	0xfffff800

08105324 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8105324:	b580      	push	{r7, lr}
 8105326:	b084      	sub	sp, #16
 8105328:	af00      	add	r7, sp, #0
 810532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810532c:	f7fd ffd6 	bl	81032dc <HAL_GetTick>
 8105330:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	2b00      	cmp	r3, #0
 8105336:	d101      	bne.n	810533c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8105338:	2301      	movs	r3, #1
 810533a:	e03b      	b.n	81053b4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	2200      	movs	r2, #0
 8105340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	2202      	movs	r2, #2
 8105348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	68da      	ldr	r2, [r3, #12]
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	f022 0201 	bic.w	r2, r2, #1
 810535a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 810535c:	e00f      	b.n	810537e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 810535e:	f7fd ffbd 	bl	81032dc <HAL_GetTick>
 8105362:	4602      	mov	r2, r0
 8105364:	68fb      	ldr	r3, [r7, #12]
 8105366:	1ad3      	subs	r3, r2, r3
 8105368:	2b05      	cmp	r3, #5
 810536a:	d908      	bls.n	810537e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	2240      	movs	r2, #64	; 0x40
 8105370:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	2203      	movs	r2, #3
 8105376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 810537a:	2301      	movs	r3, #1
 810537c:	e01a      	b.n	81053b4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	68db      	ldr	r3, [r3, #12]
 8105384:	f003 0301 	and.w	r3, r3, #1
 8105388:	2b00      	cmp	r3, #0
 810538a:	d1e8      	bne.n	810535e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 810538c:	6878      	ldr	r0, [r7, #4]
 810538e:	f000 f86d 	bl	810546c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	2200      	movs	r2, #0
 8105396:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	2200      	movs	r2, #0
 810539c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	2200      	movs	r2, #0
 81053a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	2200      	movs	r2, #0
 81053a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	2201      	movs	r2, #1
 81053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81053b2:	2300      	movs	r3, #0
}
 81053b4:	4618      	mov	r0, r3
 81053b6:	3710      	adds	r7, #16
 81053b8:	46bd      	mov	sp, r7
 81053ba:	bd80      	pop	{r7, pc}

081053bc <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 81053bc:	b480      	push	{r7}
 81053be:	b083      	sub	sp, #12
 81053c0:	af00      	add	r7, sp, #0
 81053c2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	2b00      	cmp	r3, #0
 81053c8:	d101      	bne.n	81053ce <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 81053ca:	2301      	movs	r3, #1
 81053cc:	e048      	b.n	8105460 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	68da      	ldr	r2, [r3, #12]
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	f022 0201 	bic.w	r2, r2, #1
 81053dc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	2200      	movs	r2, #0
 81053e4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	2200      	movs	r2, #0
 81053ec:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	2200      	movs	r2, #0
 81053f4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	2200      	movs	r2, #0
 81053fc:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	2200      	movs	r2, #0
 8105404:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	2200      	movs	r2, #0
 810540c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	681b      	ldr	r3, [r3, #0]
 8105412:	2200      	movs	r2, #0
 8105414:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	681b      	ldr	r3, [r3, #0]
 810541a:	2200      	movs	r2, #0
 810541c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	2200      	movs	r2, #0
 8105424:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	2200      	movs	r2, #0
 810542c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	221f      	movs	r2, #31
 8105434:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	2200      	movs	r2, #0
 810543a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	2200      	movs	r2, #0
 8105440:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	2200      	movs	r2, #0
 8105446:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	2200      	movs	r2, #0
 810544c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	2200      	movs	r2, #0
 8105452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	2200      	movs	r2, #0
 810545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810545e:	2300      	movs	r3, #0
}
 8105460:	4618      	mov	r0, r3
 8105462:	370c      	adds	r7, #12
 8105464:	46bd      	mov	sp, r7
 8105466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810546a:	4770      	bx	lr

0810546c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 810546c:	b480      	push	{r7}
 810546e:	b085      	sub	sp, #20
 8105470:	af00      	add	r7, sp, #0
 8105472:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8105474:	687b      	ldr	r3, [r7, #4]
 8105476:	68d9      	ldr	r1, [r3, #12]
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	691a      	ldr	r2, [r3, #16]
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	430a      	orrs	r2, r1
 8105482:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	695a      	ldr	r2, [r3, #20]
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	699b      	ldr	r3, [r3, #24]
 810548c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8105492:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	6a1b      	ldr	r3, [r3, #32]
 8105498:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 810549e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054a4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 81054aa:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054b0:	3b01      	subs	r3, #1
 81054b2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 81054b4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 81054c0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 81054c2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	685b      	ldr	r3, [r3, #4]
 81054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81054cc:	d107      	bne.n	81054de <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	691a      	ldr	r2, [r3, #16]
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 81054dc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	2200      	movs	r2, #0
 81054e4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81054ea:	2b00      	cmp	r3, #0
 81054ec:	da11      	bge.n	8105512 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	695a      	ldr	r2, [r3, #20]
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 81054fc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105502:	425b      	negs	r3, r3
 8105504:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	68fa      	ldr	r2, [r7, #12]
 810550c:	b292      	uxth	r2, r2
 810550e:	621a      	str	r2, [r3, #32]
 8105510:	e006      	b.n	8105520 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105516:	461a      	mov	r2, r3
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	b292      	uxth	r2, r2
 810551e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105524:	2b00      	cmp	r3, #0
 8105526:	da15      	bge.n	8105554 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	695a      	ldr	r2, [r3, #20]
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8105536:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810553c:	425b      	negs	r3, r3
 810553e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	6a19      	ldr	r1, [r3, #32]
 8105546:	68fb      	ldr	r3, [r7, #12]
 8105548:	041a      	lsls	r2, r3, #16
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	430a      	orrs	r2, r1
 8105550:	621a      	str	r2, [r3, #32]
 8105552:	e009      	b.n	8105568 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	6a19      	ldr	r1, [r3, #32]
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810555e:	041a      	lsls	r2, r3, #16
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	430a      	orrs	r2, r1
 8105566:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	685b      	ldr	r3, [r3, #4]
 810556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105570:	d006      	beq.n	8105580 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	685a      	ldr	r2, [r3, #4]
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	b2d2      	uxtb	r2, r2
 810557c:	629a      	str	r2, [r3, #40]	; 0x28
 810557e:	e003      	b.n	8105588 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	681b      	ldr	r3, [r3, #0]
 8105584:	2200      	movs	r2, #0
 8105586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	2200      	movs	r2, #0
 810558e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8105590:	bf00      	nop
 8105592:	3714      	adds	r7, #20
 8105594:	46bd      	mov	sp, r7
 8105596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810559a:	4770      	bx	lr

0810559c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 810559c:	b580      	push	{r7, lr}
 810559e:	b084      	sub	sp, #16
 81055a0:	af00      	add	r7, sp, #0
 81055a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 81055a4:	4b19      	ldr	r3, [pc, #100]	; (810560c <HAL_PWREx_ConfigSupply+0x70>)
 81055a6:	68db      	ldr	r3, [r3, #12]
 81055a8:	f003 0304 	and.w	r3, r3, #4
 81055ac:	2b04      	cmp	r3, #4
 81055ae:	d00a      	beq.n	81055c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 81055b0:	4b16      	ldr	r3, [pc, #88]	; (810560c <HAL_PWREx_ConfigSupply+0x70>)
 81055b2:	68db      	ldr	r3, [r3, #12]
 81055b4:	f003 0307 	and.w	r3, r3, #7
 81055b8:	687a      	ldr	r2, [r7, #4]
 81055ba:	429a      	cmp	r2, r3
 81055bc:	d001      	beq.n	81055c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 81055be:	2301      	movs	r3, #1
 81055c0:	e01f      	b.n	8105602 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 81055c2:	2300      	movs	r3, #0
 81055c4:	e01d      	b.n	8105602 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 81055c6:	4b11      	ldr	r3, [pc, #68]	; (810560c <HAL_PWREx_ConfigSupply+0x70>)
 81055c8:	68db      	ldr	r3, [r3, #12]
 81055ca:	f023 0207 	bic.w	r2, r3, #7
 81055ce:	490f      	ldr	r1, [pc, #60]	; (810560c <HAL_PWREx_ConfigSupply+0x70>)
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	4313      	orrs	r3, r2
 81055d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 81055d6:	f7fd fe81 	bl	81032dc <HAL_GetTick>
 81055da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 81055dc:	e009      	b.n	81055f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 81055de:	f7fd fe7d 	bl	81032dc <HAL_GetTick>
 81055e2:	4602      	mov	r2, r0
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	1ad3      	subs	r3, r2, r3
 81055e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81055ec:	d901      	bls.n	81055f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 81055ee:	2301      	movs	r3, #1
 81055f0:	e007      	b.n	8105602 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 81055f2:	4b06      	ldr	r3, [pc, #24]	; (810560c <HAL_PWREx_ConfigSupply+0x70>)
 81055f4:	685b      	ldr	r3, [r3, #4]
 81055f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81055fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81055fe:	d1ee      	bne.n	81055de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8105600:	2300      	movs	r3, #0
}
 8105602:	4618      	mov	r0, r3
 8105604:	3710      	adds	r7, #16
 8105606:	46bd      	mov	sp, r7
 8105608:	bd80      	pop	{r7, pc}
 810560a:	bf00      	nop
 810560c:	58024800 	.word	0x58024800

08105610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8105610:	b580      	push	{r7, lr}
 8105612:	b08c      	sub	sp, #48	; 0x30
 8105614:	af00      	add	r7, sp, #0
 8105616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	2b00      	cmp	r3, #0
 810561c:	d102      	bne.n	8105624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 810561e:	2301      	movs	r3, #1
 8105620:	f000 bc48 	b.w	8105eb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	681b      	ldr	r3, [r3, #0]
 8105628:	f003 0301 	and.w	r3, r3, #1
 810562c:	2b00      	cmp	r3, #0
 810562e:	f000 8088 	beq.w	8105742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8105632:	4b99      	ldr	r3, [pc, #612]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105634:	691b      	ldr	r3, [r3, #16]
 8105636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 810563c:	4b96      	ldr	r3, [pc, #600]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105640:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8105642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105644:	2b10      	cmp	r3, #16
 8105646:	d007      	beq.n	8105658 <HAL_RCC_OscConfig+0x48>
 8105648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810564a:	2b18      	cmp	r3, #24
 810564c:	d111      	bne.n	8105672 <HAL_RCC_OscConfig+0x62>
 810564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105650:	f003 0303 	and.w	r3, r3, #3
 8105654:	2b02      	cmp	r3, #2
 8105656:	d10c      	bne.n	8105672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8105658:	4b8f      	ldr	r3, [pc, #572]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105660:	2b00      	cmp	r3, #0
 8105662:	d06d      	beq.n	8105740 <HAL_RCC_OscConfig+0x130>
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	685b      	ldr	r3, [r3, #4]
 8105668:	2b00      	cmp	r3, #0
 810566a:	d169      	bne.n	8105740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 810566c:	2301      	movs	r3, #1
 810566e:	f000 bc21 	b.w	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	685b      	ldr	r3, [r3, #4]
 8105676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810567a:	d106      	bne.n	810568a <HAL_RCC_OscConfig+0x7a>
 810567c:	4b86      	ldr	r3, [pc, #536]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	4a85      	ldr	r2, [pc, #532]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105686:	6013      	str	r3, [r2, #0]
 8105688:	e02e      	b.n	81056e8 <HAL_RCC_OscConfig+0xd8>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	685b      	ldr	r3, [r3, #4]
 810568e:	2b00      	cmp	r3, #0
 8105690:	d10c      	bne.n	81056ac <HAL_RCC_OscConfig+0x9c>
 8105692:	4b81      	ldr	r3, [pc, #516]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	4a80      	ldr	r2, [pc, #512]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810569c:	6013      	str	r3, [r2, #0]
 810569e:	4b7e      	ldr	r3, [pc, #504]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a7d      	ldr	r2, [pc, #500]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81056a8:	6013      	str	r3, [r2, #0]
 81056aa:	e01d      	b.n	81056e8 <HAL_RCC_OscConfig+0xd8>
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	685b      	ldr	r3, [r3, #4]
 81056b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81056b4:	d10c      	bne.n	81056d0 <HAL_RCC_OscConfig+0xc0>
 81056b6:	4b78      	ldr	r3, [pc, #480]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	4a77      	ldr	r2, [pc, #476]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81056c0:	6013      	str	r3, [r2, #0]
 81056c2:	4b75      	ldr	r3, [pc, #468]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	4a74      	ldr	r2, [pc, #464]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81056cc:	6013      	str	r3, [r2, #0]
 81056ce:	e00b      	b.n	81056e8 <HAL_RCC_OscConfig+0xd8>
 81056d0:	4b71      	ldr	r3, [pc, #452]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	4a70      	ldr	r2, [pc, #448]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81056da:	6013      	str	r3, [r2, #0]
 81056dc:	4b6e      	ldr	r3, [pc, #440]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	4a6d      	ldr	r2, [pc, #436]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81056e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81056e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	685b      	ldr	r3, [r3, #4]
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d013      	beq.n	8105718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81056f0:	f7fd fdf4 	bl	81032dc <HAL_GetTick>
 81056f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 81056f6:	e008      	b.n	810570a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81056f8:	f7fd fdf0 	bl	81032dc <HAL_GetTick>
 81056fc:	4602      	mov	r2, r0
 81056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105700:	1ad3      	subs	r3, r2, r3
 8105702:	2b64      	cmp	r3, #100	; 0x64
 8105704:	d901      	bls.n	810570a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8105706:	2303      	movs	r3, #3
 8105708:	e3d4      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 810570a:	4b63      	ldr	r3, [pc, #396]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105712:	2b00      	cmp	r3, #0
 8105714:	d0f0      	beq.n	81056f8 <HAL_RCC_OscConfig+0xe8>
 8105716:	e014      	b.n	8105742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105718:	f7fd fde0 	bl	81032dc <HAL_GetTick>
 810571c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 810571e:	e008      	b.n	8105732 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8105720:	f7fd fddc 	bl	81032dc <HAL_GetTick>
 8105724:	4602      	mov	r2, r0
 8105726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105728:	1ad3      	subs	r3, r2, r3
 810572a:	2b64      	cmp	r3, #100	; 0x64
 810572c:	d901      	bls.n	8105732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 810572e:	2303      	movs	r3, #3
 8105730:	e3c0      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8105732:	4b59      	ldr	r3, [pc, #356]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810573a:	2b00      	cmp	r3, #0
 810573c:	d1f0      	bne.n	8105720 <HAL_RCC_OscConfig+0x110>
 810573e:	e000      	b.n	8105742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8105740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	f003 0302 	and.w	r3, r3, #2
 810574a:	2b00      	cmp	r3, #0
 810574c:	f000 80ca 	beq.w	81058e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8105750:	4b51      	ldr	r3, [pc, #324]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105752:	691b      	ldr	r3, [r3, #16]
 8105754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 810575a:	4b4f      	ldr	r3, [pc, #316]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810575e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8105760:	6a3b      	ldr	r3, [r7, #32]
 8105762:	2b00      	cmp	r3, #0
 8105764:	d007      	beq.n	8105776 <HAL_RCC_OscConfig+0x166>
 8105766:	6a3b      	ldr	r3, [r7, #32]
 8105768:	2b18      	cmp	r3, #24
 810576a:	d156      	bne.n	810581a <HAL_RCC_OscConfig+0x20a>
 810576c:	69fb      	ldr	r3, [r7, #28]
 810576e:	f003 0303 	and.w	r3, r3, #3
 8105772:	2b00      	cmp	r3, #0
 8105774:	d151      	bne.n	810581a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8105776:	4b48      	ldr	r3, [pc, #288]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	f003 0304 	and.w	r3, r3, #4
 810577e:	2b00      	cmp	r3, #0
 8105780:	d005      	beq.n	810578e <HAL_RCC_OscConfig+0x17e>
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	68db      	ldr	r3, [r3, #12]
 8105786:	2b00      	cmp	r3, #0
 8105788:	d101      	bne.n	810578e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 810578a:	2301      	movs	r3, #1
 810578c:	e392      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 810578e:	4b42      	ldr	r3, [pc, #264]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	f023 0219 	bic.w	r2, r3, #25
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	68db      	ldr	r3, [r3, #12]
 810579a:	493f      	ldr	r1, [pc, #252]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810579c:	4313      	orrs	r3, r2
 810579e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81057a0:	f7fd fd9c 	bl	81032dc <HAL_GetTick>
 81057a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 81057a6:	e008      	b.n	81057ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81057a8:	f7fd fd98 	bl	81032dc <HAL_GetTick>
 81057ac:	4602      	mov	r2, r0
 81057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057b0:	1ad3      	subs	r3, r2, r3
 81057b2:	2b02      	cmp	r3, #2
 81057b4:	d901      	bls.n	81057ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 81057b6:	2303      	movs	r3, #3
 81057b8:	e37c      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 81057ba:	4b37      	ldr	r3, [pc, #220]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	f003 0304 	and.w	r3, r3, #4
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d0f0      	beq.n	81057a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81057c6:	f7fd fdb9 	bl	810333c <HAL_GetREVID>
 81057ca:	4603      	mov	r3, r0
 81057cc:	f241 0203 	movw	r2, #4099	; 0x1003
 81057d0:	4293      	cmp	r3, r2
 81057d2:	d817      	bhi.n	8105804 <HAL_RCC_OscConfig+0x1f4>
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	691b      	ldr	r3, [r3, #16]
 81057d8:	2b40      	cmp	r3, #64	; 0x40
 81057da:	d108      	bne.n	81057ee <HAL_RCC_OscConfig+0x1de>
 81057dc:	4b2e      	ldr	r3, [pc, #184]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81057de:	685b      	ldr	r3, [r3, #4]
 81057e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 81057e4:	4a2c      	ldr	r2, [pc, #176]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81057e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81057ec:	e07a      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81057ee:	4b2a      	ldr	r3, [pc, #168]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81057f0:	685b      	ldr	r3, [r3, #4]
 81057f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	691b      	ldr	r3, [r3, #16]
 81057fa:	031b      	lsls	r3, r3, #12
 81057fc:	4926      	ldr	r1, [pc, #152]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 81057fe:	4313      	orrs	r3, r2
 8105800:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8105802:	e06f      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8105804:	4b24      	ldr	r3, [pc, #144]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105806:	685b      	ldr	r3, [r3, #4]
 8105808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 810580c:	687b      	ldr	r3, [r7, #4]
 810580e:	691b      	ldr	r3, [r3, #16]
 8105810:	061b      	lsls	r3, r3, #24
 8105812:	4921      	ldr	r1, [pc, #132]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105814:	4313      	orrs	r3, r2
 8105816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8105818:	e064      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	68db      	ldr	r3, [r3, #12]
 810581e:	2b00      	cmp	r3, #0
 8105820:	d047      	beq.n	81058b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8105822:	4b1d      	ldr	r3, [pc, #116]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	f023 0219 	bic.w	r2, r3, #25
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	68db      	ldr	r3, [r3, #12]
 810582e:	491a      	ldr	r1, [pc, #104]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105830:	4313      	orrs	r3, r2
 8105832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105834:	f7fd fd52 	bl	81032dc <HAL_GetTick>
 8105838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810583a:	e008      	b.n	810584e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 810583c:	f7fd fd4e 	bl	81032dc <HAL_GetTick>
 8105840:	4602      	mov	r2, r0
 8105842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105844:	1ad3      	subs	r3, r2, r3
 8105846:	2b02      	cmp	r3, #2
 8105848:	d901      	bls.n	810584e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 810584a:	2303      	movs	r3, #3
 810584c:	e332      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810584e:	4b12      	ldr	r3, [pc, #72]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	f003 0304 	and.w	r3, r3, #4
 8105856:	2b00      	cmp	r3, #0
 8105858:	d0f0      	beq.n	810583c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 810585a:	f7fd fd6f 	bl	810333c <HAL_GetREVID>
 810585e:	4603      	mov	r3, r0
 8105860:	f241 0203 	movw	r2, #4099	; 0x1003
 8105864:	4293      	cmp	r3, r2
 8105866:	d819      	bhi.n	810589c <HAL_RCC_OscConfig+0x28c>
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	691b      	ldr	r3, [r3, #16]
 810586c:	2b40      	cmp	r3, #64	; 0x40
 810586e:	d108      	bne.n	8105882 <HAL_RCC_OscConfig+0x272>
 8105870:	4b09      	ldr	r3, [pc, #36]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105872:	685b      	ldr	r3, [r3, #4]
 8105874:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8105878:	4a07      	ldr	r2, [pc, #28]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 810587a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810587e:	6053      	str	r3, [r2, #4]
 8105880:	e030      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
 8105882:	4b05      	ldr	r3, [pc, #20]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105884:	685b      	ldr	r3, [r3, #4]
 8105886:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	691b      	ldr	r3, [r3, #16]
 810588e:	031b      	lsls	r3, r3, #12
 8105890:	4901      	ldr	r1, [pc, #4]	; (8105898 <HAL_RCC_OscConfig+0x288>)
 8105892:	4313      	orrs	r3, r2
 8105894:	604b      	str	r3, [r1, #4]
 8105896:	e025      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
 8105898:	58024400 	.word	0x58024400
 810589c:	4b9a      	ldr	r3, [pc, #616]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 810589e:	685b      	ldr	r3, [r3, #4]
 81058a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	691b      	ldr	r3, [r3, #16]
 81058a8:	061b      	lsls	r3, r3, #24
 81058aa:	4997      	ldr	r1, [pc, #604]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058ac:	4313      	orrs	r3, r2
 81058ae:	604b      	str	r3, [r1, #4]
 81058b0:	e018      	b.n	81058e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 81058b2:	4b95      	ldr	r3, [pc, #596]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	4a94      	ldr	r2, [pc, #592]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058b8:	f023 0301 	bic.w	r3, r3, #1
 81058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81058be:	f7fd fd0d 	bl	81032dc <HAL_GetTick>
 81058c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 81058c4:	e008      	b.n	81058d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81058c6:	f7fd fd09 	bl	81032dc <HAL_GetTick>
 81058ca:	4602      	mov	r2, r0
 81058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058ce:	1ad3      	subs	r3, r2, r3
 81058d0:	2b02      	cmp	r3, #2
 81058d2:	d901      	bls.n	81058d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 81058d4:	2303      	movs	r3, #3
 81058d6:	e2ed      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 81058d8:	4b8b      	ldr	r3, [pc, #556]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	f003 0304 	and.w	r3, r3, #4
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d1f0      	bne.n	81058c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	f003 0310 	and.w	r3, r3, #16
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	f000 80a9 	beq.w	8105a44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 81058f2:	4b85      	ldr	r3, [pc, #532]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058f4:	691b      	ldr	r3, [r3, #16]
 81058f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81058fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 81058fc:	4b82      	ldr	r3, [pc, #520]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105900:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8105902:	69bb      	ldr	r3, [r7, #24]
 8105904:	2b08      	cmp	r3, #8
 8105906:	d007      	beq.n	8105918 <HAL_RCC_OscConfig+0x308>
 8105908:	69bb      	ldr	r3, [r7, #24]
 810590a:	2b18      	cmp	r3, #24
 810590c:	d13a      	bne.n	8105984 <HAL_RCC_OscConfig+0x374>
 810590e:	697b      	ldr	r3, [r7, #20]
 8105910:	f003 0303 	and.w	r3, r3, #3
 8105914:	2b01      	cmp	r3, #1
 8105916:	d135      	bne.n	8105984 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8105918:	4b7b      	ldr	r3, [pc, #492]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105920:	2b00      	cmp	r3, #0
 8105922:	d005      	beq.n	8105930 <HAL_RCC_OscConfig+0x320>
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	69db      	ldr	r3, [r3, #28]
 8105928:	2b80      	cmp	r3, #128	; 0x80
 810592a:	d001      	beq.n	8105930 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 810592c:	2301      	movs	r3, #1
 810592e:	e2c1      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8105930:	f7fd fd04 	bl	810333c <HAL_GetREVID>
 8105934:	4603      	mov	r3, r0
 8105936:	f241 0203 	movw	r2, #4099	; 0x1003
 810593a:	4293      	cmp	r3, r2
 810593c:	d817      	bhi.n	810596e <HAL_RCC_OscConfig+0x35e>
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	6a1b      	ldr	r3, [r3, #32]
 8105942:	2b20      	cmp	r3, #32
 8105944:	d108      	bne.n	8105958 <HAL_RCC_OscConfig+0x348>
 8105946:	4b70      	ldr	r3, [pc, #448]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105948:	685b      	ldr	r3, [r3, #4]
 810594a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 810594e:	4a6e      	ldr	r2, [pc, #440]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8105954:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8105956:	e075      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8105958:	4b6b      	ldr	r3, [pc, #428]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 810595a:	685b      	ldr	r3, [r3, #4]
 810595c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	6a1b      	ldr	r3, [r3, #32]
 8105964:	069b      	lsls	r3, r3, #26
 8105966:	4968      	ldr	r1, [pc, #416]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105968:	4313      	orrs	r3, r2
 810596a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 810596c:	e06a      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 810596e:	4b66      	ldr	r3, [pc, #408]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105970:	68db      	ldr	r3, [r3, #12]
 8105972:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	6a1b      	ldr	r3, [r3, #32]
 810597a:	061b      	lsls	r3, r3, #24
 810597c:	4962      	ldr	r1, [pc, #392]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 810597e:	4313      	orrs	r3, r2
 8105980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8105982:	e05f      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	69db      	ldr	r3, [r3, #28]
 8105988:	2b00      	cmp	r3, #0
 810598a:	d042      	beq.n	8105a12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 810598c:	4b5e      	ldr	r3, [pc, #376]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a5d      	ldr	r2, [pc, #372]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8105996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105998:	f7fd fca0 	bl	81032dc <HAL_GetTick>
 810599c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 810599e:	e008      	b.n	81059b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 81059a0:	f7fd fc9c 	bl	81032dc <HAL_GetTick>
 81059a4:	4602      	mov	r2, r0
 81059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81059a8:	1ad3      	subs	r3, r2, r3
 81059aa:	2b02      	cmp	r3, #2
 81059ac:	d901      	bls.n	81059b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 81059ae:	2303      	movs	r3, #3
 81059b0:	e280      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 81059b2:	4b55      	ldr	r3, [pc, #340]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059b4:	681b      	ldr	r3, [r3, #0]
 81059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d0f0      	beq.n	81059a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81059be:	f7fd fcbd 	bl	810333c <HAL_GetREVID>
 81059c2:	4603      	mov	r3, r0
 81059c4:	f241 0203 	movw	r2, #4099	; 0x1003
 81059c8:	4293      	cmp	r3, r2
 81059ca:	d817      	bhi.n	81059fc <HAL_RCC_OscConfig+0x3ec>
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	6a1b      	ldr	r3, [r3, #32]
 81059d0:	2b20      	cmp	r3, #32
 81059d2:	d108      	bne.n	81059e6 <HAL_RCC_OscConfig+0x3d6>
 81059d4:	4b4c      	ldr	r3, [pc, #304]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059d6:	685b      	ldr	r3, [r3, #4]
 81059d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 81059dc:	4a4a      	ldr	r2, [pc, #296]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81059e2:	6053      	str	r3, [r2, #4]
 81059e4:	e02e      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
 81059e6:	4b48      	ldr	r3, [pc, #288]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059e8:	685b      	ldr	r3, [r3, #4]
 81059ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	6a1b      	ldr	r3, [r3, #32]
 81059f2:	069b      	lsls	r3, r3, #26
 81059f4:	4944      	ldr	r1, [pc, #272]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059f6:	4313      	orrs	r3, r2
 81059f8:	604b      	str	r3, [r1, #4]
 81059fa:	e023      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
 81059fc:	4b42      	ldr	r3, [pc, #264]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 81059fe:	68db      	ldr	r3, [r3, #12]
 8105a00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	6a1b      	ldr	r3, [r3, #32]
 8105a08:	061b      	lsls	r3, r3, #24
 8105a0a:	493f      	ldr	r1, [pc, #252]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a0c:	4313      	orrs	r3, r2
 8105a0e:	60cb      	str	r3, [r1, #12]
 8105a10:	e018      	b.n	8105a44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8105a12:	4b3d      	ldr	r3, [pc, #244]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	4a3c      	ldr	r2, [pc, #240]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105a1e:	f7fd fc5d 	bl	81032dc <HAL_GetTick>
 8105a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8105a24:	e008      	b.n	8105a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8105a26:	f7fd fc59 	bl	81032dc <HAL_GetTick>
 8105a2a:	4602      	mov	r2, r0
 8105a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105a2e:	1ad3      	subs	r3, r2, r3
 8105a30:	2b02      	cmp	r3, #2
 8105a32:	d901      	bls.n	8105a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8105a34:	2303      	movs	r3, #3
 8105a36:	e23d      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8105a38:	4b33      	ldr	r3, [pc, #204]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105a40:	2b00      	cmp	r3, #0
 8105a42:	d1f0      	bne.n	8105a26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	f003 0308 	and.w	r3, r3, #8
 8105a4c:	2b00      	cmp	r3, #0
 8105a4e:	d036      	beq.n	8105abe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	695b      	ldr	r3, [r3, #20]
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d019      	beq.n	8105a8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8105a58:	4b2b      	ldr	r3, [pc, #172]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105a5c:	4a2a      	ldr	r2, [pc, #168]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a5e:	f043 0301 	orr.w	r3, r3, #1
 8105a62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8105a64:	f7fd fc3a 	bl	81032dc <HAL_GetTick>
 8105a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8105a6a:	e008      	b.n	8105a7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8105a6c:	f7fd fc36 	bl	81032dc <HAL_GetTick>
 8105a70:	4602      	mov	r2, r0
 8105a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105a74:	1ad3      	subs	r3, r2, r3
 8105a76:	2b02      	cmp	r3, #2
 8105a78:	d901      	bls.n	8105a7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8105a7a:	2303      	movs	r3, #3
 8105a7c:	e21a      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8105a7e:	4b22      	ldr	r3, [pc, #136]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105a82:	f003 0302 	and.w	r3, r3, #2
 8105a86:	2b00      	cmp	r3, #0
 8105a88:	d0f0      	beq.n	8105a6c <HAL_RCC_OscConfig+0x45c>
 8105a8a:	e018      	b.n	8105abe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8105a8c:	4b1e      	ldr	r3, [pc, #120]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105a90:	4a1d      	ldr	r2, [pc, #116]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105a92:	f023 0301 	bic.w	r3, r3, #1
 8105a96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8105a98:	f7fd fc20 	bl	81032dc <HAL_GetTick>
 8105a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8105a9e:	e008      	b.n	8105ab2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8105aa0:	f7fd fc1c 	bl	81032dc <HAL_GetTick>
 8105aa4:	4602      	mov	r2, r0
 8105aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105aa8:	1ad3      	subs	r3, r2, r3
 8105aaa:	2b02      	cmp	r3, #2
 8105aac:	d901      	bls.n	8105ab2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8105aae:	2303      	movs	r3, #3
 8105ab0:	e200      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8105ab2:	4b15      	ldr	r3, [pc, #84]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105ab6:	f003 0302 	and.w	r3, r3, #2
 8105aba:	2b00      	cmp	r3, #0
 8105abc:	d1f0      	bne.n	8105aa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	f003 0320 	and.w	r3, r3, #32
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	d039      	beq.n	8105b3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	699b      	ldr	r3, [r3, #24]
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d01c      	beq.n	8105b0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8105ad2:	4b0d      	ldr	r3, [pc, #52]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	4a0c      	ldr	r2, [pc, #48]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8105adc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8105ade:	f7fd fbfd 	bl	81032dc <HAL_GetTick>
 8105ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8105ae4:	e008      	b.n	8105af8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8105ae6:	f7fd fbf9 	bl	81032dc <HAL_GetTick>
 8105aea:	4602      	mov	r2, r0
 8105aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105aee:	1ad3      	subs	r3, r2, r3
 8105af0:	2b02      	cmp	r3, #2
 8105af2:	d901      	bls.n	8105af8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8105af4:	2303      	movs	r3, #3
 8105af6:	e1dd      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8105af8:	4b03      	ldr	r3, [pc, #12]	; (8105b08 <HAL_RCC_OscConfig+0x4f8>)
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d0f0      	beq.n	8105ae6 <HAL_RCC_OscConfig+0x4d6>
 8105b04:	e01b      	b.n	8105b3e <HAL_RCC_OscConfig+0x52e>
 8105b06:	bf00      	nop
 8105b08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8105b0c:	4b9b      	ldr	r3, [pc, #620]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	4a9a      	ldr	r2, [pc, #616]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105b16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8105b18:	f7fd fbe0 	bl	81032dc <HAL_GetTick>
 8105b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8105b1e:	e008      	b.n	8105b32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8105b20:	f7fd fbdc 	bl	81032dc <HAL_GetTick>
 8105b24:	4602      	mov	r2, r0
 8105b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b28:	1ad3      	subs	r3, r2, r3
 8105b2a:	2b02      	cmp	r3, #2
 8105b2c:	d901      	bls.n	8105b32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8105b2e:	2303      	movs	r3, #3
 8105b30:	e1c0      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8105b32:	4b92      	ldr	r3, [pc, #584]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b34:	681b      	ldr	r3, [r3, #0]
 8105b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d1f0      	bne.n	8105b20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	681b      	ldr	r3, [r3, #0]
 8105b42:	f003 0304 	and.w	r3, r3, #4
 8105b46:	2b00      	cmp	r3, #0
 8105b48:	f000 8081 	beq.w	8105c4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8105b4c:	4b8c      	ldr	r3, [pc, #560]	; (8105d80 <HAL_RCC_OscConfig+0x770>)
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	4a8b      	ldr	r2, [pc, #556]	; (8105d80 <HAL_RCC_OscConfig+0x770>)
 8105b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105b58:	f7fd fbc0 	bl	81032dc <HAL_GetTick>
 8105b5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105b5e:	e008      	b.n	8105b72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105b60:	f7fd fbbc 	bl	81032dc <HAL_GetTick>
 8105b64:	4602      	mov	r2, r0
 8105b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b68:	1ad3      	subs	r3, r2, r3
 8105b6a:	2b64      	cmp	r3, #100	; 0x64
 8105b6c:	d901      	bls.n	8105b72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8105b6e:	2303      	movs	r3, #3
 8105b70:	e1a0      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105b72:	4b83      	ldr	r3, [pc, #524]	; (8105d80 <HAL_RCC_OscConfig+0x770>)
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d0f0      	beq.n	8105b60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	689b      	ldr	r3, [r3, #8]
 8105b82:	2b01      	cmp	r3, #1
 8105b84:	d106      	bne.n	8105b94 <HAL_RCC_OscConfig+0x584>
 8105b86:	4b7d      	ldr	r3, [pc, #500]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105b8a:	4a7c      	ldr	r2, [pc, #496]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b8c:	f043 0301 	orr.w	r3, r3, #1
 8105b90:	6713      	str	r3, [r2, #112]	; 0x70
 8105b92:	e02d      	b.n	8105bf0 <HAL_RCC_OscConfig+0x5e0>
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	689b      	ldr	r3, [r3, #8]
 8105b98:	2b00      	cmp	r3, #0
 8105b9a:	d10c      	bne.n	8105bb6 <HAL_RCC_OscConfig+0x5a6>
 8105b9c:	4b77      	ldr	r3, [pc, #476]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ba0:	4a76      	ldr	r2, [pc, #472]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105ba2:	f023 0301 	bic.w	r3, r3, #1
 8105ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8105ba8:	4b74      	ldr	r3, [pc, #464]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105bac:	4a73      	ldr	r2, [pc, #460]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bae:	f023 0304 	bic.w	r3, r3, #4
 8105bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8105bb4:	e01c      	b.n	8105bf0 <HAL_RCC_OscConfig+0x5e0>
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	689b      	ldr	r3, [r3, #8]
 8105bba:	2b05      	cmp	r3, #5
 8105bbc:	d10c      	bne.n	8105bd8 <HAL_RCC_OscConfig+0x5c8>
 8105bbe:	4b6f      	ldr	r3, [pc, #444]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105bc2:	4a6e      	ldr	r2, [pc, #440]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bc4:	f043 0304 	orr.w	r3, r3, #4
 8105bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8105bca:	4b6c      	ldr	r3, [pc, #432]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105bce:	4a6b      	ldr	r2, [pc, #428]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bd0:	f043 0301 	orr.w	r3, r3, #1
 8105bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8105bd6:	e00b      	b.n	8105bf0 <HAL_RCC_OscConfig+0x5e0>
 8105bd8:	4b68      	ldr	r3, [pc, #416]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105bdc:	4a67      	ldr	r2, [pc, #412]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bde:	f023 0301 	bic.w	r3, r3, #1
 8105be2:	6713      	str	r3, [r2, #112]	; 0x70
 8105be4:	4b65      	ldr	r3, [pc, #404]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105be8:	4a64      	ldr	r2, [pc, #400]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105bea:	f023 0304 	bic.w	r3, r3, #4
 8105bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	689b      	ldr	r3, [r3, #8]
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d015      	beq.n	8105c24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8105bf8:	f7fd fb70 	bl	81032dc <HAL_GetTick>
 8105bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105bfe:	e00a      	b.n	8105c16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105c00:	f7fd fb6c 	bl	81032dc <HAL_GetTick>
 8105c04:	4602      	mov	r2, r0
 8105c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c08:	1ad3      	subs	r3, r2, r3
 8105c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d901      	bls.n	8105c16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8105c12:	2303      	movs	r3, #3
 8105c14:	e14e      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c16:	4b59      	ldr	r3, [pc, #356]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c1a:	f003 0302 	and.w	r3, r3, #2
 8105c1e:	2b00      	cmp	r3, #0
 8105c20:	d0ee      	beq.n	8105c00 <HAL_RCC_OscConfig+0x5f0>
 8105c22:	e014      	b.n	8105c4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8105c24:	f7fd fb5a 	bl	81032dc <HAL_GetTick>
 8105c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8105c2a:	e00a      	b.n	8105c42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105c2c:	f7fd fb56 	bl	81032dc <HAL_GetTick>
 8105c30:	4602      	mov	r2, r0
 8105c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c34:	1ad3      	subs	r3, r2, r3
 8105c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8105c3a:	4293      	cmp	r3, r2
 8105c3c:	d901      	bls.n	8105c42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8105c3e:	2303      	movs	r3, #3
 8105c40:	e138      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8105c42:	4b4e      	ldr	r3, [pc, #312]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c46:	f003 0302 	and.w	r3, r3, #2
 8105c4a:	2b00      	cmp	r3, #0
 8105c4c:	d1ee      	bne.n	8105c2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c52:	2b00      	cmp	r3, #0
 8105c54:	f000 812d 	beq.w	8105eb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8105c58:	4b48      	ldr	r3, [pc, #288]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c5a:	691b      	ldr	r3, [r3, #16]
 8105c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105c60:	2b18      	cmp	r3, #24
 8105c62:	f000 80bd 	beq.w	8105de0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c6a:	2b02      	cmp	r3, #2
 8105c6c:	f040 809e 	bne.w	8105dac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8105c70:	4b42      	ldr	r3, [pc, #264]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	4a41      	ldr	r2, [pc, #260]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105c7c:	f7fd fb2e 	bl	81032dc <HAL_GetTick>
 8105c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8105c82:	e008      	b.n	8105c96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8105c84:	f7fd fb2a 	bl	81032dc <HAL_GetTick>
 8105c88:	4602      	mov	r2, r0
 8105c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c8c:	1ad3      	subs	r3, r2, r3
 8105c8e:	2b02      	cmp	r3, #2
 8105c90:	d901      	bls.n	8105c96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8105c92:	2303      	movs	r3, #3
 8105c94:	e10e      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8105c96:	4b39      	ldr	r3, [pc, #228]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105c98:	681b      	ldr	r3, [r3, #0]
 8105c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	d1f0      	bne.n	8105c84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8105ca2:	4b36      	ldr	r3, [pc, #216]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8105ca6:	4b37      	ldr	r3, [pc, #220]	; (8105d84 <HAL_RCC_OscConfig+0x774>)
 8105ca8:	4013      	ands	r3, r2
 8105caa:	687a      	ldr	r2, [r7, #4]
 8105cac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8105cae:	687a      	ldr	r2, [r7, #4]
 8105cb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8105cb2:	0112      	lsls	r2, r2, #4
 8105cb4:	430a      	orrs	r2, r1
 8105cb6:	4931      	ldr	r1, [pc, #196]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105cb8:	4313      	orrs	r3, r2
 8105cba:	628b      	str	r3, [r1, #40]	; 0x28
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105cc0:	3b01      	subs	r3, #1
 8105cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105cca:	3b01      	subs	r3, #1
 8105ccc:	025b      	lsls	r3, r3, #9
 8105cce:	b29b      	uxth	r3, r3
 8105cd0:	431a      	orrs	r2, r3
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105cd6:	3b01      	subs	r3, #1
 8105cd8:	041b      	lsls	r3, r3, #16
 8105cda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105cde:	431a      	orrs	r2, r3
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ce4:	3b01      	subs	r3, #1
 8105ce6:	061b      	lsls	r3, r3, #24
 8105ce8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105cec:	4923      	ldr	r1, [pc, #140]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105cee:	4313      	orrs	r3, r2
 8105cf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8105cf2:	4b22      	ldr	r3, [pc, #136]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cf6:	4a21      	ldr	r2, [pc, #132]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105cf8:	f023 0301 	bic.w	r3, r3, #1
 8105cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8105cfe:	4b1f      	ldr	r3, [pc, #124]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105d02:	4b21      	ldr	r3, [pc, #132]	; (8105d88 <HAL_RCC_OscConfig+0x778>)
 8105d04:	4013      	ands	r3, r2
 8105d06:	687a      	ldr	r2, [r7, #4]
 8105d08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8105d0a:	00d2      	lsls	r2, r2, #3
 8105d0c:	491b      	ldr	r1, [pc, #108]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d0e:	4313      	orrs	r3, r2
 8105d10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8105d12:	4b1a      	ldr	r3, [pc, #104]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d16:	f023 020c 	bic.w	r2, r3, #12
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d1e:	4917      	ldr	r1, [pc, #92]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d20:	4313      	orrs	r3, r2
 8105d22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8105d24:	4b15      	ldr	r3, [pc, #84]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d28:	f023 0202 	bic.w	r2, r3, #2
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d30:	4912      	ldr	r1, [pc, #72]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d32:	4313      	orrs	r3, r2
 8105d34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8105d36:	4b11      	ldr	r3, [pc, #68]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d3a:	4a10      	ldr	r2, [pc, #64]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d42:	4b0e      	ldr	r3, [pc, #56]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d46:	4a0d      	ldr	r2, [pc, #52]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8105d4e:	4b0b      	ldr	r3, [pc, #44]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d52:	4a0a      	ldr	r2, [pc, #40]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8105d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8105d5a:	4b08      	ldr	r3, [pc, #32]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d5e:	4a07      	ldr	r2, [pc, #28]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d60:	f043 0301 	orr.w	r3, r3, #1
 8105d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8105d66:	4b05      	ldr	r3, [pc, #20]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	4a04      	ldr	r2, [pc, #16]	; (8105d7c <HAL_RCC_OscConfig+0x76c>)
 8105d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105d72:	f7fd fab3 	bl	81032dc <HAL_GetTick>
 8105d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8105d78:	e011      	b.n	8105d9e <HAL_RCC_OscConfig+0x78e>
 8105d7a:	bf00      	nop
 8105d7c:	58024400 	.word	0x58024400
 8105d80:	58024800 	.word	0x58024800
 8105d84:	fffffc0c 	.word	0xfffffc0c
 8105d88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8105d8c:	f7fd faa6 	bl	81032dc <HAL_GetTick>
 8105d90:	4602      	mov	r2, r0
 8105d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d94:	1ad3      	subs	r3, r2, r3
 8105d96:	2b02      	cmp	r3, #2
 8105d98:	d901      	bls.n	8105d9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8105d9a:	2303      	movs	r3, #3
 8105d9c:	e08a      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8105d9e:	4b47      	ldr	r3, [pc, #284]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105da6:	2b00      	cmp	r3, #0
 8105da8:	d0f0      	beq.n	8105d8c <HAL_RCC_OscConfig+0x77c>
 8105daa:	e082      	b.n	8105eb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8105dac:	4b43      	ldr	r3, [pc, #268]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105dae:	681b      	ldr	r3, [r3, #0]
 8105db0:	4a42      	ldr	r2, [pc, #264]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105db8:	f7fd fa90 	bl	81032dc <HAL_GetTick>
 8105dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8105dbe:	e008      	b.n	8105dd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8105dc0:	f7fd fa8c 	bl	81032dc <HAL_GetTick>
 8105dc4:	4602      	mov	r2, r0
 8105dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105dc8:	1ad3      	subs	r3, r2, r3
 8105dca:	2b02      	cmp	r3, #2
 8105dcc:	d901      	bls.n	8105dd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8105dce:	2303      	movs	r3, #3
 8105dd0:	e070      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8105dd2:	4b3a      	ldr	r3, [pc, #232]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105dd4:	681b      	ldr	r3, [r3, #0]
 8105dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	d1f0      	bne.n	8105dc0 <HAL_RCC_OscConfig+0x7b0>
 8105dde:	e068      	b.n	8105eb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8105de0:	4b36      	ldr	r3, [pc, #216]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8105de6:	4b35      	ldr	r3, [pc, #212]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105dea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105df0:	2b01      	cmp	r3, #1
 8105df2:	d031      	beq.n	8105e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8105df4:	693b      	ldr	r3, [r7, #16]
 8105df6:	f003 0203 	and.w	r2, r3, #3
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8105dfe:	429a      	cmp	r2, r3
 8105e00:	d12a      	bne.n	8105e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8105e02:	693b      	ldr	r3, [r7, #16]
 8105e04:	091b      	lsrs	r3, r3, #4
 8105e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8105e0e:	429a      	cmp	r2, r3
 8105e10:	d122      	bne.n	8105e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8105e12:	68fb      	ldr	r3, [r7, #12]
 8105e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8105e1e:	429a      	cmp	r2, r3
 8105e20:	d11a      	bne.n	8105e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8105e22:	68fb      	ldr	r3, [r7, #12]
 8105e24:	0a5b      	lsrs	r3, r3, #9
 8105e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105e2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8105e30:	429a      	cmp	r2, r3
 8105e32:	d111      	bne.n	8105e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	0c1b      	lsrs	r3, r3, #16
 8105e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8105e42:	429a      	cmp	r2, r3
 8105e44:	d108      	bne.n	8105e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	0e1b      	lsrs	r3, r3, #24
 8105e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8105e54:	429a      	cmp	r2, r3
 8105e56:	d001      	beq.n	8105e5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8105e58:	2301      	movs	r3, #1
 8105e5a:	e02b      	b.n	8105eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8105e5c:	4b17      	ldr	r3, [pc, #92]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105e60:	08db      	lsrs	r3, r3, #3
 8105e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105e66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e6c:	693a      	ldr	r2, [r7, #16]
 8105e6e:	429a      	cmp	r2, r3
 8105e70:	d01f      	beq.n	8105eb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8105e72:	4b12      	ldr	r3, [pc, #72]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e76:	4a11      	ldr	r2, [pc, #68]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105e78:	f023 0301 	bic.w	r3, r3, #1
 8105e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8105e7e:	f7fd fa2d 	bl	81032dc <HAL_GetTick>
 8105e82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8105e84:	bf00      	nop
 8105e86:	f7fd fa29 	bl	81032dc <HAL_GetTick>
 8105e8a:	4602      	mov	r2, r0
 8105e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105e8e:	4293      	cmp	r3, r2
 8105e90:	d0f9      	beq.n	8105e86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8105e92:	4b0a      	ldr	r3, [pc, #40]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105e96:	4b0a      	ldr	r3, [pc, #40]	; (8105ec0 <HAL_RCC_OscConfig+0x8b0>)
 8105e98:	4013      	ands	r3, r2
 8105e9a:	687a      	ldr	r2, [r7, #4]
 8105e9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8105e9e:	00d2      	lsls	r2, r2, #3
 8105ea0:	4906      	ldr	r1, [pc, #24]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105ea2:	4313      	orrs	r3, r2
 8105ea4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8105ea6:	4b05      	ldr	r3, [pc, #20]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105eaa:	4a04      	ldr	r2, [pc, #16]	; (8105ebc <HAL_RCC_OscConfig+0x8ac>)
 8105eac:	f043 0301 	orr.w	r3, r3, #1
 8105eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8105eb2:	2300      	movs	r3, #0
}
 8105eb4:	4618      	mov	r0, r3
 8105eb6:	3730      	adds	r7, #48	; 0x30
 8105eb8:	46bd      	mov	sp, r7
 8105eba:	bd80      	pop	{r7, pc}
 8105ebc:	58024400 	.word	0x58024400
 8105ec0:	ffff0007 	.word	0xffff0007

08105ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8105ec4:	b580      	push	{r7, lr}
 8105ec6:	b086      	sub	sp, #24
 8105ec8:	af00      	add	r7, sp, #0
 8105eca:	6078      	str	r0, [r7, #4]
 8105ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	2b00      	cmp	r3, #0
 8105ed2:	d101      	bne.n	8105ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8105ed4:	2301      	movs	r3, #1
 8105ed6:	e19c      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8105ed8:	4b8a      	ldr	r3, [pc, #552]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	f003 030f 	and.w	r3, r3, #15
 8105ee0:	683a      	ldr	r2, [r7, #0]
 8105ee2:	429a      	cmp	r2, r3
 8105ee4:	d910      	bls.n	8105f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8105ee6:	4b87      	ldr	r3, [pc, #540]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 8105ee8:	681b      	ldr	r3, [r3, #0]
 8105eea:	f023 020f 	bic.w	r2, r3, #15
 8105eee:	4985      	ldr	r1, [pc, #532]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 8105ef0:	683b      	ldr	r3, [r7, #0]
 8105ef2:	4313      	orrs	r3, r2
 8105ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8105ef6:	4b83      	ldr	r3, [pc, #524]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	f003 030f 	and.w	r3, r3, #15
 8105efe:	683a      	ldr	r2, [r7, #0]
 8105f00:	429a      	cmp	r2, r3
 8105f02:	d001      	beq.n	8105f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8105f04:	2301      	movs	r3, #1
 8105f06:	e184      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	f003 0304 	and.w	r3, r3, #4
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d010      	beq.n	8105f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	691a      	ldr	r2, [r3, #16]
 8105f18:	4b7b      	ldr	r3, [pc, #492]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f1a:	699b      	ldr	r3, [r3, #24]
 8105f1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8105f20:	429a      	cmp	r2, r3
 8105f22:	d908      	bls.n	8105f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8105f24:	4b78      	ldr	r3, [pc, #480]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f26:	699b      	ldr	r3, [r3, #24]
 8105f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	691b      	ldr	r3, [r3, #16]
 8105f30:	4975      	ldr	r1, [pc, #468]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f32:	4313      	orrs	r3, r2
 8105f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	681b      	ldr	r3, [r3, #0]
 8105f3a:	f003 0308 	and.w	r3, r3, #8
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d010      	beq.n	8105f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	695a      	ldr	r2, [r3, #20]
 8105f46:	4b70      	ldr	r3, [pc, #448]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f48:	69db      	ldr	r3, [r3, #28]
 8105f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8105f4e:	429a      	cmp	r2, r3
 8105f50:	d908      	bls.n	8105f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8105f52:	4b6d      	ldr	r3, [pc, #436]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f54:	69db      	ldr	r3, [r3, #28]
 8105f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	695b      	ldr	r3, [r3, #20]
 8105f5e:	496a      	ldr	r1, [pc, #424]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f60:	4313      	orrs	r3, r2
 8105f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	f003 0310 	and.w	r3, r3, #16
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d010      	beq.n	8105f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8105f70:	687b      	ldr	r3, [r7, #4]
 8105f72:	699a      	ldr	r2, [r3, #24]
 8105f74:	4b64      	ldr	r3, [pc, #400]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f76:	69db      	ldr	r3, [r3, #28]
 8105f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8105f7c:	429a      	cmp	r2, r3
 8105f7e:	d908      	bls.n	8105f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8105f80:	4b61      	ldr	r3, [pc, #388]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f82:	69db      	ldr	r3, [r3, #28]
 8105f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	699b      	ldr	r3, [r3, #24]
 8105f8c:	495e      	ldr	r1, [pc, #376]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105f8e:	4313      	orrs	r3, r2
 8105f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	f003 0320 	and.w	r3, r3, #32
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d010      	beq.n	8105fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	69da      	ldr	r2, [r3, #28]
 8105fa2:	4b59      	ldr	r3, [pc, #356]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fa4:	6a1b      	ldr	r3, [r3, #32]
 8105fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8105faa:	429a      	cmp	r2, r3
 8105fac:	d908      	bls.n	8105fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8105fae:	4b56      	ldr	r3, [pc, #344]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fb0:	6a1b      	ldr	r3, [r3, #32]
 8105fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	69db      	ldr	r3, [r3, #28]
 8105fba:	4953      	ldr	r1, [pc, #332]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fbc:	4313      	orrs	r3, r2
 8105fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	f003 0302 	and.w	r3, r3, #2
 8105fc8:	2b00      	cmp	r3, #0
 8105fca:	d010      	beq.n	8105fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	68da      	ldr	r2, [r3, #12]
 8105fd0:	4b4d      	ldr	r3, [pc, #308]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fd2:	699b      	ldr	r3, [r3, #24]
 8105fd4:	f003 030f 	and.w	r3, r3, #15
 8105fd8:	429a      	cmp	r2, r3
 8105fda:	d908      	bls.n	8105fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8105fdc:	4b4a      	ldr	r3, [pc, #296]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fde:	699b      	ldr	r3, [r3, #24]
 8105fe0:	f023 020f 	bic.w	r2, r3, #15
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	68db      	ldr	r3, [r3, #12]
 8105fe8:	4947      	ldr	r1, [pc, #284]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105fea:	4313      	orrs	r3, r2
 8105fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	f003 0301 	and.w	r3, r3, #1
 8105ff6:	2b00      	cmp	r3, #0
 8105ff8:	d055      	beq.n	81060a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8105ffa:	4b43      	ldr	r3, [pc, #268]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8105ffc:	699b      	ldr	r3, [r3, #24]
 8105ffe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	689b      	ldr	r3, [r3, #8]
 8106006:	4940      	ldr	r1, [pc, #256]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106008:	4313      	orrs	r3, r2
 810600a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	685b      	ldr	r3, [r3, #4]
 8106010:	2b02      	cmp	r3, #2
 8106012:	d107      	bne.n	8106024 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8106014:	4b3c      	ldr	r3, [pc, #240]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106016:	681b      	ldr	r3, [r3, #0]
 8106018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810601c:	2b00      	cmp	r3, #0
 810601e:	d121      	bne.n	8106064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8106020:	2301      	movs	r3, #1
 8106022:	e0f6      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	685b      	ldr	r3, [r3, #4]
 8106028:	2b03      	cmp	r3, #3
 810602a:	d107      	bne.n	810603c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 810602c:	4b36      	ldr	r3, [pc, #216]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106034:	2b00      	cmp	r3, #0
 8106036:	d115      	bne.n	8106064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8106038:	2301      	movs	r3, #1
 810603a:	e0ea      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	685b      	ldr	r3, [r3, #4]
 8106040:	2b01      	cmp	r3, #1
 8106042:	d107      	bne.n	8106054 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8106044:	4b30      	ldr	r3, [pc, #192]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810604c:	2b00      	cmp	r3, #0
 810604e:	d109      	bne.n	8106064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8106050:	2301      	movs	r3, #1
 8106052:	e0de      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8106054:	4b2c      	ldr	r3, [pc, #176]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	f003 0304 	and.w	r3, r3, #4
 810605c:	2b00      	cmp	r3, #0
 810605e:	d101      	bne.n	8106064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8106060:	2301      	movs	r3, #1
 8106062:	e0d6      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8106064:	4b28      	ldr	r3, [pc, #160]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106066:	691b      	ldr	r3, [r3, #16]
 8106068:	f023 0207 	bic.w	r2, r3, #7
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	685b      	ldr	r3, [r3, #4]
 8106070:	4925      	ldr	r1, [pc, #148]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106072:	4313      	orrs	r3, r2
 8106074:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106076:	f7fd f931 	bl	81032dc <HAL_GetTick>
 810607a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 810607c:	e00a      	b.n	8106094 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 810607e:	f7fd f92d 	bl	81032dc <HAL_GetTick>
 8106082:	4602      	mov	r2, r0
 8106084:	697b      	ldr	r3, [r7, #20]
 8106086:	1ad3      	subs	r3, r2, r3
 8106088:	f241 3288 	movw	r2, #5000	; 0x1388
 810608c:	4293      	cmp	r3, r2
 810608e:	d901      	bls.n	8106094 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8106090:	2303      	movs	r3, #3
 8106092:	e0be      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8106094:	4b1c      	ldr	r3, [pc, #112]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 8106096:	691b      	ldr	r3, [r3, #16]
 8106098:	f003 0238 	and.w	r2, r3, #56	; 0x38
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	685b      	ldr	r3, [r3, #4]
 81060a0:	00db      	lsls	r3, r3, #3
 81060a2:	429a      	cmp	r2, r3
 81060a4:	d1eb      	bne.n	810607e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	f003 0302 	and.w	r3, r3, #2
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d010      	beq.n	81060d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	68da      	ldr	r2, [r3, #12]
 81060b6:	4b14      	ldr	r3, [pc, #80]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 81060b8:	699b      	ldr	r3, [r3, #24]
 81060ba:	f003 030f 	and.w	r3, r3, #15
 81060be:	429a      	cmp	r2, r3
 81060c0:	d208      	bcs.n	81060d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 81060c2:	4b11      	ldr	r3, [pc, #68]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 81060c4:	699b      	ldr	r3, [r3, #24]
 81060c6:	f023 020f 	bic.w	r2, r3, #15
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	68db      	ldr	r3, [r3, #12]
 81060ce:	490e      	ldr	r1, [pc, #56]	; (8106108 <HAL_RCC_ClockConfig+0x244>)
 81060d0:	4313      	orrs	r3, r2
 81060d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 81060d4:	4b0b      	ldr	r3, [pc, #44]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	f003 030f 	and.w	r3, r3, #15
 81060dc:	683a      	ldr	r2, [r7, #0]
 81060de:	429a      	cmp	r2, r3
 81060e0:	d214      	bcs.n	810610c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 81060e2:	4b08      	ldr	r3, [pc, #32]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	f023 020f 	bic.w	r2, r3, #15
 81060ea:	4906      	ldr	r1, [pc, #24]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 81060ec:	683b      	ldr	r3, [r7, #0]
 81060ee:	4313      	orrs	r3, r2
 81060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 81060f2:	4b04      	ldr	r3, [pc, #16]	; (8106104 <HAL_RCC_ClockConfig+0x240>)
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	f003 030f 	and.w	r3, r3, #15
 81060fa:	683a      	ldr	r2, [r7, #0]
 81060fc:	429a      	cmp	r2, r3
 81060fe:	d005      	beq.n	810610c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8106100:	2301      	movs	r3, #1
 8106102:	e086      	b.n	8106212 <HAL_RCC_ClockConfig+0x34e>
 8106104:	52002000 	.word	0x52002000
 8106108:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	f003 0304 	and.w	r3, r3, #4
 8106114:	2b00      	cmp	r3, #0
 8106116:	d010      	beq.n	810613a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	691a      	ldr	r2, [r3, #16]
 810611c:	4b3f      	ldr	r3, [pc, #252]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 810611e:	699b      	ldr	r3, [r3, #24]
 8106120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8106124:	429a      	cmp	r2, r3
 8106126:	d208      	bcs.n	810613a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8106128:	4b3c      	ldr	r3, [pc, #240]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 810612a:	699b      	ldr	r3, [r3, #24]
 810612c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	691b      	ldr	r3, [r3, #16]
 8106134:	4939      	ldr	r1, [pc, #228]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 8106136:	4313      	orrs	r3, r2
 8106138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	681b      	ldr	r3, [r3, #0]
 810613e:	f003 0308 	and.w	r3, r3, #8
 8106142:	2b00      	cmp	r3, #0
 8106144:	d010      	beq.n	8106168 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	695a      	ldr	r2, [r3, #20]
 810614a:	4b34      	ldr	r3, [pc, #208]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 810614c:	69db      	ldr	r3, [r3, #28]
 810614e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8106152:	429a      	cmp	r2, r3
 8106154:	d208      	bcs.n	8106168 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8106156:	4b31      	ldr	r3, [pc, #196]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 8106158:	69db      	ldr	r3, [r3, #28]
 810615a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	695b      	ldr	r3, [r3, #20]
 8106162:	492e      	ldr	r1, [pc, #184]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 8106164:	4313      	orrs	r3, r2
 8106166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8106168:	687b      	ldr	r3, [r7, #4]
 810616a:	681b      	ldr	r3, [r3, #0]
 810616c:	f003 0310 	and.w	r3, r3, #16
 8106170:	2b00      	cmp	r3, #0
 8106172:	d010      	beq.n	8106196 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	699a      	ldr	r2, [r3, #24]
 8106178:	4b28      	ldr	r3, [pc, #160]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 810617a:	69db      	ldr	r3, [r3, #28]
 810617c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8106180:	429a      	cmp	r2, r3
 8106182:	d208      	bcs.n	8106196 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8106184:	4b25      	ldr	r3, [pc, #148]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 8106186:	69db      	ldr	r3, [r3, #28]
 8106188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	699b      	ldr	r3, [r3, #24]
 8106190:	4922      	ldr	r1, [pc, #136]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 8106192:	4313      	orrs	r3, r2
 8106194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	681b      	ldr	r3, [r3, #0]
 810619a:	f003 0320 	and.w	r3, r3, #32
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d010      	beq.n	81061c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	69da      	ldr	r2, [r3, #28]
 81061a6:	4b1d      	ldr	r3, [pc, #116]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 81061a8:	6a1b      	ldr	r3, [r3, #32]
 81061aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 81061ae:	429a      	cmp	r2, r3
 81061b0:	d208      	bcs.n	81061c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 81061b2:	4b1a      	ldr	r3, [pc, #104]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 81061b4:	6a1b      	ldr	r3, [r3, #32]
 81061b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	69db      	ldr	r3, [r3, #28]
 81061be:	4917      	ldr	r1, [pc, #92]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 81061c0:	4313      	orrs	r3, r2
 81061c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81061c4:	f000 f834 	bl	8106230 <HAL_RCC_GetSysClockFreq>
 81061c8:	4602      	mov	r2, r0
 81061ca:	4b14      	ldr	r3, [pc, #80]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 81061cc:	699b      	ldr	r3, [r3, #24]
 81061ce:	0a1b      	lsrs	r3, r3, #8
 81061d0:	f003 030f 	and.w	r3, r3, #15
 81061d4:	4912      	ldr	r1, [pc, #72]	; (8106220 <HAL_RCC_ClockConfig+0x35c>)
 81061d6:	5ccb      	ldrb	r3, [r1, r3]
 81061d8:	f003 031f 	and.w	r3, r3, #31
 81061dc:	fa22 f303 	lsr.w	r3, r2, r3
 81061e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81061e2:	4b0e      	ldr	r3, [pc, #56]	; (810621c <HAL_RCC_ClockConfig+0x358>)
 81061e4:	699b      	ldr	r3, [r3, #24]
 81061e6:	f003 030f 	and.w	r3, r3, #15
 81061ea:	4a0d      	ldr	r2, [pc, #52]	; (8106220 <HAL_RCC_ClockConfig+0x35c>)
 81061ec:	5cd3      	ldrb	r3, [r2, r3]
 81061ee:	f003 031f 	and.w	r3, r3, #31
 81061f2:	693a      	ldr	r2, [r7, #16]
 81061f4:	fa22 f303 	lsr.w	r3, r2, r3
 81061f8:	4a0a      	ldr	r2, [pc, #40]	; (8106224 <HAL_RCC_ClockConfig+0x360>)
 81061fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 81061fc:	4a0a      	ldr	r2, [pc, #40]	; (8106228 <HAL_RCC_ClockConfig+0x364>)
 81061fe:	693b      	ldr	r3, [r7, #16]
 8106200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8106202:	4b0a      	ldr	r3, [pc, #40]	; (810622c <HAL_RCC_ClockConfig+0x368>)
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	4618      	mov	r0, r3
 8106208:	f7fd f81e 	bl	8103248 <HAL_InitTick>
 810620c:	4603      	mov	r3, r0
 810620e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8106210:	7bfb      	ldrb	r3, [r7, #15]
}
 8106212:	4618      	mov	r0, r3
 8106214:	3718      	adds	r7, #24
 8106216:	46bd      	mov	sp, r7
 8106218:	bd80      	pop	{r7, pc}
 810621a:	bf00      	nop
 810621c:	58024400 	.word	0x58024400
 8106220:	0810b3d4 	.word	0x0810b3d4
 8106224:	24000004 	.word	0x24000004
 8106228:	24000000 	.word	0x24000000
 810622c:	24000068 	.word	0x24000068

08106230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106230:	b480      	push	{r7}
 8106232:	b089      	sub	sp, #36	; 0x24
 8106234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106236:	4bb3      	ldr	r3, [pc, #716]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106238:	691b      	ldr	r3, [r3, #16]
 810623a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810623e:	2b18      	cmp	r3, #24
 8106240:	f200 8155 	bhi.w	81064ee <HAL_RCC_GetSysClockFreq+0x2be>
 8106244:	a201      	add	r2, pc, #4	; (adr r2, 810624c <HAL_RCC_GetSysClockFreq+0x1c>)
 8106246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810624a:	bf00      	nop
 810624c:	081062b1 	.word	0x081062b1
 8106250:	081064ef 	.word	0x081064ef
 8106254:	081064ef 	.word	0x081064ef
 8106258:	081064ef 	.word	0x081064ef
 810625c:	081064ef 	.word	0x081064ef
 8106260:	081064ef 	.word	0x081064ef
 8106264:	081064ef 	.word	0x081064ef
 8106268:	081064ef 	.word	0x081064ef
 810626c:	081062d7 	.word	0x081062d7
 8106270:	081064ef 	.word	0x081064ef
 8106274:	081064ef 	.word	0x081064ef
 8106278:	081064ef 	.word	0x081064ef
 810627c:	081064ef 	.word	0x081064ef
 8106280:	081064ef 	.word	0x081064ef
 8106284:	081064ef 	.word	0x081064ef
 8106288:	081064ef 	.word	0x081064ef
 810628c:	081062dd 	.word	0x081062dd
 8106290:	081064ef 	.word	0x081064ef
 8106294:	081064ef 	.word	0x081064ef
 8106298:	081064ef 	.word	0x081064ef
 810629c:	081064ef 	.word	0x081064ef
 81062a0:	081064ef 	.word	0x081064ef
 81062a4:	081064ef 	.word	0x081064ef
 81062a8:	081064ef 	.word	0x081064ef
 81062ac:	081062e3 	.word	0x081062e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81062b0:	4b94      	ldr	r3, [pc, #592]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	f003 0320 	and.w	r3, r3, #32
 81062b8:	2b00      	cmp	r3, #0
 81062ba:	d009      	beq.n	81062d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81062bc:	4b91      	ldr	r3, [pc, #580]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	08db      	lsrs	r3, r3, #3
 81062c2:	f003 0303 	and.w	r3, r3, #3
 81062c6:	4a90      	ldr	r2, [pc, #576]	; (8106508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81062c8:	fa22 f303 	lsr.w	r3, r2, r3
 81062cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81062ce:	e111      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81062d0:	4b8d      	ldr	r3, [pc, #564]	; (8106508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81062d2:	61bb      	str	r3, [r7, #24]
      break;
 81062d4:	e10e      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81062d6:	4b8d      	ldr	r3, [pc, #564]	; (810650c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81062d8:	61bb      	str	r3, [r7, #24]
      break;
 81062da:	e10b      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81062dc:	4b8c      	ldr	r3, [pc, #560]	; (8106510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81062de:	61bb      	str	r3, [r7, #24]
      break;
 81062e0:	e108      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81062e2:	4b88      	ldr	r3, [pc, #544]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062e6:	f003 0303 	and.w	r3, r3, #3
 81062ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81062ec:	4b85      	ldr	r3, [pc, #532]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062f0:	091b      	lsrs	r3, r3, #4
 81062f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81062f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81062f8:	4b82      	ldr	r3, [pc, #520]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062fc:	f003 0301 	and.w	r3, r3, #1
 8106300:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106302:	4b80      	ldr	r3, [pc, #512]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106306:	08db      	lsrs	r3, r3, #3
 8106308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810630c:	68fa      	ldr	r2, [r7, #12]
 810630e:	fb02 f303 	mul.w	r3, r2, r3
 8106312:	ee07 3a90 	vmov	s15, r3
 8106316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810631a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810631e:	693b      	ldr	r3, [r7, #16]
 8106320:	2b00      	cmp	r3, #0
 8106322:	f000 80e1 	beq.w	81064e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106326:	697b      	ldr	r3, [r7, #20]
 8106328:	2b02      	cmp	r3, #2
 810632a:	f000 8083 	beq.w	8106434 <HAL_RCC_GetSysClockFreq+0x204>
 810632e:	697b      	ldr	r3, [r7, #20]
 8106330:	2b02      	cmp	r3, #2
 8106332:	f200 80a1 	bhi.w	8106478 <HAL_RCC_GetSysClockFreq+0x248>
 8106336:	697b      	ldr	r3, [r7, #20]
 8106338:	2b00      	cmp	r3, #0
 810633a:	d003      	beq.n	8106344 <HAL_RCC_GetSysClockFreq+0x114>
 810633c:	697b      	ldr	r3, [r7, #20]
 810633e:	2b01      	cmp	r3, #1
 8106340:	d056      	beq.n	81063f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106342:	e099      	b.n	8106478 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106344:	4b6f      	ldr	r3, [pc, #444]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	f003 0320 	and.w	r3, r3, #32
 810634c:	2b00      	cmp	r3, #0
 810634e:	d02d      	beq.n	81063ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106350:	4b6c      	ldr	r3, [pc, #432]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	08db      	lsrs	r3, r3, #3
 8106356:	f003 0303 	and.w	r3, r3, #3
 810635a:	4a6b      	ldr	r2, [pc, #428]	; (8106508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810635c:	fa22 f303 	lsr.w	r3, r2, r3
 8106360:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	ee07 3a90 	vmov	s15, r3
 8106368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810636c:	693b      	ldr	r3, [r7, #16]
 810636e:	ee07 3a90 	vmov	s15, r3
 8106372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810637a:	4b62      	ldr	r3, [pc, #392]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106382:	ee07 3a90 	vmov	s15, r3
 8106386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810638a:	ed97 6a02 	vldr	s12, [r7, #8]
 810638e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106514 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810639a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81063aa:	e087      	b.n	81064bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063ac:	693b      	ldr	r3, [r7, #16]
 81063ae:	ee07 3a90 	vmov	s15, r3
 81063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106518 <HAL_RCC_GetSysClockFreq+0x2e8>
 81063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063be:	4b51      	ldr	r3, [pc, #324]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81063c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063c6:	ee07 3a90 	vmov	s15, r3
 81063ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81063d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106514 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81063ee:	e065      	b.n	81064bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063f0:	693b      	ldr	r3, [r7, #16]
 81063f2:	ee07 3a90 	vmov	s15, r3
 81063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 810651c <HAL_RCC_GetSysClockFreq+0x2ec>
 81063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106402:	4b40      	ldr	r3, [pc, #256]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810640a:	ee07 3a90 	vmov	s15, r3
 810640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106412:	ed97 6a02 	vldr	s12, [r7, #8]
 8106416:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106514 <HAL_RCC_GetSysClockFreq+0x2e4>
 810641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810642e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106432:	e043      	b.n	81064bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106434:	693b      	ldr	r3, [r7, #16]
 8106436:	ee07 3a90 	vmov	s15, r3
 810643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810643e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106520 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106446:	4b2f      	ldr	r3, [pc, #188]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810644e:	ee07 3a90 	vmov	s15, r3
 8106452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106456:	ed97 6a02 	vldr	s12, [r7, #8]
 810645a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106514 <HAL_RCC_GetSysClockFreq+0x2e4>
 810645e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810646a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106476:	e021      	b.n	81064bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106478:	693b      	ldr	r3, [r7, #16]
 810647a:	ee07 3a90 	vmov	s15, r3
 810647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106482:	eddf 6a26 	vldr	s13, [pc, #152]	; 810651c <HAL_RCC_GetSysClockFreq+0x2ec>
 8106486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810648a:	4b1e      	ldr	r3, [pc, #120]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106492:	ee07 3a90 	vmov	s15, r3
 8106496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810649a:	ed97 6a02 	vldr	s12, [r7, #8]
 810649e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106514 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81064ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81064bc:	4b11      	ldr	r3, [pc, #68]	; (8106504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81064c0:	0a5b      	lsrs	r3, r3, #9
 81064c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81064c6:	3301      	adds	r3, #1
 81064c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81064ca:	683b      	ldr	r3, [r7, #0]
 81064cc:	ee07 3a90 	vmov	s15, r3
 81064d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81064d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81064d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81064dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81064e0:	ee17 3a90 	vmov	r3, s15
 81064e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81064e6:	e005      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81064e8:	2300      	movs	r3, #0
 81064ea:	61bb      	str	r3, [r7, #24]
      break;
 81064ec:	e002      	b.n	81064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81064ee:	4b07      	ldr	r3, [pc, #28]	; (810650c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81064f0:	61bb      	str	r3, [r7, #24]
      break;
 81064f2:	bf00      	nop
  }

  return sysclockfreq;
 81064f4:	69bb      	ldr	r3, [r7, #24]
}
 81064f6:	4618      	mov	r0, r3
 81064f8:	3724      	adds	r7, #36	; 0x24
 81064fa:	46bd      	mov	sp, r7
 81064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106500:	4770      	bx	lr
 8106502:	bf00      	nop
 8106504:	58024400 	.word	0x58024400
 8106508:	03d09000 	.word	0x03d09000
 810650c:	003d0900 	.word	0x003d0900
 8106510:	017d7840 	.word	0x017d7840
 8106514:	46000000 	.word	0x46000000
 8106518:	4c742400 	.word	0x4c742400
 810651c:	4a742400 	.word	0x4a742400
 8106520:	4bbebc20 	.word	0x4bbebc20

08106524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106524:	b580      	push	{r7, lr}
 8106526:	b082      	sub	sp, #8
 8106528:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810652a:	f7ff fe81 	bl	8106230 <HAL_RCC_GetSysClockFreq>
 810652e:	4602      	mov	r2, r0
 8106530:	4b10      	ldr	r3, [pc, #64]	; (8106574 <HAL_RCC_GetHCLKFreq+0x50>)
 8106532:	699b      	ldr	r3, [r3, #24]
 8106534:	0a1b      	lsrs	r3, r3, #8
 8106536:	f003 030f 	and.w	r3, r3, #15
 810653a:	490f      	ldr	r1, [pc, #60]	; (8106578 <HAL_RCC_GetHCLKFreq+0x54>)
 810653c:	5ccb      	ldrb	r3, [r1, r3]
 810653e:	f003 031f 	and.w	r3, r3, #31
 8106542:	fa22 f303 	lsr.w	r3, r2, r3
 8106546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106548:	4b0a      	ldr	r3, [pc, #40]	; (8106574 <HAL_RCC_GetHCLKFreq+0x50>)
 810654a:	699b      	ldr	r3, [r3, #24]
 810654c:	f003 030f 	and.w	r3, r3, #15
 8106550:	4a09      	ldr	r2, [pc, #36]	; (8106578 <HAL_RCC_GetHCLKFreq+0x54>)
 8106552:	5cd3      	ldrb	r3, [r2, r3]
 8106554:	f003 031f 	and.w	r3, r3, #31
 8106558:	687a      	ldr	r2, [r7, #4]
 810655a:	fa22 f303 	lsr.w	r3, r2, r3
 810655e:	4a07      	ldr	r2, [pc, #28]	; (810657c <HAL_RCC_GetHCLKFreq+0x58>)
 8106560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8106562:	4a07      	ldr	r2, [pc, #28]	; (8106580 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106568:	4b04      	ldr	r3, [pc, #16]	; (810657c <HAL_RCC_GetHCLKFreq+0x58>)
 810656a:	681b      	ldr	r3, [r3, #0]
}
 810656c:	4618      	mov	r0, r3
 810656e:	3708      	adds	r7, #8
 8106570:	46bd      	mov	sp, r7
 8106572:	bd80      	pop	{r7, pc}
 8106574:	58024400 	.word	0x58024400
 8106578:	0810b3d4 	.word	0x0810b3d4
 810657c:	24000004 	.word	0x24000004
 8106580:	24000000 	.word	0x24000000

08106584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106584:	b580      	push	{r7, lr}
 8106586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106588:	f7ff ffcc 	bl	8106524 <HAL_RCC_GetHCLKFreq>
 810658c:	4602      	mov	r2, r0
 810658e:	4b06      	ldr	r3, [pc, #24]	; (81065a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106590:	69db      	ldr	r3, [r3, #28]
 8106592:	091b      	lsrs	r3, r3, #4
 8106594:	f003 0307 	and.w	r3, r3, #7
 8106598:	4904      	ldr	r1, [pc, #16]	; (81065ac <HAL_RCC_GetPCLK1Freq+0x28>)
 810659a:	5ccb      	ldrb	r3, [r1, r3]
 810659c:	f003 031f 	and.w	r3, r3, #31
 81065a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81065a4:	4618      	mov	r0, r3
 81065a6:	bd80      	pop	{r7, pc}
 81065a8:	58024400 	.word	0x58024400
 81065ac:	0810b3d4 	.word	0x0810b3d4

081065b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81065b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81065b4:	b0ca      	sub	sp, #296	; 0x128
 81065b6:	af00      	add	r7, sp, #0
 81065b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81065bc:	2300      	movs	r3, #0
 81065be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81065c2:	2300      	movs	r3, #0
 81065c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 81065d4:	2500      	movs	r5, #0
 81065d6:	ea54 0305 	orrs.w	r3, r4, r5
 81065da:	d049      	beq.n	8106670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81065e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065e6:	d02f      	beq.n	8106648 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81065e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065ec:	d828      	bhi.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81065ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81065f2:	d01a      	beq.n	810662a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81065f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81065f8:	d822      	bhi.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81065fa:	2b00      	cmp	r3, #0
 81065fc:	d003      	beq.n	8106606 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81065fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106602:	d007      	beq.n	8106614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106604:	e01c      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106606:	4bb8      	ldr	r3, [pc, #736]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810660a:	4ab7      	ldr	r2, [pc, #732]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810660c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106612:	e01a      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106618:	3308      	adds	r3, #8
 810661a:	2102      	movs	r1, #2
 810661c:	4618      	mov	r0, r3
 810661e:	f001 f9d1 	bl	81079c4 <RCCEx_PLL2_Config>
 8106622:	4603      	mov	r3, r0
 8106624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106628:	e00f      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810662e:	3328      	adds	r3, #40	; 0x28
 8106630:	2102      	movs	r1, #2
 8106632:	4618      	mov	r0, r3
 8106634:	f001 fa78 	bl	8107b28 <RCCEx_PLL3_Config>
 8106638:	4603      	mov	r3, r0
 810663a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810663e:	e004      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106640:	2301      	movs	r3, #1
 8106642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106646:	e000      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106648:	bf00      	nop
    }

    if (ret == HAL_OK)
 810664a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810664e:	2b00      	cmp	r3, #0
 8106650:	d10a      	bne.n	8106668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106652:	4ba5      	ldr	r3, [pc, #660]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106656:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810665e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106660:	4aa1      	ldr	r2, [pc, #644]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106662:	430b      	orrs	r3, r1
 8106664:	6513      	str	r3, [r2, #80]	; 0x50
 8106666:	e003      	b.n	8106670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810666c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106678:	f402 7880 	and.w	r8, r2, #256	; 0x100
 810667c:	f04f 0900 	mov.w	r9, #0
 8106680:	ea58 0309 	orrs.w	r3, r8, r9
 8106684:	d047      	beq.n	8106716 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810668c:	2b04      	cmp	r3, #4
 810668e:	d82a      	bhi.n	81066e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106690:	a201      	add	r2, pc, #4	; (adr r2, 8106698 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106696:	bf00      	nop
 8106698:	081066ad 	.word	0x081066ad
 810669c:	081066bb 	.word	0x081066bb
 81066a0:	081066d1 	.word	0x081066d1
 81066a4:	081066ef 	.word	0x081066ef
 81066a8:	081066ef 	.word	0x081066ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066ac:	4b8e      	ldr	r3, [pc, #568]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066b0:	4a8d      	ldr	r2, [pc, #564]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81066b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81066b8:	e01a      	b.n	81066f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066be:	3308      	adds	r3, #8
 81066c0:	2100      	movs	r1, #0
 81066c2:	4618      	mov	r0, r3
 81066c4:	f001 f97e 	bl	81079c4 <RCCEx_PLL2_Config>
 81066c8:	4603      	mov	r3, r0
 81066ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81066ce:	e00f      	b.n	81066f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066d4:	3328      	adds	r3, #40	; 0x28
 81066d6:	2100      	movs	r1, #0
 81066d8:	4618      	mov	r0, r3
 81066da:	f001 fa25 	bl	8107b28 <RCCEx_PLL3_Config>
 81066de:	4603      	mov	r3, r0
 81066e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81066e4:	e004      	b.n	81066f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066e6:	2301      	movs	r3, #1
 81066e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81066ec:	e000      	b.n	81066f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81066ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d10a      	bne.n	810670e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81066f8:	4b7b      	ldr	r3, [pc, #492]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066fc:	f023 0107 	bic.w	r1, r3, #7
 8106700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106706:	4a78      	ldr	r2, [pc, #480]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106708:	430b      	orrs	r3, r1
 810670a:	6513      	str	r3, [r2, #80]	; 0x50
 810670c:	e003      	b.n	8106716 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810670e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810671e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8106722:	f04f 0b00 	mov.w	fp, #0
 8106726:	ea5a 030b 	orrs.w	r3, sl, fp
 810672a:	d04c      	beq.n	81067c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106736:	d030      	beq.n	810679a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810673c:	d829      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810673e:	2bc0      	cmp	r3, #192	; 0xc0
 8106740:	d02d      	beq.n	810679e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106742:	2bc0      	cmp	r3, #192	; 0xc0
 8106744:	d825      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106746:	2b80      	cmp	r3, #128	; 0x80
 8106748:	d018      	beq.n	810677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810674a:	2b80      	cmp	r3, #128	; 0x80
 810674c:	d821      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810674e:	2b00      	cmp	r3, #0
 8106750:	d002      	beq.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106752:	2b40      	cmp	r3, #64	; 0x40
 8106754:	d007      	beq.n	8106766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106756:	e01c      	b.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106758:	4b63      	ldr	r3, [pc, #396]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810675c:	4a62      	ldr	r2, [pc, #392]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106764:	e01c      	b.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810676a:	3308      	adds	r3, #8
 810676c:	2100      	movs	r1, #0
 810676e:	4618      	mov	r0, r3
 8106770:	f001 f928 	bl	81079c4 <RCCEx_PLL2_Config>
 8106774:	4603      	mov	r3, r0
 8106776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810677a:	e011      	b.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106780:	3328      	adds	r3, #40	; 0x28
 8106782:	2100      	movs	r1, #0
 8106784:	4618      	mov	r0, r3
 8106786:	f001 f9cf 	bl	8107b28 <RCCEx_PLL3_Config>
 810678a:	4603      	mov	r3, r0
 810678c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106790:	e006      	b.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106792:	2301      	movs	r3, #1
 8106794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106798:	e002      	b.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810679a:	bf00      	nop
 810679c:	e000      	b.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810679e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067a4:	2b00      	cmp	r3, #0
 81067a6:	d10a      	bne.n	81067be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81067a8:	4b4f      	ldr	r3, [pc, #316]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81067b6:	4a4c      	ldr	r2, [pc, #304]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067b8:	430b      	orrs	r3, r1
 81067ba:	6513      	str	r3, [r2, #80]	; 0x50
 81067bc:	e003      	b.n	81067c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 81067d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81067d6:	2300      	movs	r3, #0
 81067d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81067dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81067e0:	460b      	mov	r3, r1
 81067e2:	4313      	orrs	r3, r2
 81067e4:	d053      	beq.n	810688e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81067ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81067f2:	d035      	beq.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81067f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81067f8:	d82e      	bhi.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81067fe:	d031      	beq.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106804:	d828      	bhi.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810680a:	d01a      	beq.n	8106842 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810680c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106810:	d822      	bhi.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106812:	2b00      	cmp	r3, #0
 8106814:	d003      	beq.n	810681e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810681a:	d007      	beq.n	810682c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810681c:	e01c      	b.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810681e:	4b32      	ldr	r3, [pc, #200]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106822:	4a31      	ldr	r2, [pc, #196]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810682a:	e01c      	b.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106830:	3308      	adds	r3, #8
 8106832:	2100      	movs	r1, #0
 8106834:	4618      	mov	r0, r3
 8106836:	f001 f8c5 	bl	81079c4 <RCCEx_PLL2_Config>
 810683a:	4603      	mov	r3, r0
 810683c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106840:	e011      	b.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106846:	3328      	adds	r3, #40	; 0x28
 8106848:	2100      	movs	r1, #0
 810684a:	4618      	mov	r0, r3
 810684c:	f001 f96c 	bl	8107b28 <RCCEx_PLL3_Config>
 8106850:	4603      	mov	r3, r0
 8106852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106856:	e006      	b.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106858:	2301      	movs	r3, #1
 810685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810685e:	e002      	b.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106860:	bf00      	nop
 8106862:	e000      	b.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810686a:	2b00      	cmp	r3, #0
 810686c:	d10b      	bne.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810686e:	4b1e      	ldr	r3, [pc, #120]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106872:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8106876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810687a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810687e:	4a1a      	ldr	r2, [pc, #104]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106880:	430b      	orrs	r3, r1
 8106882:	6593      	str	r3, [r2, #88]	; 0x58
 8106884:	e003      	b.n	810688e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810688a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106896:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810689a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 810689e:	2300      	movs	r3, #0
 81068a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81068a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81068a8:	460b      	mov	r3, r1
 81068aa:	4313      	orrs	r3, r2
 81068ac:	d056      	beq.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81068b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81068ba:	d038      	beq.n	810692e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81068bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81068c0:	d831      	bhi.n	8106926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81068c6:	d034      	beq.n	8106932 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81068c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81068cc:	d82b      	bhi.n	8106926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81068d2:	d01d      	beq.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81068d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81068d8:	d825      	bhi.n	8106926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068da:	2b00      	cmp	r3, #0
 81068dc:	d006      	beq.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81068de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81068e2:	d00a      	beq.n	81068fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81068e4:	e01f      	b.n	8106926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068e6:	bf00      	nop
 81068e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068ec:	4ba2      	ldr	r3, [pc, #648]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068f0:	4aa1      	ldr	r2, [pc, #644]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068f8:	e01c      	b.n	8106934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068fe:	3308      	adds	r3, #8
 8106900:	2100      	movs	r1, #0
 8106902:	4618      	mov	r0, r3
 8106904:	f001 f85e 	bl	81079c4 <RCCEx_PLL2_Config>
 8106908:	4603      	mov	r3, r0
 810690a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810690e:	e011      	b.n	8106934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106914:	3328      	adds	r3, #40	; 0x28
 8106916:	2100      	movs	r1, #0
 8106918:	4618      	mov	r0, r3
 810691a:	f001 f905 	bl	8107b28 <RCCEx_PLL3_Config>
 810691e:	4603      	mov	r3, r0
 8106920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106924:	e006      	b.n	8106934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106926:	2301      	movs	r3, #1
 8106928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810692c:	e002      	b.n	8106934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810692e:	bf00      	nop
 8106930:	e000      	b.n	8106934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106938:	2b00      	cmp	r3, #0
 810693a:	d10b      	bne.n	8106954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810693c:	4b8e      	ldr	r3, [pc, #568]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106940:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8106944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810694c:	4a8a      	ldr	r2, [pc, #552]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810694e:	430b      	orrs	r3, r1
 8106950:	6593      	str	r3, [r2, #88]	; 0x58
 8106952:	e003      	b.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106964:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8106968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 810696c:	2300      	movs	r3, #0
 810696e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8106972:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8106976:	460b      	mov	r3, r1
 8106978:	4313      	orrs	r3, r2
 810697a:	d03a      	beq.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106982:	2b30      	cmp	r3, #48	; 0x30
 8106984:	d01f      	beq.n	81069c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106986:	2b30      	cmp	r3, #48	; 0x30
 8106988:	d819      	bhi.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810698a:	2b20      	cmp	r3, #32
 810698c:	d00c      	beq.n	81069a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810698e:	2b20      	cmp	r3, #32
 8106990:	d815      	bhi.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106992:	2b00      	cmp	r3, #0
 8106994:	d019      	beq.n	81069ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106996:	2b10      	cmp	r3, #16
 8106998:	d111      	bne.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810699a:	4b77      	ldr	r3, [pc, #476]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810699e:	4a76      	ldr	r2, [pc, #472]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81069a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81069a6:	e011      	b.n	81069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069ac:	3308      	adds	r3, #8
 81069ae:	2102      	movs	r1, #2
 81069b0:	4618      	mov	r0, r3
 81069b2:	f001 f807 	bl	81079c4 <RCCEx_PLL2_Config>
 81069b6:	4603      	mov	r3, r0
 81069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81069bc:	e006      	b.n	81069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81069be:	2301      	movs	r3, #1
 81069c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81069c4:	e002      	b.n	81069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81069c6:	bf00      	nop
 81069c8:	e000      	b.n	81069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069d0:	2b00      	cmp	r3, #0
 81069d2:	d10a      	bne.n	81069ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81069d4:	4b68      	ldr	r3, [pc, #416]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 81069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069e2:	4a65      	ldr	r2, [pc, #404]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069e4:	430b      	orrs	r3, r1
 81069e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81069e8:	e003      	b.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 81069fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8106a02:	2300      	movs	r3, #0
 8106a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8106a08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8106a0c:	460b      	mov	r3, r1
 8106a0e:	4313      	orrs	r3, r2
 8106a10:	d051      	beq.n	8106ab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106a1c:	d035      	beq.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8106a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106a22:	d82e      	bhi.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106a28:	d031      	beq.n	8106a8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106a2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106a2e:	d828      	bhi.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106a34:	d01a      	beq.n	8106a6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106a3a:	d822      	bhi.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106a3c:	2b00      	cmp	r3, #0
 8106a3e:	d003      	beq.n	8106a48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106a44:	d007      	beq.n	8106a56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106a46:	e01c      	b.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a48:	4b4b      	ldr	r3, [pc, #300]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a4c:	4a4a      	ldr	r2, [pc, #296]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a54:	e01c      	b.n	8106a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a5a:	3308      	adds	r3, #8
 8106a5c:	2100      	movs	r1, #0
 8106a5e:	4618      	mov	r0, r3
 8106a60:	f000 ffb0 	bl	81079c4 <RCCEx_PLL2_Config>
 8106a64:	4603      	mov	r3, r0
 8106a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a6a:	e011      	b.n	8106a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a70:	3328      	adds	r3, #40	; 0x28
 8106a72:	2100      	movs	r1, #0
 8106a74:	4618      	mov	r0, r3
 8106a76:	f001 f857 	bl	8107b28 <RCCEx_PLL3_Config>
 8106a7a:	4603      	mov	r3, r0
 8106a7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a80:	e006      	b.n	8106a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a82:	2301      	movs	r3, #1
 8106a84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106a88:	e002      	b.n	8106a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a8a:	bf00      	nop
 8106a8c:	e000      	b.n	8106a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d10a      	bne.n	8106aae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106a98:	4b37      	ldr	r3, [pc, #220]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8106aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106aa6:	4a34      	ldr	r2, [pc, #208]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106aa8:	430b      	orrs	r3, r1
 8106aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8106aac:	e003      	b.n	8106ab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106abe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8106ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8106ac6:	2300      	movs	r3, #0
 8106ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8106acc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8106ad0:	460b      	mov	r3, r1
 8106ad2:	4313      	orrs	r3, r2
 8106ad4:	d056      	beq.n	8106b84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106ae0:	d033      	beq.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106ae6:	d82c      	bhi.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106ae8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106aec:	d02f      	beq.n	8106b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106af2:	d826      	bhi.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106af8:	d02b      	beq.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106afe:	d820      	bhi.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106b04:	d012      	beq.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106b0a:	d81a      	bhi.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	d022      	beq.n	8106b56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106b14:	d115      	bne.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b1a:	3308      	adds	r3, #8
 8106b1c:	2101      	movs	r1, #1
 8106b1e:	4618      	mov	r0, r3
 8106b20:	f000 ff50 	bl	81079c4 <RCCEx_PLL2_Config>
 8106b24:	4603      	mov	r3, r0
 8106b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106b2a:	e015      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b30:	3328      	adds	r3, #40	; 0x28
 8106b32:	2101      	movs	r1, #1
 8106b34:	4618      	mov	r0, r3
 8106b36:	f000 fff7 	bl	8107b28 <RCCEx_PLL3_Config>
 8106b3a:	4603      	mov	r3, r0
 8106b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106b40:	e00a      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b42:	2301      	movs	r3, #1
 8106b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106b48:	e006      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b4a:	bf00      	nop
 8106b4c:	e004      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b4e:	bf00      	nop
 8106b50:	e002      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b52:	bf00      	nop
 8106b54:	e000      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b5c:	2b00      	cmp	r3, #0
 8106b5e:	d10d      	bne.n	8106b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106b60:	4b05      	ldr	r3, [pc, #20]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8106b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106b6e:	4a02      	ldr	r2, [pc, #8]	; (8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b70:	430b      	orrs	r3, r1
 8106b72:	6513      	str	r3, [r2, #80]	; 0x50
 8106b74:	e006      	b.n	8106b84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106b76:	bf00      	nop
 8106b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b8c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8106b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8106b94:	2300      	movs	r3, #0
 8106b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8106b9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8106b9e:	460b      	mov	r3, r1
 8106ba0:	4313      	orrs	r3, r2
 8106ba2:	d055      	beq.n	8106c50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106bb0:	d033      	beq.n	8106c1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106bb6:	d82c      	bhi.n	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bbc:	d02f      	beq.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bc2:	d826      	bhi.n	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106bc8:	d02b      	beq.n	8106c22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106bca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106bce:	d820      	bhi.n	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bd4:	d012      	beq.n	8106bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bda:	d81a      	bhi.n	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d022      	beq.n	8106c26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106be4:	d115      	bne.n	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bea:	3308      	adds	r3, #8
 8106bec:	2101      	movs	r1, #1
 8106bee:	4618      	mov	r0, r3
 8106bf0:	f000 fee8 	bl	81079c4 <RCCEx_PLL2_Config>
 8106bf4:	4603      	mov	r3, r0
 8106bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106bfa:	e015      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c00:	3328      	adds	r3, #40	; 0x28
 8106c02:	2101      	movs	r1, #1
 8106c04:	4618      	mov	r0, r3
 8106c06:	f000 ff8f 	bl	8107b28 <RCCEx_PLL3_Config>
 8106c0a:	4603      	mov	r3, r0
 8106c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106c10:	e00a      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106c12:	2301      	movs	r3, #1
 8106c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106c18:	e006      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106c1a:	bf00      	nop
 8106c1c:	e004      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106c1e:	bf00      	nop
 8106c20:	e002      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106c22:	bf00      	nop
 8106c24:	e000      	b.n	8106c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106c2c:	2b00      	cmp	r3, #0
 8106c2e:	d10b      	bne.n	8106c48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106c30:	4ba3      	ldr	r3, [pc, #652]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c34:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8106c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106c40:	4a9f      	ldr	r2, [pc, #636]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106c42:	430b      	orrs	r3, r1
 8106c44:	6593      	str	r3, [r2, #88]	; 0x58
 8106c46:	e003      	b.n	8106c50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8106c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8106c60:	2300      	movs	r3, #0
 8106c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8106c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8106c6a:	460b      	mov	r3, r1
 8106c6c:	4313      	orrs	r3, r2
 8106c6e:	d037      	beq.n	8106ce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c7a:	d00e      	beq.n	8106c9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c80:	d816      	bhi.n	8106cb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106c82:	2b00      	cmp	r3, #0
 8106c84:	d018      	beq.n	8106cb8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106c8a:	d111      	bne.n	8106cb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c8c:	4b8c      	ldr	r3, [pc, #560]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c90:	4a8b      	ldr	r2, [pc, #556]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106c98:	e00f      	b.n	8106cba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c9e:	3308      	adds	r3, #8
 8106ca0:	2101      	movs	r1, #1
 8106ca2:	4618      	mov	r0, r3
 8106ca4:	f000 fe8e 	bl	81079c4 <RCCEx_PLL2_Config>
 8106ca8:	4603      	mov	r3, r0
 8106caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106cae:	e004      	b.n	8106cba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106cb0:	2301      	movs	r3, #1
 8106cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106cb6:	e000      	b.n	8106cba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cbe:	2b00      	cmp	r3, #0
 8106cc0:	d10a      	bne.n	8106cd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106cc2:	4b7f      	ldr	r3, [pc, #508]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106cc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106cd0:	4a7b      	ldr	r2, [pc, #492]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106cd2:	430b      	orrs	r3, r1
 8106cd4:	6513      	str	r3, [r2, #80]	; 0x50
 8106cd6:	e003      	b.n	8106ce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ce8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8106cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106cf0:	2300      	movs	r3, #0
 8106cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8106cf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8106cfa:	460b      	mov	r3, r1
 8106cfc:	4313      	orrs	r3, r2
 8106cfe:	d039      	beq.n	8106d74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106d06:	2b03      	cmp	r3, #3
 8106d08:	d81c      	bhi.n	8106d44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106d0a:	a201      	add	r2, pc, #4	; (adr r2, 8106d10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d10:	08106d4d 	.word	0x08106d4d
 8106d14:	08106d21 	.word	0x08106d21
 8106d18:	08106d2f 	.word	0x08106d2f
 8106d1c:	08106d4d 	.word	0x08106d4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d20:	4b67      	ldr	r3, [pc, #412]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d24:	4a66      	ldr	r2, [pc, #408]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106d2c:	e00f      	b.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d32:	3308      	adds	r3, #8
 8106d34:	2102      	movs	r1, #2
 8106d36:	4618      	mov	r0, r3
 8106d38:	f000 fe44 	bl	81079c4 <RCCEx_PLL2_Config>
 8106d3c:	4603      	mov	r3, r0
 8106d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106d42:	e004      	b.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106d44:	2301      	movs	r3, #1
 8106d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106d4a:	e000      	b.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d52:	2b00      	cmp	r3, #0
 8106d54:	d10a      	bne.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106d56:	4b5a      	ldr	r3, [pc, #360]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106d5a:	f023 0103 	bic.w	r1, r3, #3
 8106d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106d64:	4a56      	ldr	r2, [pc, #344]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106d66:	430b      	orrs	r3, r1
 8106d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106d6a:	e003      	b.n	8106d74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8106d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106d84:	2300      	movs	r3, #0
 8106d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8106d8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8106d8e:	460b      	mov	r3, r1
 8106d90:	4313      	orrs	r3, r2
 8106d92:	f000 809f 	beq.w	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106d96:	4b4b      	ldr	r3, [pc, #300]	; (8106ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	4a4a      	ldr	r2, [pc, #296]	; (8106ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106da2:	f7fc fa9b 	bl	81032dc <HAL_GetTick>
 8106da6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106daa:	e00b      	b.n	8106dc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106dac:	f7fc fa96 	bl	81032dc <HAL_GetTick>
 8106db0:	4602      	mov	r2, r0
 8106db2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106db6:	1ad3      	subs	r3, r2, r3
 8106db8:	2b64      	cmp	r3, #100	; 0x64
 8106dba:	d903      	bls.n	8106dc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106dbc:	2303      	movs	r3, #3
 8106dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106dc2:	e005      	b.n	8106dd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106dc4:	4b3f      	ldr	r3, [pc, #252]	; (8106ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106dcc:	2b00      	cmp	r3, #0
 8106dce:	d0ed      	beq.n	8106dac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dd4:	2b00      	cmp	r3, #0
 8106dd6:	d179      	bne.n	8106ecc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106dd8:	4b39      	ldr	r3, [pc, #228]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106de4:	4053      	eors	r3, r2
 8106de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d015      	beq.n	8106e1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106dee:	4b34      	ldr	r3, [pc, #208]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106df6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106dfa:	4b31      	ldr	r3, [pc, #196]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106dfe:	4a30      	ldr	r2, [pc, #192]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106e04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106e06:	4b2e      	ldr	r3, [pc, #184]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106e0a:	4a2d      	ldr	r2, [pc, #180]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106e10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106e12:	4a2b      	ldr	r2, [pc, #172]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8106e18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e26:	d118      	bne.n	8106e5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106e28:	f7fc fa58 	bl	81032dc <HAL_GetTick>
 8106e2c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106e30:	e00d      	b.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106e32:	f7fc fa53 	bl	81032dc <HAL_GetTick>
 8106e36:	4602      	mov	r2, r0
 8106e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106e3c:	1ad2      	subs	r2, r2, r3
 8106e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8106e42:	429a      	cmp	r2, r3
 8106e44:	d903      	bls.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106e46:	2303      	movs	r3, #3
 8106e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8106e4c:	e005      	b.n	8106e5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106e4e:	4b1c      	ldr	r3, [pc, #112]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106e52:	f003 0302 	and.w	r3, r3, #2
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d0eb      	beq.n	8106e32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e5e:	2b00      	cmp	r3, #0
 8106e60:	d129      	bne.n	8106eb6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106e72:	d10e      	bne.n	8106e92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8106e74:	4b12      	ldr	r3, [pc, #72]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e76:	691b      	ldr	r3, [r3, #16]
 8106e78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8106e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106e84:	091a      	lsrs	r2, r3, #4
 8106e86:	4b10      	ldr	r3, [pc, #64]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106e88:	4013      	ands	r3, r2
 8106e8a:	4a0d      	ldr	r2, [pc, #52]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e8c:	430b      	orrs	r3, r1
 8106e8e:	6113      	str	r3, [r2, #16]
 8106e90:	e005      	b.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8106e92:	4b0b      	ldr	r3, [pc, #44]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e94:	691b      	ldr	r3, [r3, #16]
 8106e96:	4a0a      	ldr	r2, [pc, #40]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106e98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106e9c:	6113      	str	r3, [r2, #16]
 8106e9e:	4b08      	ldr	r3, [pc, #32]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106ea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8106ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106eae:	4a04      	ldr	r2, [pc, #16]	; (8106ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8106eb0:	430b      	orrs	r3, r1
 8106eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8106eb4:	e00e      	b.n	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106eba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8106ebe:	e009      	b.n	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106ec0:	58024400 	.word	0x58024400
 8106ec4:	58024800 	.word	0x58024800
 8106ec8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ed0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106edc:	f002 0301 	and.w	r3, r2, #1
 8106ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8106ee4:	2300      	movs	r3, #0
 8106ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106eea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8106eee:	460b      	mov	r3, r1
 8106ef0:	4313      	orrs	r3, r2
 8106ef2:	f000 8089 	beq.w	8107008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106efc:	2b28      	cmp	r3, #40	; 0x28
 8106efe:	d86b      	bhi.n	8106fd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106f00:	a201      	add	r2, pc, #4	; (adr r2, 8106f08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f06:	bf00      	nop
 8106f08:	08106fe1 	.word	0x08106fe1
 8106f0c:	08106fd9 	.word	0x08106fd9
 8106f10:	08106fd9 	.word	0x08106fd9
 8106f14:	08106fd9 	.word	0x08106fd9
 8106f18:	08106fd9 	.word	0x08106fd9
 8106f1c:	08106fd9 	.word	0x08106fd9
 8106f20:	08106fd9 	.word	0x08106fd9
 8106f24:	08106fd9 	.word	0x08106fd9
 8106f28:	08106fad 	.word	0x08106fad
 8106f2c:	08106fd9 	.word	0x08106fd9
 8106f30:	08106fd9 	.word	0x08106fd9
 8106f34:	08106fd9 	.word	0x08106fd9
 8106f38:	08106fd9 	.word	0x08106fd9
 8106f3c:	08106fd9 	.word	0x08106fd9
 8106f40:	08106fd9 	.word	0x08106fd9
 8106f44:	08106fd9 	.word	0x08106fd9
 8106f48:	08106fc3 	.word	0x08106fc3
 8106f4c:	08106fd9 	.word	0x08106fd9
 8106f50:	08106fd9 	.word	0x08106fd9
 8106f54:	08106fd9 	.word	0x08106fd9
 8106f58:	08106fd9 	.word	0x08106fd9
 8106f5c:	08106fd9 	.word	0x08106fd9
 8106f60:	08106fd9 	.word	0x08106fd9
 8106f64:	08106fd9 	.word	0x08106fd9
 8106f68:	08106fe1 	.word	0x08106fe1
 8106f6c:	08106fd9 	.word	0x08106fd9
 8106f70:	08106fd9 	.word	0x08106fd9
 8106f74:	08106fd9 	.word	0x08106fd9
 8106f78:	08106fd9 	.word	0x08106fd9
 8106f7c:	08106fd9 	.word	0x08106fd9
 8106f80:	08106fd9 	.word	0x08106fd9
 8106f84:	08106fd9 	.word	0x08106fd9
 8106f88:	08106fe1 	.word	0x08106fe1
 8106f8c:	08106fd9 	.word	0x08106fd9
 8106f90:	08106fd9 	.word	0x08106fd9
 8106f94:	08106fd9 	.word	0x08106fd9
 8106f98:	08106fd9 	.word	0x08106fd9
 8106f9c:	08106fd9 	.word	0x08106fd9
 8106fa0:	08106fd9 	.word	0x08106fd9
 8106fa4:	08106fd9 	.word	0x08106fd9
 8106fa8:	08106fe1 	.word	0x08106fe1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106fb0:	3308      	adds	r3, #8
 8106fb2:	2101      	movs	r1, #1
 8106fb4:	4618      	mov	r0, r3
 8106fb6:	f000 fd05 	bl	81079c4 <RCCEx_PLL2_Config>
 8106fba:	4603      	mov	r3, r0
 8106fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106fc0:	e00f      	b.n	8106fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106fc6:	3328      	adds	r3, #40	; 0x28
 8106fc8:	2101      	movs	r1, #1
 8106fca:	4618      	mov	r0, r3
 8106fcc:	f000 fdac 	bl	8107b28 <RCCEx_PLL3_Config>
 8106fd0:	4603      	mov	r3, r0
 8106fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106fd6:	e004      	b.n	8106fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106fd8:	2301      	movs	r3, #1
 8106fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106fde:	e000      	b.n	8106fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d10a      	bne.n	8107000 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106fea:	4bbf      	ldr	r3, [pc, #764]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106fee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8106ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ff8:	4abb      	ldr	r2, [pc, #748]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106ffa:	430b      	orrs	r3, r1
 8106ffc:	6553      	str	r3, [r2, #84]	; 0x54
 8106ffe:	e003      	b.n	8107008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8107008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107010:	f002 0302 	and.w	r3, r2, #2
 8107014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8107018:	2300      	movs	r3, #0
 810701a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810701e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8107022:	460b      	mov	r3, r1
 8107024:	4313      	orrs	r3, r2
 8107026:	d041      	beq.n	81070ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8107028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810702c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810702e:	2b05      	cmp	r3, #5
 8107030:	d824      	bhi.n	810707c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8107032:	a201      	add	r2, pc, #4	; (adr r2, 8107038 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107038:	08107085 	.word	0x08107085
 810703c:	08107051 	.word	0x08107051
 8107040:	08107067 	.word	0x08107067
 8107044:	08107085 	.word	0x08107085
 8107048:	08107085 	.word	0x08107085
 810704c:	08107085 	.word	0x08107085
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107054:	3308      	adds	r3, #8
 8107056:	2101      	movs	r1, #1
 8107058:	4618      	mov	r0, r3
 810705a:	f000 fcb3 	bl	81079c4 <RCCEx_PLL2_Config>
 810705e:	4603      	mov	r3, r0
 8107060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107064:	e00f      	b.n	8107086 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810706a:	3328      	adds	r3, #40	; 0x28
 810706c:	2101      	movs	r1, #1
 810706e:	4618      	mov	r0, r3
 8107070:	f000 fd5a 	bl	8107b28 <RCCEx_PLL3_Config>
 8107074:	4603      	mov	r3, r0
 8107076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810707a:	e004      	b.n	8107086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810707c:	2301      	movs	r3, #1
 810707e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107082:	e000      	b.n	8107086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810708a:	2b00      	cmp	r3, #0
 810708c:	d10a      	bne.n	81070a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810708e:	4b96      	ldr	r3, [pc, #600]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107092:	f023 0107 	bic.w	r1, r3, #7
 8107096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810709a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810709c:	4a92      	ldr	r2, [pc, #584]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810709e:	430b      	orrs	r3, r1
 81070a0:	6553      	str	r3, [r2, #84]	; 0x54
 81070a2:	e003      	b.n	81070ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81070a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070b4:	f002 0304 	and.w	r3, r2, #4
 81070b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81070bc:	2300      	movs	r3, #0
 81070be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81070c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81070c6:	460b      	mov	r3, r1
 81070c8:	4313      	orrs	r3, r2
 81070ca:	d044      	beq.n	8107156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81070d4:	2b05      	cmp	r3, #5
 81070d6:	d825      	bhi.n	8107124 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81070d8:	a201      	add	r2, pc, #4	; (adr r2, 81070e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070de:	bf00      	nop
 81070e0:	0810712d 	.word	0x0810712d
 81070e4:	081070f9 	.word	0x081070f9
 81070e8:	0810710f 	.word	0x0810710f
 81070ec:	0810712d 	.word	0x0810712d
 81070f0:	0810712d 	.word	0x0810712d
 81070f4:	0810712d 	.word	0x0810712d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070fc:	3308      	adds	r3, #8
 81070fe:	2101      	movs	r1, #1
 8107100:	4618      	mov	r0, r3
 8107102:	f000 fc5f 	bl	81079c4 <RCCEx_PLL2_Config>
 8107106:	4603      	mov	r3, r0
 8107108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810710c:	e00f      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107112:	3328      	adds	r3, #40	; 0x28
 8107114:	2101      	movs	r1, #1
 8107116:	4618      	mov	r0, r3
 8107118:	f000 fd06 	bl	8107b28 <RCCEx_PLL3_Config>
 810711c:	4603      	mov	r3, r0
 810711e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107122:	e004      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107124:	2301      	movs	r3, #1
 8107126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810712a:	e000      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810712c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810712e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107132:	2b00      	cmp	r3, #0
 8107134:	d10b      	bne.n	810714e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107136:	4b6c      	ldr	r3, [pc, #432]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810713a:	f023 0107 	bic.w	r1, r3, #7
 810713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8107146:	4a68      	ldr	r2, [pc, #416]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107148:	430b      	orrs	r3, r1
 810714a:	6593      	str	r3, [r2, #88]	; 0x58
 810714c:	e003      	b.n	8107156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810714e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810715e:	f002 0320 	and.w	r3, r2, #32
 8107162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8107166:	2300      	movs	r3, #0
 8107168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 810716c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8107170:	460b      	mov	r3, r1
 8107172:	4313      	orrs	r3, r2
 8107174:	d055      	beq.n	8107222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810717e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107182:	d033      	beq.n	81071ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107188:	d82c      	bhi.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810718e:	d02f      	beq.n	81071f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107194:	d826      	bhi.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810719a:	d02b      	beq.n	81071f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810719c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81071a0:	d820      	bhi.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071a6:	d012      	beq.n	81071ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81071a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071ac:	d81a      	bhi.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d022      	beq.n	81071f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81071b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81071b6:	d115      	bne.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071bc:	3308      	adds	r3, #8
 81071be:	2100      	movs	r1, #0
 81071c0:	4618      	mov	r0, r3
 81071c2:	f000 fbff 	bl	81079c4 <RCCEx_PLL2_Config>
 81071c6:	4603      	mov	r3, r0
 81071c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81071cc:	e015      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071d2:	3328      	adds	r3, #40	; 0x28
 81071d4:	2102      	movs	r1, #2
 81071d6:	4618      	mov	r0, r3
 81071d8:	f000 fca6 	bl	8107b28 <RCCEx_PLL3_Config>
 81071dc:	4603      	mov	r3, r0
 81071de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81071e2:	e00a      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81071e4:	2301      	movs	r3, #1
 81071e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81071ea:	e006      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071ec:	bf00      	nop
 81071ee:	e004      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071f0:	bf00      	nop
 81071f2:	e002      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071f4:	bf00      	nop
 81071f6:	e000      	b.n	81071fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81071fe:	2b00      	cmp	r3, #0
 8107200:	d10b      	bne.n	810721a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107202:	4b39      	ldr	r3, [pc, #228]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107206:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8107212:	4a35      	ldr	r2, [pc, #212]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107214:	430b      	orrs	r3, r1
 8107216:	6553      	str	r3, [r2, #84]	; 0x54
 8107218:	e003      	b.n	8107222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810721a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810721e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107226:	e9d3 2300 	ldrd	r2, r3, [r3]
 810722a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810722e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8107232:	2300      	movs	r3, #0
 8107234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8107238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 810723c:	460b      	mov	r3, r1
 810723e:	4313      	orrs	r3, r2
 8107240:	d058      	beq.n	81072f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810724a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810724e:	d033      	beq.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107250:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8107254:	d82c      	bhi.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810725a:	d02f      	beq.n	81072bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810725c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107260:	d826      	bhi.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107266:	d02b      	beq.n	81072c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810726c:	d820      	bhi.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810726e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107272:	d012      	beq.n	810729a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107278:	d81a      	bhi.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810727a:	2b00      	cmp	r3, #0
 810727c:	d022      	beq.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810727e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107282:	d115      	bne.n	81072b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107288:	3308      	adds	r3, #8
 810728a:	2100      	movs	r1, #0
 810728c:	4618      	mov	r0, r3
 810728e:	f000 fb99 	bl	81079c4 <RCCEx_PLL2_Config>
 8107292:	4603      	mov	r3, r0
 8107294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107298:	e015      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810729e:	3328      	adds	r3, #40	; 0x28
 81072a0:	2102      	movs	r1, #2
 81072a2:	4618      	mov	r0, r3
 81072a4:	f000 fc40 	bl	8107b28 <RCCEx_PLL3_Config>
 81072a8:	4603      	mov	r3, r0
 81072aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81072ae:	e00a      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072b0:	2301      	movs	r3, #1
 81072b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81072b6:	e006      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81072b8:	bf00      	nop
 81072ba:	e004      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81072bc:	bf00      	nop
 81072be:	e002      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81072c0:	bf00      	nop
 81072c2:	e000      	b.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81072c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d10e      	bne.n	81072ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81072ce:	4b06      	ldr	r3, [pc, #24]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81072d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81072d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 81072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81072de:	4a02      	ldr	r2, [pc, #8]	; (81072e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81072e0:	430b      	orrs	r3, r1
 81072e2:	6593      	str	r3, [r2, #88]	; 0x58
 81072e4:	e006      	b.n	81072f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81072e6:	bf00      	nop
 81072e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81072f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8107300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8107304:	2300      	movs	r3, #0
 8107306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810730a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810730e:	460b      	mov	r3, r1
 8107310:	4313      	orrs	r3, r2
 8107312:	d055      	beq.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810731c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107320:	d033      	beq.n	810738a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107322:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107326:	d82c      	bhi.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810732c:	d02f      	beq.n	810738e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107332:	d826      	bhi.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107334:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8107338:	d02b      	beq.n	8107392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810733a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810733e:	d820      	bhi.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107344:	d012      	beq.n	810736c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810734a:	d81a      	bhi.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810734c:	2b00      	cmp	r3, #0
 810734e:	d022      	beq.n	8107396 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107354:	d115      	bne.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810735a:	3308      	adds	r3, #8
 810735c:	2100      	movs	r1, #0
 810735e:	4618      	mov	r0, r3
 8107360:	f000 fb30 	bl	81079c4 <RCCEx_PLL2_Config>
 8107364:	4603      	mov	r3, r0
 8107366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810736a:	e015      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107370:	3328      	adds	r3, #40	; 0x28
 8107372:	2102      	movs	r1, #2
 8107374:	4618      	mov	r0, r3
 8107376:	f000 fbd7 	bl	8107b28 <RCCEx_PLL3_Config>
 810737a:	4603      	mov	r3, r0
 810737c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107380:	e00a      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107382:	2301      	movs	r3, #1
 8107384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107388:	e006      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810738a:	bf00      	nop
 810738c:	e004      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810738e:	bf00      	nop
 8107390:	e002      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107392:	bf00      	nop
 8107394:	e000      	b.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810739c:	2b00      	cmp	r3, #0
 810739e:	d10b      	bne.n	81073b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81073a0:	4ba1      	ldr	r3, [pc, #644]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81073a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81073b0:	4a9d      	ldr	r2, [pc, #628]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073b2:	430b      	orrs	r3, r1
 81073b4:	6593      	str	r3, [r2, #88]	; 0x58
 81073b6:	e003      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81073bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073c8:	f002 0308 	and.w	r3, r2, #8
 81073cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81073d0:	2300      	movs	r3, #0
 81073d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81073d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81073da:	460b      	mov	r3, r1
 81073dc:	4313      	orrs	r3, r2
 81073de:	d01e      	beq.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81073ec:	d10c      	bne.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073f2:	3328      	adds	r3, #40	; 0x28
 81073f4:	2102      	movs	r1, #2
 81073f6:	4618      	mov	r0, r3
 81073f8:	f000 fb96 	bl	8107b28 <RCCEx_PLL3_Config>
 81073fc:	4603      	mov	r3, r0
 81073fe:	2b00      	cmp	r3, #0
 8107400:	d002      	beq.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107402:	2301      	movs	r3, #1
 8107404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107408:	4b87      	ldr	r3, [pc, #540]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810740c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107418:	4a83      	ldr	r2, [pc, #524]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810741a:	430b      	orrs	r3, r1
 810741c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107426:	f002 0310 	and.w	r3, r2, #16
 810742a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810742e:	2300      	movs	r3, #0
 8107430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8107434:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8107438:	460b      	mov	r3, r1
 810743a:	4313      	orrs	r3, r2
 810743c:	d01e      	beq.n	810747c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8107446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810744a:	d10c      	bne.n	8107466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107450:	3328      	adds	r3, #40	; 0x28
 8107452:	2102      	movs	r1, #2
 8107454:	4618      	mov	r0, r3
 8107456:	f000 fb67 	bl	8107b28 <RCCEx_PLL3_Config>
 810745a:	4603      	mov	r3, r0
 810745c:	2b00      	cmp	r3, #0
 810745e:	d002      	beq.n	8107466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107460:	2301      	movs	r3, #1
 8107462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107466:	4b70      	ldr	r3, [pc, #448]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810746a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8107476:	4a6c      	ldr	r2, [pc, #432]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107478:	430b      	orrs	r3, r1
 810747a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107484:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8107488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810748c:	2300      	movs	r3, #0
 810748e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8107492:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8107496:	460b      	mov	r3, r1
 8107498:	4313      	orrs	r3, r2
 810749a:	d03e      	beq.n	810751a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81074a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81074a8:	d022      	beq.n	81074f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81074aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81074ae:	d81b      	bhi.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81074b0:	2b00      	cmp	r3, #0
 81074b2:	d003      	beq.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81074b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81074b8:	d00b      	beq.n	81074d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81074ba:	e015      	b.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074c0:	3308      	adds	r3, #8
 81074c2:	2100      	movs	r1, #0
 81074c4:	4618      	mov	r0, r3
 81074c6:	f000 fa7d 	bl	81079c4 <RCCEx_PLL2_Config>
 81074ca:	4603      	mov	r3, r0
 81074cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81074d0:	e00f      	b.n	81074f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074d6:	3328      	adds	r3, #40	; 0x28
 81074d8:	2102      	movs	r1, #2
 81074da:	4618      	mov	r0, r3
 81074dc:	f000 fb24 	bl	8107b28 <RCCEx_PLL3_Config>
 81074e0:	4603      	mov	r3, r0
 81074e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81074e6:	e004      	b.n	81074f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81074e8:	2301      	movs	r3, #1
 81074ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81074ee:	e000      	b.n	81074f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81074f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81074f6:	2b00      	cmp	r3, #0
 81074f8:	d10b      	bne.n	8107512 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81074fa:	4b4b      	ldr	r3, [pc, #300]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81074fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8107502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810750a:	4a47      	ldr	r2, [pc, #284]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810750c:	430b      	orrs	r3, r1
 810750e:	6593      	str	r3, [r2, #88]	; 0x58
 8107510:	e003      	b.n	810751a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810751a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107522:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8107526:	67bb      	str	r3, [r7, #120]	; 0x78
 8107528:	2300      	movs	r3, #0
 810752a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810752c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8107530:	460b      	mov	r3, r1
 8107532:	4313      	orrs	r3, r2
 8107534:	d03b      	beq.n	81075ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810753e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107542:	d01f      	beq.n	8107584 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107544:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107548:	d818      	bhi.n	810757c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810754a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810754e:	d003      	beq.n	8107558 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107554:	d007      	beq.n	8107566 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107556:	e011      	b.n	810757c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107558:	4b33      	ldr	r3, [pc, #204]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810755c:	4a32      	ldr	r2, [pc, #200]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810755e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107564:	e00f      	b.n	8107586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810756a:	3328      	adds	r3, #40	; 0x28
 810756c:	2101      	movs	r1, #1
 810756e:	4618      	mov	r0, r3
 8107570:	f000 fada 	bl	8107b28 <RCCEx_PLL3_Config>
 8107574:	4603      	mov	r3, r0
 8107576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810757a:	e004      	b.n	8107586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810757c:	2301      	movs	r3, #1
 810757e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107582:	e000      	b.n	8107586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810758a:	2b00      	cmp	r3, #0
 810758c:	d10b      	bne.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810758e:	4b26      	ldr	r3, [pc, #152]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107592:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8107596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810759e:	4a22      	ldr	r2, [pc, #136]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075a0:	430b      	orrs	r3, r1
 81075a2:	6553      	str	r3, [r2, #84]	; 0x54
 81075a4:	e003      	b.n	81075ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81075aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 81075ba:	673b      	str	r3, [r7, #112]	; 0x70
 81075bc:	2300      	movs	r3, #0
 81075be:	677b      	str	r3, [r7, #116]	; 0x74
 81075c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 81075c4:	460b      	mov	r3, r1
 81075c6:	4313      	orrs	r3, r2
 81075c8:	d034      	beq.n	8107634 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81075ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81075ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81075d0:	2b00      	cmp	r3, #0
 81075d2:	d003      	beq.n	81075dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81075d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81075d8:	d007      	beq.n	81075ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81075da:	e011      	b.n	8107600 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81075dc:	4b12      	ldr	r3, [pc, #72]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075e0:	4a11      	ldr	r2, [pc, #68]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81075e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81075e8:	e00e      	b.n	8107608 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81075ee:	3308      	adds	r3, #8
 81075f0:	2102      	movs	r1, #2
 81075f2:	4618      	mov	r0, r3
 81075f4:	f000 f9e6 	bl	81079c4 <RCCEx_PLL2_Config>
 81075f8:	4603      	mov	r3, r0
 81075fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81075fe:	e003      	b.n	8107608 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107600:	2301      	movs	r3, #1
 8107602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810760c:	2b00      	cmp	r3, #0
 810760e:	d10d      	bne.n	810762c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107610:	4b05      	ldr	r3, [pc, #20]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810761e:	4a02      	ldr	r2, [pc, #8]	; (8107628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107620:	430b      	orrs	r3, r1
 8107622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8107624:	e006      	b.n	8107634 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107626:	bf00      	nop
 8107628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810762c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810763c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8107640:	66bb      	str	r3, [r7, #104]	; 0x68
 8107642:	2300      	movs	r3, #0
 8107644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107646:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810764a:	460b      	mov	r3, r1
 810764c:	4313      	orrs	r3, r2
 810764e:	d00c      	beq.n	810766a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107654:	3328      	adds	r3, #40	; 0x28
 8107656:	2102      	movs	r1, #2
 8107658:	4618      	mov	r0, r3
 810765a:	f000 fa65 	bl	8107b28 <RCCEx_PLL3_Config>
 810765e:	4603      	mov	r3, r0
 8107660:	2b00      	cmp	r3, #0
 8107662:	d002      	beq.n	810766a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107664:	2301      	movs	r3, #1
 8107666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107672:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8107676:	663b      	str	r3, [r7, #96]	; 0x60
 8107678:	2300      	movs	r3, #0
 810767a:	667b      	str	r3, [r7, #100]	; 0x64
 810767c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8107680:	460b      	mov	r3, r1
 8107682:	4313      	orrs	r3, r2
 8107684:	d038      	beq.n	81076f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810768a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810768e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107692:	d018      	beq.n	81076c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107698:	d811      	bhi.n	81076be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810769e:	d014      	beq.n	81076ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81076a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81076a4:	d80b      	bhi.n	81076be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	d011      	beq.n	81076ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81076ae:	d106      	bne.n	81076be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81076b0:	4bc3      	ldr	r3, [pc, #780]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076b4:	4ac2      	ldr	r2, [pc, #776]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81076ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81076bc:	e008      	b.n	81076d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81076be:	2301      	movs	r3, #1
 81076c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81076c4:	e004      	b.n	81076d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81076c6:	bf00      	nop
 81076c8:	e002      	b.n	81076d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81076ca:	bf00      	nop
 81076cc:	e000      	b.n	81076d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81076ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81076d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d10b      	bne.n	81076f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81076d8:	4bb9      	ldr	r3, [pc, #740]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81076e8:	4ab5      	ldr	r2, [pc, #724]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076ea:	430b      	orrs	r3, r1
 81076ec:	6553      	str	r3, [r2, #84]	; 0x54
 81076ee:	e003      	b.n	81076f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81076f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107700:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8107704:	65bb      	str	r3, [r7, #88]	; 0x58
 8107706:	2300      	movs	r3, #0
 8107708:	65fb      	str	r3, [r7, #92]	; 0x5c
 810770a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810770e:	460b      	mov	r3, r1
 8107710:	4313      	orrs	r3, r2
 8107712:	d009      	beq.n	8107728 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107714:	4baa      	ldr	r3, [pc, #680]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107722:	4aa7      	ldr	r2, [pc, #668]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107724:	430b      	orrs	r3, r1
 8107726:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107730:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8107734:	653b      	str	r3, [r7, #80]	; 0x50
 8107736:	2300      	movs	r3, #0
 8107738:	657b      	str	r3, [r7, #84]	; 0x54
 810773a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 810773e:	460b      	mov	r3, r1
 8107740:	4313      	orrs	r3, r2
 8107742:	d00a      	beq.n	810775a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107744:	4b9e      	ldr	r3, [pc, #632]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107746:	691b      	ldr	r3, [r3, #16]
 8107748:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 810774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107750:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8107754:	4a9a      	ldr	r2, [pc, #616]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107756:	430b      	orrs	r3, r1
 8107758:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107762:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8107766:	64bb      	str	r3, [r7, #72]	; 0x48
 8107768:	2300      	movs	r3, #0
 810776a:	64fb      	str	r3, [r7, #76]	; 0x4c
 810776c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8107770:	460b      	mov	r3, r1
 8107772:	4313      	orrs	r3, r2
 8107774:	d009      	beq.n	810778a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107776:	4b92      	ldr	r3, [pc, #584]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810777a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 810777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107784:	4a8e      	ldr	r2, [pc, #568]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107786:	430b      	orrs	r3, r1
 8107788:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107792:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8107796:	643b      	str	r3, [r7, #64]	; 0x40
 8107798:	2300      	movs	r3, #0
 810779a:	647b      	str	r3, [r7, #68]	; 0x44
 810779c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81077a0:	460b      	mov	r3, r1
 81077a2:	4313      	orrs	r3, r2
 81077a4:	d00e      	beq.n	81077c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81077a6:	4b86      	ldr	r3, [pc, #536]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077a8:	691b      	ldr	r3, [r3, #16]
 81077aa:	4a85      	ldr	r2, [pc, #532]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81077b0:	6113      	str	r3, [r2, #16]
 81077b2:	4b83      	ldr	r3, [pc, #524]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077b4:	6919      	ldr	r1, [r3, #16]
 81077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81077be:	4a80      	ldr	r2, [pc, #512]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077c0:	430b      	orrs	r3, r1
 81077c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077cc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 81077d0:	63bb      	str	r3, [r7, #56]	; 0x38
 81077d2:	2300      	movs	r3, #0
 81077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81077d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 81077da:	460b      	mov	r3, r1
 81077dc:	4313      	orrs	r3, r2
 81077de:	d009      	beq.n	81077f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81077e0:	4b77      	ldr	r3, [pc, #476]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81077e4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077ee:	4a74      	ldr	r2, [pc, #464]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077f0:	430b      	orrs	r3, r1
 81077f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077fc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8107800:	633b      	str	r3, [r7, #48]	; 0x30
 8107802:	2300      	movs	r3, #0
 8107804:	637b      	str	r3, [r7, #52]	; 0x34
 8107806:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810780a:	460b      	mov	r3, r1
 810780c:	4313      	orrs	r3, r2
 810780e:	d00a      	beq.n	8107826 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107810:	4b6b      	ldr	r3, [pc, #428]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107814:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8107818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810781c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107820:	4a67      	ldr	r2, [pc, #412]	; (81079c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107822:	430b      	orrs	r3, r1
 8107824:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810782e:	2100      	movs	r1, #0
 8107830:	62b9      	str	r1, [r7, #40]	; 0x28
 8107832:	f003 0301 	and.w	r3, r3, #1
 8107836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8107838:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 810783c:	460b      	mov	r3, r1
 810783e:	4313      	orrs	r3, r2
 8107840:	d011      	beq.n	8107866 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107846:	3308      	adds	r3, #8
 8107848:	2100      	movs	r1, #0
 810784a:	4618      	mov	r0, r3
 810784c:	f000 f8ba 	bl	81079c4 <RCCEx_PLL2_Config>
 8107850:	4603      	mov	r3, r0
 8107852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810785a:	2b00      	cmp	r3, #0
 810785c:	d003      	beq.n	8107866 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810785e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810786e:	2100      	movs	r1, #0
 8107870:	6239      	str	r1, [r7, #32]
 8107872:	f003 0302 	and.w	r3, r3, #2
 8107876:	627b      	str	r3, [r7, #36]	; 0x24
 8107878:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810787c:	460b      	mov	r3, r1
 810787e:	4313      	orrs	r3, r2
 8107880:	d011      	beq.n	81078a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107886:	3308      	adds	r3, #8
 8107888:	2101      	movs	r1, #1
 810788a:	4618      	mov	r0, r3
 810788c:	f000 f89a 	bl	81079c4 <RCCEx_PLL2_Config>
 8107890:	4603      	mov	r3, r0
 8107892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810789a:	2b00      	cmp	r3, #0
 810789c:	d003      	beq.n	81078a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810789e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81078a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078ae:	2100      	movs	r1, #0
 81078b0:	61b9      	str	r1, [r7, #24]
 81078b2:	f003 0304 	and.w	r3, r3, #4
 81078b6:	61fb      	str	r3, [r7, #28]
 81078b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81078bc:	460b      	mov	r3, r1
 81078be:	4313      	orrs	r3, r2
 81078c0:	d011      	beq.n	81078e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81078c6:	3308      	adds	r3, #8
 81078c8:	2102      	movs	r1, #2
 81078ca:	4618      	mov	r0, r3
 81078cc:	f000 f87a 	bl	81079c4 <RCCEx_PLL2_Config>
 81078d0:	4603      	mov	r3, r0
 81078d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81078d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81078da:	2b00      	cmp	r3, #0
 81078dc:	d003      	beq.n	81078e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81078e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078ee:	2100      	movs	r1, #0
 81078f0:	6139      	str	r1, [r7, #16]
 81078f2:	f003 0308 	and.w	r3, r3, #8
 81078f6:	617b      	str	r3, [r7, #20]
 81078f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81078fc:	460b      	mov	r3, r1
 81078fe:	4313      	orrs	r3, r2
 8107900:	d011      	beq.n	8107926 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107906:	3328      	adds	r3, #40	; 0x28
 8107908:	2100      	movs	r1, #0
 810790a:	4618      	mov	r0, r3
 810790c:	f000 f90c 	bl	8107b28 <RCCEx_PLL3_Config>
 8107910:	4603      	mov	r3, r0
 8107912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8107916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810791a:	2b00      	cmp	r3, #0
 810791c:	d003      	beq.n	8107926 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810791e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810792e:	2100      	movs	r1, #0
 8107930:	60b9      	str	r1, [r7, #8]
 8107932:	f003 0310 	and.w	r3, r3, #16
 8107936:	60fb      	str	r3, [r7, #12]
 8107938:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810793c:	460b      	mov	r3, r1
 810793e:	4313      	orrs	r3, r2
 8107940:	d011      	beq.n	8107966 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107946:	3328      	adds	r3, #40	; 0x28
 8107948:	2101      	movs	r1, #1
 810794a:	4618      	mov	r0, r3
 810794c:	f000 f8ec 	bl	8107b28 <RCCEx_PLL3_Config>
 8107950:	4603      	mov	r3, r0
 8107952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810795a:	2b00      	cmp	r3, #0
 810795c:	d003      	beq.n	8107966 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810795e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810796e:	2100      	movs	r1, #0
 8107970:	6039      	str	r1, [r7, #0]
 8107972:	f003 0320 	and.w	r3, r3, #32
 8107976:	607b      	str	r3, [r7, #4]
 8107978:	e9d7 1200 	ldrd	r1, r2, [r7]
 810797c:	460b      	mov	r3, r1
 810797e:	4313      	orrs	r3, r2
 8107980:	d011      	beq.n	81079a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107986:	3328      	adds	r3, #40	; 0x28
 8107988:	2102      	movs	r1, #2
 810798a:	4618      	mov	r0, r3
 810798c:	f000 f8cc 	bl	8107b28 <RCCEx_PLL3_Config>
 8107990:	4603      	mov	r3, r0
 8107992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810799a:	2b00      	cmp	r3, #0
 810799c:	d003      	beq.n	81079a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810799e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81079a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81079a6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81079aa:	2b00      	cmp	r3, #0
 81079ac:	d101      	bne.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81079ae:	2300      	movs	r3, #0
 81079b0:	e000      	b.n	81079b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81079b2:	2301      	movs	r3, #1
}
 81079b4:	4618      	mov	r0, r3
 81079b6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81079ba:	46bd      	mov	sp, r7
 81079bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81079c0:	58024400 	.word	0x58024400

081079c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81079c4:	b580      	push	{r7, lr}
 81079c6:	b084      	sub	sp, #16
 81079c8:	af00      	add	r7, sp, #0
 81079ca:	6078      	str	r0, [r7, #4]
 81079cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81079ce:	2300      	movs	r3, #0
 81079d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81079d2:	4b53      	ldr	r3, [pc, #332]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 81079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079d6:	f003 0303 	and.w	r3, r3, #3
 81079da:	2b03      	cmp	r3, #3
 81079dc:	d101      	bne.n	81079e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81079de:	2301      	movs	r3, #1
 81079e0:	e099      	b.n	8107b16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81079e2:	4b4f      	ldr	r3, [pc, #316]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	4a4e      	ldr	r2, [pc, #312]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 81079e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81079ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81079ee:	f7fb fc75 	bl	81032dc <HAL_GetTick>
 81079f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81079f4:	e008      	b.n	8107a08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81079f6:	f7fb fc71 	bl	81032dc <HAL_GetTick>
 81079fa:	4602      	mov	r2, r0
 81079fc:	68bb      	ldr	r3, [r7, #8]
 81079fe:	1ad3      	subs	r3, r2, r3
 8107a00:	2b02      	cmp	r3, #2
 8107a02:	d901      	bls.n	8107a08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107a04:	2303      	movs	r3, #3
 8107a06:	e086      	b.n	8107b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a08:	4b45      	ldr	r3, [pc, #276]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107a10:	2b00      	cmp	r3, #0
 8107a12:	d1f0      	bne.n	81079f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107a14:	4b42      	ldr	r3, [pc, #264]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	031b      	lsls	r3, r3, #12
 8107a22:	493f      	ldr	r1, [pc, #252]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a24:	4313      	orrs	r3, r2
 8107a26:	628b      	str	r3, [r1, #40]	; 0x28
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	685b      	ldr	r3, [r3, #4]
 8107a2c:	3b01      	subs	r3, #1
 8107a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	689b      	ldr	r3, [r3, #8]
 8107a36:	3b01      	subs	r3, #1
 8107a38:	025b      	lsls	r3, r3, #9
 8107a3a:	b29b      	uxth	r3, r3
 8107a3c:	431a      	orrs	r2, r3
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	68db      	ldr	r3, [r3, #12]
 8107a42:	3b01      	subs	r3, #1
 8107a44:	041b      	lsls	r3, r3, #16
 8107a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107a4a:	431a      	orrs	r2, r3
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	691b      	ldr	r3, [r3, #16]
 8107a50:	3b01      	subs	r3, #1
 8107a52:	061b      	lsls	r3, r3, #24
 8107a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107a58:	4931      	ldr	r1, [pc, #196]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a5a:	4313      	orrs	r3, r2
 8107a5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107a5e:	4b30      	ldr	r3, [pc, #192]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	695b      	ldr	r3, [r3, #20]
 8107a6a:	492d      	ldr	r1, [pc, #180]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a6c:	4313      	orrs	r3, r2
 8107a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107a70:	4b2b      	ldr	r3, [pc, #172]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a74:	f023 0220 	bic.w	r2, r3, #32
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	699b      	ldr	r3, [r3, #24]
 8107a7c:	4928      	ldr	r1, [pc, #160]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a7e:	4313      	orrs	r3, r2
 8107a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107a82:	4b27      	ldr	r3, [pc, #156]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a86:	4a26      	ldr	r2, [pc, #152]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a88:	f023 0310 	bic.w	r3, r3, #16
 8107a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107a8e:	4b24      	ldr	r3, [pc, #144]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107a92:	4b24      	ldr	r3, [pc, #144]	; (8107b24 <RCCEx_PLL2_Config+0x160>)
 8107a94:	4013      	ands	r3, r2
 8107a96:	687a      	ldr	r2, [r7, #4]
 8107a98:	69d2      	ldr	r2, [r2, #28]
 8107a9a:	00d2      	lsls	r2, r2, #3
 8107a9c:	4920      	ldr	r1, [pc, #128]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107a9e:	4313      	orrs	r3, r2
 8107aa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107aa2:	4b1f      	ldr	r3, [pc, #124]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aa6:	4a1e      	ldr	r2, [pc, #120]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107aa8:	f043 0310 	orr.w	r3, r3, #16
 8107aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107aae:	683b      	ldr	r3, [r7, #0]
 8107ab0:	2b00      	cmp	r3, #0
 8107ab2:	d106      	bne.n	8107ac2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107ab4:	4b1a      	ldr	r3, [pc, #104]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ab8:	4a19      	ldr	r2, [pc, #100]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107ac0:	e00f      	b.n	8107ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107ac2:	683b      	ldr	r3, [r7, #0]
 8107ac4:	2b01      	cmp	r3, #1
 8107ac6:	d106      	bne.n	8107ad6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107ac8:	4b15      	ldr	r3, [pc, #84]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107acc:	4a14      	ldr	r2, [pc, #80]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107ad4:	e005      	b.n	8107ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107ad6:	4b12      	ldr	r3, [pc, #72]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ada:	4a11      	ldr	r2, [pc, #68]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107ae2:	4b0f      	ldr	r3, [pc, #60]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	4a0e      	ldr	r2, [pc, #56]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107aee:	f7fb fbf5 	bl	81032dc <HAL_GetTick>
 8107af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107af4:	e008      	b.n	8107b08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107af6:	f7fb fbf1 	bl	81032dc <HAL_GetTick>
 8107afa:	4602      	mov	r2, r0
 8107afc:	68bb      	ldr	r3, [r7, #8]
 8107afe:	1ad3      	subs	r3, r2, r3
 8107b00:	2b02      	cmp	r3, #2
 8107b02:	d901      	bls.n	8107b08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8107b04:	2303      	movs	r3, #3
 8107b06:	e006      	b.n	8107b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b08:	4b05      	ldr	r3, [pc, #20]	; (8107b20 <RCCEx_PLL2_Config+0x15c>)
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107b10:	2b00      	cmp	r3, #0
 8107b12:	d0f0      	beq.n	8107af6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8107b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8107b16:	4618      	mov	r0, r3
 8107b18:	3710      	adds	r7, #16
 8107b1a:	46bd      	mov	sp, r7
 8107b1c:	bd80      	pop	{r7, pc}
 8107b1e:	bf00      	nop
 8107b20:	58024400 	.word	0x58024400
 8107b24:	ffff0007 	.word	0xffff0007

08107b28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107b28:	b580      	push	{r7, lr}
 8107b2a:	b084      	sub	sp, #16
 8107b2c:	af00      	add	r7, sp, #0
 8107b2e:	6078      	str	r0, [r7, #4]
 8107b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b32:	2300      	movs	r3, #0
 8107b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b36:	4b53      	ldr	r3, [pc, #332]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b3a:	f003 0303 	and.w	r3, r3, #3
 8107b3e:	2b03      	cmp	r3, #3
 8107b40:	d101      	bne.n	8107b46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107b42:	2301      	movs	r3, #1
 8107b44:	e099      	b.n	8107c7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107b46:	4b4f      	ldr	r3, [pc, #316]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	4a4e      	ldr	r2, [pc, #312]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b52:	f7fb fbc3 	bl	81032dc <HAL_GetTick>
 8107b56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107b58:	e008      	b.n	8107b6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107b5a:	f7fb fbbf 	bl	81032dc <HAL_GetTick>
 8107b5e:	4602      	mov	r2, r0
 8107b60:	68bb      	ldr	r3, [r7, #8]
 8107b62:	1ad3      	subs	r3, r2, r3
 8107b64:	2b02      	cmp	r3, #2
 8107b66:	d901      	bls.n	8107b6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107b68:	2303      	movs	r3, #3
 8107b6a:	e086      	b.n	8107c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107b6c:	4b45      	ldr	r3, [pc, #276]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b6e:	681b      	ldr	r3, [r3, #0]
 8107b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107b74:	2b00      	cmp	r3, #0
 8107b76:	d1f0      	bne.n	8107b5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107b78:	4b42      	ldr	r3, [pc, #264]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	681b      	ldr	r3, [r3, #0]
 8107b84:	051b      	lsls	r3, r3, #20
 8107b86:	493f      	ldr	r1, [pc, #252]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107b88:	4313      	orrs	r3, r2
 8107b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8107b8c:	687b      	ldr	r3, [r7, #4]
 8107b8e:	685b      	ldr	r3, [r3, #4]
 8107b90:	3b01      	subs	r3, #1
 8107b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	689b      	ldr	r3, [r3, #8]
 8107b9a:	3b01      	subs	r3, #1
 8107b9c:	025b      	lsls	r3, r3, #9
 8107b9e:	b29b      	uxth	r3, r3
 8107ba0:	431a      	orrs	r2, r3
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	68db      	ldr	r3, [r3, #12]
 8107ba6:	3b01      	subs	r3, #1
 8107ba8:	041b      	lsls	r3, r3, #16
 8107baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107bae:	431a      	orrs	r2, r3
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	691b      	ldr	r3, [r3, #16]
 8107bb4:	3b01      	subs	r3, #1
 8107bb6:	061b      	lsls	r3, r3, #24
 8107bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107bbc:	4931      	ldr	r1, [pc, #196]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bbe:	4313      	orrs	r3, r2
 8107bc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107bc2:	4b30      	ldr	r3, [pc, #192]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	695b      	ldr	r3, [r3, #20]
 8107bce:	492d      	ldr	r1, [pc, #180]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bd0:	4313      	orrs	r3, r2
 8107bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107bd4:	4b2b      	ldr	r3, [pc, #172]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	699b      	ldr	r3, [r3, #24]
 8107be0:	4928      	ldr	r1, [pc, #160]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107be2:	4313      	orrs	r3, r2
 8107be4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107be6:	4b27      	ldr	r3, [pc, #156]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bea:	4a26      	ldr	r2, [pc, #152]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107bf2:	4b24      	ldr	r3, [pc, #144]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107bf6:	4b24      	ldr	r3, [pc, #144]	; (8107c88 <RCCEx_PLL3_Config+0x160>)
 8107bf8:	4013      	ands	r3, r2
 8107bfa:	687a      	ldr	r2, [r7, #4]
 8107bfc:	69d2      	ldr	r2, [r2, #28]
 8107bfe:	00d2      	lsls	r2, r2, #3
 8107c00:	4920      	ldr	r1, [pc, #128]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c02:	4313      	orrs	r3, r2
 8107c04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107c06:	4b1f      	ldr	r3, [pc, #124]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c0a:	4a1e      	ldr	r2, [pc, #120]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107c12:	683b      	ldr	r3, [r7, #0]
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	d106      	bne.n	8107c26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107c18:	4b1a      	ldr	r3, [pc, #104]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c1c:	4a19      	ldr	r2, [pc, #100]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c24:	e00f      	b.n	8107c46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107c26:	683b      	ldr	r3, [r7, #0]
 8107c28:	2b01      	cmp	r3, #1
 8107c2a:	d106      	bne.n	8107c3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107c2c:	4b15      	ldr	r3, [pc, #84]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c30:	4a14      	ldr	r2, [pc, #80]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c38:	e005      	b.n	8107c46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107c3a:	4b12      	ldr	r3, [pc, #72]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c3e:	4a11      	ldr	r2, [pc, #68]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107c44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107c46:	4b0f      	ldr	r3, [pc, #60]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	4a0e      	ldr	r2, [pc, #56]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c52:	f7fb fb43 	bl	81032dc <HAL_GetTick>
 8107c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107c58:	e008      	b.n	8107c6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107c5a:	f7fb fb3f 	bl	81032dc <HAL_GetTick>
 8107c5e:	4602      	mov	r2, r0
 8107c60:	68bb      	ldr	r3, [r7, #8]
 8107c62:	1ad3      	subs	r3, r2, r3
 8107c64:	2b02      	cmp	r3, #2
 8107c66:	d901      	bls.n	8107c6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8107c68:	2303      	movs	r3, #3
 8107c6a:	e006      	b.n	8107c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107c6c:	4b05      	ldr	r3, [pc, #20]	; (8107c84 <RCCEx_PLL3_Config+0x15c>)
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c74:	2b00      	cmp	r3, #0
 8107c76:	d0f0      	beq.n	8107c5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8107c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8107c7a:	4618      	mov	r0, r3
 8107c7c:	3710      	adds	r7, #16
 8107c7e:	46bd      	mov	sp, r7
 8107c80:	bd80      	pop	{r7, pc}
 8107c82:	bf00      	nop
 8107c84:	58024400 	.word	0x58024400
 8107c88:	ffff0007 	.word	0xffff0007

08107c8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8107c8c:	b580      	push	{r7, lr}
 8107c8e:	b082      	sub	sp, #8
 8107c90:	af00      	add	r7, sp, #0
 8107c92:	6078      	str	r0, [r7, #4]
 8107c94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	2b00      	cmp	r3, #0
 8107c9a:	d101      	bne.n	8107ca0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8107c9c:	2301      	movs	r3, #1
 8107c9e:	e02b      	b.n	8107cf8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8107ca6:	b2db      	uxtb	r3, r3
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d106      	bne.n	8107cba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	2200      	movs	r2, #0
 8107cb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8107cb4:	6878      	ldr	r0, [r7, #4]
 8107cb6:	f000 f825 	bl	8107d04 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	2202      	movs	r2, #2
 8107cbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	681a      	ldr	r2, [r3, #0]
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	3304      	adds	r3, #4
 8107cca:	4619      	mov	r1, r3
 8107ccc:	4610      	mov	r0, r2
 8107cce:	f000 f881 	bl	8107dd4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6818      	ldr	r0, [r3, #0]
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	685b      	ldr	r3, [r3, #4]
 8107cda:	461a      	mov	r2, r3
 8107cdc:	6839      	ldr	r1, [r7, #0]
 8107cde:	f000 f8d5 	bl	8107e8c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8107ce2:	4b07      	ldr	r3, [pc, #28]	; (8107d00 <HAL_SDRAM_Init+0x74>)
 8107ce4:	681b      	ldr	r3, [r3, #0]
 8107ce6:	4a06      	ldr	r2, [pc, #24]	; (8107d00 <HAL_SDRAM_Init+0x74>)
 8107ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8107cec:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8107cee:	687b      	ldr	r3, [r7, #4]
 8107cf0:	2201      	movs	r2, #1
 8107cf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8107cf6:	2300      	movs	r3, #0
}
 8107cf8:	4618      	mov	r0, r3
 8107cfa:	3708      	adds	r7, #8
 8107cfc:	46bd      	mov	sp, r7
 8107cfe:	bd80      	pop	{r7, pc}
 8107d00:	52004000 	.word	0x52004000

08107d04 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8107d04:	b480      	push	{r7}
 8107d06:	b083      	sub	sp, #12
 8107d08:	af00      	add	r7, sp, #0
 8107d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8107d0c:	bf00      	nop
 8107d0e:	370c      	adds	r7, #12
 8107d10:	46bd      	mov	sp, r7
 8107d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d16:	4770      	bx	lr

08107d18 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8107d18:	b580      	push	{r7, lr}
 8107d1a:	b086      	sub	sp, #24
 8107d1c:	af00      	add	r7, sp, #0
 8107d1e:	60f8      	str	r0, [r7, #12]
 8107d20:	60b9      	str	r1, [r7, #8]
 8107d22:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8107d24:	68fb      	ldr	r3, [r7, #12]
 8107d26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8107d2a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8107d2c:	7dfb      	ldrb	r3, [r7, #23]
 8107d2e:	2b02      	cmp	r3, #2
 8107d30:	d101      	bne.n	8107d36 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8107d32:	2302      	movs	r3, #2
 8107d34:	e021      	b.n	8107d7a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8107d36:	7dfb      	ldrb	r3, [r7, #23]
 8107d38:	2b01      	cmp	r3, #1
 8107d3a:	d002      	beq.n	8107d42 <HAL_SDRAM_SendCommand+0x2a>
 8107d3c:	7dfb      	ldrb	r3, [r7, #23]
 8107d3e:	2b05      	cmp	r3, #5
 8107d40:	d118      	bne.n	8107d74 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	2202      	movs	r2, #2
 8107d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8107d4a:	68fb      	ldr	r3, [r7, #12]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	687a      	ldr	r2, [r7, #4]
 8107d50:	68b9      	ldr	r1, [r7, #8]
 8107d52:	4618      	mov	r0, r3
 8107d54:	f000 f904 	bl	8107f60 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8107d58:	68bb      	ldr	r3, [r7, #8]
 8107d5a:	681b      	ldr	r3, [r3, #0]
 8107d5c:	2b02      	cmp	r3, #2
 8107d5e:	d104      	bne.n	8107d6a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8107d60:	68fb      	ldr	r3, [r7, #12]
 8107d62:	2205      	movs	r2, #5
 8107d64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8107d68:	e006      	b.n	8107d78 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8107d6a:	68fb      	ldr	r3, [r7, #12]
 8107d6c:	2201      	movs	r2, #1
 8107d6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8107d72:	e001      	b.n	8107d78 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8107d74:	2301      	movs	r3, #1
 8107d76:	e000      	b.n	8107d7a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8107d78:	2300      	movs	r3, #0
}
 8107d7a:	4618      	mov	r0, r3
 8107d7c:	3718      	adds	r7, #24
 8107d7e:	46bd      	mov	sp, r7
 8107d80:	bd80      	pop	{r7, pc}

08107d82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8107d82:	b580      	push	{r7, lr}
 8107d84:	b082      	sub	sp, #8
 8107d86:	af00      	add	r7, sp, #0
 8107d88:	6078      	str	r0, [r7, #4]
 8107d8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8107d92:	b2db      	uxtb	r3, r3
 8107d94:	2b02      	cmp	r3, #2
 8107d96:	d101      	bne.n	8107d9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8107d98:	2302      	movs	r3, #2
 8107d9a:	e016      	b.n	8107dca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8107da2:	b2db      	uxtb	r3, r3
 8107da4:	2b01      	cmp	r3, #1
 8107da6:	d10f      	bne.n	8107dc8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	2202      	movs	r2, #2
 8107dac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8107db0:	687b      	ldr	r3, [r7, #4]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	6839      	ldr	r1, [r7, #0]
 8107db6:	4618      	mov	r0, r3
 8107db8:	f000 f8f6 	bl	8107fa8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	2201      	movs	r2, #1
 8107dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8107dc4:	2300      	movs	r3, #0
 8107dc6:	e000      	b.n	8107dca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8107dc8:	2301      	movs	r3, #1
}
 8107dca:	4618      	mov	r0, r3
 8107dcc:	3708      	adds	r7, #8
 8107dce:	46bd      	mov	sp, r7
 8107dd0:	bd80      	pop	{r7, pc}
	...

08107dd4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8107dd4:	b480      	push	{r7}
 8107dd6:	b083      	sub	sp, #12
 8107dd8:	af00      	add	r7, sp, #0
 8107dda:	6078      	str	r0, [r7, #4]
 8107ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8107dde:	683b      	ldr	r3, [r7, #0]
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	2b00      	cmp	r3, #0
 8107de4:	d121      	bne.n	8107e2a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8107de6:	687b      	ldr	r3, [r7, #4]
 8107de8:	681a      	ldr	r2, [r3, #0]
 8107dea:	4b27      	ldr	r3, [pc, #156]	; (8107e88 <FMC_SDRAM_Init+0xb4>)
 8107dec:	4013      	ands	r3, r2
 8107dee:	683a      	ldr	r2, [r7, #0]
 8107df0:	6851      	ldr	r1, [r2, #4]
 8107df2:	683a      	ldr	r2, [r7, #0]
 8107df4:	6892      	ldr	r2, [r2, #8]
 8107df6:	4311      	orrs	r1, r2
 8107df8:	683a      	ldr	r2, [r7, #0]
 8107dfa:	68d2      	ldr	r2, [r2, #12]
 8107dfc:	4311      	orrs	r1, r2
 8107dfe:	683a      	ldr	r2, [r7, #0]
 8107e00:	6912      	ldr	r2, [r2, #16]
 8107e02:	4311      	orrs	r1, r2
 8107e04:	683a      	ldr	r2, [r7, #0]
 8107e06:	6952      	ldr	r2, [r2, #20]
 8107e08:	4311      	orrs	r1, r2
 8107e0a:	683a      	ldr	r2, [r7, #0]
 8107e0c:	6992      	ldr	r2, [r2, #24]
 8107e0e:	4311      	orrs	r1, r2
 8107e10:	683a      	ldr	r2, [r7, #0]
 8107e12:	69d2      	ldr	r2, [r2, #28]
 8107e14:	4311      	orrs	r1, r2
 8107e16:	683a      	ldr	r2, [r7, #0]
 8107e18:	6a12      	ldr	r2, [r2, #32]
 8107e1a:	4311      	orrs	r1, r2
 8107e1c:	683a      	ldr	r2, [r7, #0]
 8107e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8107e20:	430a      	orrs	r2, r1
 8107e22:	431a      	orrs	r2, r3
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	601a      	str	r2, [r3, #0]
 8107e28:	e026      	b.n	8107e78 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8107e2a:	687b      	ldr	r3, [r7, #4]
 8107e2c:	681b      	ldr	r3, [r3, #0]
 8107e2e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8107e32:	683b      	ldr	r3, [r7, #0]
 8107e34:	69d9      	ldr	r1, [r3, #28]
 8107e36:	683b      	ldr	r3, [r7, #0]
 8107e38:	6a1b      	ldr	r3, [r3, #32]
 8107e3a:	4319      	orrs	r1, r3
 8107e3c:	683b      	ldr	r3, [r7, #0]
 8107e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e40:	430b      	orrs	r3, r1
 8107e42:	431a      	orrs	r2, r3
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	685a      	ldr	r2, [r3, #4]
 8107e4c:	4b0e      	ldr	r3, [pc, #56]	; (8107e88 <FMC_SDRAM_Init+0xb4>)
 8107e4e:	4013      	ands	r3, r2
 8107e50:	683a      	ldr	r2, [r7, #0]
 8107e52:	6851      	ldr	r1, [r2, #4]
 8107e54:	683a      	ldr	r2, [r7, #0]
 8107e56:	6892      	ldr	r2, [r2, #8]
 8107e58:	4311      	orrs	r1, r2
 8107e5a:	683a      	ldr	r2, [r7, #0]
 8107e5c:	68d2      	ldr	r2, [r2, #12]
 8107e5e:	4311      	orrs	r1, r2
 8107e60:	683a      	ldr	r2, [r7, #0]
 8107e62:	6912      	ldr	r2, [r2, #16]
 8107e64:	4311      	orrs	r1, r2
 8107e66:	683a      	ldr	r2, [r7, #0]
 8107e68:	6952      	ldr	r2, [r2, #20]
 8107e6a:	4311      	orrs	r1, r2
 8107e6c:	683a      	ldr	r2, [r7, #0]
 8107e6e:	6992      	ldr	r2, [r2, #24]
 8107e70:	430a      	orrs	r2, r1
 8107e72:	431a      	orrs	r2, r3
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8107e78:	2300      	movs	r3, #0
}
 8107e7a:	4618      	mov	r0, r3
 8107e7c:	370c      	adds	r7, #12
 8107e7e:	46bd      	mov	sp, r7
 8107e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e84:	4770      	bx	lr
 8107e86:	bf00      	nop
 8107e88:	ffff8000 	.word	0xffff8000

08107e8c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8107e8c:	b480      	push	{r7}
 8107e8e:	b085      	sub	sp, #20
 8107e90:	af00      	add	r7, sp, #0
 8107e92:	60f8      	str	r0, [r7, #12]
 8107e94:	60b9      	str	r1, [r7, #8]
 8107e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	2b00      	cmp	r3, #0
 8107e9c:	d128      	bne.n	8107ef0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8107e9e:	68fb      	ldr	r3, [r7, #12]
 8107ea0:	689b      	ldr	r3, [r3, #8]
 8107ea2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8107ea6:	68bb      	ldr	r3, [r7, #8]
 8107ea8:	681b      	ldr	r3, [r3, #0]
 8107eaa:	1e59      	subs	r1, r3, #1
 8107eac:	68bb      	ldr	r3, [r7, #8]
 8107eae:	685b      	ldr	r3, [r3, #4]
 8107eb0:	3b01      	subs	r3, #1
 8107eb2:	011b      	lsls	r3, r3, #4
 8107eb4:	4319      	orrs	r1, r3
 8107eb6:	68bb      	ldr	r3, [r7, #8]
 8107eb8:	689b      	ldr	r3, [r3, #8]
 8107eba:	3b01      	subs	r3, #1
 8107ebc:	021b      	lsls	r3, r3, #8
 8107ebe:	4319      	orrs	r1, r3
 8107ec0:	68bb      	ldr	r3, [r7, #8]
 8107ec2:	68db      	ldr	r3, [r3, #12]
 8107ec4:	3b01      	subs	r3, #1
 8107ec6:	031b      	lsls	r3, r3, #12
 8107ec8:	4319      	orrs	r1, r3
 8107eca:	68bb      	ldr	r3, [r7, #8]
 8107ecc:	691b      	ldr	r3, [r3, #16]
 8107ece:	3b01      	subs	r3, #1
 8107ed0:	041b      	lsls	r3, r3, #16
 8107ed2:	4319      	orrs	r1, r3
 8107ed4:	68bb      	ldr	r3, [r7, #8]
 8107ed6:	695b      	ldr	r3, [r3, #20]
 8107ed8:	3b01      	subs	r3, #1
 8107eda:	051b      	lsls	r3, r3, #20
 8107edc:	4319      	orrs	r1, r3
 8107ede:	68bb      	ldr	r3, [r7, #8]
 8107ee0:	699b      	ldr	r3, [r3, #24]
 8107ee2:	3b01      	subs	r3, #1
 8107ee4:	061b      	lsls	r3, r3, #24
 8107ee6:	430b      	orrs	r3, r1
 8107ee8:	431a      	orrs	r2, r3
 8107eea:	68fb      	ldr	r3, [r7, #12]
 8107eec:	609a      	str	r2, [r3, #8]
 8107eee:	e02d      	b.n	8107f4c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	689a      	ldr	r2, [r3, #8]
 8107ef4:	4b19      	ldr	r3, [pc, #100]	; (8107f5c <FMC_SDRAM_Timing_Init+0xd0>)
 8107ef6:	4013      	ands	r3, r2
 8107ef8:	68ba      	ldr	r2, [r7, #8]
 8107efa:	68d2      	ldr	r2, [r2, #12]
 8107efc:	3a01      	subs	r2, #1
 8107efe:	0311      	lsls	r1, r2, #12
 8107f00:	68ba      	ldr	r2, [r7, #8]
 8107f02:	6952      	ldr	r2, [r2, #20]
 8107f04:	3a01      	subs	r2, #1
 8107f06:	0512      	lsls	r2, r2, #20
 8107f08:	430a      	orrs	r2, r1
 8107f0a:	431a      	orrs	r2, r3
 8107f0c:	68fb      	ldr	r3, [r7, #12]
 8107f0e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8107f10:	68fb      	ldr	r3, [r7, #12]
 8107f12:	68db      	ldr	r3, [r3, #12]
 8107f14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8107f18:	68bb      	ldr	r3, [r7, #8]
 8107f1a:	681b      	ldr	r3, [r3, #0]
 8107f1c:	1e59      	subs	r1, r3, #1
 8107f1e:	68bb      	ldr	r3, [r7, #8]
 8107f20:	685b      	ldr	r3, [r3, #4]
 8107f22:	3b01      	subs	r3, #1
 8107f24:	011b      	lsls	r3, r3, #4
 8107f26:	4319      	orrs	r1, r3
 8107f28:	68bb      	ldr	r3, [r7, #8]
 8107f2a:	689b      	ldr	r3, [r3, #8]
 8107f2c:	3b01      	subs	r3, #1
 8107f2e:	021b      	lsls	r3, r3, #8
 8107f30:	4319      	orrs	r1, r3
 8107f32:	68bb      	ldr	r3, [r7, #8]
 8107f34:	691b      	ldr	r3, [r3, #16]
 8107f36:	3b01      	subs	r3, #1
 8107f38:	041b      	lsls	r3, r3, #16
 8107f3a:	4319      	orrs	r1, r3
 8107f3c:	68bb      	ldr	r3, [r7, #8]
 8107f3e:	699b      	ldr	r3, [r3, #24]
 8107f40:	3b01      	subs	r3, #1
 8107f42:	061b      	lsls	r3, r3, #24
 8107f44:	430b      	orrs	r3, r1
 8107f46:	431a      	orrs	r2, r3
 8107f48:	68fb      	ldr	r3, [r7, #12]
 8107f4a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8107f4c:	2300      	movs	r3, #0
}
 8107f4e:	4618      	mov	r0, r3
 8107f50:	3714      	adds	r7, #20
 8107f52:	46bd      	mov	sp, r7
 8107f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f58:	4770      	bx	lr
 8107f5a:	bf00      	nop
 8107f5c:	ff0f0fff 	.word	0xff0f0fff

08107f60 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8107f60:	b480      	push	{r7}
 8107f62:	b085      	sub	sp, #20
 8107f64:	af00      	add	r7, sp, #0
 8107f66:	60f8      	str	r0, [r7, #12]
 8107f68:	60b9      	str	r1, [r7, #8]
 8107f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8107f6c:	68fb      	ldr	r3, [r7, #12]
 8107f6e:	691a      	ldr	r2, [r3, #16]
 8107f70:	4b0c      	ldr	r3, [pc, #48]	; (8107fa4 <FMC_SDRAM_SendCommand+0x44>)
 8107f72:	4013      	ands	r3, r2
 8107f74:	68ba      	ldr	r2, [r7, #8]
 8107f76:	6811      	ldr	r1, [r2, #0]
 8107f78:	68ba      	ldr	r2, [r7, #8]
 8107f7a:	6852      	ldr	r2, [r2, #4]
 8107f7c:	4311      	orrs	r1, r2
 8107f7e:	68ba      	ldr	r2, [r7, #8]
 8107f80:	6892      	ldr	r2, [r2, #8]
 8107f82:	3a01      	subs	r2, #1
 8107f84:	0152      	lsls	r2, r2, #5
 8107f86:	4311      	orrs	r1, r2
 8107f88:	68ba      	ldr	r2, [r7, #8]
 8107f8a:	68d2      	ldr	r2, [r2, #12]
 8107f8c:	0252      	lsls	r2, r2, #9
 8107f8e:	430a      	orrs	r2, r1
 8107f90:	431a      	orrs	r2, r3
 8107f92:	68fb      	ldr	r3, [r7, #12]
 8107f94:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8107f96:	2300      	movs	r3, #0
}
 8107f98:	4618      	mov	r0, r3
 8107f9a:	3714      	adds	r7, #20
 8107f9c:	46bd      	mov	sp, r7
 8107f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fa2:	4770      	bx	lr
 8107fa4:	ffc00000 	.word	0xffc00000

08107fa8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8107fa8:	b480      	push	{r7}
 8107faa:	b083      	sub	sp, #12
 8107fac:	af00      	add	r7, sp, #0
 8107fae:	6078      	str	r0, [r7, #4]
 8107fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	695a      	ldr	r2, [r3, #20]
 8107fb6:	4b07      	ldr	r3, [pc, #28]	; (8107fd4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8107fb8:	4013      	ands	r3, r2
 8107fba:	683a      	ldr	r2, [r7, #0]
 8107fbc:	0052      	lsls	r2, r2, #1
 8107fbe:	431a      	orrs	r2, r3
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8107fc4:	2300      	movs	r3, #0
}
 8107fc6:	4618      	mov	r0, r3
 8107fc8:	370c      	adds	r7, #12
 8107fca:	46bd      	mov	sp, r7
 8107fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fd0:	4770      	bx	lr
 8107fd2:	bf00      	nop
 8107fd4:	ffffc001 	.word	0xffffc001

08107fd8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8107fd8:	b580      	push	{r7, lr}
 8107fda:	b082      	sub	sp, #8
 8107fdc:	af00      	add	r7, sp, #0
 8107fde:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	4a22      	ldr	r2, [pc, #136]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8107fe6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	685b      	ldr	r3, [r3, #4]
 8107fec:	4a20      	ldr	r2, [pc, #128]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8107fee:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	689b      	ldr	r3, [r3, #8]
 8107ff4:	4a1e      	ldr	r2, [pc, #120]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8107ff6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	68db      	ldr	r3, [r3, #12]
 8107ffc:	4a1c      	ldr	r2, [pc, #112]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8107ffe:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	691b      	ldr	r3, [r3, #16]
 8108004:	4a1a      	ldr	r2, [pc, #104]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108006:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	695b      	ldr	r3, [r3, #20]
 810800c:	4a18      	ldr	r2, [pc, #96]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 810800e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	699b      	ldr	r3, [r3, #24]
 8108014:	4a16      	ldr	r2, [pc, #88]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108016:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	69db      	ldr	r3, [r3, #28]
 810801c:	4a14      	ldr	r2, [pc, #80]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 810801e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	6a1b      	ldr	r3, [r3, #32]
 8108024:	4a12      	ldr	r2, [pc, #72]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108026:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810802c:	4a10      	ldr	r2, [pc, #64]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 810802e:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108034:	4a0e      	ldr	r2, [pc, #56]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108036:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8108038:	4b0e      	ldr	r3, [pc, #56]	; (8108074 <UTIL_LCD_SetFuncDriver+0x9c>)
 810803a:	2200      	movs	r2, #0
 810803c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 810803e:	4b0d      	ldr	r3, [pc, #52]	; (8108074 <UTIL_LCD_SetFuncDriver+0x9c>)
 8108040:	2200      	movs	r2, #0
 8108042:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8108044:	4b0a      	ldr	r3, [pc, #40]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108046:	69db      	ldr	r3, [r3, #28]
 8108048:	4a0b      	ldr	r2, [pc, #44]	; (8108078 <UTIL_LCD_SetFuncDriver+0xa0>)
 810804a:	4611      	mov	r1, r2
 810804c:	2000      	movs	r0, #0
 810804e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8108050:	4b07      	ldr	r3, [pc, #28]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 8108052:	6a1b      	ldr	r3, [r3, #32]
 8108054:	4a09      	ldr	r2, [pc, #36]	; (810807c <UTIL_LCD_SetFuncDriver+0xa4>)
 8108056:	4611      	mov	r1, r2
 8108058:	2000      	movs	r0, #0
 810805a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 810805c:	4b04      	ldr	r3, [pc, #16]	; (8108070 <UTIL_LCD_SetFuncDriver+0x98>)
 810805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108060:	4a07      	ldr	r2, [pc, #28]	; (8108080 <UTIL_LCD_SetFuncDriver+0xa8>)
 8108062:	4611      	mov	r1, r2
 8108064:	2000      	movs	r0, #0
 8108066:	4798      	blx	r3
}
 8108068:	bf00      	nop
 810806a:	3708      	adds	r7, #8
 810806c:	46bd      	mov	sp, r7
 810806e:	bd80      	pop	{r7, pc}
 8108070:	24000e38 	.word	0x24000e38
 8108074:	24000df8 	.word	0x24000df8
 8108078:	24000e0c 	.word	0x24000e0c
 810807c:	24000e10 	.word	0x24000e10
 8108080:	24000e14 	.word	0x24000e14

08108084 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8108084:	b480      	push	{r7}
 8108086:	b083      	sub	sp, #12
 8108088:	af00      	add	r7, sp, #0
 810808a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 810808c:	4b06      	ldr	r3, [pc, #24]	; (81080a8 <UTIL_LCD_SetTextColor+0x24>)
 810808e:	68db      	ldr	r3, [r3, #12]
 8108090:	4a05      	ldr	r2, [pc, #20]	; (81080a8 <UTIL_LCD_SetTextColor+0x24>)
 8108092:	015b      	lsls	r3, r3, #5
 8108094:	4413      	add	r3, r2
 8108096:	687a      	ldr	r2, [r7, #4]
 8108098:	601a      	str	r2, [r3, #0]
}
 810809a:	bf00      	nop
 810809c:	370c      	adds	r7, #12
 810809e:	46bd      	mov	sp, r7
 81080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080a4:	4770      	bx	lr
 81080a6:	bf00      	nop
 81080a8:	24000df8 	.word	0x24000df8

081080ac <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 81080ac:	b480      	push	{r7}
 81080ae:	b083      	sub	sp, #12
 81080b0:	af00      	add	r7, sp, #0
 81080b2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 81080b4:	4b06      	ldr	r3, [pc, #24]	; (81080d0 <UTIL_LCD_SetBackColor+0x24>)
 81080b6:	68db      	ldr	r3, [r3, #12]
 81080b8:	4a05      	ldr	r2, [pc, #20]	; (81080d0 <UTIL_LCD_SetBackColor+0x24>)
 81080ba:	015b      	lsls	r3, r3, #5
 81080bc:	4413      	add	r3, r2
 81080be:	3304      	adds	r3, #4
 81080c0:	687a      	ldr	r2, [r7, #4]
 81080c2:	601a      	str	r2, [r3, #0]
}
 81080c4:	bf00      	nop
 81080c6:	370c      	adds	r7, #12
 81080c8:	46bd      	mov	sp, r7
 81080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080ce:	4770      	bx	lr
 81080d0:	24000df8 	.word	0x24000df8

081080d4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 81080d4:	b480      	push	{r7}
 81080d6:	b083      	sub	sp, #12
 81080d8:	af00      	add	r7, sp, #0
 81080da:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 81080dc:	4b06      	ldr	r3, [pc, #24]	; (81080f8 <UTIL_LCD_SetFont+0x24>)
 81080de:	68db      	ldr	r3, [r3, #12]
 81080e0:	4a05      	ldr	r2, [pc, #20]	; (81080f8 <UTIL_LCD_SetFont+0x24>)
 81080e2:	015b      	lsls	r3, r3, #5
 81080e4:	4413      	add	r3, r2
 81080e6:	3308      	adds	r3, #8
 81080e8:	687a      	ldr	r2, [r7, #4]
 81080ea:	601a      	str	r2, [r3, #0]
}
 81080ec:	bf00      	nop
 81080ee:	370c      	adds	r7, #12
 81080f0:	46bd      	mov	sp, r7
 81080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f6:	4770      	bx	lr
 81080f8:	24000df8 	.word	0x24000df8

081080fc <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 81080fc:	b590      	push	{r4, r7, lr}
 81080fe:	b087      	sub	sp, #28
 8108100:	af02      	add	r7, sp, #8
 8108102:	60f8      	str	r0, [r7, #12]
 8108104:	60b9      	str	r1, [r7, #8]
 8108106:	607a      	str	r2, [r7, #4]
 8108108:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 810810a:	4b08      	ldr	r3, [pc, #32]	; (810812c <UTIL_LCD_FillRGBRect+0x30>)
 810810c:	685c      	ldr	r4, [r3, #4]
 810810e:	4b08      	ldr	r3, [pc, #32]	; (8108130 <UTIL_LCD_FillRGBRect+0x34>)
 8108110:	6918      	ldr	r0, [r3, #16]
 8108112:	6a3b      	ldr	r3, [r7, #32]
 8108114:	9301      	str	r3, [sp, #4]
 8108116:	683b      	ldr	r3, [r7, #0]
 8108118:	9300      	str	r3, [sp, #0]
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	68ba      	ldr	r2, [r7, #8]
 810811e:	68f9      	ldr	r1, [r7, #12]
 8108120:	47a0      	blx	r4
}
 8108122:	bf00      	nop
 8108124:	3714      	adds	r7, #20
 8108126:	46bd      	mov	sp, r7
 8108128:	bd90      	pop	{r4, r7, pc}
 810812a:	bf00      	nop
 810812c:	24000e38 	.word	0x24000e38
 8108130:	24000df8 	.word	0x24000df8

08108134 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8108134:	b580      	push	{r7, lr}
 8108136:	b084      	sub	sp, #16
 8108138:	af02      	add	r7, sp, #8
 810813a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 810813c:	4b07      	ldr	r3, [pc, #28]	; (810815c <UTIL_LCD_Clear+0x28>)
 810813e:	695a      	ldr	r2, [r3, #20]
 8108140:	4b06      	ldr	r3, [pc, #24]	; (810815c <UTIL_LCD_Clear+0x28>)
 8108142:	6999      	ldr	r1, [r3, #24]
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	9300      	str	r3, [sp, #0]
 8108148:	460b      	mov	r3, r1
 810814a:	2100      	movs	r1, #0
 810814c:	2000      	movs	r0, #0
 810814e:	f000 f901 	bl	8108354 <UTIL_LCD_FillRect>
}
 8108152:	bf00      	nop
 8108154:	3708      	adds	r7, #8
 8108156:	46bd      	mov	sp, r7
 8108158:	bd80      	pop	{r7, pc}
 810815a:	bf00      	nop
 810815c:	24000df8 	.word	0x24000df8

08108160 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8108160:	b580      	push	{r7, lr}
 8108162:	b084      	sub	sp, #16
 8108164:	af00      	add	r7, sp, #0
 8108166:	60f8      	str	r0, [r7, #12]
 8108168:	60b9      	str	r1, [r7, #8]
 810816a:	4613      	mov	r3, r2
 810816c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 810816e:	4b16      	ldr	r3, [pc, #88]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 8108170:	68db      	ldr	r3, [r3, #12]
 8108172:	4a15      	ldr	r2, [pc, #84]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 8108174:	015b      	lsls	r3, r3, #5
 8108176:	4413      	add	r3, r2
 8108178:	3308      	adds	r3, #8
 810817a:	681b      	ldr	r3, [r3, #0]
 810817c:	681a      	ldr	r2, [r3, #0]
 810817e:	79fb      	ldrb	r3, [r7, #7]
 8108180:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8108182:	4911      	ldr	r1, [pc, #68]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 8108184:	68c9      	ldr	r1, [r1, #12]
 8108186:	4810      	ldr	r0, [pc, #64]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 8108188:	0149      	lsls	r1, r1, #5
 810818a:	4401      	add	r1, r0
 810818c:	3108      	adds	r1, #8
 810818e:	6809      	ldr	r1, [r1, #0]
 8108190:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8108192:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8108196:	4b0c      	ldr	r3, [pc, #48]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 8108198:	68db      	ldr	r3, [r3, #12]
 810819a:	480b      	ldr	r0, [pc, #44]	; (81081c8 <UTIL_LCD_DisplayChar+0x68>)
 810819c:	015b      	lsls	r3, r3, #5
 810819e:	4403      	add	r3, r0
 81081a0:	3308      	adds	r3, #8
 81081a2:	681b      	ldr	r3, [r3, #0]
 81081a4:	889b      	ldrh	r3, [r3, #4]
 81081a6:	3307      	adds	r3, #7
 81081a8:	2b00      	cmp	r3, #0
 81081aa:	da00      	bge.n	81081ae <UTIL_LCD_DisplayChar+0x4e>
 81081ac:	3307      	adds	r3, #7
 81081ae:	10db      	asrs	r3, r3, #3
 81081b0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 81081b4:	4413      	add	r3, r2
 81081b6:	461a      	mov	r2, r3
 81081b8:	68b9      	ldr	r1, [r7, #8]
 81081ba:	68f8      	ldr	r0, [r7, #12]
 81081bc:	f000 f904 	bl	81083c8 <DrawChar>
}
 81081c0:	bf00      	nop
 81081c2:	3710      	adds	r7, #16
 81081c4:	46bd      	mov	sp, r7
 81081c6:	bd80      	pop	{r7, pc}
 81081c8:	24000df8 	.word	0x24000df8

081081cc <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 81081cc:	b580      	push	{r7, lr}
 81081ce:	b08a      	sub	sp, #40	; 0x28
 81081d0:	af00      	add	r7, sp, #0
 81081d2:	60f8      	str	r0, [r7, #12]
 81081d4:	60b9      	str	r1, [r7, #8]
 81081d6:	607a      	str	r2, [r7, #4]
 81081d8:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 81081da:	2301      	movs	r3, #1
 81081dc:	627b      	str	r3, [r7, #36]	; 0x24
 81081de:	2300      	movs	r3, #0
 81081e0:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 81081e2:	2300      	movs	r3, #0
 81081e4:	61fb      	str	r3, [r7, #28]
 81081e6:	2300      	movs	r3, #0
 81081e8:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 81081ee:	e002      	b.n	81081f6 <UTIL_LCD_DisplayStringAt+0x2a>
 81081f0:	69fb      	ldr	r3, [r7, #28]
 81081f2:	3301      	adds	r3, #1
 81081f4:	61fb      	str	r3, [r7, #28]
 81081f6:	69bb      	ldr	r3, [r7, #24]
 81081f8:	1c5a      	adds	r2, r3, #1
 81081fa:	61ba      	str	r2, [r7, #24]
 81081fc:	781b      	ldrb	r3, [r3, #0]
 81081fe:	2b00      	cmp	r3, #0
 8108200:	d1f6      	bne.n	81081f0 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8108202:	4b48      	ldr	r3, [pc, #288]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 8108204:	695b      	ldr	r3, [r3, #20]
 8108206:	4a47      	ldr	r2, [pc, #284]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 8108208:	68d2      	ldr	r2, [r2, #12]
 810820a:	4946      	ldr	r1, [pc, #280]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 810820c:	0152      	lsls	r2, r2, #5
 810820e:	440a      	add	r2, r1
 8108210:	3208      	adds	r2, #8
 8108212:	6812      	ldr	r2, [r2, #0]
 8108214:	8892      	ldrh	r2, [r2, #4]
 8108216:	fbb3 f3f2 	udiv	r3, r3, r2
 810821a:	617b      	str	r3, [r7, #20]

  switch (Mode)
 810821c:	78fb      	ldrb	r3, [r7, #3]
 810821e:	2b03      	cmp	r3, #3
 8108220:	d018      	beq.n	8108254 <UTIL_LCD_DisplayStringAt+0x88>
 8108222:	2b03      	cmp	r3, #3
 8108224:	dc2a      	bgt.n	810827c <UTIL_LCD_DisplayStringAt+0xb0>
 8108226:	2b01      	cmp	r3, #1
 8108228:	d002      	beq.n	8108230 <UTIL_LCD_DisplayStringAt+0x64>
 810822a:	2b02      	cmp	r3, #2
 810822c:	d015      	beq.n	810825a <UTIL_LCD_DisplayStringAt+0x8e>
 810822e:	e025      	b.n	810827c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8108230:	697a      	ldr	r2, [r7, #20]
 8108232:	69fb      	ldr	r3, [r7, #28]
 8108234:	1ad3      	subs	r3, r2, r3
 8108236:	4a3b      	ldr	r2, [pc, #236]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 8108238:	68d2      	ldr	r2, [r2, #12]
 810823a:	493a      	ldr	r1, [pc, #232]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 810823c:	0152      	lsls	r2, r2, #5
 810823e:	440a      	add	r2, r1
 8108240:	3208      	adds	r2, #8
 8108242:	6812      	ldr	r2, [r2, #0]
 8108244:	8892      	ldrh	r2, [r2, #4]
 8108246:	fb02 f303 	mul.w	r3, r2, r3
 810824a:	085b      	lsrs	r3, r3, #1
 810824c:	68fa      	ldr	r2, [r7, #12]
 810824e:	4413      	add	r3, r2
 8108250:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108252:	e016      	b.n	8108282 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108258:	e013      	b.n	8108282 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 810825a:	697a      	ldr	r2, [r7, #20]
 810825c:	69fb      	ldr	r3, [r7, #28]
 810825e:	1ad3      	subs	r3, r2, r3
 8108260:	4a30      	ldr	r2, [pc, #192]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 8108262:	68d2      	ldr	r2, [r2, #12]
 8108264:	492f      	ldr	r1, [pc, #188]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 8108266:	0152      	lsls	r2, r2, #5
 8108268:	440a      	add	r2, r1
 810826a:	3208      	adds	r2, #8
 810826c:	6812      	ldr	r2, [r2, #0]
 810826e:	8892      	ldrh	r2, [r2, #4]
 8108270:	fb03 f202 	mul.w	r2, r3, r2
 8108274:	68fb      	ldr	r3, [r7, #12]
 8108276:	1ad3      	subs	r3, r2, r3
 8108278:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810827a:	e002      	b.n	8108282 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 810827c:	68fb      	ldr	r3, [r7, #12]
 810827e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8108280:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8108282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108284:	2b00      	cmp	r3, #0
 8108286:	d003      	beq.n	8108290 <UTIL_LCD_DisplayStringAt+0xc4>
 8108288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810828a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810828e:	d31b      	bcc.n	81082c8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8108290:	2301      	movs	r3, #1
 8108292:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8108294:	e018      	b.n	81082c8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	781b      	ldrb	r3, [r3, #0]
 810829a:	461a      	mov	r2, r3
 810829c:	68b9      	ldr	r1, [r7, #8]
 810829e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81082a0:	f7ff ff5e 	bl	8108160 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 81082a4:	4b1f      	ldr	r3, [pc, #124]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082a6:	68db      	ldr	r3, [r3, #12]
 81082a8:	4a1e      	ldr	r2, [pc, #120]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082aa:	015b      	lsls	r3, r3, #5
 81082ac:	4413      	add	r3, r2
 81082ae:	3308      	adds	r3, #8
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	889b      	ldrh	r3, [r3, #4]
 81082b4:	461a      	mov	r2, r3
 81082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81082b8:	4413      	add	r3, r2
 81082ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	3301      	adds	r3, #1
 81082c0:	607b      	str	r3, [r7, #4]
    i++;
 81082c2:	6a3b      	ldr	r3, [r7, #32]
 81082c4:	3301      	adds	r3, #1
 81082c6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	781b      	ldrb	r3, [r3, #0]
 81082cc:	2b00      	cmp	r3, #0
 81082ce:	bf14      	ite	ne
 81082d0:	2301      	movne	r3, #1
 81082d2:	2300      	moveq	r3, #0
 81082d4:	b2da      	uxtb	r2, r3
 81082d6:	4b13      	ldr	r3, [pc, #76]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082d8:	6959      	ldr	r1, [r3, #20]
 81082da:	4b12      	ldr	r3, [pc, #72]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082dc:	68db      	ldr	r3, [r3, #12]
 81082de:	4811      	ldr	r0, [pc, #68]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082e0:	015b      	lsls	r3, r3, #5
 81082e2:	4403      	add	r3, r0
 81082e4:	3308      	adds	r3, #8
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	889b      	ldrh	r3, [r3, #4]
 81082ea:	4618      	mov	r0, r3
 81082ec:	6a3b      	ldr	r3, [r7, #32]
 81082ee:	fb00 f303 	mul.w	r3, r0, r3
 81082f2:	1acb      	subs	r3, r1, r3
 81082f4:	b29b      	uxth	r3, r3
 81082f6:	490b      	ldr	r1, [pc, #44]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082f8:	68c9      	ldr	r1, [r1, #12]
 81082fa:	480a      	ldr	r0, [pc, #40]	; (8108324 <UTIL_LCD_DisplayStringAt+0x158>)
 81082fc:	0149      	lsls	r1, r1, #5
 81082fe:	4401      	add	r1, r0
 8108300:	3108      	adds	r1, #8
 8108302:	6809      	ldr	r1, [r1, #0]
 8108304:	8889      	ldrh	r1, [r1, #4]
 8108306:	428b      	cmp	r3, r1
 8108308:	bf2c      	ite	cs
 810830a:	2301      	movcs	r3, #1
 810830c:	2300      	movcc	r3, #0
 810830e:	b2db      	uxtb	r3, r3
 8108310:	4013      	ands	r3, r2
 8108312:	b2db      	uxtb	r3, r3
 8108314:	2b00      	cmp	r3, #0
 8108316:	d1be      	bne.n	8108296 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8108318:	bf00      	nop
 810831a:	bf00      	nop
 810831c:	3728      	adds	r7, #40	; 0x28
 810831e:	46bd      	mov	sp, r7
 8108320:	bd80      	pop	{r7, pc}
 8108322:	bf00      	nop
 8108324:	24000df8 	.word	0x24000df8

08108328 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 8108328:	b590      	push	{r4, r7, lr}
 810832a:	b085      	sub	sp, #20
 810832c:	af00      	add	r7, sp, #0
 810832e:	60f8      	str	r0, [r7, #12]
 8108330:	60b9      	str	r1, [r7, #8]
 8108332:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 8108334:	4b05      	ldr	r3, [pc, #20]	; (810834c <UTIL_LCD_DrawBitmap+0x24>)
 8108336:	681c      	ldr	r4, [r3, #0]
 8108338:	4b05      	ldr	r3, [pc, #20]	; (8108350 <UTIL_LCD_DrawBitmap+0x28>)
 810833a:	6918      	ldr	r0, [r3, #16]
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	68ba      	ldr	r2, [r7, #8]
 8108340:	68f9      	ldr	r1, [r7, #12]
 8108342:	47a0      	blx	r4
}
 8108344:	bf00      	nop
 8108346:	3714      	adds	r7, #20
 8108348:	46bd      	mov	sp, r7
 810834a:	bd90      	pop	{r4, r7, pc}
 810834c:	24000e38 	.word	0x24000e38
 8108350:	24000df8 	.word	0x24000df8

08108354 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8108354:	b590      	push	{r4, r7, lr}
 8108356:	b087      	sub	sp, #28
 8108358:	af02      	add	r7, sp, #8
 810835a:	60f8      	str	r0, [r7, #12]
 810835c:	60b9      	str	r1, [r7, #8]
 810835e:	607a      	str	r2, [r7, #4]
 8108360:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8108362:	4b17      	ldr	r3, [pc, #92]	; (81083c0 <UTIL_LCD_FillRect+0x6c>)
 8108364:	69db      	ldr	r3, [r3, #28]
 8108366:	2b02      	cmp	r3, #2
 8108368:	d11a      	bne.n	81083a0 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 810836a:	4b16      	ldr	r3, [pc, #88]	; (81083c4 <UTIL_LCD_FillRect+0x70>)
 810836c:	691c      	ldr	r4, [r3, #16]
 810836e:	4b14      	ldr	r3, [pc, #80]	; (81083c0 <UTIL_LCD_FillRect+0x6c>)
 8108370:	6918      	ldr	r0, [r3, #16]
 8108372:	6a3b      	ldr	r3, [r7, #32]
 8108374:	08db      	lsrs	r3, r3, #3
 8108376:	f003 021f 	and.w	r2, r3, #31
 810837a:	6a3b      	ldr	r3, [r7, #32]
 810837c:	0a9b      	lsrs	r3, r3, #10
 810837e:	015b      	lsls	r3, r3, #5
 8108380:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8108384:	431a      	orrs	r2, r3
 8108386:	6a3b      	ldr	r3, [r7, #32]
 8108388:	0cdb      	lsrs	r3, r3, #19
 810838a:	02db      	lsls	r3, r3, #11
 810838c:	b29b      	uxth	r3, r3
 810838e:	4313      	orrs	r3, r2
 8108390:	9301      	str	r3, [sp, #4]
 8108392:	683b      	ldr	r3, [r7, #0]
 8108394:	9300      	str	r3, [sp, #0]
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	68ba      	ldr	r2, [r7, #8]
 810839a:	68f9      	ldr	r1, [r7, #12]
 810839c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 810839e:	e00b      	b.n	81083b8 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 81083a0:	4b08      	ldr	r3, [pc, #32]	; (81083c4 <UTIL_LCD_FillRect+0x70>)
 81083a2:	691c      	ldr	r4, [r3, #16]
 81083a4:	4b06      	ldr	r3, [pc, #24]	; (81083c0 <UTIL_LCD_FillRect+0x6c>)
 81083a6:	6918      	ldr	r0, [r3, #16]
 81083a8:	6a3b      	ldr	r3, [r7, #32]
 81083aa:	9301      	str	r3, [sp, #4]
 81083ac:	683b      	ldr	r3, [r7, #0]
 81083ae:	9300      	str	r3, [sp, #0]
 81083b0:	687b      	ldr	r3, [r7, #4]
 81083b2:	68ba      	ldr	r2, [r7, #8]
 81083b4:	68f9      	ldr	r1, [r7, #12]
 81083b6:	47a0      	blx	r4
}
 81083b8:	bf00      	nop
 81083ba:	3714      	adds	r7, #20
 81083bc:	46bd      	mov	sp, r7
 81083be:	bd90      	pop	{r4, r7, pc}
 81083c0:	24000df8 	.word	0x24000df8
 81083c4:	24000e38 	.word	0x24000e38

081083c8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 81083c8:	b580      	push	{r7, lr}
 81083ca:	b0b2      	sub	sp, #200	; 0xc8
 81083cc:	af02      	add	r7, sp, #8
 81083ce:	60f8      	str	r0, [r7, #12]
 81083d0:	60b9      	str	r1, [r7, #8]
 81083d2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 81083d4:	2300      	movs	r3, #0
 81083d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81083da:	2300      	movs	r3, #0
 81083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 81083e0:	4ba5      	ldr	r3, [pc, #660]	; (8108678 <DrawChar+0x2b0>)
 81083e2:	68db      	ldr	r3, [r3, #12]
 81083e4:	4aa4      	ldr	r2, [pc, #656]	; (8108678 <DrawChar+0x2b0>)
 81083e6:	015b      	lsls	r3, r3, #5
 81083e8:	4413      	add	r3, r2
 81083ea:	3308      	adds	r3, #8
 81083ec:	681b      	ldr	r3, [r3, #0]
 81083ee:	88db      	ldrh	r3, [r3, #6]
 81083f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 81083f4:	4ba0      	ldr	r3, [pc, #640]	; (8108678 <DrawChar+0x2b0>)
 81083f6:	68db      	ldr	r3, [r3, #12]
 81083f8:	4a9f      	ldr	r2, [pc, #636]	; (8108678 <DrawChar+0x2b0>)
 81083fa:	015b      	lsls	r3, r3, #5
 81083fc:	4413      	add	r3, r2
 81083fe:	3308      	adds	r3, #8
 8108400:	681b      	ldr	r3, [r3, #0]
 8108402:	889b      	ldrh	r3, [r3, #4]
 8108404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8108408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810840c:	3307      	adds	r3, #7
 810840e:	f023 0207 	bic.w	r2, r3, #7
 8108412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8108416:	1ad3      	subs	r3, r2, r3
 8108418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 810841c:	2300      	movs	r3, #0
 810841e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8108422:	e11c      	b.n	810865e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8108424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8108428:	3307      	adds	r3, #7
 810842a:	08db      	lsrs	r3, r3, #3
 810842c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8108430:	fb02 f303 	mul.w	r3, r2, r3
 8108434:	687a      	ldr	r2, [r7, #4]
 8108436:	4413      	add	r3, r2
 8108438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 810843c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8108440:	3307      	adds	r3, #7
 8108442:	08db      	lsrs	r3, r3, #3
 8108444:	2b01      	cmp	r3, #1
 8108446:	d002      	beq.n	810844e <DrawChar+0x86>
 8108448:	2b02      	cmp	r3, #2
 810844a:	d006      	beq.n	810845a <DrawChar+0x92>
 810844c:	e011      	b.n	8108472 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 810844e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8108452:	781b      	ldrb	r3, [r3, #0]
 8108454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8108458:	e01d      	b.n	8108496 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 810845a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 810845e:	781b      	ldrb	r3, [r3, #0]
 8108460:	021b      	lsls	r3, r3, #8
 8108462:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8108466:	3201      	adds	r2, #1
 8108468:	7812      	ldrb	r2, [r2, #0]
 810846a:	4313      	orrs	r3, r2
 810846c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8108470:	e011      	b.n	8108496 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8108472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8108476:	781b      	ldrb	r3, [r3, #0]
 8108478:	041a      	lsls	r2, r3, #16
 810847a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 810847e:	3301      	adds	r3, #1
 8108480:	781b      	ldrb	r3, [r3, #0]
 8108482:	021b      	lsls	r3, r3, #8
 8108484:	4313      	orrs	r3, r2
 8108486:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 810848a:	3202      	adds	r2, #2
 810848c:	7812      	ldrb	r2, [r2, #0]
 810848e:	4313      	orrs	r3, r2
 8108490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8108494:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8108496:	4b78      	ldr	r3, [pc, #480]	; (8108678 <DrawChar+0x2b0>)
 8108498:	68db      	ldr	r3, [r3, #12]
 810849a:	4a77      	ldr	r2, [pc, #476]	; (8108678 <DrawChar+0x2b0>)
 810849c:	015b      	lsls	r3, r3, #5
 810849e:	4413      	add	r3, r2
 81084a0:	331c      	adds	r3, #28
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	2b02      	cmp	r3, #2
 81084a6:	f040 808c 	bne.w	81085c2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 81084aa:	2300      	movs	r3, #0
 81084ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81084b0:	e074      	b.n	810859c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 81084b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 81084b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 81084ba:	1ad2      	subs	r2, r2, r3
 81084bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 81084c0:	4413      	add	r3, r2
 81084c2:	3b01      	subs	r3, #1
 81084c4:	2201      	movs	r2, #1
 81084c6:	fa02 f303 	lsl.w	r3, r2, r3
 81084ca:	461a      	mov	r2, r3
 81084cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81084d0:	4013      	ands	r3, r2
 81084d2:	2b00      	cmp	r3, #0
 81084d4:	d02d      	beq.n	8108532 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 81084d6:	4b68      	ldr	r3, [pc, #416]	; (8108678 <DrawChar+0x2b0>)
 81084d8:	68db      	ldr	r3, [r3, #12]
 81084da:	4a67      	ldr	r2, [pc, #412]	; (8108678 <DrawChar+0x2b0>)
 81084dc:	015b      	lsls	r3, r3, #5
 81084de:	4413      	add	r3, r2
 81084e0:	681b      	ldr	r3, [r3, #0]
 81084e2:	08db      	lsrs	r3, r3, #3
 81084e4:	b29b      	uxth	r3, r3
 81084e6:	f003 031f 	and.w	r3, r3, #31
 81084ea:	b29a      	uxth	r2, r3
 81084ec:	4b62      	ldr	r3, [pc, #392]	; (8108678 <DrawChar+0x2b0>)
 81084ee:	68db      	ldr	r3, [r3, #12]
 81084f0:	4961      	ldr	r1, [pc, #388]	; (8108678 <DrawChar+0x2b0>)
 81084f2:	015b      	lsls	r3, r3, #5
 81084f4:	440b      	add	r3, r1
 81084f6:	681b      	ldr	r3, [r3, #0]
 81084f8:	0a9b      	lsrs	r3, r3, #10
 81084fa:	b29b      	uxth	r3, r3
 81084fc:	015b      	lsls	r3, r3, #5
 81084fe:	b29b      	uxth	r3, r3
 8108500:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8108504:	b29b      	uxth	r3, r3
 8108506:	4313      	orrs	r3, r2
 8108508:	b29a      	uxth	r2, r3
 810850a:	4b5b      	ldr	r3, [pc, #364]	; (8108678 <DrawChar+0x2b0>)
 810850c:	68db      	ldr	r3, [r3, #12]
 810850e:	495a      	ldr	r1, [pc, #360]	; (8108678 <DrawChar+0x2b0>)
 8108510:	015b      	lsls	r3, r3, #5
 8108512:	440b      	add	r3, r1
 8108514:	681b      	ldr	r3, [r3, #0]
 8108516:	0cdb      	lsrs	r3, r3, #19
 8108518:	b29b      	uxth	r3, r3
 810851a:	02db      	lsls	r3, r3, #11
 810851c:	b29b      	uxth	r3, r3
 810851e:	4313      	orrs	r3, r2
 8108520:	b29a      	uxth	r2, r3
 8108522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8108526:	005b      	lsls	r3, r3, #1
 8108528:	33c0      	adds	r3, #192	; 0xc0
 810852a:	443b      	add	r3, r7
 810852c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8108530:	e02f      	b.n	8108592 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8108532:	4b51      	ldr	r3, [pc, #324]	; (8108678 <DrawChar+0x2b0>)
 8108534:	68db      	ldr	r3, [r3, #12]
 8108536:	4a50      	ldr	r2, [pc, #320]	; (8108678 <DrawChar+0x2b0>)
 8108538:	015b      	lsls	r3, r3, #5
 810853a:	4413      	add	r3, r2
 810853c:	3304      	adds	r3, #4
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	08db      	lsrs	r3, r3, #3
 8108542:	b29b      	uxth	r3, r3
 8108544:	f003 031f 	and.w	r3, r3, #31
 8108548:	b29a      	uxth	r2, r3
 810854a:	4b4b      	ldr	r3, [pc, #300]	; (8108678 <DrawChar+0x2b0>)
 810854c:	68db      	ldr	r3, [r3, #12]
 810854e:	494a      	ldr	r1, [pc, #296]	; (8108678 <DrawChar+0x2b0>)
 8108550:	015b      	lsls	r3, r3, #5
 8108552:	440b      	add	r3, r1
 8108554:	3304      	adds	r3, #4
 8108556:	681b      	ldr	r3, [r3, #0]
 8108558:	0a9b      	lsrs	r3, r3, #10
 810855a:	b29b      	uxth	r3, r3
 810855c:	015b      	lsls	r3, r3, #5
 810855e:	b29b      	uxth	r3, r3
 8108560:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8108564:	b29b      	uxth	r3, r3
 8108566:	4313      	orrs	r3, r2
 8108568:	b29a      	uxth	r2, r3
 810856a:	4b43      	ldr	r3, [pc, #268]	; (8108678 <DrawChar+0x2b0>)
 810856c:	68db      	ldr	r3, [r3, #12]
 810856e:	4942      	ldr	r1, [pc, #264]	; (8108678 <DrawChar+0x2b0>)
 8108570:	015b      	lsls	r3, r3, #5
 8108572:	440b      	add	r3, r1
 8108574:	3304      	adds	r3, #4
 8108576:	681b      	ldr	r3, [r3, #0]
 8108578:	0cdb      	lsrs	r3, r3, #19
 810857a:	b29b      	uxth	r3, r3
 810857c:	02db      	lsls	r3, r3, #11
 810857e:	b29b      	uxth	r3, r3
 8108580:	4313      	orrs	r3, r2
 8108582:	b29a      	uxth	r2, r3
 8108584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8108588:	005b      	lsls	r3, r3, #1
 810858a:	33c0      	adds	r3, #192	; 0xc0
 810858c:	443b      	add	r3, r7
 810858e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8108592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8108596:	3301      	adds	r3, #1
 8108598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810859c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 81085a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81085a4:	429a      	cmp	r2, r3
 81085a6:	d384      	bcc.n	81084b2 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 81085a8:	68b9      	ldr	r1, [r7, #8]
 81085aa:	1c4b      	adds	r3, r1, #1
 81085ac:	60bb      	str	r3, [r7, #8]
 81085ae:	f107 0274 	add.w	r2, r7, #116	; 0x74
 81085b2:	2301      	movs	r3, #1
 81085b4:	9300      	str	r3, [sp, #0]
 81085b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81085ba:	68f8      	ldr	r0, [r7, #12]
 81085bc:	f7ff fd9e 	bl	81080fc <UTIL_LCD_FillRGBRect>
 81085c0:	e048      	b.n	8108654 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 81085c2:	2300      	movs	r3, #0
 81085c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81085c8:	e032      	b.n	8108630 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 81085ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 81085ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 81085d2:	1ad2      	subs	r2, r2, r3
 81085d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 81085d8:	4413      	add	r3, r2
 81085da:	3b01      	subs	r3, #1
 81085dc:	2201      	movs	r2, #1
 81085de:	fa02 f303 	lsl.w	r3, r2, r3
 81085e2:	461a      	mov	r2, r3
 81085e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81085e8:	4013      	ands	r3, r2
 81085ea:	2b00      	cmp	r3, #0
 81085ec:	d00d      	beq.n	810860a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 81085ee:	4b22      	ldr	r3, [pc, #136]	; (8108678 <DrawChar+0x2b0>)
 81085f0:	68db      	ldr	r3, [r3, #12]
 81085f2:	4a21      	ldr	r2, [pc, #132]	; (8108678 <DrawChar+0x2b0>)
 81085f4:	015b      	lsls	r3, r3, #5
 81085f6:	4413      	add	r3, r2
 81085f8:	681a      	ldr	r2, [r3, #0]
 81085fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 81085fe:	009b      	lsls	r3, r3, #2
 8108600:	33c0      	adds	r3, #192	; 0xc0
 8108602:	443b      	add	r3, r7
 8108604:	f843 2cac 	str.w	r2, [r3, #-172]
 8108608:	e00d      	b.n	8108626 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 810860a:	4b1b      	ldr	r3, [pc, #108]	; (8108678 <DrawChar+0x2b0>)
 810860c:	68db      	ldr	r3, [r3, #12]
 810860e:	4a1a      	ldr	r2, [pc, #104]	; (8108678 <DrawChar+0x2b0>)
 8108610:	015b      	lsls	r3, r3, #5
 8108612:	4413      	add	r3, r2
 8108614:	3304      	adds	r3, #4
 8108616:	681a      	ldr	r2, [r3, #0]
 8108618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810861c:	009b      	lsls	r3, r3, #2
 810861e:	33c0      	adds	r3, #192	; 0xc0
 8108620:	443b      	add	r3, r7
 8108622:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8108626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810862a:	3301      	adds	r3, #1
 810862c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8108630:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8108634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8108638:	429a      	cmp	r2, r3
 810863a:	d3c6      	bcc.n	81085ca <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 810863c:	68b9      	ldr	r1, [r7, #8]
 810863e:	1c4b      	adds	r3, r1, #1
 8108640:	60bb      	str	r3, [r7, #8]
 8108642:	f107 0214 	add.w	r2, r7, #20
 8108646:	2301      	movs	r3, #1
 8108648:	9300      	str	r3, [sp, #0]
 810864a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810864e:	68f8      	ldr	r0, [r7, #12]
 8108650:	f7ff fd54 	bl	81080fc <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8108654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8108658:	3301      	adds	r3, #1
 810865a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810865e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8108662:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8108666:	429a      	cmp	r2, r3
 8108668:	f4ff aedc 	bcc.w	8108424 <DrawChar+0x5c>
    }
  }
}
 810866c:	bf00      	nop
 810866e:	bf00      	nop
 8108670:	37c0      	adds	r7, #192	; 0xc0
 8108672:	46bd      	mov	sp, r7
 8108674:	bd80      	pop	{r7, pc}
 8108676:	bf00      	nop
 8108678:	24000df8 	.word	0x24000df8

0810867c <siprintf>:
 810867c:	b40e      	push	{r1, r2, r3}
 810867e:	b500      	push	{lr}
 8108680:	b09c      	sub	sp, #112	; 0x70
 8108682:	ab1d      	add	r3, sp, #116	; 0x74
 8108684:	9002      	str	r0, [sp, #8]
 8108686:	9006      	str	r0, [sp, #24]
 8108688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810868c:	4809      	ldr	r0, [pc, #36]	; (81086b4 <siprintf+0x38>)
 810868e:	9107      	str	r1, [sp, #28]
 8108690:	9104      	str	r1, [sp, #16]
 8108692:	4909      	ldr	r1, [pc, #36]	; (81086b8 <siprintf+0x3c>)
 8108694:	f853 2b04 	ldr.w	r2, [r3], #4
 8108698:	9105      	str	r1, [sp, #20]
 810869a:	6800      	ldr	r0, [r0, #0]
 810869c:	9301      	str	r3, [sp, #4]
 810869e:	a902      	add	r1, sp, #8
 81086a0:	f000 f98a 	bl	81089b8 <_svfiprintf_r>
 81086a4:	9b02      	ldr	r3, [sp, #8]
 81086a6:	2200      	movs	r2, #0
 81086a8:	701a      	strb	r2, [r3, #0]
 81086aa:	b01c      	add	sp, #112	; 0x70
 81086ac:	f85d eb04 	ldr.w	lr, [sp], #4
 81086b0:	b003      	add	sp, #12
 81086b2:	4770      	bx	lr
 81086b4:	240000c4 	.word	0x240000c4
 81086b8:	ffff0208 	.word	0xffff0208

081086bc <__errno>:
 81086bc:	4b01      	ldr	r3, [pc, #4]	; (81086c4 <__errno+0x8>)
 81086be:	6818      	ldr	r0, [r3, #0]
 81086c0:	4770      	bx	lr
 81086c2:	bf00      	nop
 81086c4:	240000c4 	.word	0x240000c4

081086c8 <__libc_init_array>:
 81086c8:	b570      	push	{r4, r5, r6, lr}
 81086ca:	4d0d      	ldr	r5, [pc, #52]	; (8108700 <__libc_init_array+0x38>)
 81086cc:	4c0d      	ldr	r4, [pc, #52]	; (8108704 <__libc_init_array+0x3c>)
 81086ce:	1b64      	subs	r4, r4, r5
 81086d0:	10a4      	asrs	r4, r4, #2
 81086d2:	2600      	movs	r6, #0
 81086d4:	42a6      	cmp	r6, r4
 81086d6:	d109      	bne.n	81086ec <__libc_init_array+0x24>
 81086d8:	4d0b      	ldr	r5, [pc, #44]	; (8108708 <__libc_init_array+0x40>)
 81086da:	4c0c      	ldr	r4, [pc, #48]	; (810870c <__libc_init_array+0x44>)
 81086dc:	f000 fc6a 	bl	8108fb4 <_init>
 81086e0:	1b64      	subs	r4, r4, r5
 81086e2:	10a4      	asrs	r4, r4, #2
 81086e4:	2600      	movs	r6, #0
 81086e6:	42a6      	cmp	r6, r4
 81086e8:	d105      	bne.n	81086f6 <__libc_init_array+0x2e>
 81086ea:	bd70      	pop	{r4, r5, r6, pc}
 81086ec:	f855 3b04 	ldr.w	r3, [r5], #4
 81086f0:	4798      	blx	r3
 81086f2:	3601      	adds	r6, #1
 81086f4:	e7ee      	b.n	81086d4 <__libc_init_array+0xc>
 81086f6:	f855 3b04 	ldr.w	r3, [r5], #4
 81086fa:	4798      	blx	r3
 81086fc:	3601      	adds	r6, #1
 81086fe:	e7f2      	b.n	81086e6 <__libc_init_array+0x1e>
 8108700:	0810cf80 	.word	0x0810cf80
 8108704:	0810cf80 	.word	0x0810cf80
 8108708:	0810cf80 	.word	0x0810cf80
 810870c:	0810cf84 	.word	0x0810cf84

08108710 <__retarget_lock_acquire_recursive>:
 8108710:	4770      	bx	lr

08108712 <__retarget_lock_release_recursive>:
 8108712:	4770      	bx	lr

08108714 <_free_r>:
 8108714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8108716:	2900      	cmp	r1, #0
 8108718:	d044      	beq.n	81087a4 <_free_r+0x90>
 810871a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810871e:	9001      	str	r0, [sp, #4]
 8108720:	2b00      	cmp	r3, #0
 8108722:	f1a1 0404 	sub.w	r4, r1, #4
 8108726:	bfb8      	it	lt
 8108728:	18e4      	addlt	r4, r4, r3
 810872a:	f000 f8df 	bl	81088ec <__malloc_lock>
 810872e:	4a1e      	ldr	r2, [pc, #120]	; (81087a8 <_free_r+0x94>)
 8108730:	9801      	ldr	r0, [sp, #4]
 8108732:	6813      	ldr	r3, [r2, #0]
 8108734:	b933      	cbnz	r3, 8108744 <_free_r+0x30>
 8108736:	6063      	str	r3, [r4, #4]
 8108738:	6014      	str	r4, [r2, #0]
 810873a:	b003      	add	sp, #12
 810873c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8108740:	f000 b8da 	b.w	81088f8 <__malloc_unlock>
 8108744:	42a3      	cmp	r3, r4
 8108746:	d908      	bls.n	810875a <_free_r+0x46>
 8108748:	6825      	ldr	r5, [r4, #0]
 810874a:	1961      	adds	r1, r4, r5
 810874c:	428b      	cmp	r3, r1
 810874e:	bf01      	itttt	eq
 8108750:	6819      	ldreq	r1, [r3, #0]
 8108752:	685b      	ldreq	r3, [r3, #4]
 8108754:	1949      	addeq	r1, r1, r5
 8108756:	6021      	streq	r1, [r4, #0]
 8108758:	e7ed      	b.n	8108736 <_free_r+0x22>
 810875a:	461a      	mov	r2, r3
 810875c:	685b      	ldr	r3, [r3, #4]
 810875e:	b10b      	cbz	r3, 8108764 <_free_r+0x50>
 8108760:	42a3      	cmp	r3, r4
 8108762:	d9fa      	bls.n	810875a <_free_r+0x46>
 8108764:	6811      	ldr	r1, [r2, #0]
 8108766:	1855      	adds	r5, r2, r1
 8108768:	42a5      	cmp	r5, r4
 810876a:	d10b      	bne.n	8108784 <_free_r+0x70>
 810876c:	6824      	ldr	r4, [r4, #0]
 810876e:	4421      	add	r1, r4
 8108770:	1854      	adds	r4, r2, r1
 8108772:	42a3      	cmp	r3, r4
 8108774:	6011      	str	r1, [r2, #0]
 8108776:	d1e0      	bne.n	810873a <_free_r+0x26>
 8108778:	681c      	ldr	r4, [r3, #0]
 810877a:	685b      	ldr	r3, [r3, #4]
 810877c:	6053      	str	r3, [r2, #4]
 810877e:	440c      	add	r4, r1
 8108780:	6014      	str	r4, [r2, #0]
 8108782:	e7da      	b.n	810873a <_free_r+0x26>
 8108784:	d902      	bls.n	810878c <_free_r+0x78>
 8108786:	230c      	movs	r3, #12
 8108788:	6003      	str	r3, [r0, #0]
 810878a:	e7d6      	b.n	810873a <_free_r+0x26>
 810878c:	6825      	ldr	r5, [r4, #0]
 810878e:	1961      	adds	r1, r4, r5
 8108790:	428b      	cmp	r3, r1
 8108792:	bf04      	itt	eq
 8108794:	6819      	ldreq	r1, [r3, #0]
 8108796:	685b      	ldreq	r3, [r3, #4]
 8108798:	6063      	str	r3, [r4, #4]
 810879a:	bf04      	itt	eq
 810879c:	1949      	addeq	r1, r1, r5
 810879e:	6021      	streq	r1, [r4, #0]
 81087a0:	6054      	str	r4, [r2, #4]
 81087a2:	e7ca      	b.n	810873a <_free_r+0x26>
 81087a4:	b003      	add	sp, #12
 81087a6:	bd30      	pop	{r4, r5, pc}
 81087a8:	24000fa4 	.word	0x24000fa4

081087ac <sbrk_aligned>:
 81087ac:	b570      	push	{r4, r5, r6, lr}
 81087ae:	4e0e      	ldr	r6, [pc, #56]	; (81087e8 <sbrk_aligned+0x3c>)
 81087b0:	460c      	mov	r4, r1
 81087b2:	6831      	ldr	r1, [r6, #0]
 81087b4:	4605      	mov	r5, r0
 81087b6:	b911      	cbnz	r1, 81087be <sbrk_aligned+0x12>
 81087b8:	f000 fba6 	bl	8108f08 <_sbrk_r>
 81087bc:	6030      	str	r0, [r6, #0]
 81087be:	4621      	mov	r1, r4
 81087c0:	4628      	mov	r0, r5
 81087c2:	f000 fba1 	bl	8108f08 <_sbrk_r>
 81087c6:	1c43      	adds	r3, r0, #1
 81087c8:	d00a      	beq.n	81087e0 <sbrk_aligned+0x34>
 81087ca:	1cc4      	adds	r4, r0, #3
 81087cc:	f024 0403 	bic.w	r4, r4, #3
 81087d0:	42a0      	cmp	r0, r4
 81087d2:	d007      	beq.n	81087e4 <sbrk_aligned+0x38>
 81087d4:	1a21      	subs	r1, r4, r0
 81087d6:	4628      	mov	r0, r5
 81087d8:	f000 fb96 	bl	8108f08 <_sbrk_r>
 81087dc:	3001      	adds	r0, #1
 81087de:	d101      	bne.n	81087e4 <sbrk_aligned+0x38>
 81087e0:	f04f 34ff 	mov.w	r4, #4294967295
 81087e4:	4620      	mov	r0, r4
 81087e6:	bd70      	pop	{r4, r5, r6, pc}
 81087e8:	24000fa8 	.word	0x24000fa8

081087ec <_malloc_r>:
 81087ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81087f0:	1ccd      	adds	r5, r1, #3
 81087f2:	f025 0503 	bic.w	r5, r5, #3
 81087f6:	3508      	adds	r5, #8
 81087f8:	2d0c      	cmp	r5, #12
 81087fa:	bf38      	it	cc
 81087fc:	250c      	movcc	r5, #12
 81087fe:	2d00      	cmp	r5, #0
 8108800:	4607      	mov	r7, r0
 8108802:	db01      	blt.n	8108808 <_malloc_r+0x1c>
 8108804:	42a9      	cmp	r1, r5
 8108806:	d905      	bls.n	8108814 <_malloc_r+0x28>
 8108808:	230c      	movs	r3, #12
 810880a:	603b      	str	r3, [r7, #0]
 810880c:	2600      	movs	r6, #0
 810880e:	4630      	mov	r0, r6
 8108810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81088e8 <_malloc_r+0xfc>
 8108818:	f000 f868 	bl	81088ec <__malloc_lock>
 810881c:	f8d8 3000 	ldr.w	r3, [r8]
 8108820:	461c      	mov	r4, r3
 8108822:	bb5c      	cbnz	r4, 810887c <_malloc_r+0x90>
 8108824:	4629      	mov	r1, r5
 8108826:	4638      	mov	r0, r7
 8108828:	f7ff ffc0 	bl	81087ac <sbrk_aligned>
 810882c:	1c43      	adds	r3, r0, #1
 810882e:	4604      	mov	r4, r0
 8108830:	d155      	bne.n	81088de <_malloc_r+0xf2>
 8108832:	f8d8 4000 	ldr.w	r4, [r8]
 8108836:	4626      	mov	r6, r4
 8108838:	2e00      	cmp	r6, #0
 810883a:	d145      	bne.n	81088c8 <_malloc_r+0xdc>
 810883c:	2c00      	cmp	r4, #0
 810883e:	d048      	beq.n	81088d2 <_malloc_r+0xe6>
 8108840:	6823      	ldr	r3, [r4, #0]
 8108842:	4631      	mov	r1, r6
 8108844:	4638      	mov	r0, r7
 8108846:	eb04 0903 	add.w	r9, r4, r3
 810884a:	f000 fb5d 	bl	8108f08 <_sbrk_r>
 810884e:	4581      	cmp	r9, r0
 8108850:	d13f      	bne.n	81088d2 <_malloc_r+0xe6>
 8108852:	6821      	ldr	r1, [r4, #0]
 8108854:	1a6d      	subs	r5, r5, r1
 8108856:	4629      	mov	r1, r5
 8108858:	4638      	mov	r0, r7
 810885a:	f7ff ffa7 	bl	81087ac <sbrk_aligned>
 810885e:	3001      	adds	r0, #1
 8108860:	d037      	beq.n	81088d2 <_malloc_r+0xe6>
 8108862:	6823      	ldr	r3, [r4, #0]
 8108864:	442b      	add	r3, r5
 8108866:	6023      	str	r3, [r4, #0]
 8108868:	f8d8 3000 	ldr.w	r3, [r8]
 810886c:	2b00      	cmp	r3, #0
 810886e:	d038      	beq.n	81088e2 <_malloc_r+0xf6>
 8108870:	685a      	ldr	r2, [r3, #4]
 8108872:	42a2      	cmp	r2, r4
 8108874:	d12b      	bne.n	81088ce <_malloc_r+0xe2>
 8108876:	2200      	movs	r2, #0
 8108878:	605a      	str	r2, [r3, #4]
 810887a:	e00f      	b.n	810889c <_malloc_r+0xb0>
 810887c:	6822      	ldr	r2, [r4, #0]
 810887e:	1b52      	subs	r2, r2, r5
 8108880:	d41f      	bmi.n	81088c2 <_malloc_r+0xd6>
 8108882:	2a0b      	cmp	r2, #11
 8108884:	d917      	bls.n	81088b6 <_malloc_r+0xca>
 8108886:	1961      	adds	r1, r4, r5
 8108888:	42a3      	cmp	r3, r4
 810888a:	6025      	str	r5, [r4, #0]
 810888c:	bf18      	it	ne
 810888e:	6059      	strne	r1, [r3, #4]
 8108890:	6863      	ldr	r3, [r4, #4]
 8108892:	bf08      	it	eq
 8108894:	f8c8 1000 	streq.w	r1, [r8]
 8108898:	5162      	str	r2, [r4, r5]
 810889a:	604b      	str	r3, [r1, #4]
 810889c:	4638      	mov	r0, r7
 810889e:	f104 060b 	add.w	r6, r4, #11
 81088a2:	f000 f829 	bl	81088f8 <__malloc_unlock>
 81088a6:	f026 0607 	bic.w	r6, r6, #7
 81088aa:	1d23      	adds	r3, r4, #4
 81088ac:	1af2      	subs	r2, r6, r3
 81088ae:	d0ae      	beq.n	810880e <_malloc_r+0x22>
 81088b0:	1b9b      	subs	r3, r3, r6
 81088b2:	50a3      	str	r3, [r4, r2]
 81088b4:	e7ab      	b.n	810880e <_malloc_r+0x22>
 81088b6:	42a3      	cmp	r3, r4
 81088b8:	6862      	ldr	r2, [r4, #4]
 81088ba:	d1dd      	bne.n	8108878 <_malloc_r+0x8c>
 81088bc:	f8c8 2000 	str.w	r2, [r8]
 81088c0:	e7ec      	b.n	810889c <_malloc_r+0xb0>
 81088c2:	4623      	mov	r3, r4
 81088c4:	6864      	ldr	r4, [r4, #4]
 81088c6:	e7ac      	b.n	8108822 <_malloc_r+0x36>
 81088c8:	4634      	mov	r4, r6
 81088ca:	6876      	ldr	r6, [r6, #4]
 81088cc:	e7b4      	b.n	8108838 <_malloc_r+0x4c>
 81088ce:	4613      	mov	r3, r2
 81088d0:	e7cc      	b.n	810886c <_malloc_r+0x80>
 81088d2:	230c      	movs	r3, #12
 81088d4:	603b      	str	r3, [r7, #0]
 81088d6:	4638      	mov	r0, r7
 81088d8:	f000 f80e 	bl	81088f8 <__malloc_unlock>
 81088dc:	e797      	b.n	810880e <_malloc_r+0x22>
 81088de:	6025      	str	r5, [r4, #0]
 81088e0:	e7dc      	b.n	810889c <_malloc_r+0xb0>
 81088e2:	605b      	str	r3, [r3, #4]
 81088e4:	deff      	udf	#255	; 0xff
 81088e6:	bf00      	nop
 81088e8:	24000fa4 	.word	0x24000fa4

081088ec <__malloc_lock>:
 81088ec:	4801      	ldr	r0, [pc, #4]	; (81088f4 <__malloc_lock+0x8>)
 81088ee:	f7ff bf0f 	b.w	8108710 <__retarget_lock_acquire_recursive>
 81088f2:	bf00      	nop
 81088f4:	24000fa0 	.word	0x24000fa0

081088f8 <__malloc_unlock>:
 81088f8:	4801      	ldr	r0, [pc, #4]	; (8108900 <__malloc_unlock+0x8>)
 81088fa:	f7ff bf0a 	b.w	8108712 <__retarget_lock_release_recursive>
 81088fe:	bf00      	nop
 8108900:	24000fa0 	.word	0x24000fa0

08108904 <__ssputs_r>:
 8108904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108908:	688e      	ldr	r6, [r1, #8]
 810890a:	461f      	mov	r7, r3
 810890c:	42be      	cmp	r6, r7
 810890e:	680b      	ldr	r3, [r1, #0]
 8108910:	4682      	mov	sl, r0
 8108912:	460c      	mov	r4, r1
 8108914:	4690      	mov	r8, r2
 8108916:	d82c      	bhi.n	8108972 <__ssputs_r+0x6e>
 8108918:	898a      	ldrh	r2, [r1, #12]
 810891a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810891e:	d026      	beq.n	810896e <__ssputs_r+0x6a>
 8108920:	6965      	ldr	r5, [r4, #20]
 8108922:	6909      	ldr	r1, [r1, #16]
 8108924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8108928:	eba3 0901 	sub.w	r9, r3, r1
 810892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8108930:	1c7b      	adds	r3, r7, #1
 8108932:	444b      	add	r3, r9
 8108934:	106d      	asrs	r5, r5, #1
 8108936:	429d      	cmp	r5, r3
 8108938:	bf38      	it	cc
 810893a:	461d      	movcc	r5, r3
 810893c:	0553      	lsls	r3, r2, #21
 810893e:	d527      	bpl.n	8108990 <__ssputs_r+0x8c>
 8108940:	4629      	mov	r1, r5
 8108942:	f7ff ff53 	bl	81087ec <_malloc_r>
 8108946:	4606      	mov	r6, r0
 8108948:	b360      	cbz	r0, 81089a4 <__ssputs_r+0xa0>
 810894a:	6921      	ldr	r1, [r4, #16]
 810894c:	464a      	mov	r2, r9
 810894e:	f000 faeb 	bl	8108f28 <memcpy>
 8108952:	89a3      	ldrh	r3, [r4, #12]
 8108954:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8108958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810895c:	81a3      	strh	r3, [r4, #12]
 810895e:	6126      	str	r6, [r4, #16]
 8108960:	6165      	str	r5, [r4, #20]
 8108962:	444e      	add	r6, r9
 8108964:	eba5 0509 	sub.w	r5, r5, r9
 8108968:	6026      	str	r6, [r4, #0]
 810896a:	60a5      	str	r5, [r4, #8]
 810896c:	463e      	mov	r6, r7
 810896e:	42be      	cmp	r6, r7
 8108970:	d900      	bls.n	8108974 <__ssputs_r+0x70>
 8108972:	463e      	mov	r6, r7
 8108974:	6820      	ldr	r0, [r4, #0]
 8108976:	4632      	mov	r2, r6
 8108978:	4641      	mov	r1, r8
 810897a:	f000 faab 	bl	8108ed4 <memmove>
 810897e:	68a3      	ldr	r3, [r4, #8]
 8108980:	1b9b      	subs	r3, r3, r6
 8108982:	60a3      	str	r3, [r4, #8]
 8108984:	6823      	ldr	r3, [r4, #0]
 8108986:	4433      	add	r3, r6
 8108988:	6023      	str	r3, [r4, #0]
 810898a:	2000      	movs	r0, #0
 810898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108990:	462a      	mov	r2, r5
 8108992:	f000 fad7 	bl	8108f44 <_realloc_r>
 8108996:	4606      	mov	r6, r0
 8108998:	2800      	cmp	r0, #0
 810899a:	d1e0      	bne.n	810895e <__ssputs_r+0x5a>
 810899c:	6921      	ldr	r1, [r4, #16]
 810899e:	4650      	mov	r0, sl
 81089a0:	f7ff feb8 	bl	8108714 <_free_r>
 81089a4:	230c      	movs	r3, #12
 81089a6:	f8ca 3000 	str.w	r3, [sl]
 81089aa:	89a3      	ldrh	r3, [r4, #12]
 81089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81089b0:	81a3      	strh	r3, [r4, #12]
 81089b2:	f04f 30ff 	mov.w	r0, #4294967295
 81089b6:	e7e9      	b.n	810898c <__ssputs_r+0x88>

081089b8 <_svfiprintf_r>:
 81089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81089bc:	4698      	mov	r8, r3
 81089be:	898b      	ldrh	r3, [r1, #12]
 81089c0:	061b      	lsls	r3, r3, #24
 81089c2:	b09d      	sub	sp, #116	; 0x74
 81089c4:	4607      	mov	r7, r0
 81089c6:	460d      	mov	r5, r1
 81089c8:	4614      	mov	r4, r2
 81089ca:	d50e      	bpl.n	81089ea <_svfiprintf_r+0x32>
 81089cc:	690b      	ldr	r3, [r1, #16]
 81089ce:	b963      	cbnz	r3, 81089ea <_svfiprintf_r+0x32>
 81089d0:	2140      	movs	r1, #64	; 0x40
 81089d2:	f7ff ff0b 	bl	81087ec <_malloc_r>
 81089d6:	6028      	str	r0, [r5, #0]
 81089d8:	6128      	str	r0, [r5, #16]
 81089da:	b920      	cbnz	r0, 81089e6 <_svfiprintf_r+0x2e>
 81089dc:	230c      	movs	r3, #12
 81089de:	603b      	str	r3, [r7, #0]
 81089e0:	f04f 30ff 	mov.w	r0, #4294967295
 81089e4:	e0d0      	b.n	8108b88 <_svfiprintf_r+0x1d0>
 81089e6:	2340      	movs	r3, #64	; 0x40
 81089e8:	616b      	str	r3, [r5, #20]
 81089ea:	2300      	movs	r3, #0
 81089ec:	9309      	str	r3, [sp, #36]	; 0x24
 81089ee:	2320      	movs	r3, #32
 81089f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81089f4:	f8cd 800c 	str.w	r8, [sp, #12]
 81089f8:	2330      	movs	r3, #48	; 0x30
 81089fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8108ba0 <_svfiprintf_r+0x1e8>
 81089fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108a02:	f04f 0901 	mov.w	r9, #1
 8108a06:	4623      	mov	r3, r4
 8108a08:	469a      	mov	sl, r3
 8108a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108a0e:	b10a      	cbz	r2, 8108a14 <_svfiprintf_r+0x5c>
 8108a10:	2a25      	cmp	r2, #37	; 0x25
 8108a12:	d1f9      	bne.n	8108a08 <_svfiprintf_r+0x50>
 8108a14:	ebba 0b04 	subs.w	fp, sl, r4
 8108a18:	d00b      	beq.n	8108a32 <_svfiprintf_r+0x7a>
 8108a1a:	465b      	mov	r3, fp
 8108a1c:	4622      	mov	r2, r4
 8108a1e:	4629      	mov	r1, r5
 8108a20:	4638      	mov	r0, r7
 8108a22:	f7ff ff6f 	bl	8108904 <__ssputs_r>
 8108a26:	3001      	adds	r0, #1
 8108a28:	f000 80a9 	beq.w	8108b7e <_svfiprintf_r+0x1c6>
 8108a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108a2e:	445a      	add	r2, fp
 8108a30:	9209      	str	r2, [sp, #36]	; 0x24
 8108a32:	f89a 3000 	ldrb.w	r3, [sl]
 8108a36:	2b00      	cmp	r3, #0
 8108a38:	f000 80a1 	beq.w	8108b7e <_svfiprintf_r+0x1c6>
 8108a3c:	2300      	movs	r3, #0
 8108a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8108a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108a46:	f10a 0a01 	add.w	sl, sl, #1
 8108a4a:	9304      	str	r3, [sp, #16]
 8108a4c:	9307      	str	r3, [sp, #28]
 8108a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8108a52:	931a      	str	r3, [sp, #104]	; 0x68
 8108a54:	4654      	mov	r4, sl
 8108a56:	2205      	movs	r2, #5
 8108a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108a5c:	4850      	ldr	r0, [pc, #320]	; (8108ba0 <_svfiprintf_r+0x1e8>)
 8108a5e:	f7f7 fc3f 	bl	81002e0 <memchr>
 8108a62:	9a04      	ldr	r2, [sp, #16]
 8108a64:	b9d8      	cbnz	r0, 8108a9e <_svfiprintf_r+0xe6>
 8108a66:	06d0      	lsls	r0, r2, #27
 8108a68:	bf44      	itt	mi
 8108a6a:	2320      	movmi	r3, #32
 8108a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8108a70:	0711      	lsls	r1, r2, #28
 8108a72:	bf44      	itt	mi
 8108a74:	232b      	movmi	r3, #43	; 0x2b
 8108a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8108a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8108a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8108a80:	d015      	beq.n	8108aae <_svfiprintf_r+0xf6>
 8108a82:	9a07      	ldr	r2, [sp, #28]
 8108a84:	4654      	mov	r4, sl
 8108a86:	2000      	movs	r0, #0
 8108a88:	f04f 0c0a 	mov.w	ip, #10
 8108a8c:	4621      	mov	r1, r4
 8108a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108a92:	3b30      	subs	r3, #48	; 0x30
 8108a94:	2b09      	cmp	r3, #9
 8108a96:	d94d      	bls.n	8108b34 <_svfiprintf_r+0x17c>
 8108a98:	b1b0      	cbz	r0, 8108ac8 <_svfiprintf_r+0x110>
 8108a9a:	9207      	str	r2, [sp, #28]
 8108a9c:	e014      	b.n	8108ac8 <_svfiprintf_r+0x110>
 8108a9e:	eba0 0308 	sub.w	r3, r0, r8
 8108aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8108aa6:	4313      	orrs	r3, r2
 8108aa8:	9304      	str	r3, [sp, #16]
 8108aaa:	46a2      	mov	sl, r4
 8108aac:	e7d2      	b.n	8108a54 <_svfiprintf_r+0x9c>
 8108aae:	9b03      	ldr	r3, [sp, #12]
 8108ab0:	1d19      	adds	r1, r3, #4
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	9103      	str	r1, [sp, #12]
 8108ab6:	2b00      	cmp	r3, #0
 8108ab8:	bfbb      	ittet	lt
 8108aba:	425b      	neglt	r3, r3
 8108abc:	f042 0202 	orrlt.w	r2, r2, #2
 8108ac0:	9307      	strge	r3, [sp, #28]
 8108ac2:	9307      	strlt	r3, [sp, #28]
 8108ac4:	bfb8      	it	lt
 8108ac6:	9204      	strlt	r2, [sp, #16]
 8108ac8:	7823      	ldrb	r3, [r4, #0]
 8108aca:	2b2e      	cmp	r3, #46	; 0x2e
 8108acc:	d10c      	bne.n	8108ae8 <_svfiprintf_r+0x130>
 8108ace:	7863      	ldrb	r3, [r4, #1]
 8108ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8108ad2:	d134      	bne.n	8108b3e <_svfiprintf_r+0x186>
 8108ad4:	9b03      	ldr	r3, [sp, #12]
 8108ad6:	1d1a      	adds	r2, r3, #4
 8108ad8:	681b      	ldr	r3, [r3, #0]
 8108ada:	9203      	str	r2, [sp, #12]
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	bfb8      	it	lt
 8108ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8108ae4:	3402      	adds	r4, #2
 8108ae6:	9305      	str	r3, [sp, #20]
 8108ae8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8108bb0 <_svfiprintf_r+0x1f8>
 8108aec:	7821      	ldrb	r1, [r4, #0]
 8108aee:	2203      	movs	r2, #3
 8108af0:	4650      	mov	r0, sl
 8108af2:	f7f7 fbf5 	bl	81002e0 <memchr>
 8108af6:	b138      	cbz	r0, 8108b08 <_svfiprintf_r+0x150>
 8108af8:	9b04      	ldr	r3, [sp, #16]
 8108afa:	eba0 000a 	sub.w	r0, r0, sl
 8108afe:	2240      	movs	r2, #64	; 0x40
 8108b00:	4082      	lsls	r2, r0
 8108b02:	4313      	orrs	r3, r2
 8108b04:	3401      	adds	r4, #1
 8108b06:	9304      	str	r3, [sp, #16]
 8108b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108b0c:	4825      	ldr	r0, [pc, #148]	; (8108ba4 <_svfiprintf_r+0x1ec>)
 8108b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8108b12:	2206      	movs	r2, #6
 8108b14:	f7f7 fbe4 	bl	81002e0 <memchr>
 8108b18:	2800      	cmp	r0, #0
 8108b1a:	d038      	beq.n	8108b8e <_svfiprintf_r+0x1d6>
 8108b1c:	4b22      	ldr	r3, [pc, #136]	; (8108ba8 <_svfiprintf_r+0x1f0>)
 8108b1e:	bb1b      	cbnz	r3, 8108b68 <_svfiprintf_r+0x1b0>
 8108b20:	9b03      	ldr	r3, [sp, #12]
 8108b22:	3307      	adds	r3, #7
 8108b24:	f023 0307 	bic.w	r3, r3, #7
 8108b28:	3308      	adds	r3, #8
 8108b2a:	9303      	str	r3, [sp, #12]
 8108b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b2e:	4433      	add	r3, r6
 8108b30:	9309      	str	r3, [sp, #36]	; 0x24
 8108b32:	e768      	b.n	8108a06 <_svfiprintf_r+0x4e>
 8108b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8108b38:	460c      	mov	r4, r1
 8108b3a:	2001      	movs	r0, #1
 8108b3c:	e7a6      	b.n	8108a8c <_svfiprintf_r+0xd4>
 8108b3e:	2300      	movs	r3, #0
 8108b40:	3401      	adds	r4, #1
 8108b42:	9305      	str	r3, [sp, #20]
 8108b44:	4619      	mov	r1, r3
 8108b46:	f04f 0c0a 	mov.w	ip, #10
 8108b4a:	4620      	mov	r0, r4
 8108b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108b50:	3a30      	subs	r2, #48	; 0x30
 8108b52:	2a09      	cmp	r2, #9
 8108b54:	d903      	bls.n	8108b5e <_svfiprintf_r+0x1a6>
 8108b56:	2b00      	cmp	r3, #0
 8108b58:	d0c6      	beq.n	8108ae8 <_svfiprintf_r+0x130>
 8108b5a:	9105      	str	r1, [sp, #20]
 8108b5c:	e7c4      	b.n	8108ae8 <_svfiprintf_r+0x130>
 8108b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8108b62:	4604      	mov	r4, r0
 8108b64:	2301      	movs	r3, #1
 8108b66:	e7f0      	b.n	8108b4a <_svfiprintf_r+0x192>
 8108b68:	ab03      	add	r3, sp, #12
 8108b6a:	9300      	str	r3, [sp, #0]
 8108b6c:	462a      	mov	r2, r5
 8108b6e:	4b0f      	ldr	r3, [pc, #60]	; (8108bac <_svfiprintf_r+0x1f4>)
 8108b70:	a904      	add	r1, sp, #16
 8108b72:	4638      	mov	r0, r7
 8108b74:	f3af 8000 	nop.w
 8108b78:	1c42      	adds	r2, r0, #1
 8108b7a:	4606      	mov	r6, r0
 8108b7c:	d1d6      	bne.n	8108b2c <_svfiprintf_r+0x174>
 8108b7e:	89ab      	ldrh	r3, [r5, #12]
 8108b80:	065b      	lsls	r3, r3, #25
 8108b82:	f53f af2d 	bmi.w	81089e0 <_svfiprintf_r+0x28>
 8108b86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108b88:	b01d      	add	sp, #116	; 0x74
 8108b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b8e:	ab03      	add	r3, sp, #12
 8108b90:	9300      	str	r3, [sp, #0]
 8108b92:	462a      	mov	r2, r5
 8108b94:	4b05      	ldr	r3, [pc, #20]	; (8108bac <_svfiprintf_r+0x1f4>)
 8108b96:	a904      	add	r1, sp, #16
 8108b98:	4638      	mov	r0, r7
 8108b9a:	f000 f879 	bl	8108c90 <_printf_i>
 8108b9e:	e7eb      	b.n	8108b78 <_svfiprintf_r+0x1c0>
 8108ba0:	0810cf4c 	.word	0x0810cf4c
 8108ba4:	0810cf56 	.word	0x0810cf56
 8108ba8:	00000000 	.word	0x00000000
 8108bac:	08108905 	.word	0x08108905
 8108bb0:	0810cf52 	.word	0x0810cf52

08108bb4 <_printf_common>:
 8108bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108bb8:	4616      	mov	r6, r2
 8108bba:	4699      	mov	r9, r3
 8108bbc:	688a      	ldr	r2, [r1, #8]
 8108bbe:	690b      	ldr	r3, [r1, #16]
 8108bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108bc4:	4293      	cmp	r3, r2
 8108bc6:	bfb8      	it	lt
 8108bc8:	4613      	movlt	r3, r2
 8108bca:	6033      	str	r3, [r6, #0]
 8108bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108bd0:	4607      	mov	r7, r0
 8108bd2:	460c      	mov	r4, r1
 8108bd4:	b10a      	cbz	r2, 8108bda <_printf_common+0x26>
 8108bd6:	3301      	adds	r3, #1
 8108bd8:	6033      	str	r3, [r6, #0]
 8108bda:	6823      	ldr	r3, [r4, #0]
 8108bdc:	0699      	lsls	r1, r3, #26
 8108bde:	bf42      	ittt	mi
 8108be0:	6833      	ldrmi	r3, [r6, #0]
 8108be2:	3302      	addmi	r3, #2
 8108be4:	6033      	strmi	r3, [r6, #0]
 8108be6:	6825      	ldr	r5, [r4, #0]
 8108be8:	f015 0506 	ands.w	r5, r5, #6
 8108bec:	d106      	bne.n	8108bfc <_printf_common+0x48>
 8108bee:	f104 0a19 	add.w	sl, r4, #25
 8108bf2:	68e3      	ldr	r3, [r4, #12]
 8108bf4:	6832      	ldr	r2, [r6, #0]
 8108bf6:	1a9b      	subs	r3, r3, r2
 8108bf8:	42ab      	cmp	r3, r5
 8108bfa:	dc26      	bgt.n	8108c4a <_printf_common+0x96>
 8108bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108c00:	1e13      	subs	r3, r2, #0
 8108c02:	6822      	ldr	r2, [r4, #0]
 8108c04:	bf18      	it	ne
 8108c06:	2301      	movne	r3, #1
 8108c08:	0692      	lsls	r2, r2, #26
 8108c0a:	d42b      	bmi.n	8108c64 <_printf_common+0xb0>
 8108c0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108c10:	4649      	mov	r1, r9
 8108c12:	4638      	mov	r0, r7
 8108c14:	47c0      	blx	r8
 8108c16:	3001      	adds	r0, #1
 8108c18:	d01e      	beq.n	8108c58 <_printf_common+0xa4>
 8108c1a:	6823      	ldr	r3, [r4, #0]
 8108c1c:	6922      	ldr	r2, [r4, #16]
 8108c1e:	f003 0306 	and.w	r3, r3, #6
 8108c22:	2b04      	cmp	r3, #4
 8108c24:	bf02      	ittt	eq
 8108c26:	68e5      	ldreq	r5, [r4, #12]
 8108c28:	6833      	ldreq	r3, [r6, #0]
 8108c2a:	1aed      	subeq	r5, r5, r3
 8108c2c:	68a3      	ldr	r3, [r4, #8]
 8108c2e:	bf0c      	ite	eq
 8108c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108c34:	2500      	movne	r5, #0
 8108c36:	4293      	cmp	r3, r2
 8108c38:	bfc4      	itt	gt
 8108c3a:	1a9b      	subgt	r3, r3, r2
 8108c3c:	18ed      	addgt	r5, r5, r3
 8108c3e:	2600      	movs	r6, #0
 8108c40:	341a      	adds	r4, #26
 8108c42:	42b5      	cmp	r5, r6
 8108c44:	d11a      	bne.n	8108c7c <_printf_common+0xc8>
 8108c46:	2000      	movs	r0, #0
 8108c48:	e008      	b.n	8108c5c <_printf_common+0xa8>
 8108c4a:	2301      	movs	r3, #1
 8108c4c:	4652      	mov	r2, sl
 8108c4e:	4649      	mov	r1, r9
 8108c50:	4638      	mov	r0, r7
 8108c52:	47c0      	blx	r8
 8108c54:	3001      	adds	r0, #1
 8108c56:	d103      	bne.n	8108c60 <_printf_common+0xac>
 8108c58:	f04f 30ff 	mov.w	r0, #4294967295
 8108c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108c60:	3501      	adds	r5, #1
 8108c62:	e7c6      	b.n	8108bf2 <_printf_common+0x3e>
 8108c64:	18e1      	adds	r1, r4, r3
 8108c66:	1c5a      	adds	r2, r3, #1
 8108c68:	2030      	movs	r0, #48	; 0x30
 8108c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8108c6e:	4422      	add	r2, r4
 8108c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108c74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108c78:	3302      	adds	r3, #2
 8108c7a:	e7c7      	b.n	8108c0c <_printf_common+0x58>
 8108c7c:	2301      	movs	r3, #1
 8108c7e:	4622      	mov	r2, r4
 8108c80:	4649      	mov	r1, r9
 8108c82:	4638      	mov	r0, r7
 8108c84:	47c0      	blx	r8
 8108c86:	3001      	adds	r0, #1
 8108c88:	d0e6      	beq.n	8108c58 <_printf_common+0xa4>
 8108c8a:	3601      	adds	r6, #1
 8108c8c:	e7d9      	b.n	8108c42 <_printf_common+0x8e>
	...

08108c90 <_printf_i>:
 8108c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108c94:	7e0f      	ldrb	r7, [r1, #24]
 8108c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108c98:	2f78      	cmp	r7, #120	; 0x78
 8108c9a:	4691      	mov	r9, r2
 8108c9c:	4680      	mov	r8, r0
 8108c9e:	460c      	mov	r4, r1
 8108ca0:	469a      	mov	sl, r3
 8108ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8108ca6:	d807      	bhi.n	8108cb8 <_printf_i+0x28>
 8108ca8:	2f62      	cmp	r7, #98	; 0x62
 8108caa:	d80a      	bhi.n	8108cc2 <_printf_i+0x32>
 8108cac:	2f00      	cmp	r7, #0
 8108cae:	f000 80d4 	beq.w	8108e5a <_printf_i+0x1ca>
 8108cb2:	2f58      	cmp	r7, #88	; 0x58
 8108cb4:	f000 80c0 	beq.w	8108e38 <_printf_i+0x1a8>
 8108cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108cc0:	e03a      	b.n	8108d38 <_printf_i+0xa8>
 8108cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108cc6:	2b15      	cmp	r3, #21
 8108cc8:	d8f6      	bhi.n	8108cb8 <_printf_i+0x28>
 8108cca:	a101      	add	r1, pc, #4	; (adr r1, 8108cd0 <_printf_i+0x40>)
 8108ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108cd0:	08108d29 	.word	0x08108d29
 8108cd4:	08108d3d 	.word	0x08108d3d
 8108cd8:	08108cb9 	.word	0x08108cb9
 8108cdc:	08108cb9 	.word	0x08108cb9
 8108ce0:	08108cb9 	.word	0x08108cb9
 8108ce4:	08108cb9 	.word	0x08108cb9
 8108ce8:	08108d3d 	.word	0x08108d3d
 8108cec:	08108cb9 	.word	0x08108cb9
 8108cf0:	08108cb9 	.word	0x08108cb9
 8108cf4:	08108cb9 	.word	0x08108cb9
 8108cf8:	08108cb9 	.word	0x08108cb9
 8108cfc:	08108e41 	.word	0x08108e41
 8108d00:	08108d69 	.word	0x08108d69
 8108d04:	08108dfb 	.word	0x08108dfb
 8108d08:	08108cb9 	.word	0x08108cb9
 8108d0c:	08108cb9 	.word	0x08108cb9
 8108d10:	08108e63 	.word	0x08108e63
 8108d14:	08108cb9 	.word	0x08108cb9
 8108d18:	08108d69 	.word	0x08108d69
 8108d1c:	08108cb9 	.word	0x08108cb9
 8108d20:	08108cb9 	.word	0x08108cb9
 8108d24:	08108e03 	.word	0x08108e03
 8108d28:	682b      	ldr	r3, [r5, #0]
 8108d2a:	1d1a      	adds	r2, r3, #4
 8108d2c:	681b      	ldr	r3, [r3, #0]
 8108d2e:	602a      	str	r2, [r5, #0]
 8108d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108d38:	2301      	movs	r3, #1
 8108d3a:	e09f      	b.n	8108e7c <_printf_i+0x1ec>
 8108d3c:	6820      	ldr	r0, [r4, #0]
 8108d3e:	682b      	ldr	r3, [r5, #0]
 8108d40:	0607      	lsls	r7, r0, #24
 8108d42:	f103 0104 	add.w	r1, r3, #4
 8108d46:	6029      	str	r1, [r5, #0]
 8108d48:	d501      	bpl.n	8108d4e <_printf_i+0xbe>
 8108d4a:	681e      	ldr	r6, [r3, #0]
 8108d4c:	e003      	b.n	8108d56 <_printf_i+0xc6>
 8108d4e:	0646      	lsls	r6, r0, #25
 8108d50:	d5fb      	bpl.n	8108d4a <_printf_i+0xba>
 8108d52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8108d56:	2e00      	cmp	r6, #0
 8108d58:	da03      	bge.n	8108d62 <_printf_i+0xd2>
 8108d5a:	232d      	movs	r3, #45	; 0x2d
 8108d5c:	4276      	negs	r6, r6
 8108d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108d62:	485a      	ldr	r0, [pc, #360]	; (8108ecc <_printf_i+0x23c>)
 8108d64:	230a      	movs	r3, #10
 8108d66:	e012      	b.n	8108d8e <_printf_i+0xfe>
 8108d68:	682b      	ldr	r3, [r5, #0]
 8108d6a:	6820      	ldr	r0, [r4, #0]
 8108d6c:	1d19      	adds	r1, r3, #4
 8108d6e:	6029      	str	r1, [r5, #0]
 8108d70:	0605      	lsls	r5, r0, #24
 8108d72:	d501      	bpl.n	8108d78 <_printf_i+0xe8>
 8108d74:	681e      	ldr	r6, [r3, #0]
 8108d76:	e002      	b.n	8108d7e <_printf_i+0xee>
 8108d78:	0641      	lsls	r1, r0, #25
 8108d7a:	d5fb      	bpl.n	8108d74 <_printf_i+0xe4>
 8108d7c:	881e      	ldrh	r6, [r3, #0]
 8108d7e:	4853      	ldr	r0, [pc, #332]	; (8108ecc <_printf_i+0x23c>)
 8108d80:	2f6f      	cmp	r7, #111	; 0x6f
 8108d82:	bf0c      	ite	eq
 8108d84:	2308      	moveq	r3, #8
 8108d86:	230a      	movne	r3, #10
 8108d88:	2100      	movs	r1, #0
 8108d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8108d8e:	6865      	ldr	r5, [r4, #4]
 8108d90:	60a5      	str	r5, [r4, #8]
 8108d92:	2d00      	cmp	r5, #0
 8108d94:	bfa2      	ittt	ge
 8108d96:	6821      	ldrge	r1, [r4, #0]
 8108d98:	f021 0104 	bicge.w	r1, r1, #4
 8108d9c:	6021      	strge	r1, [r4, #0]
 8108d9e:	b90e      	cbnz	r6, 8108da4 <_printf_i+0x114>
 8108da0:	2d00      	cmp	r5, #0
 8108da2:	d04b      	beq.n	8108e3c <_printf_i+0x1ac>
 8108da4:	4615      	mov	r5, r2
 8108da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8108daa:	fb03 6711 	mls	r7, r3, r1, r6
 8108dae:	5dc7      	ldrb	r7, [r0, r7]
 8108db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108db4:	4637      	mov	r7, r6
 8108db6:	42bb      	cmp	r3, r7
 8108db8:	460e      	mov	r6, r1
 8108dba:	d9f4      	bls.n	8108da6 <_printf_i+0x116>
 8108dbc:	2b08      	cmp	r3, #8
 8108dbe:	d10b      	bne.n	8108dd8 <_printf_i+0x148>
 8108dc0:	6823      	ldr	r3, [r4, #0]
 8108dc2:	07de      	lsls	r6, r3, #31
 8108dc4:	d508      	bpl.n	8108dd8 <_printf_i+0x148>
 8108dc6:	6923      	ldr	r3, [r4, #16]
 8108dc8:	6861      	ldr	r1, [r4, #4]
 8108dca:	4299      	cmp	r1, r3
 8108dcc:	bfde      	ittt	le
 8108dce:	2330      	movle	r3, #48	; 0x30
 8108dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8108dd8:	1b52      	subs	r2, r2, r5
 8108dda:	6122      	str	r2, [r4, #16]
 8108ddc:	f8cd a000 	str.w	sl, [sp]
 8108de0:	464b      	mov	r3, r9
 8108de2:	aa03      	add	r2, sp, #12
 8108de4:	4621      	mov	r1, r4
 8108de6:	4640      	mov	r0, r8
 8108de8:	f7ff fee4 	bl	8108bb4 <_printf_common>
 8108dec:	3001      	adds	r0, #1
 8108dee:	d14a      	bne.n	8108e86 <_printf_i+0x1f6>
 8108df0:	f04f 30ff 	mov.w	r0, #4294967295
 8108df4:	b004      	add	sp, #16
 8108df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108dfa:	6823      	ldr	r3, [r4, #0]
 8108dfc:	f043 0320 	orr.w	r3, r3, #32
 8108e00:	6023      	str	r3, [r4, #0]
 8108e02:	4833      	ldr	r0, [pc, #204]	; (8108ed0 <_printf_i+0x240>)
 8108e04:	2778      	movs	r7, #120	; 0x78
 8108e06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8108e0a:	6823      	ldr	r3, [r4, #0]
 8108e0c:	6829      	ldr	r1, [r5, #0]
 8108e0e:	061f      	lsls	r7, r3, #24
 8108e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8108e14:	d402      	bmi.n	8108e1c <_printf_i+0x18c>
 8108e16:	065f      	lsls	r7, r3, #25
 8108e18:	bf48      	it	mi
 8108e1a:	b2b6      	uxthmi	r6, r6
 8108e1c:	07df      	lsls	r7, r3, #31
 8108e1e:	bf48      	it	mi
 8108e20:	f043 0320 	orrmi.w	r3, r3, #32
 8108e24:	6029      	str	r1, [r5, #0]
 8108e26:	bf48      	it	mi
 8108e28:	6023      	strmi	r3, [r4, #0]
 8108e2a:	b91e      	cbnz	r6, 8108e34 <_printf_i+0x1a4>
 8108e2c:	6823      	ldr	r3, [r4, #0]
 8108e2e:	f023 0320 	bic.w	r3, r3, #32
 8108e32:	6023      	str	r3, [r4, #0]
 8108e34:	2310      	movs	r3, #16
 8108e36:	e7a7      	b.n	8108d88 <_printf_i+0xf8>
 8108e38:	4824      	ldr	r0, [pc, #144]	; (8108ecc <_printf_i+0x23c>)
 8108e3a:	e7e4      	b.n	8108e06 <_printf_i+0x176>
 8108e3c:	4615      	mov	r5, r2
 8108e3e:	e7bd      	b.n	8108dbc <_printf_i+0x12c>
 8108e40:	682b      	ldr	r3, [r5, #0]
 8108e42:	6826      	ldr	r6, [r4, #0]
 8108e44:	6961      	ldr	r1, [r4, #20]
 8108e46:	1d18      	adds	r0, r3, #4
 8108e48:	6028      	str	r0, [r5, #0]
 8108e4a:	0635      	lsls	r5, r6, #24
 8108e4c:	681b      	ldr	r3, [r3, #0]
 8108e4e:	d501      	bpl.n	8108e54 <_printf_i+0x1c4>
 8108e50:	6019      	str	r1, [r3, #0]
 8108e52:	e002      	b.n	8108e5a <_printf_i+0x1ca>
 8108e54:	0670      	lsls	r0, r6, #25
 8108e56:	d5fb      	bpl.n	8108e50 <_printf_i+0x1c0>
 8108e58:	8019      	strh	r1, [r3, #0]
 8108e5a:	2300      	movs	r3, #0
 8108e5c:	6123      	str	r3, [r4, #16]
 8108e5e:	4615      	mov	r5, r2
 8108e60:	e7bc      	b.n	8108ddc <_printf_i+0x14c>
 8108e62:	682b      	ldr	r3, [r5, #0]
 8108e64:	1d1a      	adds	r2, r3, #4
 8108e66:	602a      	str	r2, [r5, #0]
 8108e68:	681d      	ldr	r5, [r3, #0]
 8108e6a:	6862      	ldr	r2, [r4, #4]
 8108e6c:	2100      	movs	r1, #0
 8108e6e:	4628      	mov	r0, r5
 8108e70:	f7f7 fa36 	bl	81002e0 <memchr>
 8108e74:	b108      	cbz	r0, 8108e7a <_printf_i+0x1ea>
 8108e76:	1b40      	subs	r0, r0, r5
 8108e78:	6060      	str	r0, [r4, #4]
 8108e7a:	6863      	ldr	r3, [r4, #4]
 8108e7c:	6123      	str	r3, [r4, #16]
 8108e7e:	2300      	movs	r3, #0
 8108e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108e84:	e7aa      	b.n	8108ddc <_printf_i+0x14c>
 8108e86:	6923      	ldr	r3, [r4, #16]
 8108e88:	462a      	mov	r2, r5
 8108e8a:	4649      	mov	r1, r9
 8108e8c:	4640      	mov	r0, r8
 8108e8e:	47d0      	blx	sl
 8108e90:	3001      	adds	r0, #1
 8108e92:	d0ad      	beq.n	8108df0 <_printf_i+0x160>
 8108e94:	6823      	ldr	r3, [r4, #0]
 8108e96:	079b      	lsls	r3, r3, #30
 8108e98:	d413      	bmi.n	8108ec2 <_printf_i+0x232>
 8108e9a:	68e0      	ldr	r0, [r4, #12]
 8108e9c:	9b03      	ldr	r3, [sp, #12]
 8108e9e:	4298      	cmp	r0, r3
 8108ea0:	bfb8      	it	lt
 8108ea2:	4618      	movlt	r0, r3
 8108ea4:	e7a6      	b.n	8108df4 <_printf_i+0x164>
 8108ea6:	2301      	movs	r3, #1
 8108ea8:	4632      	mov	r2, r6
 8108eaa:	4649      	mov	r1, r9
 8108eac:	4640      	mov	r0, r8
 8108eae:	47d0      	blx	sl
 8108eb0:	3001      	adds	r0, #1
 8108eb2:	d09d      	beq.n	8108df0 <_printf_i+0x160>
 8108eb4:	3501      	adds	r5, #1
 8108eb6:	68e3      	ldr	r3, [r4, #12]
 8108eb8:	9903      	ldr	r1, [sp, #12]
 8108eba:	1a5b      	subs	r3, r3, r1
 8108ebc:	42ab      	cmp	r3, r5
 8108ebe:	dcf2      	bgt.n	8108ea6 <_printf_i+0x216>
 8108ec0:	e7eb      	b.n	8108e9a <_printf_i+0x20a>
 8108ec2:	2500      	movs	r5, #0
 8108ec4:	f104 0619 	add.w	r6, r4, #25
 8108ec8:	e7f5      	b.n	8108eb6 <_printf_i+0x226>
 8108eca:	bf00      	nop
 8108ecc:	0810cf5d 	.word	0x0810cf5d
 8108ed0:	0810cf6e 	.word	0x0810cf6e

08108ed4 <memmove>:
 8108ed4:	4288      	cmp	r0, r1
 8108ed6:	b510      	push	{r4, lr}
 8108ed8:	eb01 0402 	add.w	r4, r1, r2
 8108edc:	d902      	bls.n	8108ee4 <memmove+0x10>
 8108ede:	4284      	cmp	r4, r0
 8108ee0:	4623      	mov	r3, r4
 8108ee2:	d807      	bhi.n	8108ef4 <memmove+0x20>
 8108ee4:	1e43      	subs	r3, r0, #1
 8108ee6:	42a1      	cmp	r1, r4
 8108ee8:	d008      	beq.n	8108efc <memmove+0x28>
 8108eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8108ef2:	e7f8      	b.n	8108ee6 <memmove+0x12>
 8108ef4:	4402      	add	r2, r0
 8108ef6:	4601      	mov	r1, r0
 8108ef8:	428a      	cmp	r2, r1
 8108efa:	d100      	bne.n	8108efe <memmove+0x2a>
 8108efc:	bd10      	pop	{r4, pc}
 8108efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8108f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8108f06:	e7f7      	b.n	8108ef8 <memmove+0x24>

08108f08 <_sbrk_r>:
 8108f08:	b538      	push	{r3, r4, r5, lr}
 8108f0a:	4d06      	ldr	r5, [pc, #24]	; (8108f24 <_sbrk_r+0x1c>)
 8108f0c:	2300      	movs	r3, #0
 8108f0e:	4604      	mov	r4, r0
 8108f10:	4608      	mov	r0, r1
 8108f12:	602b      	str	r3, [r5, #0]
 8108f14:	f7f7 fbbc 	bl	8100690 <_sbrk>
 8108f18:	1c43      	adds	r3, r0, #1
 8108f1a:	d102      	bne.n	8108f22 <_sbrk_r+0x1a>
 8108f1c:	682b      	ldr	r3, [r5, #0]
 8108f1e:	b103      	cbz	r3, 8108f22 <_sbrk_r+0x1a>
 8108f20:	6023      	str	r3, [r4, #0]
 8108f22:	bd38      	pop	{r3, r4, r5, pc}
 8108f24:	24000f9c 	.word	0x24000f9c

08108f28 <memcpy>:
 8108f28:	440a      	add	r2, r1
 8108f2a:	4291      	cmp	r1, r2
 8108f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8108f30:	d100      	bne.n	8108f34 <memcpy+0xc>
 8108f32:	4770      	bx	lr
 8108f34:	b510      	push	{r4, lr}
 8108f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108f3e:	4291      	cmp	r1, r2
 8108f40:	d1f9      	bne.n	8108f36 <memcpy+0xe>
 8108f42:	bd10      	pop	{r4, pc}

08108f44 <_realloc_r>:
 8108f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108f48:	4680      	mov	r8, r0
 8108f4a:	4614      	mov	r4, r2
 8108f4c:	460e      	mov	r6, r1
 8108f4e:	b921      	cbnz	r1, 8108f5a <_realloc_r+0x16>
 8108f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108f54:	4611      	mov	r1, r2
 8108f56:	f7ff bc49 	b.w	81087ec <_malloc_r>
 8108f5a:	b92a      	cbnz	r2, 8108f68 <_realloc_r+0x24>
 8108f5c:	f7ff fbda 	bl	8108714 <_free_r>
 8108f60:	4625      	mov	r5, r4
 8108f62:	4628      	mov	r0, r5
 8108f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108f68:	f000 f81b 	bl	8108fa2 <_malloc_usable_size_r>
 8108f6c:	4284      	cmp	r4, r0
 8108f6e:	4607      	mov	r7, r0
 8108f70:	d802      	bhi.n	8108f78 <_realloc_r+0x34>
 8108f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8108f76:	d812      	bhi.n	8108f9e <_realloc_r+0x5a>
 8108f78:	4621      	mov	r1, r4
 8108f7a:	4640      	mov	r0, r8
 8108f7c:	f7ff fc36 	bl	81087ec <_malloc_r>
 8108f80:	4605      	mov	r5, r0
 8108f82:	2800      	cmp	r0, #0
 8108f84:	d0ed      	beq.n	8108f62 <_realloc_r+0x1e>
 8108f86:	42bc      	cmp	r4, r7
 8108f88:	4622      	mov	r2, r4
 8108f8a:	4631      	mov	r1, r6
 8108f8c:	bf28      	it	cs
 8108f8e:	463a      	movcs	r2, r7
 8108f90:	f7ff ffca 	bl	8108f28 <memcpy>
 8108f94:	4631      	mov	r1, r6
 8108f96:	4640      	mov	r0, r8
 8108f98:	f7ff fbbc 	bl	8108714 <_free_r>
 8108f9c:	e7e1      	b.n	8108f62 <_realloc_r+0x1e>
 8108f9e:	4635      	mov	r5, r6
 8108fa0:	e7df      	b.n	8108f62 <_realloc_r+0x1e>

08108fa2 <_malloc_usable_size_r>:
 8108fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108fa6:	1f18      	subs	r0, r3, #4
 8108fa8:	2b00      	cmp	r3, #0
 8108faa:	bfbc      	itt	lt
 8108fac:	580b      	ldrlt	r3, [r1, r0]
 8108fae:	18c0      	addlt	r0, r0, r3
 8108fb0:	4770      	bx	lr
	...

08108fb4 <_init>:
 8108fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108fb6:	bf00      	nop
 8108fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108fba:	bc08      	pop	{r3}
 8108fbc:	469e      	mov	lr, r3
 8108fbe:	4770      	bx	lr

08108fc0 <_fini>:
 8108fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108fc2:	bf00      	nop
 8108fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108fc6:	bc08      	pop	{r3}
 8108fc8:	469e      	mov	lr, r3
 8108fca:	4770      	bx	lr
