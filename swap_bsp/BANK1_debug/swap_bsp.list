
swap_bsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041c4  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080133f4  080133f4  000233f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080133fc  080133fc  000233fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013400  08013400  00023400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  20000000  08013404  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c48  200000c8  080134cc  000300c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001d10  080134cc  00031d10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027aeb  00000000  00000000  00030139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000595a  00000000  00000000  00057c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c18  00000000  00000000  0005d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000015bc  00000000  00000000  0005f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000414e3  00000000  00000000  00060754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c894  00000000  00000000  000a1c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00194bd0  00000000  00000000  000ce4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000079ac  00000000  00000000  0026309c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  0026aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000c8 	.word	0x200000c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f218 	.word	0x0800f218

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000cc 	.word	0x200000cc
 80002dc:	0800f218 	.word	0x0800f218

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	int len = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d102      	bne.n	80006c6 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80006c0:	230c      	movs	r3, #12
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e005      	b.n	80006d2 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7a1b      	ldrb	r3, [r3, #8]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d101      	bne.n	80006d2 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80006ce:	230a      	movs	r3, #10
 80006d0:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	330c      	adds	r3, #12
 80006d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006da:	f000 fb5e 	bl	8000d9a <MQTTstrlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	3302      	adds	r3, #2
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7edb      	ldrb	r3, [r3, #27]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d013      	beq.n	8000718 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3324      	adds	r3, #36	; 0x24
 80006f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006f8:	f000 fb4f 	bl	8000d9a <MQTTstrlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	1c9c      	adds	r4, r3, #2
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3330      	adds	r3, #48	; 0x30
 8000704:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000708:	f000 fb47 	bl	8000d9a <MQTTstrlen>
 800070c:	4603      	mov	r3, r0
 800070e:	4423      	add	r3, r4
 8000710:	3302      	adds	r3, #2
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <MQTTSerialize_connectLength+0x7c>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00a      	beq.n	800073e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3340      	adds	r3, #64	; 0x40
 800072c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000730:	f000 fb33 	bl	8000d9a <MQTTstrlen>
 8000734:	4603      	mov	r3, r0
 8000736:	3302      	adds	r3, #2
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	2b00      	cmp	r3, #0
 8000744:	d103      	bne.n	800074e <MQTTSerialize_connectLength+0xa2>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00a      	beq.n	8000764 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	334c      	adds	r3, #76	; 0x4c
 8000752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000756:	f000 fb20 	bl	8000d9a <MQTTstrlen>
 800075a:	4603      	mov	r3, r0
 800075c:	3302      	adds	r3, #2
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000764:	68fb      	ldr	r3, [r7, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
	...

08000770 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff8a 	bl	80006ac <MQTTSerialize_connectLength>
 8000798:	6238      	str	r0, [r7, #32]
 800079a:	6a38      	ldr	r0, [r7, #32]
 800079c:	f000 f9b2 	bl	8000b04 <MQTTPacket_len>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	da03      	bge.n	80007b0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80007a8:	f06f 0301 	mvn.w	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80007ae:	e0c2      	b.n	8000936 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80007b4:	7e3b      	ldrb	r3, [r7, #24]
 80007b6:	2201      	movs	r2, #1
 80007b8:	f362 1307 	bfi	r3, r2, #4, #4
 80007bc:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80007be:	7e3a      	ldrb	r2, [r7, #24]
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fa2b 	bl	8000c22 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	6a39      	ldr	r1, [r7, #32]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f92b 	bl	8000a2c <MQTTPacket_encode>
 80007d6:	4602      	mov	r2, r0
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	4413      	add	r3, r2
 80007dc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7a1b      	ldrb	r3, [r3, #8]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d10c      	bne.n	8000800 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4955      	ldr	r1, [pc, #340]	; (8000940 <MQTTSerialize_connect+0x1d0>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fa56 	bl	8000c9e <writeCString>
		writeChar(&ptr, (char) 4);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2104      	movs	r1, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fa12 	bl	8000c22 <writeChar>
 80007fe:	e00b      	b.n	8000818 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	494f      	ldr	r1, [pc, #316]	; (8000944 <MQTTSerialize_connect+0x1d4>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa49 	bl	8000c9e <writeCString>
		writeChar(&ptr, (char) 3);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	2103      	movs	r1, #3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fa05 	bl	8000c22 <writeChar>
	}

	flags.all = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7e9b      	ldrb	r3, [r3, #26]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	7d3b      	ldrb	r3, [r7, #20]
 8000828:	f362 0341 	bfi	r3, r2, #1, #1
 800082c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7edb      	ldrb	r3, [r3, #27]
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7d3b      	ldrb	r3, [r7, #20]
 800083e:	f362 0382 	bfi	r3, r2, #2, #1
 8000842:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000844:	7d3b      	ldrb	r3, [r7, #20]
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7d3b      	ldrb	r3, [r7, #20]
 800085e:	f362 03c4 	bfi	r3, r2, #3, #2
 8000862:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	7d3b      	ldrb	r3, [r7, #20]
 8000872:	f362 1345 	bfi	r3, r2, #5, #1
 8000876:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <MQTTSerialize_connect+0x118>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000884:	2b00      	cmp	r3, #0
 8000886:	d003      	beq.n	8000890 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000888:	7d3b      	ldrb	r3, [r7, #20]
 800088a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <MQTTSerialize_connect+0x130>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80008a0:	7d3b      	ldrb	r3, [r7, #20]
 80008a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80008a8:	7d3a      	ldrb	r2, [r7, #20]
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f9b6 	bl	8000c22 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8b1b      	ldrh	r3, [r3, #24]
 80008ba:	461a      	mov	r2, r3
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f9c2 	bl	8000c4c <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f107 001c 	add.w	r0, r7, #28
 80008ce:	330c      	adds	r3, #12
 80008d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d2:	f000 fa03 	bl	8000cdc <writeMQTTString>
	if (options->willFlag)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7edb      	ldrb	r3, [r3, #27]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f107 001c 	add.w	r0, r7, #28
 80008e4:	3324      	adds	r3, #36	; 0x24
 80008e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e8:	f000 f9f8 	bl	8000cdc <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f107 001c 	add.w	r0, r7, #28
 80008f2:	3330      	adds	r3, #48	; 0x30
 80008f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008f6:	f000 f9f1 	bl	8000cdc <writeMQTTString>
	}
	if (flags.bits.username)
 80008fa:	7d3b      	ldrb	r3, [r7, #20]
 80008fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f107 001c 	add.w	r0, r7, #28
 800090c:	3340      	adds	r3, #64	; 0x40
 800090e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000910:	f000 f9e4 	bl	8000cdc <writeMQTTString>
	if (flags.bits.password)
 8000914:	7d3b      	ldrb	r3, [r7, #20]
 8000916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f107 001c 	add.w	r0, r7, #28
 8000926:	334c      	adds	r3, #76	; 0x4c
 8000928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092a:	f000 f9d7 	bl	8000cdc <writeMQTTString>

	rc = ptr - buf;
 800092e:	69fa      	ldr	r2, [r7, #28]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000938:	4618      	mov	r0, r3
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	0800f230 	.word	0x0800f230
 8000944:	0800f238 	.word	0x0800f238

08000948 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800095a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800095c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f943 	bl	8000bfa <readChar>
 8000974:	4603      	mov	r3, r0
 8000976:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8000978:	7f3b      	ldrb	r3, [r7, #28]
 800097a:	f023 030f 	bic.w	r3, r3, #15
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b30      	cmp	r3, #48	; 0x30
 8000982:	d14b      	bne.n	8000a1c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8000984:	7f3b      	ldrb	r3, [r7, #28]
 8000986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80009a0:	7f3b      	ldrb	r3, [r7, #28]
 80009a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	f107 0214 	add.w	r2, r7, #20
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8ee 	bl	8000b98 <MQTTPacket_decodeBuf>
 80009bc:	6278      	str	r0, [r7, #36]	; 0x24
 80009be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4413      	add	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4413      	add	r3, r2
 80009cc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	6a3a      	ldr	r2, [r7, #32]
 80009d4:	4619      	mov	r1, r3
 80009d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009d8:	f000 f9ae 	bl	8000d38 <readMQTTLenString>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d01e      	beq.n	8000a20 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db19      	blt.n	8000a20 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dd08      	ble.n	8000a06 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8e3 	bl	8000bc4 <readInt>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	1ad2      	subs	r2, r2, r3
 8000a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a0e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a14:	601a      	str	r2, [r3, #0]
	rc = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e002      	b.n	8000a22 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000a1c:	bf00      	nop
 8000a1e:	e000      	b.n	8000a22 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000a20:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	425a      	negs	r2, r3
 8000a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a46:	bf58      	it	pl
 8000a48:	4253      	negpl	r3, r2
 8000a4a:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da00      	bge.n	8000a54 <MQTTPacket_encode+0x28>
 8000a52:	337f      	adds	r3, #127	; 0x7f
 8000a54:	11db      	asrs	r3, r3, #7
 8000a56:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dd03      	ble.n	8000a66 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000a5e:	7afb      	ldrb	r3, [r7, #11]
 8000a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a64:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60fa      	str	r2, [r7, #12]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	7afa      	ldrb	r2, [r7, #11]
 8000a74:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dcde      	bgt.n	8000a3a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	dd03      	ble.n	8000abc <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	60fb      	str	r3, [r7, #12]
			goto exit;
 8000aba:	e01d      	b.n	8000af8 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8000abc:	f107 020b 	add.w	r2, r7, #11
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4798      	blx	r3
 8000ac8:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d112      	bne.n	8000af6 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ada:	6979      	ldr	r1, [r7, #20]
 8000adc:	fb01 f303 	mul.w	r3, r1, r3
 8000ae0:	441a      	add	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dbd6      	blt.n	8000aa2 <MQTTPacket_decode+0x18>
exit:
 8000af4:	e000      	b.n	8000af8 <MQTTPacket_decode+0x6e>
			goto exit;
 8000af6:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000af8:	693b      	ldr	r3, [r7, #16]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b7f      	cmp	r3, #127	; 0x7f
 8000b16:	dc03      	bgt.n	8000b20 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	e012      	b.n	8000b46 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b26:	da03      	bge.n	8000b30 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e00a      	b.n	8000b46 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <MQTTPacket_len+0x50>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	dc03      	bgt.n	8000b40 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3303      	adds	r3, #3
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	e002      	b.n	8000b46 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3304      	adds	r3, #4
 8000b44:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	001ffffe 	.word	0x001ffffe

08000b58 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e00a      	b.n	8000b7e <bufchar+0x26>
		*c = *bufptr++;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <bufchar+0x3c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	4909      	ldr	r1, [pc, #36]	; (8000b94 <bufchar+0x3c>)
 8000b70:	600a      	str	r2, [r1, #0]
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf0      	blt.n	8000b68 <bufchar+0x10>
	return count;
 8000b86:	683b      	ldr	r3, [r7, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200000e4 	.word	0x200000e4

08000b98 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <MQTTPacket_decodeBuf+0x24>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000ba8:	6839      	ldr	r1, [r7, #0]
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MQTTPacket_decodeBuf+0x28>)
 8000bac:	f7ff ff6d 	bl	8000a8a <MQTTPacket_decode>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	08000b59 	.word	0x08000b59

08000bc4 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	3201      	adds	r2, #1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1c9a      	adds	r2, r3, #2
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	601a      	str	r2, [r3, #0]
	return len;
 8000bec:	68bb      	ldr	r3, [r7, #8]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	601a      	str	r2, [r3, #0]
	return c;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	78fa      	ldrb	r2, [r7, #3]
 8000c34:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <writeInt+0x12>
 8000c5c:	33ff      	adds	r3, #255	; 0xff
 8000c5e:	121b      	asrs	r3, r3, #8
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	425a      	negs	r2, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	bf58      	it	pl
 8000c7e:	4253      	negpl	r3, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000ca8:	6838      	ldr	r0, [r7, #0]
 8000caa:	f7ff fb23 	bl	80002f4 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000cb2:	68f9      	ldr	r1, [r7, #12]
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ffc9 	bl	8000c4c <writeInt>
	memcpy(*pptr, string, len);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00d fe58 	bl	800e978 <memcpy>
	*pptr += len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	441a      	add	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dd12      	ble.n	8000d16 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff ffa9 	bl	8000c4c <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00d fe38 	bl	800e978 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	441a      	add	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000d14:	e00c      	b.n	8000d30 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff ffbc 	bl	8000c9e <writeCString>
}
 8000d26:	e003      	b.n	8000d30 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff ff8e 	bl	8000c4c <writeInt>
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	dd1a      	ble.n	8000d8a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f7ff ff35 	bl	8000bc4 <readInt>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d30c      	bcc.n	8000d8a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	6852      	ldr	r2, [r2, #4]
 8000d80:	441a      	add	r2, r3
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000d90:	697b      	ldr	r3, [r7, #20]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa9e 	bl	80002f4 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e001      	b.n	8000dc2 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	617b      	str	r3, [r7, #20]
	return rc;
 8000dc2:	697b      	ldr	r3, [r7, #20]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000dde:	463b      	mov	r3, r7
 8000de0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000de4:	f7ff ffd9 	bl	8000d9a <MQTTstrlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	1c9a      	adds	r2, r3, #2
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	4413      	add	r3, r2
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	4413      	add	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dd02      	ble.n	8000e02 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
	return len;
 8000e02:	697b      	ldr	r3, [r7, #20]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f7ff ffc8 	bl	8000dcc <MQTTSerialize_publishLength>
 8000e3c:	61b8      	str	r0, [r7, #24]
 8000e3e:	69b8      	ldr	r0, [r7, #24]
 8000e40:	f7ff fe60 	bl	8000b04 <MQTTPacket_len>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	da03      	bge.n	8000e54 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000e4c:	f06f 0301 	mvn.w	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000e52:	e04c      	b.n	8000eee <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000e54:	7c3b      	ldrb	r3, [r7, #16]
 8000e56:	2203      	movs	r2, #3
 8000e58:	f362 1307 	bfi	r3, r2, #4, #4
 8000e5c:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	7c3b      	ldrb	r3, [r7, #16]
 8000e68:	f362 03c3 	bfi	r3, r2, #3, #1
 8000e6c:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	7c3b      	ldrb	r3, [r7, #16]
 8000e78:	f362 0342 	bfi	r3, r2, #1, #2
 8000e7c:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	7c3b      	ldrb	r3, [r7, #16]
 8000e8a:	f362 0300 	bfi	r3, r2, #0, #1
 8000e8e:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000e90:	7c3a      	ldrb	r2, [r7, #16]
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fec2 	bl	8000c22 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	69b9      	ldr	r1, [r7, #24]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fdc2 	bl	8000a2c <MQTTPacket_encode>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000eb0:	f107 0014 	add.w	r0, r7, #20
 8000eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eba:	f7ff ff0f 	bl	8000cdc <writeMQTTString>

	if (qos > 0)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd06      	ble.n	8000ed2 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000ec4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff febd 	bl	8000c4c <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00d fd4d 	bl	800e978 <memcpy>
	ptr += payloadlen;
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000eee:	69fb      	ldr	r3, [r7, #28]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <Sim800_RxCallBack+0x148>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	b291      	uxth	r1, r2
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <Sim800_RxCallBack+0x148>)
 8000f06:	8011      	strh	r1, [r2, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <Sim800_RxCallBack+0x14c>)
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	4b4e      	ldr	r3, [pc, #312]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f10:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <Sim800_RxCallBack+0x154>)
 8000f14:	7c9b      	ldrb	r3, [r3, #18]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d135      	bne.n	8000f86 <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000f1a:	494d      	ldr	r1, [pc, #308]	; (8001050 <Sim800_RxCallBack+0x158>)
 8000f1c:	484a      	ldr	r0, [pc, #296]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f1e:	f00d fce9 	bl	800e8f4 <strstr>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <Sim800_RxCallBack+0x40>
 8000f28:	4b45      	ldr	r3, [pc, #276]	; (8001040 <Sim800_RxCallBack+0x148>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d103      	bne.n	8000f38 <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <Sim800_RxCallBack+0x148>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	e026      	b.n	8000f86 <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000f38:	4945      	ldr	r1, [pc, #276]	; (8001050 <Sim800_RxCallBack+0x158>)
 8000f3a:	4843      	ldr	r0, [pc, #268]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f3c:	f00d fcda 	bl	800e8f4 <strstr>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01f      	beq.n	8000f86 <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000f46:	4a43      	ldr	r2, [pc, #268]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000f52:	461a      	mov	r2, r3
 8000f54:	f00d fd10 	bl	800e978 <memcpy>
            clearRxBuffer();
 8000f58:	f000 f88e 	bl	8001078 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000f5c:	493e      	ldr	r1, [pc, #248]	; (8001058 <Sim800_RxCallBack+0x160>)
 8000f5e:	483d      	ldr	r0, [pc, #244]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8000f60:	f00d fcc8 	bl	800e8f4 <strstr>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <Sim800_RxCallBack+0x154>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	749a      	strb	r2, [r3, #18]
 8000f70:	e009      	b.n	8000f86 <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000f72:	493a      	ldr	r1, [pc, #232]	; (800105c <Sim800_RxCallBack+0x164>)
 8000f74:	4837      	ldr	r0, [pc, #220]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8000f76:	f00d fcbd 	bl	800e8f4 <strstr>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <Sim800_RxCallBack+0x154>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000f86:	4936      	ldr	r1, [pc, #216]	; (8001060 <Sim800_RxCallBack+0x168>)
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f8a:	f00d fcb3 	bl	800e8f4 <strstr>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10d      	bne.n	8000fb0 <Sim800_RxCallBack+0xb8>
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <Sim800_RxCallBack+0x16c>)
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000f98:	f00d fcac 	bl	800e8f4 <strstr>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <Sim800_RxCallBack+0xb8>
 8000fa2:	4931      	ldr	r1, [pc, #196]	; (8001068 <Sim800_RxCallBack+0x170>)
 8000fa4:	4828      	ldr	r0, [pc, #160]	; (8001048 <Sim800_RxCallBack+0x150>)
 8000fa6:	f00d fca5 	bl	800e8f4 <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <Sim800_RxCallBack+0x154>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <Sim800_RxCallBack+0x154>)
 8000fb8:	7c9b      	ldrb	r3, [r3, #18]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d106      	bne.n	8000fcc <Sim800_RxCallBack+0xd4>
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <Sim800_RxCallBack+0x14c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b30      	cmp	r3, #48	; 0x30
 8000fc4:	d102      	bne.n	8000fcc <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <Sim800_RxCallBack+0x174>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <Sim800_RxCallBack+0x174>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d124      	bne.n	800101e <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	; (8001070 <Sim800_RxCallBack+0x178>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	b291      	uxth	r1, r2
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <Sim800_RxCallBack+0x178>)
 8000fde:	8011      	strh	r1, [r2, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <Sim800_RxCallBack+0x14c>)
 8000fe4:	7819      	ldrb	r1, [r3, #0]
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8000fe8:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <Sim800_RxCallBack+0x178>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d90d      	bls.n	800100e <Sim800_RxCallBack+0x116>
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <Sim800_RxCallBack+0x178>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8000ffa:	7852      	ldrb	r2, [r2, #1]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	dd06      	ble.n	800100e <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8001000:	4814      	ldr	r0, [pc, #80]	; (8001054 <Sim800_RxCallBack+0x15c>)
 8001002:	f000 fa6f 	bl	80014e4 <MQTT_Receive>
            clearRxBuffer();
 8001006:	f000 f837 	bl	8001078 <clearRxBuffer>
            clearMqttBuffer();
 800100a:	f000 f847 	bl	800109c <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <Sim800_RxCallBack+0x178>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8001016:	4293      	cmp	r3, r2
 8001018:	d901      	bls.n	800101e <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 800101a:	f000 f83f 	bl	800109c <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <Sim800_RxCallBack+0x148>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8001026:	4293      	cmp	r3, r2
 8001028:	d903      	bls.n	8001032 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 800102a:	f000 f825 	bl	8001078 <clearRxBuffer>
        clearMqttBuffer();
 800102e:	f000 f835 	bl	800109c <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	4903      	ldr	r1, [pc, #12]	; (8001044 <Sim800_RxCallBack+0x14c>)
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <Sim800_RxCallBack+0x17c>)
 8001038:	f00a fac0 	bl	800b5bc <HAL_UART_Receive_IT>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200006a0 	.word	0x200006a0
 8001044:	200000e8 	.word	0x200000e8
 8001048:	200000ec 	.word	0x200000ec
 800104c:	20000ca0 	.word	0x20000ca0
 8001050:	0800f240 	.word	0x0800f240
 8001054:	200006a4 	.word	0x200006a4
 8001058:	0800f244 	.word	0x0800f244
 800105c:	0800f254 	.word	0x0800f254
 8001060:	0800f260 	.word	0x0800f260
 8001064:	0800f26c 	.word	0x0800f26c
 8001068:	0800f274 	.word	0x0800f274
 800106c:	200006a2 	.word	0x200006a2
 8001070:	20000c58 	.word	0x20000c58
 8001074:	20000dd8 	.word	0x20000dd8

08001078 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    rx_index = 0;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <clearRxBuffer+0x1c>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001082:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001086:	2100      	movs	r1, #0
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <clearRxBuffer+0x20>)
 800108a:	f00d fc2b 	bl	800e8e4 <memset>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200006a0 	.word	0x200006a0
 8001098:	200000ec 	.word	0x200000ec

0800109c <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <clearMqttBuffer+0x20>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <clearMqttBuffer+0x24>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 80010ac:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80010b0:	2100      	movs	r1, #0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <clearMqttBuffer+0x28>)
 80010b4:	f00d fc16 	bl	800e8e4 <memset>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200006a2 	.word	0x200006a2
 80010c0:	20000c58 	.word	0x20000c58
 80010c4:	200006a4 	.word	0x200006a4

080010c8 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff f90c 	bl	80002f4 <strlen>
 80010dc:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <SIM800_SendCommand+0x50>)
 80010e6:	f00a f9d5 	bl	800b494 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fdf7 	bl	8004ce0 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <SIM800_SendCommand+0x54>)
 80010f6:	f00d fbfd 	bl	800e8f4 <strstr>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001100:	f7ff ffba 	bl	8001078 <clearRxBuffer>
        return 0;
 8001104:	2300      	movs	r3, #0
 8001106:	e002      	b.n	800110e <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 8001108:	f7ff ffb6 	bl	8001078 <clearRxBuffer>
    return 1;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000dd8 	.word	0x20000dd8
 800111c:	200006a4 	.word	0x200006a4

08001120 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <MQTT_Init+0xf0>)
 8001128:	2200      	movs	r2, #0
 800112a:	749a      	strb	r2, [r3, #18]
    int error = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    char str[32] = {0};
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	4932      	ldr	r1, [pc, #200]	; (8001214 <MQTT_Init+0xf4>)
 800114c:	4832      	ldr	r0, [pc, #200]	; (8001218 <MQTT_Init+0xf8>)
 800114e:	f00a fa35 	bl	800b5bc <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8001152:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001156:	4931      	ldr	r1, [pc, #196]	; (800121c <MQTT_Init+0xfc>)
 8001158:	4831      	ldr	r0, [pc, #196]	; (8001220 <MQTT_Init+0x100>)
 800115a:	f7ff ffb5 	bl	80010c8 <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800115e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001162:	492e      	ldr	r1, [pc, #184]	; (800121c <MQTT_Init+0xfc>)
 8001164:	482f      	ldr	r0, [pc, #188]	; (8001224 <MQTT_Init+0x104>)
 8001166:	f7ff ffaf 	bl	80010c8 <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800116a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800116e:	492e      	ldr	r1, [pc, #184]	; (8001228 <MQTT_Init+0x108>)
 8001170:	482e      	ldr	r0, [pc, #184]	; (800122c <MQTT_Init+0x10c>)
 8001172:	f7ff ffa9 	bl	80010c8 <SIM800_SendCommand>
 8001176:	4602      	mov	r2, r0
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	4413      	add	r3, r2
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 800117e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001182:	4926      	ldr	r1, [pc, #152]	; (800121c <MQTT_Init+0xfc>)
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <MQTT_Init+0x110>)
 8001186:	f7ff ff9f 	bl	80010c8 <SIM800_SendCommand>
 800118a:	4602      	mov	r2, r0
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	4413      	add	r3, r2
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8001192:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001196:	4921      	ldr	r1, [pc, #132]	; (800121c <MQTT_Init+0xfc>)
 8001198:	4826      	ldr	r0, [pc, #152]	; (8001234 <MQTT_Init+0x114>)
 800119a:	f7ff ff95 	bl	80010c8 <SIM800_SendCommand>
 800119e:	4602      	mov	r2, r0
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	4413      	add	r3, r2
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MQTT_Init+0xf0>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MQTT_Init+0xf0>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MQTT_Init+0xf0>)
 80011b0:	6892      	ldr	r2, [r2, #8]
 80011b2:	1d38      	adds	r0, r7, #4
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	460b      	mov	r3, r1
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <MQTT_Init+0x118>)
 80011bc:	2120      	movs	r1, #32
 80011be:	f00d fb3d 	bl	800e83c <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <MQTT_Init+0xfc>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff7c 	bl	80010c8 <SIM800_SendCommand>
 80011d0:	4602      	mov	r2, r0
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	4413      	add	r3, r2
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 80011d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011dc:	490f      	ldr	r1, [pc, #60]	; (800121c <MQTT_Init+0xfc>)
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <MQTT_Init+0x11c>)
 80011e0:	f7ff ff72 	bl	80010c8 <SIM800_SendCommand>
 80011e4:	4602      	mov	r2, r0
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	4413      	add	r3, r2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 80011ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011f0:	4913      	ldr	r1, [pc, #76]	; (8001240 <MQTT_Init+0x120>)
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MQTT_Init+0x124>)
 80011f4:	f7ff ff68 	bl	80010c8 <SIM800_SendCommand>
    if (error == 0)
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <MQTT_Init+0xe6>
    {
        MQTT_Connect();
 80011fe:	f000 f823 	bl	8001248 <MQTT_Connect>
        return error;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	e000      	b.n	8001208 <MQTT_Init+0xe8>
    }
    else
    {
        return error;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 8001208:	4618      	mov	r0, r3
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000ca0 	.word	0x20000ca0
 8001214:	200000e8 	.word	0x200000e8
 8001218:	20000dd8 	.word	0x20000dd8
 800121c:	0800f27c 	.word	0x0800f27c
 8001220:	0800f284 	.word	0x0800f284
 8001224:	0800f28c 	.word	0x0800f28c
 8001228:	0800f294 	.word	0x0800f294
 800122c:	0800f2a0 	.word	0x0800f2a0
 8001230:	0800f2b0 	.word	0x0800f2b0
 8001234:	0800f2c0 	.word	0x0800f2c0
 8001238:	0800f2d0 	.word	0x0800f2d0
 800123c:	0800f2ec 	.word	0x0800f2ec
 8001240:	0800f2f8 	.word	0x0800f2f8
 8001244:	0800f2fc 	.word	0x0800f2fc

08001248 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0d8      	sub	sp, #352	; 0x160
 800124c:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <MQTT_Connect+0x104>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <MQTT_Connect+0x104>)
 8001258:	2200      	movs	r2, #0
 800125a:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001262:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001266:	227c      	movs	r2, #124	; 0x7c
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00d fb3a 	bl	800e8e4 <memset>
    unsigned char buf[128] = {0};
 8001270:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	3304      	adds	r3, #4
 800127e:	227c      	movs	r2, #124	; 0x7c
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d fb2e 	bl	800e8e4 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MQTT_Connect+0x104>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MQTT_Connect+0x104>)
 800128e:	8a1b      	ldrh	r3, [r3, #16]
 8001290:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001294:	492e      	ldr	r1, [pc, #184]	; (8001350 <MQTT_Connect+0x108>)
 8001296:	f00d fb05 	bl	800e8a4 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800129a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800129e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012a2:	492c      	ldr	r1, [pc, #176]	; (8001354 <MQTT_Connect+0x10c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff0f 	bl	80010c8 <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80012aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80012ae:	f003 fd17 	bl	8004ce0 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MQTT_Connect+0x104>)
 80012b4:	7c9b      	ldrb	r3, [r3, #18]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d142      	bne.n	8001340 <MQTT_Connect+0xf8>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80012ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80012be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <MQTT_Connect+0x110>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	4611      	mov	r1, r2
 80012c8:	2358      	movs	r3, #88	; 0x58
 80012ca:	461a      	mov	r2, r3
 80012cc:	f00d fb54 	bl	800e978 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MQTT_Connect+0x104>)
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80012d8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MQTT_Connect+0x104>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80012e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012ea:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MQTT_Connect+0x104>)
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80012f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012f8:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MQTT_Connect+0x104>)
 80012fc:	8c1a      	ldrh	r2, [r3, #32]
 80012fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001302:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001306:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 8001308:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800130c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001310:	2201      	movs	r2, #1
 8001312:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001314:	1d3a      	adds	r2, r7, #4
 8001316:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fa27 	bl	8000770 <MQTTSerialize_connect>
 8001322:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001326:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800132a:	b29a      	uxth	r2, r3
 800132c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <MQTT_Connect+0x114>)
 8001334:	f00a f8ae 	bl	800b494 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 8001338:	f241 3088 	movw	r0, #5000	; 0x1388
 800133c:	f003 fcd0 	bl	8004ce0 <HAL_Delay>
#endif
    }
}
 8001340:	bf00      	nop
 8001342:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000ca0 	.word	0x20000ca0
 8001350:	0800f308 	.word	0x0800f308
 8001354:	0800f27c 	.word	0x0800f27c
 8001358:	0800f324 	.word	0x0800f324
 800135c:	20000dd8 	.word	0x20000dd8

08001360 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b0cf      	sub	sp, #316	; 0x13c
 8001364:	af08      	add	r7, sp, #32
 8001366:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800136a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001374:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001378:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800137a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800137e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	3304      	adds	r3, #4
 8001388:	22fc      	movs	r2, #252	; 0xfc
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f00d faa9 	bl	800e8e4 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001392:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001396:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 80013b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80013c2:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 80013ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	f7fe ff8e 	bl	80002f4 <strlen>
 80013d8:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 80013da:	f107 0414 	add.w	r4, r7, #20
 80013de:	9306      	str	r3, [sp, #24]
 80013e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	9305      	str	r3, [sp, #20]
 80013ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013f0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80013f4:	ab02      	add	r3, sp, #8
 80013f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013fc:	2300      	movs	r3, #0
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fcfd 	bl	8000e0c <MQTTSerialize_publish>
 8001412:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800141a:	b29a      	uxth	r2, r3
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MQTT_Pub+0xd8>)
 8001424:	f00a f836 	bl	800b494 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001428:	2064      	movs	r0, #100	; 0x64
 800142a:	f003 fc59 	bl	8004ce0 <HAL_Delay>
#endif
}
 800142e:	bf00      	nop
 8001430:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000dd8 	.word	0x20000dd8

0800143c <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ca      	sub	sp, #296	; 0x128
 8001440:	af04      	add	r7, sp, #16
 8001442:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144a:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 800144c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	3304      	adds	r3, #4
 800145a:	22fc      	movs	r2, #252	; 0xfc
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f00d fa40 	bl	800e8e4 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001464:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001474:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001488:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800148c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001490:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001494:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800149c:	f107 0014 	add.w	r0, r7, #20
 80014a0:	2300      	movs	r3, #0
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	f000 f886 	bl	80015c6 <MQTTSerialize_subscribe>
 80014ba:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80014be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MQTT_Sub+0xa4>)
 80014cc:	f009 ffe2 	bl	800b494 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80014d0:	2064      	movs	r0, #100	; 0x64
 80014d2:	f003 fc05 	bl	8004ce0 <HAL_Delay>
#endif
}
 80014d6:	bf00      	nop
 80014d8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000dd8 	.word	0x20000dd8

080014e4 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af06      	add	r7, sp, #24
 80014ea:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	2100      	movs	r1, #0
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <MQTT_Receive+0x74>)
 80014f2:	f00d f9f7 	bl	800e8e4 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	2100      	movs	r1, #0
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <MQTT_Receive+0x78>)
 80014fc:	f00d f9f2 	bl	800e8e4 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001500:	2304      	movs	r3, #4
 8001502:	9304      	str	r3, [sp, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	9303      	str	r3, [sp, #12]
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MQTT_Receive+0x7c>)
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MQTT_Receive+0x80>)
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MQTT_Receive+0x84>)
 800151c:	4913      	ldr	r1, [pc, #76]	; (800156c <MQTT_Receive+0x88>)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MQTT_Receive+0x8c>)
 8001520:	f7ff fa12 	bl	8000948 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4619      	mov	r1, r3
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <MQTT_Receive+0x74>)
 800152c:	f00d fa24 	bl	800e978 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <MQTT_Receive+0x90>)
 8001534:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <MQTT_Receive+0x90>)
 800153c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <MQTT_Receive+0x78>)
 8001542:	f00d fa19 	bl	800e978 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MQTT_Receive+0x90>)
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000d14 	.word	0x20000d14
 800155c:	20000cd0 	.word	0x20000cd0
 8001560:	20000d10 	.word	0x20000d10
 8001564:	20000cce 	.word	0x20000cce
 8001568:	20000ccc 	.word	0x20000ccc
 800156c:	20000cc8 	.word	0x20000cc8
 8001570:	20000cc5 	.word	0x20000cc5
 8001574:	20000ca0 	.word	0x20000ca0

08001578 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001582:	2302      	movs	r3, #2
 8001584:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e013      	b.n	80015b4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	461a      	mov	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4413      	add	r3, r2
 800159c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015a0:	f7ff fbfb 	bl	8000d9a <MQTTstrlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	3303      	adds	r3, #3
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	4413      	add	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbe7      	blt.n	800158c <MQTTSerialize_subscribeLength+0x14>
	return len;
 80015bc:	68bb      	ldr	r3, [r7, #8]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b08a      	sub	sp, #40	; 0x28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	4611      	mov	r1, r2
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80015f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015f4:	f7ff ffc0 	bl	8001578 <MQTTSerialize_subscribeLength>
 80015f8:	61f8      	str	r0, [r7, #28]
 80015fa:	69f8      	ldr	r0, [r7, #28]
 80015fc:	f7ff fa82 	bl	8000b04 <MQTTPacket_len>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4293      	cmp	r3, r2
 8001606:	da03      	bge.n	8001610 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001608:	f06f 0301 	mvn.w	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800160e:	e051      	b.n	80016b4 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001614:	7d3b      	ldrb	r3, [r7, #20]
 8001616:	2208      	movs	r2, #8
 8001618:	f362 1307 	bfi	r3, r2, #4, #4
 800161c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	7d3b      	ldrb	r3, [r7, #20]
 8001628:	f362 03c3 	bfi	r3, r2, #3, #1
 800162c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800162e:	7d3b      	ldrb	r3, [r7, #20]
 8001630:	2201      	movs	r2, #1
 8001632:	f362 0342 	bfi	r3, r2, #1, #2
 8001636:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8001638:	7d3a      	ldrb	r2, [r7, #20]
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff faee 	bl	8000c22 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f9ee 	bl	8000a2c <MQTTPacket_encode>
 8001650:	4602      	mov	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8001658:	88ba      	ldrh	r2, [r7, #4]
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff faf3 	bl	8000c4c <writeInt>

	for (i = 0; i < count; ++i)
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	e01b      	b.n	80016a4 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	461a      	mov	r2, r3
 8001678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167a:	4413      	add	r3, r2
 800167c:	f107 0018 	add.w	r0, r7, #24
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	f7ff fb2b 	bl	8000cdc <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fac2 	bl	8000c22 <writeChar>
	for (i = 0; i < count; ++i)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	3301      	adds	r3, #1
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbdf      	blt.n	800166c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <MX_GPIO_Init+0x130>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	4a44      	ldr	r2, [pc, #272]	; (80017f0 <MX_GPIO_Init+0x130>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e6:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <MX_GPIO_Init+0x130>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <MX_GPIO_Init+0x130>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <MX_GPIO_Init+0x130>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001718:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <MX_GPIO_Init+0x130>)
 800171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_GPIO_Init+0x130>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001772:	4820      	ldr	r0, [pc, #128]	; (80017f4 <MX_GPIO_Init+0x134>)
 8001774:	f005 fca6 	bl	80070c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2110      	movs	r1, #16
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <MX_GPIO_Init+0x138>)
 800177e:	f005 fca1 	bl	80070c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001788:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4818      	ldr	r0, [pc, #96]	; (80017fc <MX_GPIO_Init+0x13c>)
 800179a:	f005 f9d9 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <MX_GPIO_Init+0x134>)
 80017b8:	f005 f9ca 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80017bc:	2310      	movs	r3, #16
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <MX_GPIO_Init+0x138>)
 80017d4:	f005 f9bc 	bl	8006b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f003 fba0 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f003 fbb7 	bl	8004f56 <HAL_NVIC_EnableIRQ>

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58021400 	.word	0x58021400
 80017f8:	58020000 	.word	0x58020000
 80017fc:	58020800 	.word	0x58020800

08001800 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if (huart == UART_SIM800) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_UART_RxCpltCallback+0x1c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_UART_RxCpltCallback+0x14>
		Sim800_RxCallBack();
 8001810:	f7ff fb72 	bl	8000ef8 <Sim800_RxCallBack>
	}
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000dd8 	.word	0x20000dd8

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <main+0xcc>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11b      	bne.n	800186a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001832:	f3bf 8f4f 	dsb	sy
}
 8001836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001838:	f3bf 8f6f 	isb	sy
}
 800183c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <main+0xcc>)
 8001840:	2200      	movs	r2, #0
 8001842:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001846:	f3bf 8f4f 	dsb	sy
}
 800184a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800184c:	f3bf 8f6f 	isb	sy
}
 8001850:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <main+0xcc>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a25      	ldr	r2, [pc, #148]	; (80018ec <main+0xcc>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800185e:	f3bf 8f4f 	dsb	sy
}
 8001862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001864:	f3bf 8f6f 	isb	sy
}
 8001868:	e000      	b.n	800186c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800186a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <main+0xcc>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d13b      	bne.n	80018f0 <main+0xd0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <main+0xcc>)
 800187a:	2200      	movs	r2, #0
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001880:	f3bf 8f4f 	dsb	sy
}
 8001884:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <main+0xcc>)
 8001888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800188c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	0b5b      	lsrs	r3, r3, #13
 8001892:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001896:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80018aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <main+0xcc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ef      	bne.n	80018a2 <main+0x82>
    } while(sets-- != 0U);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e5      	bne.n	8001898 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
}
 80018d0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <main+0xcc>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <main+0xcc>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018de:	f3bf 8f4f 	dsb	sy
}
 80018e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018e4:	f3bf 8f6f 	isb	sy
}
 80018e8:	e003      	b.n	80018f2 <main+0xd2>
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80018f0:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f2:	f003 f963 	bl	8004bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f9c5 	bl	8001c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fa:	f7ff fee1 	bl	80016c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018fe:	f000 fbbf 	bl	8002080 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8001902:	2101      	movs	r1, #1
 8001904:	2000      	movs	r0, #0
 8001906:	f001 fdd7 	bl	80034b8 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800190a:	48a9      	ldr	r0, [pc, #676]	; (8001bb0 <main+0x390>)
 800190c:	f00c fc44 	bl	800e198 <UTIL_LCD_SetFuncDriver>
  	uint32_t x_size;
  	uint32_t y_size;

  	UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8001910:	48a8      	ldr	r0, [pc, #672]	; (8001bb4 <main+0x394>)
 8001912:	f00c fcbf 	bl	800e294 <UTIL_LCD_SetFont>

  	/* Clear the LCD */
  	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ORANGE);
 8001916:	48a8      	ldr	r0, [pc, #672]	; (8001bb8 <main+0x398>)
 8001918:	f00c fca8 	bl	800e26c <UTIL_LCD_SetBackColor>
  	UTIL_LCD_Clear(UTIL_LCD_COLOR_ORANGE);
 800191c:	48a6      	ldr	r0, [pc, #664]	; (8001bb8 <main+0x398>)
 800191e:	f00c fce9 	bl	800e2f4 <UTIL_LCD_Clear>

  	/* Set the LCD Text Color */
  	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8001922:	48a6      	ldr	r0, [pc, #664]	; (8001bbc <main+0x39c>)
 8001924:	f00c fc8e 	bl	800e244 <UTIL_LCD_SetTextColor>

  	/* Display LCD messages */
  	UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"PFE 2024 SUJET 20", CENTER_MODE);
 8001928:	2301      	movs	r3, #1
 800192a:	4aa5      	ldr	r2, [pc, #660]	; (8001bc0 <main+0x3a0>)
 800192c:	210a      	movs	r1, #10
 800192e:	2000      	movs	r0, #0
 8001930:	f00c fd2c 	bl	800e38c <UTIL_LCD_DisplayStringAt>
  	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 8001934:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001938:	f00c fc84 	bl	800e244 <UTIL_LCD_SetTextColor>
  	UTIL_LCD_DisplayStringAt(0, 100, (uint8_t *)"ELHEDI ZAIDI", CENTER_MODE);
 800193c:	2301      	movs	r3, #1
 800193e:	4aa1      	ldr	r2, [pc, #644]	; (8001bc4 <main+0x3a4>)
 8001940:	2164      	movs	r1, #100	; 0x64
 8001942:	2000      	movs	r0, #0
 8001944:	f00c fd22 	bl	800e38c <UTIL_LCD_DisplayStringAt>

  	BSP_LCD_GetXSize(0, &x_size);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	2000      	movs	r0, #0
 800194e:	f002 f865 	bl	8003a1c <BSP_LCD_GetXSize>
  	BSP_LCD_GetYSize(0, &y_size);
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	2000      	movs	r0, #0
 8001958:	f002 f882 	bl	8003a60 <BSP_LCD_GetYSize>

  	/* Draw Bitmap */
  	UTIL_LCD_DrawBitmap((x_size - 80)/2, 400, (uint8_t *)stlogo);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b50      	subs	r3, #80	; 0x50
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	4a99      	ldr	r2, [pc, #612]	; (8001bc8 <main+0x3a8>)
 8001964:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001968:	4618      	mov	r0, r3
 800196a:	f00c fdbd 	bl	800e4e8 <UTIL_LCD_DrawBitmap>

  	hTS.Width = x_size;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a96      	ldr	r2, [pc, #600]	; (8001bcc <main+0x3ac>)
 8001972:	6013      	str	r3, [r2, #0]
  	hTS.Height = y_size;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4a95      	ldr	r2, [pc, #596]	; (8001bcc <main+0x3ac>)
 8001978:	6053      	str	r3, [r2, #4]
  	hTS.Orientation = TS_SWAP_NONE;
 800197a:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <main+0x3ac>)
 800197c:	2201      	movs	r2, #1
 800197e:	609a      	str	r2, [r3, #8]
  	hTS.Accuracy = 1;
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <main+0x3ac>)
 8001982:	2201      	movs	r2, #1
 8001984:	60da      	str	r2, [r3, #12]
  	ts_status = BSP_TS_Init(0, &hTS);
 8001986:	4991      	ldr	r1, [pc, #580]	; (8001bcc <main+0x3ac>)
 8001988:	2000      	movs	r0, #0
 800198a:	f002 fe99 	bl	80046c0 <BSP_TS_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	4b8f      	ldr	r3, [pc, #572]	; (8001bd0 <main+0x3b0>)
 8001994:	601a      	str	r2, [r3, #0]

  	SIM800.sim.apn = "weborange";
 8001996:	4b8f      	ldr	r3, [pc, #572]	; (8001bd4 <main+0x3b4>)
 8001998:	4a8f      	ldr	r2, [pc, #572]	; (8001bd8 <main+0x3b8>)
 800199a:	601a      	str	r2, [r3, #0]
  	SIM800.sim.apn_user = "";
 800199c:	4b8d      	ldr	r3, [pc, #564]	; (8001bd4 <main+0x3b4>)
 800199e:	4a8f      	ldr	r2, [pc, #572]	; (8001bdc <main+0x3bc>)
 80019a0:	605a      	str	r2, [r3, #4]
  	SIM800.sim.apn_pass = "";
 80019a2:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <main+0x3b4>)
 80019a4:	4a8d      	ldr	r2, [pc, #564]	; (8001bdc <main+0x3bc>)
 80019a6:	609a      	str	r2, [r3, #8]
  	SIM800.mqttServer.host = "test.mosquitto.org";
 80019a8:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <main+0x3b4>)
 80019aa:	4a8d      	ldr	r2, [pc, #564]	; (8001be0 <main+0x3c0>)
 80019ac:	60da      	str	r2, [r3, #12]
  	SIM800.mqttServer.port = 1883;
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <main+0x3b4>)
 80019b0:	f240 725b 	movw	r2, #1883	; 0x75b
 80019b4:	821a      	strh	r2, [r3, #16]
  	SIM800.mqttClient.username = "";
 80019b6:	4b87      	ldr	r3, [pc, #540]	; (8001bd4 <main+0x3b4>)
 80019b8:	4a88      	ldr	r2, [pc, #544]	; (8001bdc <main+0x3bc>)
 80019ba:	615a      	str	r2, [r3, #20]
  	SIM800.mqttClient.pass = "";
 80019bc:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <main+0x3b4>)
 80019be:	4a87      	ldr	r2, [pc, #540]	; (8001bdc <main+0x3bc>)
 80019c0:	619a      	str	r2, [r3, #24]
  	SIM800.mqttClient.clientID = "TestSub";
 80019c2:	4b84      	ldr	r3, [pc, #528]	; (8001bd4 <main+0x3b4>)
 80019c4:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <main+0x3c4>)
 80019c6:	61da      	str	r2, [r3, #28]
  	SIM800.mqttClient.keepAliveInterval = 120;
 80019c8:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <main+0x3b4>)
 80019ca:	2278      	movs	r2, #120	; 0x78
 80019cc:	841a      	strh	r2, [r3, #32]
  	MQTT_Init();
 80019ce:	f7ff fba7 	bl	8001120 <MQTT_Init>
  	uint8_t sub = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]

    /* USER CODE BEGIN 3 */



	  ts_status = BSP_TS_GetState(0, &TS_State);
 80019d6:	4984      	ldr	r1, [pc, #528]	; (8001be8 <main+0x3c8>)
 80019d8:	2000      	movs	r0, #0
 80019da:	f002 ff11 	bl	8004800 <BSP_TS_GetState>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <main+0x3b0>)
 80019e4:	601a      	str	r2, [r3, #0]
	  		if(TS_State.TouchDetected)
 80019e6:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <main+0x3c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d027      	beq.n	8001a3e <main+0x21e>
	  		{
	  			x1 = TS_State.TouchX;
 80019ee:	4b7e      	ldr	r3, [pc, #504]	; (8001be8 <main+0x3c8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b7d      	ldr	r3, [pc, #500]	; (8001bec <main+0x3cc>)
 80019f6:	801a      	strh	r2, [r3, #0]
	  			y = TS_State.TouchY;
 80019f8:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <main+0x3c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <main+0x3d0>)
 8001a00:	801a      	strh	r2, [r3, #0]

	  			sprintf(xTouchStr, "X: %3d",x1);
 8001a02:	4b7a      	ldr	r3, [pc, #488]	; (8001bec <main+0x3cc>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	497a      	ldr	r1, [pc, #488]	; (8001bf4 <main+0x3d4>)
 8001a0a:	487b      	ldr	r0, [pc, #492]	; (8001bf8 <main+0x3d8>)
 8001a0c:	f00c ff4a 	bl	800e8a4 <siprintf>
	  			sprintf(yTouchStr, "Y: %3d",y);
 8001a10:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <main+0x3d0>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4979      	ldr	r1, [pc, #484]	; (8001bfc <main+0x3dc>)
 8001a18:	4879      	ldr	r0, [pc, #484]	; (8001c00 <main+0x3e0>)
 8001a1a:	f00c ff43 	bl	800e8a4 <siprintf>
	  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001a1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a22:	f00c fc0f 	bl	800e244 <UTIL_LCD_SetTextColor>
	  			UTIL_LCD_DisplayStringAt(0, 140, (uint8_t *)xTouchStr, CENTER_MODE);
 8001a26:	2301      	movs	r3, #1
 8001a28:	4a73      	ldr	r2, [pc, #460]	; (8001bf8 <main+0x3d8>)
 8001a2a:	218c      	movs	r1, #140	; 0x8c
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f00c fcad 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			UTIL_LCD_DisplayStringAt(100, 140, (uint8_t *)yTouchStr, CENTER_MODE);
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a72      	ldr	r2, [pc, #456]	; (8001c00 <main+0x3e0>)
 8001a36:	218c      	movs	r1, #140	; 0x8c
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	f00c fca7 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  		}
	  			  if (SIM800.mqttServer.connect == 0) {
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <main+0x3b4>)
 8001a40:	7c9b      	ldrb	r3, [r3, #18]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <main+0x242>
	  					UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 8001a46:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001a4a:	f00c fbfb 	bl	800e244 <UTIL_LCD_SetTextColor>
	  					UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"try to connect", CENTER_MODE);
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4a6c      	ldr	r2, [pc, #432]	; (8001c04 <main+0x3e4>)
 8001a52:	21c8      	movs	r1, #200	; 0xc8
 8001a54:	2000      	movs	r0, #0
 8001a56:	f00c fc99 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  			MQTT_Init();
 8001a5a:	f7ff fb61 	bl	8001120 <MQTT_Init>
	  			  			sub = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
	  			  		}
	  			  		if (SIM800.mqttServer.connect == 1) {
 8001a62:	4b5c      	ldr	r3, [pc, #368]	; (8001bd4 <main+0x3b4>)
 8001a64:	7c9b      	ldrb	r3, [r3, #18]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d151      	bne.n	8001b0e <main+0x2ee>
	  			  			if(sub == 0){
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d118      	bne.n	8001aa2 <main+0x282>
	  			  				MQTT_Sub("123456");
 8001a70:	4865      	ldr	r0, [pc, #404]	; (8001c08 <main+0x3e8>)
 8001a72:	f7ff fce3 	bl	800143c <MQTT_Sub>
	  			  				sub = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
	  			  				MQTT_Pub("123456", "connected");
 8001a7a:	4964      	ldr	r1, [pc, #400]	; (8001c0c <main+0x3ec>)
 8001a7c:	4862      	ldr	r0, [pc, #392]	; (8001c08 <main+0x3e8>)
 8001a7e:	f7ff fc6f 	bl	8001360 <MQTT_Pub>
	  			  				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 8001a82:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001a86:	f00c fbdd 	bl	800e244 <UTIL_LCD_SetTextColor>
	  		  					UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"              ", CENTER_MODE);
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4a60      	ldr	r2, [pc, #384]	; (8001c10 <main+0x3f0>)
 8001a8e:	21c8      	movs	r1, #200	; 0xc8
 8001a90:	2000      	movs	r0, #0
 8001a92:	f00c fc7b 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  				UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"connected", CENTER_MODE);
 8001a96:	2301      	movs	r3, #1
 8001a98:	4a5c      	ldr	r2, [pc, #368]	; (8001c0c <main+0x3ec>)
 8001a9a:	21c8      	movs	r1, #200	; 0xc8
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f00c fc75 	bl	800e38c <UTIL_LCD_DisplayStringAt>

	  			  			}
	  			  			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  			  			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	485b      	ldr	r0, [pc, #364]	; (8001c14 <main+0x3f4>)
 8001aa6:	f005 fb26 	bl	80070f6 <HAL_GPIO_TogglePin>
	  			  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab0:	4859      	ldr	r0, [pc, #356]	; (8001c18 <main+0x3f8>)
 8001ab2:	f005 fb07 	bl	80070c4 <HAL_GPIO_WritePin>
	  			  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 8001ab6:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001aba:	f00c fbc3 	bl	800e244 <UTIL_LCD_SetTextColor>
  		  					UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"              ", CENTER_MODE);
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <main+0x3f0>)
 8001ac2:	21c8      	movs	r1, #200	; 0xc8
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f00c fc61 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  			UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"firmware 1 ", CENTER_MODE);
 8001aca:	2301      	movs	r3, #1
 8001acc:	4a53      	ldr	r2, [pc, #332]	; (8001c1c <main+0x3fc>)
 8001ace:	21c8      	movs	r1, #200	; 0xc8
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f00c fc5b 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  			HAL_Delay(400);
 8001ad6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ada:	f003 f901 	bl	8004ce0 <HAL_Delay>

	  			  			if(SIM800.mqttReceive.newEvent) {
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <main+0x3b4>)
 8001ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <main+0x2ee>
	  			  				memcpy(rec,SIM800.mqttReceive.payload,64);
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <main+0x400>)
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <main+0x3b4>)
 8001aec:	4615      	mov	r5, r2
 8001aee:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  			  				SIM800.mqttReceive.newEvent = 0;
 8001b06:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <main+0x3b4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  			  			}
	  			  		}
	  			  		if(strcmp(rec,"new firmware")==0)
 8001b0e:	4945      	ldr	r1, [pc, #276]	; (8001c24 <main+0x404>)
 8001b10:	4843      	ldr	r0, [pc, #268]	; (8001c20 <main+0x400>)
 8001b12:	f7fe fbe5 	bl	80002e0 <strcmp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f af5c 	bne.w	80019d6 <main+0x1b6>
	  			  		{
	  			  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001b1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b22:	f00c fb8f 	bl	800e244 <UTIL_LCD_SetTextColor>
  		  					UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"              ", CENTER_MODE);
 8001b26:	2301      	movs	r3, #1
 8001b28:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <main+0x3f0>)
 8001b2a:	21c8      	movs	r1, #200	; 0xc8
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f00c fc2d 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  			UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"new firmware exist ", CENTER_MODE);
 8001b32:	2301      	movs	r3, #1
 8001b34:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <main+0x408>)
 8001b36:	21c8      	movs	r1, #200	; 0xc8
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f00c fc27 	bl	800e38c <UTIL_LCD_DisplayStringAt>
	  			  			HAL_Delay(400);
 8001b3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b42:	f003 f8cd 	bl	8004ce0 <HAL_Delay>
	  			  			HAL_FLASH_Unlock();
 8001b46:	f004 fa5f 	bl	8006008 <HAL_FLASH_Unlock>

	  			  			HAL_FLASH_OB_Unlock();
 8001b4a:	f004 fa97 	bl	800607c <HAL_FLASH_OB_Unlock>
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 8001b4e:	4837      	ldr	r0, [pc, #220]	; (8001c2c <main+0x40c>)
 8001b50:	f004 fcde 	bl	8006510 <HAL_FLASHEx_OBGetConfig>

	  			  			OBInit.Banks     = FLASH_BANK_1;
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <main+0x40c>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	61da      	str	r2, [r3, #28]
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 8001b5a:	4834      	ldr	r0, [pc, #208]	; (8001c2c <main+0x40c>)
 8001b5c:	f004 fcd8 	bl	8006510 <HAL_FLASHEx_OBGetConfig>


	  			  			if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <main+0x40c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db65      	blt.n	8001c34 <main+0x414>
	  			  			{

	  			  				OBInit.OptionType = OPTIONBYTE_USER;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <main+0x40c>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
	  			  				OBInit.USERType   = OB_USER_SWAP_BANK;
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <main+0x40c>)
 8001b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b74:	615a      	str	r2, [r3, #20]
	  			  				OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <main+0x40c>)
 8001b78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b7c:	619a      	str	r2, [r3, #24]
	  			  				HAL_FLASHEx_OBProgram(&OBInit);
 8001b7e:	482b      	ldr	r0, [pc, #172]	; (8001c2c <main+0x40c>)
 8001b80:	f004 fc22 	bl	80063c8 <HAL_FLASHEx_OBProgram>

	  			  				HAL_FLASH_OB_Launch();
 8001b84:	f004 fa9c 	bl	80060c0 <HAL_FLASH_OB_Launch>

	  			  				HAL_NVIC_SystemReset();
 8001b88:	f003 f9f3 	bl	8004f72 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b8c:	f3bf 8f4f 	dsb	sy
}
 8001b90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b92:	f3bf 8f6f 	isb	sy
}
 8001b96:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <main+0x410>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
}
 8001bac:	e064      	b.n	8001c78 <main+0x458>
 8001bae:	bf00      	nop
 8001bb0:	080118b4 	.word	0x080118b4
 8001bb4:	20000070 	.word	0x20000070
 8001bb8:	ffffa500 	.word	0xffffa500
 8001bbc:	ff000080 	.word	0xff000080
 8001bc0:	0800f384 	.word	0x0800f384
 8001bc4:	0800f398 	.word	0x0800f398
 8001bc8:	0800f448 	.word	0x0800f448
 8001bcc:	20000da4 	.word	0x20000da4
 8001bd0:	20000dd0 	.word	0x20000dd0
 8001bd4:	20000ca0 	.word	0x20000ca0
 8001bd8:	0800f3a8 	.word	0x0800f3a8
 8001bdc:	0800f3b4 	.word	0x0800f3b4
 8001be0:	0800f3b8 	.word	0x0800f3b8
 8001be4:	0800f3cc 	.word	0x0800f3cc
 8001be8:	20000d98 	.word	0x20000d98
 8001bec:	20000dca 	.word	0x20000dca
 8001bf0:	20000dcc 	.word	0x20000dcc
 8001bf4:	0800f3d4 	.word	0x0800f3d4
 8001bf8:	20000db4 	.word	0x20000db4
 8001bfc:	0800f3dc 	.word	0x0800f3dc
 8001c00:	20000dc0 	.word	0x20000dc0
 8001c04:	0800f3e4 	.word	0x0800f3e4
 8001c08:	0800f3f4 	.word	0x0800f3f4
 8001c0c:	0800f3fc 	.word	0x0800f3fc
 8001c10:	0800f408 	.word	0x0800f408
 8001c14:	58020000 	.word	0x58020000
 8001c18:	58021400 	.word	0x58021400
 8001c1c:	0800f418 	.word	0x0800f418
 8001c20:	20000d58 	.word	0x20000d58
 8001c24:	0800f424 	.word	0x0800f424
 8001c28:	0800f434 	.word	0x0800f434
 8001c2c:	20000c5c 	.word	0x20000c5c
 8001c30:	e000ed00 	.word	0xe000ed00
	  			  				SCB_InvalidateICache();
	  			  			}
	  			  			else
	  			  			{

	  			  				OBInit.OptionType = OPTIONBYTE_USER;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <main+0x45c>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
	  			  				OBInit.USERType = OB_USER_SWAP_BANK;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <main+0x45c>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	615a      	str	r2, [r3, #20]
	  			  				OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <main+0x45c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
	  			  				HAL_FLASHEx_OBProgram(&OBInit);
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <main+0x45c>)
 8001c4a:	f004 fbbd 	bl	80063c8 <HAL_FLASHEx_OBProgram>

	  			  				HAL_FLASH_OB_Launch();
 8001c4e:	f004 fa37 	bl	80060c0 <HAL_FLASH_OB_Launch>

	  			  				HAL_NVIC_SystemReset();
 8001c52:	f003 f98e 	bl	8004f72 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c56:	f3bf 8f4f 	dsb	sy
}
 8001c5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c5c:	f3bf 8f6f 	isb	sy
}
 8001c60:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <main+0x460>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c6a:	f3bf 8f4f 	dsb	sy
}
 8001c6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c70:	f3bf 8f6f 	isb	sy
}
 8001c74:	bf00      	nop
}
 8001c76:	bf00      	nop
	  ts_status = BSP_TS_GetState(0, &TS_State);
 8001c78:	e6ad      	b.n	80019d6 <main+0x1b6>
 8001c7a:	bf00      	nop
 8001c7c:	20000c5c 	.word	0x20000c5c
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09c      	sub	sp, #112	; 0x70
 8001c88:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	224c      	movs	r2, #76	; 0x4c
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00c fe26 	bl	800e8e4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00c fe20 	bl	800e8e4 <memset>

	  /** Supply configuration update enable
	  */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f006 fcb5 	bl	8008614 <HAL_PWREx_ConfigSupply>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <SystemClock_Config+0xec>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <SystemClock_Config+0xec>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <SystemClock_Config+0xec>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cdc:	bf00      	nop
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <SystemClock_Config+0xf0>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cea:	d1f8      	bne.n	8001cde <SystemClock_Config+0x5a>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLM = 2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLN = 64;
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	65bb      	str	r3, [r7, #88]	; 0x58
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	663b      	str	r3, [r7, #96]	; 0x60
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d12:	230c      	movs	r3, #12
 8001d14:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	66bb      	str	r3, [r7, #104]	; 0x68
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f006 fcb0 	bl	8008688 <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0xae>
	  {
	    Error_Handler();
 8001d2e:	f000 f88d 	bl	8001e4c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	233f      	movs	r3, #63	; 0x3f
 8001d34:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
	                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	61fb      	str	r3, [r7, #28]
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	623b      	str	r3, [r7, #32]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2102      	movs	r1, #2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 f8ef 	bl	8008f3c <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xe4>
	  {
	    Error_Handler();
 8001d64:	f000 f872 	bl	8001e4c <Error_Handler>
	  }
}
 8001d68:	bf00      	nop
 8001d6a:	3770      	adds	r7, #112	; 0x70
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58000400 	.word	0x58000400
 8001d74:	58024800 	.word	0x58024800

08001d78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d88:	d155      	bne.n	8001e36 <HAL_GPIO_EXTI_Callback+0xbe>
	  HAL_FLASH_Unlock();
 8001d8a:	f004 f93d 	bl	8006008 <HAL_FLASH_Unlock>

	   HAL_FLASH_OB_Unlock();
 8001d8e:	f004 f975 	bl	800607c <HAL_FLASH_OB_Unlock>
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 8001d92:	482c      	ldr	r0, [pc, #176]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001d94:	f004 fbbc 	bl	8006510 <HAL_FLASHEx_OBGetConfig>

	  OBInit.Banks     = FLASH_BANK_1;
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	61da      	str	r2, [r3, #28]
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 8001d9e:	4829      	ldr	r0, [pc, #164]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001da0:	f004 fbb6 	bl	8006510 <HAL_FLASHEx_OBGetConfig>


	 if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db22      	blt.n	8001df2 <HAL_GPIO_EXTI_Callback+0x7a>
	  	{

	  	          OBInit.OptionType = OPTIONBYTE_USER;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	601a      	str	r2, [r3, #0]
	  	          OBInit.USERType   = OB_USER_SWAP_BANK;
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db8:	615a      	str	r2, [r3, #20]
	  	          OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dc0:	619a      	str	r2, [r3, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 8001dc2:	4820      	ldr	r0, [pc, #128]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dc4:	f004 fb00 	bl	80063c8 <HAL_FLASHEx_OBProgram>

	  	          HAL_FLASH_OB_Launch();
 8001dc8:	f004 f97a 	bl	80060c0 <HAL_FLASH_OB_Launch>

	  	          HAL_NVIC_SystemReset();
 8001dcc:	f003 f8d1 	bl	8004f72 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd0:	f3bf 8f4f 	dsb	sy
}
 8001dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd6:	f3bf 8f6f 	isb	sy
}
 8001dda:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001de4:	f3bf 8f4f 	dsb	sy
}
 8001de8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dea:	f3bf 8f6f 	isb	sy
}
 8001dee:	bf00      	nop
}
 8001df0:	e023      	b.n	8001e3a <HAL_GPIO_EXTI_Callback+0xc2>
	  	          SCB_InvalidateICache();
	  	        }
	  	        else
	  	        {

	  	          OBInit.OptionType = OPTIONBYTE_USER;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	601a      	str	r2, [r3, #0]
	  	          OBInit.USERType = OB_USER_SWAP_BANK;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfe:	615a      	str	r2, [r3, #20]
	  	          OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 8001e06:	480f      	ldr	r0, [pc, #60]	; (8001e44 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e08:	f004 fade 	bl	80063c8 <HAL_FLASHEx_OBProgram>

	  	          HAL_FLASH_OB_Launch();
 8001e0c:	f004 f958 	bl	80060c0 <HAL_FLASH_OB_Launch>

	  	          HAL_NVIC_SystemReset();
 8001e10:	f003 f8af 	bl	8004f72 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e14:	f3bf 8f4f 	dsb	sy
}
 8001e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1a:	f3bf 8f6f 	isb	sy
}
 8001e1e:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
}
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_EXTI_Callback+0xc2>


	  	          SCB_InvalidateICache();
	  	        }
  } else {
      __NOP();
 8001e36:	bf00      	nop
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000c5c 	.word	0x20000c5c
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_MspInit+0x30>)
 8001e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_MspInit+0x30>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_MspInit+0x30>)
 8001e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58024400 	.word	0x58024400

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f002 fee2 	bl	8004ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <USART2_IRQHandler+0x10>)
 8001ee6:	f009 fbb5 	bl	800b654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000dd8 	.word	0x20000dd8

08001ef4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ef8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001efc:	f005 f915 	bl	800712a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f00c fcf4 	bl	800e920 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20020000 	.word	0x20020000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20000dd4 	.word	0x20000dd4
 8001f6c:	20001d10 	.word	0x20001d10

08001f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <SystemInit+0xe4>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a36      	ldr	r2, [pc, #216]	; (8002054 <SystemInit+0xe4>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <SystemInit+0xe8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d807      	bhi.n	8001fa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <SystemInit+0xe8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 030f 	bic.w	r3, r3, #15
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <SystemInit+0xe8>)
 8001f9a:	f043 0307 	orr.w	r3, r3, #7
 8001f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <SystemInit+0xec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2d      	ldr	r2, [pc, #180]	; (800205c <SystemInit+0xec>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <SystemInit+0xec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <SystemInit+0xec>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4929      	ldr	r1, [pc, #164]	; (800205c <SystemInit+0xec>)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <SystemInit+0xf0>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <SystemInit+0xe8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fca:	4b23      	ldr	r3, [pc, #140]	; (8002058 <SystemInit+0xe8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 030f 	bic.w	r3, r3, #15
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <SystemInit+0xe8>)
 8001fd4:	f043 0307 	orr.w	r3, r3, #7
 8001fd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <SystemInit+0xec>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <SystemInit+0xec>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <SystemInit+0xec>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <SystemInit+0xec>)
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <SystemInit+0xf4>)
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <SystemInit+0xec>)
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <SystemInit+0xf8>)
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <SystemInit+0xec>)
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <SystemInit+0xfc>)
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <SystemInit+0xec>)
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <SystemInit+0xec>)
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <SystemInit+0xfc>)
 8002008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <SystemInit+0xec>)
 800200c:	2200      	movs	r2, #0
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <SystemInit+0xec>)
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <SystemInit+0xfc>)
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <SystemInit+0xec>)
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <SystemInit+0xec>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <SystemInit+0xec>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <SystemInit+0xec>)
 800202a:	2200      	movs	r2, #0
 800202c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <SystemInit+0x100>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <SystemInit+0x104>)
 8002034:	4013      	ands	r3, r2
 8002036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203a:	d202      	bcs.n	8002042 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <SystemInit+0x108>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <SystemInit+0x10c>)
 8002044:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002048:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	52002000 	.word	0x52002000
 800205c:	58024400 	.word	0x58024400
 8002060:	eaf6ed7f 	.word	0xeaf6ed7f
 8002064:	02020200 	.word	0x02020200
 8002068:	01ff0000 	.word	0x01ff0000
 800206c:	01010280 	.word	0x01010280
 8002070:	5c001000 	.word	0x5c001000
 8002074:	ffff0000 	.word	0xffff0000
 8002078:	51008108 	.word	0x51008108
 800207c:	52004000 	.word	0x52004000

08002080 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <MX_USART2_UART_Init+0x90>)
 8002086:	4a23      	ldr	r2, [pc, #140]	; (8002114 <MX_USART2_UART_Init+0x94>)
 8002088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <MX_USART2_UART_Init+0x90>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <MX_USART2_UART_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_USART2_UART_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020ca:	f009 f992 	bl	800b3f2 <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020d4:	f7ff feba 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d8:	2100      	movs	r1, #0
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020dc:	f00b fe8f 	bl	800ddfe <HAL_UARTEx_SetTxFifoThreshold>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020e6:	f7ff feb1 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020ee:	f00b fec4 	bl	800de7a <HAL_UARTEx_SetRxFifoThreshold>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020f8:	f7ff fea8 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <MX_USART2_UART_Init+0x90>)
 80020fe:	f00b fe45 	bl	800dd8c <HAL_UARTEx_DisableFifoMode>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002108:	f7ff fea0 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000dd8 	.word	0x20000dd8
 8002114:	40004400 	.word	0x40004400

08002118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0ba      	sub	sp, #232	; 0xe8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	22c0      	movs	r2, #192	; 0xc0
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f00c fbd3 	bl	800e8e4 <memset>
  if(uartHandle->Instance==USART2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <HAL_UART_MspInit+0xd4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d14d      	bne.n	80021e4 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002148:	f04f 0202 	mov.w	r2, #2
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4618      	mov	r0, r3
 8002160:	f007 fa78 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800216a:	f7ff fe6f 	bl	8001e4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 8002170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002174:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 8002176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 8002180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_UART_MspInit+0xd8>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021aa:	2360      	movs	r3, #96	; 0x60
 80021ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c2:	2307      	movs	r3, #7
 80021c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_UART_MspInit+0xdc>)
 80021d0:	f004 fcbe 	bl	8006b50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2105      	movs	r1, #5
 80021d8:	2026      	movs	r0, #38	; 0x26
 80021da:	f002 fea2 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021de:	2026      	movs	r0, #38	; 0x26
 80021e0:	f002 feb9 	bl	8004f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	37e8      	adds	r7, #232	; 0xe8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40004400 	.word	0x40004400
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020c00 	.word	0x58020c00

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021fc:	f7ff feb8 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	; (8002244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002226:	f00c fb81 	bl	800e92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7ff faf9 	bl	8001820 <main>
  bx  lr
 800222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800223c:	08013404 	.word	0x08013404
  ldr r2, =_sbss
 8002240:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002244:	20001d10 	.word	0x20001d10

08002248 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC3_IRQHandler>
	...

0800224c <EXC7200_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t EXC7200_RegisterBusIO (EXC7200_Object_t *pObj, EXC7200_IO_t *pIO)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <EXC7200_RegisterBusIO+0x18>
  {
    ret = EXC7200_ERROR;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e02c      	b.n	80022be <EXC7200_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	891a      	ldrh	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <EXC7200_RegisterBusIO+0x7c>)
 8002298:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <EXC7200_RegisterBusIO+0x80>)
 800229e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <EXC7200_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4798      	blx	r3
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	e002      	b.n	80022be <EXC7200_RegisterBusIO+0x72>
    }
    else
    {
      ret = EXC7200_ERROR;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08002519 	.word	0x08002519
 80022cc:	0800254d 	.word	0x0800254d

080022d0 <EXC7200_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to EXC7200 sensor capabilities
  * @retval Component status
  */
int32_t EXC7200_GetCapabilities(EXC7200_Object_t *pObj, EXC7200_Capabilities_t *Capabilities)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = EXC7200_MAX_X_LENGTH;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = EXC7200_MAX_Y_LENGTH;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fa:	609a      	str	r2, [r3, #8]
  
  return EXC7200_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <EXC7200_Init>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_Init(EXC7200_Object_t *pObj)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  int32_t ret = EXC7200_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <EXC7200_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != EXC7200_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4798      	blx	r3
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <EXC7200_Init+0x2a>
    {
      ret = EXC7200_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e003      	b.n	800233c <EXC7200_Init+0x32>
    }
    else
    {
      pObj->IsInitialized = 1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 800233c:	68fb      	ldr	r3, [r7, #12]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <EXC7200_DeInit>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_DeInit(EXC7200_Object_t *pObj)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  int32_t ret = EXC7200_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 1U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10d      	bne.n	8002378 <EXC7200_DeInit+0x32>
  {
    if(pObj->IO.DeInit() != EXC7200_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4798      	blx	r3
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <EXC7200_DeInit+0x2a>
    {
      ret = EXC7200_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e003      	b.n	8002378 <EXC7200_DeInit+0x32>
    }
    else
    {
      pObj->IsInitialized = 0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <EXC7200_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t EXC7200_GestureConfig(EXC7200_Object_t *pObj, EXC7200_Gesture_Init_t *GestureInit)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR;  
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <EXC7200_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t EXC7200_ReadID(EXC7200_Object_t *pObj, uint32_t *Id)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  int32_t ret = EXC7200_ERROR;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 0018 	add.w	r0, r3, #24
 80023b2:	f107 020b 	add.w	r2, r7, #11
 80023b6:	2301      	movs	r3, #1
 80023b8:	2109      	movs	r1, #9
 80023ba:	f000 f8e1 	bl	8002580 <exc7200_read_reg>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <EXC7200_ReadID+0x34>
  {
    *Id = EXC7200_ID; 
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 42e4 	mov.w	r2, #29184	; 0x7200
 80023ca:	601a      	str	r2, [r3, #0]
    ret = EXC7200_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  }  
  
  return ret;
 80023d0:	68fb      	ldr	r3, [r7, #12]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <EXC7200_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch stucture pointer
  * @retval Component status.
  */
int32_t EXC7200_GetState(EXC7200_Object_t *pObj, EXC7200_State_t *State)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint8_t  data[10];
  
  State->TouchDetected = (uint32_t)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	220a      	movs	r2, #10
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f86e 	bl	80024ce <EXC7200_DetectTouch>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
  
  /* Send back first ready X position to caller */
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	7bba      	ldrb	r2, [r7, #14]
 8002400:	0912      	lsrs	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	4313      	orrs	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	461a      	mov	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	605a      	str	r2, [r3, #4]
  /* Send back first ready Y position to caller */
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 800240e:	7c7b      	ldrb	r3, [r7, #17]
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	7c3a      	ldrb	r2, [r7, #16]
 8002414:	0912      	lsrs	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	4313      	orrs	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	461a      	mov	r2, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	609a      	str	r2, [r3, #8]
  
  /* Dummy Read to deactivate read mode */
  (void)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	220a      	movs	r2, #10
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f84f 	bl	80024ce <EXC7200_DetectTouch>
  
  return EXC7200_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <EXC7200_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch stucture pointer
  * @retval Component status.
  */
int32_t EXC7200_GetMultiTouchState(EXC7200_Object_t *pObj, EXC7200_MultiTouch_State_t *State)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR; 
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <EXC7200_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status.
  */
int32_t EXC7200_GetGesture(EXC7200_Object_t *pObj, uint8_t *GestureId)
{  
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return EXC7200_ERROR;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <EXC7200_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_EnableIT(EXC7200_Object_t *pObj)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <EXC7200_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_DisableIT(EXC7200_Object_t *pObj)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <EXC7200_ITStatus>:
  *         @note : This feature is not applicable to EXC7200.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_ITStatus(EXC7200_Object_t *pObj)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <EXC7200_ClearIT>:
  *         @note : This feature is not applicable to EXC7200.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t EXC7200_ClearIT(EXC7200_Object_t *pObj)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return EXC7200_ERROR;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <EXC7200_DetectTouch>:
  * @param  Length Number of data to read
  * @retval Number of active touches detected (can be 0 or 1) or EXC7200_ERROR
  *         in case of error
  */
static int32_t EXC7200_DetectTouch(EXC7200_Object_t *pObj, uint8_t *pData, uint32_t Length)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  int32_t ret;
  
  /* Read TS data */
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f103 0018 	add.w	r0, r3, #24
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	2109      	movs	r1, #9
 80024e8:	f000 f84a 	bl	8002580 <exc7200_read_reg>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <EXC7200_DetectTouch+0x2c>
  {
    ret = EXC7200_ERROR;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e009      	b.n	800250e <EXC7200_DetectTouch+0x40>
  }
  else
  {
    if(pData[1] == 0x83U)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b83      	cmp	r3, #131	; 0x83
 8002502:	d102      	bne.n	800250a <EXC7200_DetectTouch+0x3c>
    {
      /* Touch detected */
      ret = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e001      	b.n	800250e <EXC7200_DetectTouch+0x40>
    }
    else
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return ret;
 800250e:	697b      	ldr	r3, [r7, #20]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	461a      	mov	r2, r3
 8002524:	460b      	mov	r3, r1
 8002526:	72fb      	strb	r3, [r7, #11]
 8002528:	4613      	mov	r3, r2
 800252a:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	691c      	ldr	r4, [r3, #16]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	8918      	ldrh	r0, [r3, #8]
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	b299      	uxth	r1, r3
 800253c:	893b      	ldrh	r3, [r7, #8]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	47a0      	blx	r4
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	72fb      	strb	r3, [r7, #11]
 800255c:	4613      	mov	r3, r2
 800255e:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	68dc      	ldr	r4, [r3, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	8918      	ldrh	r0, [r3, #8]
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	b299      	uxth	r1, r3
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	47a0      	blx	r4
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	460b      	mov	r3, r1
 800258e:	72fb      	strb	r3, [r7, #11]
 8002590:	4613      	mov	r3, r2
 8002592:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685c      	ldr	r4, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6898      	ldr	r0, [r3, #8]
 800259c:	893b      	ldrh	r3, [r7, #8]
 800259e:	7af9      	ldrb	r1, [r7, #11]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	47a0      	blx	r4
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <IS42S32800G_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800G_ERROR;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f831 	bl	800262c <IS42S32800G_ClockEnable>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d128      	bne.n	8002622 <IS42S32800G_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800G_Delay(1);
 80025d0:	2001      	movs	r0, #1
 80025d2:	f000 f8e1 	bl	8002798 <IS42S32800G_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f849 	bl	8002674 <IS42S32800G_Precharge>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11c      	bne.n	8002622 <IS42S32800G_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f896 	bl	8002724 <IS42S32800G_RefreshMode>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d111      	bne.n	8002622 <IS42S32800G_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 80025fe:	6839      	ldr	r1, [r7, #0]
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f85b 	bl	80026bc <IS42S32800G_ModeRegConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <IS42S32800G_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8ac 	bl	8002770 <IS42S32800G_RefreshRate>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <IS42S32800G_Init+0x74>
          {
            ret = IS42S32800G_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <IS42S32800G_ClockEnable+0x44>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <IS42S32800G_ClockEnable+0x44>)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <IS42S32800G_ClockEnable+0x44>)
 8002644:	2201      	movs	r2, #1
 8002646:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <IS42S32800G_ClockEnable+0x44>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800264e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002652:	4907      	ldr	r1, [pc, #28]	; (8002670 <IS42S32800G_ClockEnable+0x44>)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f008 fe6f 	bl	800b338 <HAL_SDRAM_SendCommand>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <IS42S32800G_ClockEnable+0x3a>
  {
    return IS42S32800G_ERROR;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e000      	b.n	8002668 <IS42S32800G_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8002666:	2300      	movs	r3, #0
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000e6c 	.word	0x20000e6c

08002674 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <IS42S32800G_Precharge+0x44>)
 8002680:	2202      	movs	r2, #2
 8002682:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002684:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <IS42S32800G_Precharge+0x44>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <IS42S32800G_Precharge+0x44>)
 800268c:	2201      	movs	r2, #1
 800268e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <IS42S32800G_Precharge+0x44>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269a:	4907      	ldr	r1, [pc, #28]	; (80026b8 <IS42S32800G_Precharge+0x44>)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f008 fe4b 	bl	800b338 <HAL_SDRAM_SendCommand>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <IS42S32800G_Precharge+0x3a>
  {
    return IS42S32800G_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e000      	b.n	80026b0 <IS42S32800G_Precharge+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 80026ae:	2300      	movs	r3, #0
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000e6c 	.word	0x20000e6c

080026bc <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026ce:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80026d4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80026da:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <IS42S32800G_ModeRegConfig+0x64>)
 80026e6:	2204      	movs	r2, #4
 80026e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <IS42S32800G_ModeRegConfig+0x64>)
 80026f0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <IS42S32800G_ModeRegConfig+0x64>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <IS42S32800G_ModeRegConfig+0x64>)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80026fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <IS42S32800G_ModeRegConfig+0x64>)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f008 fe17 	bl	800b338 <HAL_SDRAM_SendCommand>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <IS42S32800G_ModeRegConfig+0x5a>
  {
    return IS42S32800G_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e000      	b.n	8002718 <IS42S32800G_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800G_OK;
 8002716:	2300      	movs	r3, #0
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000e6c 	.word	0x20000e6c

08002724 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <IS42S32800G_RefreshMode+0x48>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002736:	4a0d      	ldr	r2, [pc, #52]	; (800276c <IS42S32800G_RefreshMode+0x48>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <IS42S32800G_RefreshMode+0x48>)
 800273e:	2208      	movs	r2, #8
 8002740:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <IS42S32800G_RefreshMode+0x48>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <IS42S32800G_RefreshMode+0x48>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f008 fdf2 	bl	800b338 <HAL_SDRAM_SendCommand>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <IS42S32800G_RefreshMode+0x3c>
  {
    return IS42S32800G_ERROR;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e000      	b.n	8002762 <IS42S32800G_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800G_OK;
 8002760:	2300      	movs	r3, #0
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000e6c 	.word	0x20000e6c

08002770 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f008 fe10 	bl	800b3a2 <HAL_SDRAM_ProgramRefreshRate>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <IS42S32800G_RefreshRate+0x1e>
  {
    return IS42S32800G_ERROR;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	e000      	b.n	8002790 <IS42S32800G_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800G_OK;
 800278e:	2300      	movs	r3, #0
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <IS42S32800G_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80027a0:	f002 fa92 	bl	8004cc8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80027a6:	bf00      	nop
 80027a8:	f002 fa8e 	bl	8004cc8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <IS42S32800G_Delay+0x10>
  {
  }
  return IS42S32800G_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <TS3510_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t TS3510_RegisterBusIO (TS3510_Object_t *pObj, TS3510_IO_t *pIO)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <TS3510_RegisterBusIO+0x18>
  {
    ret = TS3510_ERROR;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e02c      	b.n	8002836 <TS3510_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	891a      	ldrh	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <TS3510_RegisterBusIO+0x7c>)
 8002810:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <TS3510_RegisterBusIO+0x80>)
 8002816:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <TS3510_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4798      	blx	r3
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	e002      	b.n	8002836 <TS3510_RegisterBusIO+0x72>
    }
    else
    {
      ret = TS3510_ERROR;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	08002b43 	.word	0x08002b43
 8002844:	08002b77 	.word	0x08002b77

08002848 <TS3510_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to TS3510 sensor capabilities
  * @retval Component status
  */
int32_t TS3510_GetCapabilities(TS3510_Object_t *pObj, TS3510_Capabilities_t *Capabilities)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = TS3510_MAX_X_LENGTH;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800286a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = TS3510_MAX_Y_LENGTH;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002872:	609a      	str	r2, [r3, #8]
  
  return TS3510_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <TS3510_Init>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_Init(TS3510_Object_t *pObj)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  int32_t ret = TS3510_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10d      	bne.n	80028b4 <TS3510_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != TS3510_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4798      	blx	r3
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <TS3510_Init+0x2a>
    {
      ret = TS3510_ERROR;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e003      	b.n	80028b4 <TS3510_Init+0x32>
    }
    else
    {
      pObj->IsInitialized = 1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <TS3510_DeInit>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_DeInit(TS3510_Object_t *pObj)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  int32_t ret = TS3510_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10d      	bne.n	80028f0 <TS3510_DeInit+0x32>
  {
    if(pObj->IO.DeInit() != TS3510_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4798      	blx	r3
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <TS3510_DeInit+0x2a>
    {
      ret = TS3510_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e003      	b.n	80028f0 <TS3510_DeInit+0x32>
    }
    else
    {
      pObj->IsInitialized = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }
  
  return ret;
 80028f0:	68fb      	ldr	r3, [r7, #12]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <TS3510_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t TS3510_GestureConfig(TS3510_Object_t *pObj, TS3510_Gesture_Init_t *GestureInit)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR;  
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <TS3510_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t TS3510_ReadID(TS3510_Object_t *pObj, uint32_t *Id)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  int32_t ret = TS3510_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8002922:	f640 0381 	movw	r3, #2177	; 0x881
 8002926:	823b      	strh	r3, [r7, #16]
  uint8_t  data;
  
  /* Prepare for LCD read data */
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f103 0018 	add.w	r0, r3, #24
 800292e:	f107 0210 	add.w	r2, r7, #16
 8002932:	2302      	movs	r3, #2
 8002934:	218a      	movs	r1, #138	; 0x8a
 8002936:	f000 f94f 	bl	8002bd8 <ts3510_write_reg>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <TS3510_ReadID+0x34>
  {
    ret = TS3510_ERROR;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e013      	b.n	8002970 <TS3510_ReadID+0x5c>
  }/* Read TS data from LCD */
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0018 	add.w	r0, r3, #24
 800294e:	f107 020f 	add.w	r2, r7, #15
 8002952:	2301      	movs	r3, #1
 8002954:	218a      	movs	r1, #138	; 0x8a
 8002956:	f000 f928 	bl	8002baa <ts3510_read_reg>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <TS3510_ReadID+0x54>
  {
    ret = TS3510_ERROR;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e003      	b.n	8002970 <TS3510_ReadID+0x5c>
  }
  else
  {
    *Id = TS3510_ID;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f243 5210 	movw	r2, #13584	; 0x3510
 800296e:	601a      	str	r2, [r3, #0]
  }
  
  return ret;     
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TS3510_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch stucture pointer
  * @retval Component status.
  */
int32_t TS3510_GetState(TS3510_Object_t *pObj, TS3510_State_t *State)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  int32_t ret = TS3510_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 800298a:	f640 0381 	movw	r3, #2177	; 0x881
 800298e:	833b      	strh	r3, [r7, #24]
  uint8_t pData[11];
  
  /* Check if a touch is detected */
  State->TouchDetected = (uint32_t)TS3510_DetectTouch(pObj);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f899 	bl	8002ac8 <TS3510_DetectTouch>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	601a      	str	r2, [r3, #0]
  
  if(State->TouchDetected == 1U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d13c      	bne.n	8002a20 <TS3510_GetState+0xa4>
  {  
    /* Prepare for LCD read data */
    if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f103 0018 	add.w	r0, r3, #24
 80029ac:	f107 0218 	add.w	r2, r7, #24
 80029b0:	2302      	movs	r3, #2
 80029b2:	2100      	movs	r1, #0
 80029b4:	f000 f910 	bl	8002bd8 <ts3510_write_reg>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <TS3510_GetState+0x4a>
    {
      ret = TS3510_ERROR;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e02c      	b.n	8002a20 <TS3510_GetState+0xa4>
    }/* Read TS data from LCD */
    else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0018 	add.w	r0, r3, #24
 80029cc:	f107 020c 	add.w	r2, r7, #12
 80029d0:	230b      	movs	r3, #11
 80029d2:	218a      	movs	r1, #138	; 0x8a
 80029d4:	f000 f8e9 	bl	8002baa <ts3510_read_reg>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <TS3510_GetState+0x6a>
    {
      ret = TS3510_ERROR;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e01c      	b.n	8002a20 <TS3510_GetState+0xa4>
    }  
    else
    {
      /* Send back first ready X position to caller */
      State->TouchX = (((pData[1] << 8) | pData[2]) << 12) / 640;
 80029e6:	7b7b      	ldrb	r3, [r7, #13]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	7bba      	ldrb	r2, [r7, #14]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <TS3510_GetState+0xb0>)
 80029f2:	fb82 1203 	smull	r1, r2, r2, r3
 80029f6:	1212      	asrs	r2, r2, #8
 80029f8:	17db      	asrs	r3, r3, #31
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	605a      	str	r2, [r3, #4]
      /* Send back first ready Y position to caller */
      State->TouchY = (((pData[3] << 8) | pData[4]) << 12) / 480;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	7c3a      	ldrb	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	031b      	lsls	r3, r3, #12
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <TS3510_GetState+0xb4>)
 8002a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a12:	441a      	add	r2, r3
 8002a14:	1212      	asrs	r2, r2, #8
 8002a16:	17db      	asrs	r3, r3, #31
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	609a      	str	r2, [r3, #8]
    }
  }
  
  return ret;
 8002a20:	69fb      	ldr	r3, [r7, #28]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	66666667 	.word	0x66666667
 8002a30:	88888889 	.word	0x88888889

08002a34 <TS3510_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch stucture pointer
  * @retval Component status.
  */
int32_t TS3510_GetMultiTouchState(TS3510_Object_t *pObj, TS3510_MultiTouch_State_t *State)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR; 
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <TS3510_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status.
  */
int32_t TS3510_GetGesture(TS3510_Object_t *pObj, uint8_t *GestureId)
{  
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  return TS3510_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <TS3510_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_EnableIT(TS3510_Object_t *pObj)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <TS3510_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_DisableIT(TS3510_Object_t *pObj)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <TS3510_ITStatus>:
  *         @note : This feature is not applicable to TS3510.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_ITStatus(TS3510_Object_t *pObj)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <TS3510_ClearIT>:
  *         @note : This feature is not applicable to TS3510.
  * @param  pObj Component object pointer
  * @retval Component status.
  */
int32_t TS3510_ClearIT(TS3510_Object_t *pObj)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Feature not supported */
  return TS3510_ERROR;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <TS3510_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0 or 1) or TS3510_ERROR
  *         in case of error
  */
static int32_t TS3510_DetectTouch(TS3510_Object_t *pObj)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8002ad0:	f640 0381 	movw	r3, #2177	; 0x881
 8002ad4:	833b      	strh	r3, [r7, #24]
  uint8_t pData[11];
  
  /* Prepare for LCD read data */
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f103 0018 	add.w	r0, r3, #24
 8002adc:	f107 0218 	add.w	r2, r7, #24
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f000 f878 	bl	8002bd8 <ts3510_write_reg>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <TS3510_DetectTouch+0x2e>
  {
    ret = TS3510_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	e020      	b.n	8002b38 <TS3510_DetectTouch+0x70>
  }/* Read TS data from LCD */
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f103 0018 	add.w	r0, r3, #24
 8002afc:	f107 020c 	add.w	r2, r7, #12
 8002b00:	230b      	movs	r3, #11
 8002b02:	218a      	movs	r1, #138	; 0x8a
 8002b04:	f000 f851 	bl	8002baa <ts3510_read_reg>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <TS3510_DetectTouch+0x4e>
  {
    ret = TS3510_ERROR;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	e010      	b.n	8002b38 <TS3510_DetectTouch+0x70>
  }
  else
  {
    if((pData[1] == 0xFF) && (pData[2] == 0xFF) && (pData[3] == 0xFF) && (pData[4] == 0xFF))
 8002b16:	7b7b      	ldrb	r3, [r7, #13]
 8002b18:	2bff      	cmp	r3, #255	; 0xff
 8002b1a:	d10b      	bne.n	8002b34 <TS3510_DetectTouch+0x6c>
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	2bff      	cmp	r3, #255	; 0xff
 8002b20:	d108      	bne.n	8002b34 <TS3510_DetectTouch+0x6c>
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2bff      	cmp	r3, #255	; 0xff
 8002b26:	d105      	bne.n	8002b34 <TS3510_DetectTouch+0x6c>
 8002b28:	7c3b      	ldrb	r3, [r7, #16]
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d102      	bne.n	8002b34 <TS3510_DetectTouch+0x6c>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e001      	b.n	8002b38 <TS3510_DetectTouch+0x70>
    }
    else
    {
      /* Touch detected */
      ret = 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 8002b38:	69fb      	ldr	r3, [r7, #28]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002b42:	b590      	push	{r4, r7, lr}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	460b      	mov	r3, r1
 8002b50:	72fb      	strb	r3, [r7, #11]
 8002b52:	4613      	mov	r3, r2
 8002b54:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	691c      	ldr	r4, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	8918      	ldrh	r0, [r3, #8]
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	b299      	uxth	r1, r3
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	47a0      	blx	r4
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	461a      	mov	r2, r3
 8002b82:	460b      	mov	r3, r1
 8002b84:	72fb      	strb	r3, [r7, #11]
 8002b86:	4613      	mov	r3, r2
 8002b88:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	68dc      	ldr	r4, [r3, #12]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	8918      	ldrh	r0, [r3, #8]
 8002b96:	7afb      	ldrb	r3, [r7, #11]
 8002b98:	b299      	uxth	r1, r3
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	47a0      	blx	r4
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}

08002baa <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002baa:	b590      	push	{r4, r7, lr}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	72fb      	strb	r3, [r7, #11]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685c      	ldr	r4, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6898      	ldr	r0, [r3, #8]
 8002bc6:	893b      	ldrh	r3, [r7, #8]
 8002bc8:	7af9      	ldrb	r1, [r7, #11]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	47a0      	blx	r4
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	72fb      	strb	r3, [r7, #11]
 8002be8:	4613      	mov	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681c      	ldr	r4, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6898      	ldr	r0, [r3, #8]
 8002bf4:	893b      	ldrh	r3, [r7, #8]
 8002bf6:	7af9      	ldrb	r1, [r7, #11]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	47a0      	blx	r4
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
	...

08002c08 <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <BSP_I2C1_Init+0x68>)
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <BSP_I2C1_Init+0x6c>)
 8002c16:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 8002c18:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <BSP_I2C1_Init+0x70>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d122      	bne.n	8002c66 <BSP_I2C1_Init+0x5e>
  {
    I2c1InitCounter++;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <BSP_I2C1_Init+0x70>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <BSP_I2C1_Init+0x70>)
 8002c28:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8002c2a:	4811      	ldr	r0, [pc, #68]	; (8002c70 <BSP_I2C1_Init+0x68>)
 8002c2c:	f004 fd9a 	bl	8007764 <HAL_I2C_GetState>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d117      	bne.n	8002c66 <BSP_I2C1_Init+0x5e>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 8002c36:	480e      	ldr	r0, [pc, #56]	; (8002c70 <BSP_I2C1_Init+0x68>)
 8002c38:	f000 fb66 	bl	8003308 <I2C1_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d111      	bne.n	8002c66 <BSP_I2C1_Init+0x5e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8002c42:	f006 fcdb 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 8002c46:	4603      	mov	r3, r0
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <BSP_I2C1_Init+0x74>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f8e6 	bl	8002e1c <I2C_GetTiming>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4619      	mov	r1, r3
 8002c54:	4806      	ldr	r0, [pc, #24]	; (8002c70 <BSP_I2C1_Init+0x68>)
 8002c56:	f000 f83b 	bl	8002cd0 <MX_I2C1_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <BSP_I2C1_Init+0x5e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002c60:	f06f 0307 	mvn.w	r3, #7
 8002c64:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 8002c66:	687b      	ldr	r3, [r7, #4]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20001884 	.word	0x20001884
 8002c74:	40005400 	.word	0x40005400
 8002c78:	20000e7c 	.word	0x20000e7c
 8002c7c:	000186a0 	.word	0x000186a0

08002c80 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <BSP_I2C1_DeInit+0x48>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <BSP_I2C1_DeInit+0x48>)
 8002c92:	6013      	str	r3, [r2, #0]

  if (--I2c1InitCounter == 0U)
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <BSP_I2C1_DeInit+0x48>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <BSP_I2C1_DeInit+0x48>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <BSP_I2C1_DeInit+0x48>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <BSP_I2C1_DeInit+0x3e>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
 8002ca6:	4809      	ldr	r0, [pc, #36]	; (8002ccc <BSP_I2C1_DeInit+0x4c>)
 8002ca8:	f000 fb98 	bl	80033dc <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8002cac:	4807      	ldr	r0, [pc, #28]	; (8002ccc <BSP_I2C1_DeInit+0x4c>)
 8002cae:	f004 fae7 	bl	8007280 <HAL_I2C_DeInit>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <BSP_I2C1_DeInit+0x3e>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002cb8:	f06f 0307 	mvn.w	r3, #7
 8002cbc:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002cbe:	687b      	ldr	r3, [r7, #4]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000e7c 	.word	0x20000e7c
 8002ccc:	20001884 	.word	0x20001884

08002cd0 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f004 fa26 	bl	8007160 <HAL_I2C_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e014      	b.n	8002d4a <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f004 ffee 	bl	8007d08 <HAL_I2CEx_ConfigAnalogFilter>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e008      	b.n	8002d4a <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f005 f82f 	bl	8007d9e <HAL_I2CEx_ConfigDigitalFilter>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60ba      	str	r2, [r7, #8]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	81fb      	strh	r3, [r7, #14]
 8002d62:	460b      	mov	r3, r1
 8002d64:	81bb      	strh	r3, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002d6a:	89b9      	ldrh	r1, [r7, #12]
 8002d6c:	89f8      	ldrh	r0, [r7, #14]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f000 fb53 	bl	8003420 <I2C1_WriteReg>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <BSP_I2C1_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e00c      	b.n	8002da0 <BSP_I2C1_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8002d86:	4809      	ldr	r0, [pc, #36]	; (8002dac <BSP_I2C1_WriteReg+0x58>)
 8002d88:	f004 fcfa 	bl	8007780 <HAL_I2C_GetError>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d103      	bne.n	8002d9a <BSP_I2C1_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002d92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e002      	b.n	8002da0 <BSP_I2C1_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002d9a:	f06f 0303 	mvn.w	r3, #3
 8002d9e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002da0:	697b      	ldr	r3, [r7, #20]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20001884 	.word	0x20001884

08002db0 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	81fb      	strh	r3, [r7, #14]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	81bb      	strh	r3, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002dc6:	89b9      	ldrh	r1, [r7, #12]
 8002dc8:	89f8      	ldrh	r0, [r7, #14]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f000 fb4b 	bl	800346c <I2C1_ReadReg>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <BSP_I2C1_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e00c      	b.n	8002dfc <BSP_I2C1_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8002de2:	4809      	ldr	r0, [pc, #36]	; (8002e08 <BSP_I2C1_ReadReg+0x58>)
 8002de4:	f004 fccc 	bl	8007780 <HAL_I2C_GetError>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d103      	bne.n	8002df6 <BSP_I2C1_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002dee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e002      	b.n	8002dfc <BSP_I2C1_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002df6:	f06f 0303 	mvn.w	r3, #3
 8002dfa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20001884 	.word	0x20001884

08002e0c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002e10:	f001 ff5a 	bl	8004cc8 <HAL_GetTick>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d06b      	beq.n	8002f08 <I2C_GetTiming+0xec>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d068      	beq.n	8002f08 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e060      	b.n	8002efe <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002e3c:	4a35      	ldr	r2, [pc, #212]	; (8002f14 <I2C_GetTiming+0xf8>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d352      	bcc.n	8002ef8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002e52:	4a30      	ldr	r2, [pc, #192]	; (8002f14 <I2C_GetTiming+0xf8>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3308      	adds	r3, #8
 8002e60:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d847      	bhi.n	8002ef8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002e68:	6939      	ldr	r1, [r7, #16]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f856 	bl	8002f1c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002e70:	6939      	ldr	r1, [r7, #16]
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f940 	bl	80030f8 <I2C_Compute_SCLL_SCLH>
 8002e78:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e7e:	d842      	bhi.n	8002f06 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002e80:	4925      	ldr	r1, [pc, #148]	; (8002f18 <I2C_GetTiming+0xfc>)
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002e92:	4821      	ldr	r0, [pc, #132]	; (8002f18 <I2C_GetTiming+0xfc>)
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4403      	add	r3, r0
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	051b      	lsls	r3, r3, #20
 8002ea6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002eaa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002eac:	481a      	ldr	r0, [pc, #104]	; (8002f18 <I2C_GetTiming+0xfc>)
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4403      	add	r3, r0
 8002eba:	3308      	adds	r3, #8
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002ec4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002ec6:	4814      	ldr	r0, [pc, #80]	; (8002f18 <I2C_GetTiming+0xfc>)
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002edc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002ede:	480e      	ldr	r0, [pc, #56]	; (8002f18 <I2C_GetTiming+0xfc>)
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4403      	add	r3, r0
 8002eec:	3310      	adds	r3, #16
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	617b      	str	r3, [r7, #20]
        }
        break;
 8002ef6:	e006      	b.n	8002f06 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	3301      	adds	r3, #1
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d99b      	bls.n	8002e3c <I2C_GetTiming+0x20>
 8002f04:	e000      	b.n	8002f08 <I2C_GetTiming+0xec>
        break;
 8002f06:	bf00      	nop
      }
    }
  }

  return ret;
 8002f08:	697b      	ldr	r3, [r7, #20]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	08011830 	.word	0x08011830
 8002f18:	20000e80 	.word	0x20000e80

08002f1c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b08f      	sub	sp, #60	; 0x3c
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002f26:	2310      	movs	r3, #16
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	085a      	lsrs	r2, r3, #1
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002f30:	4413      	add	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f38:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002f3a:	2332      	movs	r3, #50	; 0x32
 8002f3c:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002f3e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002f42:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002f44:	4a69      	ldr	r2, [pc, #420]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3324      	adds	r3, #36	; 0x24
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	4a65      	ldr	r2, [pc, #404]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	330c      	adds	r3, #12
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002f68:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002f6a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002f6c:	495f      	ldr	r1, [pc, #380]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	202c      	movs	r0, #44	; 0x2c
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	440b      	add	r3, r1
 8002f78:	3328      	adds	r3, #40	; 0x28
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	69f9      	ldr	r1, [r7, #28]
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3310      	adds	r3, #16
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	4a54      	ldr	r2, [pc, #336]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3320      	adds	r3, #32
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002fac:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002fae:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002fb0:	494e      	ldr	r1, [pc, #312]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	440b      	add	r3, r1
 8002fbc:	3328      	adds	r3, #40	; 0x28
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	69f9      	ldr	r1, [r7, #28]
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002fcc:	4a47      	ldr	r2, [pc, #284]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3320      	adds	r3, #32
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	4a43      	ldr	r2, [pc, #268]	; (80030ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3314      	adds	r3, #20
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4403      	add	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dc01      	bgt.n	8002ffc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	dc01      	bgt.n	8003006 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003006:	2300      	movs	r3, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	e062      	b.n	80030d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	e059      	b.n	80030c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	3301      	adds	r3, #1
 8003016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003018:	3201      	adds	r2, #1
 800301a:	fb03 f202 	mul.w	r2, r3, r2
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d348      	bcc.n	80030c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	e042      	b.n	80030ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	3301      	adds	r3, #1
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	fb03 f202 	mul.w	r2, r3, r2
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d332      	bcc.n	80030b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d82e      	bhi.n	80030b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	429a      	cmp	r2, r3
 800305c:	d02a      	beq.n	80030b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4924      	ldr	r1, [pc, #144]	; (80030f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003070:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	491f      	ldr	r1, [pc, #124]	; (80030f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3304      	adds	r3, #4
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4919      	ldr	r1, [pc, #100]	; (80030f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3308      	adds	r3, #8
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80030aa:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b7f      	cmp	r3, #127	; 0x7f
 80030b2:	d812      	bhi.n	80030da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	3301      	adds	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d9b9      	bls.n	8003034 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	3301      	adds	r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d9a2      	bls.n	8003012 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	3301      	adds	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d999      	bls.n	800300c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80030d8:	e000      	b.n	80030dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80030da:	bf00      	nop
          }
        }
      }
    }
  }
}
 80030dc:	373c      	adds	r7, #60	; 0x3c
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	3b9aca00 	.word	0x3b9aca00
 80030ec:	08011830 	.word	0x08011830
 80030f0:	20001880 	.word	0x20001880
 80030f4:	20000e80 	.word	0x20000e80

080030f8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b093      	sub	sp, #76	; 0x4c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	085a      	lsrs	r2, r3, #1
 800310c:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800310e:	4413      	add	r3, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	fbb3 f3f2 	udiv	r3, r3, r2
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003118:	4a78      	ldr	r2, [pc, #480]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	085a      	lsrs	r2, r3, #1
 8003128:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800312a:	4413      	add	r3, r2
 800312c:	4973      	ldr	r1, [pc, #460]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	202c      	movs	r0, #44	; 0x2c
 8003132:	fb00 f202 	mul.w	r2, r0, r2
 8003136:	440a      	add	r2, r1
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	fbb3 f3f2 	udiv	r3, r3, r2
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8003140:	2332      	movs	r3, #50	; 0x32
 8003142:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003144:	4a6d      	ldr	r2, [pc, #436]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3328      	adds	r3, #40	; 0x28
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800315c:	4a67      	ldr	r2, [pc, #412]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003174:	4a61      	ldr	r2, [pc, #388]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3308      	adds	r3, #8
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <I2C_Compute_SCLL_SCLH+0x200>)
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003190:	2300      	movs	r3, #0
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
 8003194:	e0a3      	b.n	80032de <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003196:	495a      	ldr	r1, [pc, #360]	; (8003300 <I2C_Compute_SCLL_SCLH+0x208>)
 8003198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b4:	e08c      	b.n	80032d0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	441a      	add	r2, r3
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	3301      	adds	r3, #1
 80031c0:	6979      	ldr	r1, [r7, #20]
 80031c2:	fb03 f101 	mul.w	r1, r3, r1
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	4413      	add	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80031d0:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3318      	adds	r3, #24
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d971      	bls.n	80032ca <I2C_Compute_SCLL_SCLH+0x1d2>
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	1ad2      	subs	r2, r2, r3
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d268      	bcs.n	80032ca <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fc:	e062      	b.n	80032c4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	441a      	add	r2, r3
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	3301      	adds	r3, #1
 8003208:	6979      	ldr	r1, [r7, #20]
 800320a:	fb03 f101 	mul.w	r1, r3, r1
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	4413      	add	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	441a      	add	r2, r3
 800321e:	4937      	ldr	r1, [pc, #220]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	202c      	movs	r0, #44	; 0x2c
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	440b      	add	r3, r1
 800322a:	3320      	adds	r3, #32
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	441a      	add	r2, r3
 8003230:	4932      	ldr	r1, [pc, #200]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	202c      	movs	r0, #44	; 0x2c
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	440b      	add	r3, r1
 800323c:	3324      	adds	r3, #36	; 0x24
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4413      	add	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d338      	bcc.n	80032be <I2C_Compute_SCLL_SCLH+0x1c6>
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d834      	bhi.n	80032be <I2C_Compute_SCLL_SCLH+0x1c6>
 8003254:	4a29      	ldr	r2, [pc, #164]	; (80032fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	331c      	adds	r3, #28
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	d329      	bcc.n	80032be <I2C_Compute_SCLL_SCLH+0x1c6>
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d225      	bcs.n	80032be <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	2b00      	cmp	r3, #0
 800327e:	da02      	bge.n	8003286 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	425b      	negs	r3, r3
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800328a:	429a      	cmp	r2, r3
 800328c:	d917      	bls.n	80032be <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003292:	491b      	ldr	r1, [pc, #108]	; (8003300 <I2C_Compute_SCLL_SCLH+0x208>)
 8003294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3310      	adds	r3, #16
 80032a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80032a6:	4916      	ldr	r1, [pc, #88]	; (8003300 <I2C_Compute_SCLL_SCLH+0x208>)
 80032a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	330c      	adds	r3, #12
 80032b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b8:	601a      	str	r2, [r3, #0]
              ret = count;
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	3301      	adds	r3, #1
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	d999      	bls.n	80031fe <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	3301      	adds	r3, #1
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	f67f af6f 	bls.w	80031b6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032da:	3301      	adds	r3, #1
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <I2C_Compute_SCLL_SCLH+0x20c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f4ff af56 	bcc.w	8003196 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80032ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	374c      	adds	r7, #76	; 0x4c
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	3b9aca00 	.word	0x3b9aca00
 80032fc:	08011830 	.word	0x08011830
 8003300:	20000e80 	.word	0x20000e80
 8003304:	20001880 	.word	0x20001880

08003308 <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333e:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003350:	2312      	movs	r3, #18
 8003352:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003358:	2302      	movs	r3, #2
 800335a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 800335c:	2304      	movs	r3, #4
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	481c      	ldr	r0, [pc, #112]	; (80033d8 <I2C1_MspInit+0xd0>)
 8003368:	f003 fbf2 	bl	8006b50 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8003370:	2312      	movs	r3, #18
 8003372:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 800337c:	2304      	movs	r3, #4
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	4814      	ldr	r0, [pc, #80]	; (80033d8 <I2C1_MspInit+0xd0>)
 8003388:	f003 fbe2 	bl	8006b50 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <I2C1_MspInit+0xcc>)
 800338e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <I2C1_MspInit+0xcc>)
 8003394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <I2C1_MspInit+0xcc>)
 800339e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <I2C1_MspInit+0xcc>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <I2C1_MspInit+0xcc>)
 80033b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <I2C1_MspInit+0xcc>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <I2C1_MspInit+0xcc>)
 80033c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58020400 	.word	0x58020400

080033dc <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
 80033e4:	2340      	movs	r3, #64	; 0x40
 80033e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4619      	mov	r1, r3
 80033ec:	480a      	ldr	r0, [pc, #40]	; (8003418 <I2C1_MspDeInit+0x3c>)
 80033ee:	f003 fd5f 	bl	8006eb0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4807      	ldr	r0, [pc, #28]	; (8003418 <I2C1_MspDeInit+0x3c>)
 80033fc:	f003 fd58 	bl	8006eb0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <I2C1_MspDeInit+0x40>)
 8003402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <I2C1_MspDeInit+0x40>)
 8003408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800340c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58020400 	.word	0x58020400
 800341c:	58024400 	.word	0x58024400

08003420 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af04      	add	r7, sp, #16
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	4603      	mov	r3, r0
 800342a:	81fb      	strh	r3, [r7, #14]
 800342c:	460b      	mov	r3, r1
 800342e:	81bb      	strh	r3, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003434:	8978      	ldrh	r0, [r7, #10]
 8003436:	89ba      	ldrh	r2, [r7, #12]
 8003438:	89f9      	ldrh	r1, [r7, #14]
 800343a:	f242 7310 	movw	r3, #10000	; 0x2710
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	8b3b      	ldrh	r3, [r7, #24]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4603      	mov	r3, r0
 800344a:	4807      	ldr	r0, [pc, #28]	; (8003468 <I2C1_WriteReg+0x48>)
 800344c:	f003 ff5c 	bl	8007308 <HAL_I2C_Mem_Write>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003456:	2300      	movs	r3, #0
 8003458:	e001      	b.n	800345e <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800345a:	f06f 0307 	mvn.w	r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20001884 	.word	0x20001884

0800346c <I2C1_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af04      	add	r7, sp, #16
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4603      	mov	r3, r0
 8003476:	81fb      	strh	r3, [r7, #14]
 8003478:	460b      	mov	r3, r1
 800347a:	81bb      	strh	r3, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003480:	8978      	ldrh	r0, [r7, #10]
 8003482:	89ba      	ldrh	r2, [r7, #12]
 8003484:	89f9      	ldrh	r1, [r7, #14]
 8003486:	f242 7310 	movw	r3, #10000	; 0x2710
 800348a:	9302      	str	r3, [sp, #8]
 800348c:	8b3b      	ldrh	r3, [r7, #24]
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	4603      	mov	r3, r0
 8003496:	4807      	ldr	r0, [pc, #28]	; (80034b4 <I2C1_ReadReg+0x48>)
 8003498:	f004 f84a 	bl	8007530 <HAL_I2C_Mem_Read>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e001      	b.n	80034aa <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80034a6:	f06f 0307 	mvn.w	r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20001884 	.word	0x20001884

080034b8 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80034c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80034cc:	2200      	movs	r2, #0
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f805 	bl	80034e0 <BSP_LCD_InitEx>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0ae      	sub	sp, #184	; 0xb8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  EXC7200_Object_t ts_comp_obj_2;
  EXC7200_IO_t     io_comp_ctx_2 ;
#endif
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d802      	bhi.n	8003500 <BSP_LCD_InitEx+0x20>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <BSP_LCD_InitEx+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003500:	f06f 0301 	mvn.w	r3, #1
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003508:	e0f9      	b.n	80036fe <BSP_LCD_InitEx+0x21e>
  }
  else
  {
    switch(PixelFormat)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d106      	bne.n	800351e <BSP_LCD_InitEx+0x3e>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003510:	2302      	movs	r3, #2
 8003512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 2U;
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <BSP_LCD_InitEx+0x22c>)
 8003518:	2202      	movs	r2, #2
 800351a:	601a      	str	r2, [r3, #0]
      break;
 800351c:	e006      	b.n	800352c <BSP_LCD_InitEx+0x4c>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 4U;
 8003524:	4b79      	ldr	r3, [pc, #484]	; (800370c <BSP_LCD_InitEx+0x22c>)
 8003526:	2204      	movs	r2, #4
 8003528:	601a      	str	r2, [r3, #0]
      break;
 800352a:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800352c:	4978      	ldr	r1, [pc, #480]	; (8003710 <BSP_LCD_InitEx+0x230>)
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	330c      	adds	r3, #12
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8003540:	4973      	ldr	r1, [pc, #460]	; (8003710 <BSP_LCD_InitEx+0x230>)
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8003552:	496f      	ldr	r1, [pc, #444]	; (8003710 <BSP_LCD_InitEx+0x230>)
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	3304      	adds	r3, #4
 8003562:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003566:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8df 	bl	800372c <BSP_LCD_Reset>

    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 800356e:	f000 f917 	bl	80037a0 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8003572:	4b68      	ldr	r3, [pc, #416]	; (8003714 <BSP_LCD_InitEx+0x234>)
 8003574:	4a68      	ldr	r2, [pc, #416]	; (8003718 <BSP_LCD_InitEx+0x238>)
 8003576:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <BSP_LCD_InitEx+0x23c>)
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <BSP_LCD_InitEx+0x240>)
 800357c:	601a      	str	r2, [r3, #0]
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 800357e:	4865      	ldr	r0, [pc, #404]	; (8003714 <BSP_LCD_InitEx+0x234>)
 8003580:	f000 fe2c 	bl	80041dc <LTDC_MspInit>
#endif

    if(ret == BSP_ERROR_NONE)
 8003584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 80b8 	bne.w	80036fe <BSP_LCD_InitEx+0x21e>
    {
      DMA2D_MspInit(&hlcd_dma2d);
 800358e:	4863      	ldr	r0, [pc, #396]	; (800371c <BSP_LCD_InitEx+0x23c>)
 8003590:	f000 feae 	bl	80042f0 <DMA2D_MspInit>
#if (USE_EXC7200_TS_CTRL == 1)
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 8003594:	4b63      	ldr	r3, [pc, #396]	; (8003724 <BSP_LCD_InitEx+0x244>)
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 8003598:	4b63      	ldr	r3, [pc, #396]	; (8003728 <BSP_LCD_InitEx+0x248>)
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 800359c:	2308      	movs	r3, #8
 800359e:	863b      	strh	r3, [r7, #48]	; 0x30
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 80035a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fe4e 	bl	800224c <EXC7200_RegisterBusIO>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da04      	bge.n	80035c0 <BSP_LCD_InitEx+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035b6:	f06f 0304 	mvn.w	r3, #4
 80035ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035be:	e017      	b.n	80035f0 <BSP_LCD_InitEx+0x110>
      }
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 80035c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fee6 	bl	800239c <EXC7200_ReadID>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da04      	bge.n	80035e0 <BSP_LCD_InitEx+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035d6:	f06f 0304 	mvn.w	r3, #4
 80035da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035de:	e007      	b.n	80035f0 <BSP_LCD_InitEx+0x110>
      }
      else
      {
        if(exc7200_id != EXC7200_ID)
 80035e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e2:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 80035e6:	d003      	beq.n	80035f0 <BSP_LCD_InitEx+0x110>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80035e8:	f06f 0306 	mvn.w	r3, #6
 80035ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        }
      }
#endif
#if (USE_TS3510_TS_CTRL == 1)
      if(ret != BSP_ERROR_NONE)
 80035f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d030      	beq.n	800365a <BSP_LCD_InitEx+0x17a>
      {
        io_comp_ctx.Init    = BSP_I2C1_Init;
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <BSP_LCD_InitEx+0x244>)
 80035fa:	66fb      	str	r3, [r7, #108]	; 0x6c
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <BSP_LCD_InitEx+0x248>)
 80035fe:	67fb      	str	r3, [r7, #124]	; 0x7c
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8003606:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800360a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f8d7 	bl	80027c4 <TS3510_RegisterBusIO>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	da04      	bge.n	8003626 <BSP_LCD_InitEx+0x146>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800361c:	f06f 0304 	mvn.w	r3, #4
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003624:	e019      	b.n	800365a <BSP_LCD_InitEx+0x17a>
        }
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 8003626:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800362a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f96f 	bl	8002914 <TS3510_ReadID>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	da04      	bge.n	8003646 <BSP_LCD_InitEx+0x166>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800363c:	f06f 0304 	mvn.w	r3, #4
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003644:	e009      	b.n	800365a <BSP_LCD_InitEx+0x17a>
        }
        else
        {
          if(ts3510_id != TS3510_ID)
 8003646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364a:	f243 5210 	movw	r2, #13584	; 0x3510
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <BSP_LCD_InitEx+0x17a>
          {
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003652:	f06f 0306 	mvn.w	r3, #6
 8003656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 800365a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d14d      	bne.n	80036fe <BSP_LCD_InitEx+0x21e>
      {
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8003662:	482c      	ldr	r0, [pc, #176]	; (8003714 <BSP_LCD_InitEx+0x234>)
 8003664:	f000 f974 	bl	8003950 <MX_LTDC_ClockConfig>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <BSP_LCD_InitEx+0x198>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800366e:	f06f 0303 	mvn.w	r3, #3
 8003672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003676:	e042      	b.n	80036fe <BSP_LCD_InitEx+0x21e>
        }
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8003678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4825      	ldr	r0, [pc, #148]	; (8003714 <BSP_LCD_InitEx+0x234>)
 8003680:	f000 f8dc 	bl	800383c <MX_LTDC_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <BSP_LCD_InitEx+0x1b4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800368a:	f06f 0303 	mvn.w	r3, #3
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003692:	e034      	b.n	80036fe <BSP_LCD_InitEx+0x21e>
        {
          /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)

          /* Initialize the SDRAM */
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8003694:	2000      	movs	r0, #0
 8003696:	f000 fe59 	bl	800434c <BSP_SDRAM_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <BSP_LCD_InitEx+0x1c8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80036a0:	f06f 0303 	mvn.w	r3, #3
 80036a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
#endif /* DATA_IN_ExtSDRAM */
          if(ret == BSP_ERROR_NONE)
 80036a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d126      	bne.n	80036fe <BSP_LCD_InitEx+0x21e>
          {
            /* Configure default LTDC Layer 0. This configuration can be override by calling
            BSP_LCD_ConfigLayer() at application level */
            config.X0          = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
            config.X1          = Width;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	617b      	str	r3, [r7, #20]
            config.Y0          = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
            config.Y1          = Height;
 80036bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036c0:	61fb      	str	r3, [r7, #28]
            config.PixelFormat = ltdc_pixel_format;
 80036c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036c6:	623b      	str	r3, [r7, #32]
            config.Address     = LCD_FB_START_ADDRESS;
 80036c8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	461a      	mov	r2, r3
 80036d4:	2100      	movs	r1, #0
 80036d6:	480f      	ldr	r0, [pc, #60]	; (8003714 <BSP_LCD_InitEx+0x234>)
 80036d8:	f000 f8f8 	bl	80038cc <MX_LTDC_ConfigLayer>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <BSP_LCD_InitEx+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80036e2:	f06f 0303 	mvn.w	r3, #3
 80036e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            }
            /* By default the reload is activated and executed immediately */
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 80036ea:	4909      	ldr	r1, [pc, #36]	; (8003710 <BSP_LCD_InitEx+0x230>)
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	3314      	adds	r3, #20
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  return ret;
 80036fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 8003702:	4618      	mov	r0, r3
 8003704:	37b8      	adds	r7, #184	; 0xb8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200018d8 	.word	0x200018d8
 8003710:	200019ec 	.word	0x200019ec
 8003714:	20001944 	.word	0x20001944
 8003718:	50001000 	.word	0x50001000
 800371c:	200018dc 	.word	0x200018dc
 8003720:	52001000 	.word	0x52001000
 8003724:	08002c09 	.word	0x08002c09
 8003728:	08002db1 	.word	0x08002db1

0800372c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <BSP_LCD_Reset+0x6c>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <BSP_LCD_Reset+0x6c>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <BSP_LCD_Reset+0x6c>)
 8003746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8003752:	2304      	movs	r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003756:	2301      	movs	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = LCD_RESET_PULL;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	4619      	mov	r1, r3
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <BSP_LCD_Reset+0x70>)
 800376a:	f003 f9f1 	bl	8006b50 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800376e:	2200      	movs	r2, #0
 8003770:	2104      	movs	r1, #4
 8003772:	480a      	ldr	r0, [pc, #40]	; (800379c <BSP_LCD_Reset+0x70>)
 8003774:	f003 fca6 	bl	80070c4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8003778:	2014      	movs	r0, #20
 800377a:	f001 fab1 	bl	8004ce0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800377e:	2201      	movs	r2, #1
 8003780:	2104      	movs	r1, #4
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <BSP_LCD_Reset+0x70>)
 8003784:	f003 fc9e 	bl	80070c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8003788:	200a      	movs	r0, #10
 800378a:	f001 faa9 	bl	8004ce0 <HAL_Delay>
}
 800378e:	bf00      	nop
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	58020000 	.word	0x58020000

080037a0 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  /* LCD_DISP GPIO configuration */
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <LCD_InitSequence+0x90>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <LCD_InitSequence+0x90>)
 80037ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <LCD_InitSequence+0x90>)
 80037b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	4619      	mov	r1, r3
 80037d6:	4817      	ldr	r0, [pc, #92]	; (8003834 <LCD_InitSequence+0x94>)
 80037d8:	f003 f9ba 	bl	8006b50 <HAL_GPIO_Init>
  /* Assert LCD_DISP  pin */
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 80037dc:	2201      	movs	r2, #1
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	4814      	ldr	r0, [pc, #80]	; (8003834 <LCD_InitSequence+0x94>)
 80037e2:	f003 fc6f 	bl	80070c4 <HAL_GPIO_WritePin>

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <LCD_InitSequence+0x90>)
 80037e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ec:	4a10      	ldr	r2, [pc, #64]	; (8003830 <LCD_InitSequence+0x90>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <LCD_InitSequence+0x90>)
 80037f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8003804:	2340      	movs	r3, #64	; 0x40
 8003806:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003808:	2301      	movs	r3, #1
 800380a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800380c:	2302      	movs	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4619      	mov	r1, r3
 8003816:	4808      	ldr	r0, [pc, #32]	; (8003838 <LCD_InitSequence+0x98>)
 8003818:	f003 f99a 	bl	8006b50 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800381c:	2201      	movs	r2, #1
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <LCD_InitSequence+0x98>)
 8003822:	f003 fc4f 	bl	80070c4 <HAL_GPIO_WritePin>
}
 8003826:	bf00      	nop
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
 8003834:	58022800 	.word	0x58022800
 8003838:	58020000 	.word	0x58020000

0800383c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  hltdc->Instance                = LTDC;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <MX_LTDC_Init+0x8c>)
 800384c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity         = LTDC_VSPOLARITY_AL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	221d      	movs	r2, #29
 800386a:	615a      	str	r2, [r3, #20]
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2202      	movs	r2, #2
 8003870:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	228f      	movs	r2, #143	; 0x8f
 8003876:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f240 2202 	movw	r2, #514	; 0x202
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f240 320f 	movw	r2, #783	; 0x30f
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f240 321f 	movw	r2, #799	; 0x31f
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f004 fabe 	bl	8007e38 <HAL_LTDC_Init>
 80038bc:	4603      	mov	r3, r0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	50001000 	.word	0x50001000

080038cc <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b092      	sub	sp, #72	; 0x48
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80038f6:	23ff      	movs	r3, #255	; 0xff
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80038fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003904:	2307      	movs	r3, #7
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f004 fb53 	bl	8007fec <HAL_LTDC_ConfigLayer>
 8003946:	4603      	mov	r3, r0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3748      	adds	r7, #72	; 0x48
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b0b2      	sub	sp, #200	; 0xc8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8003958:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8003964:	2305      	movs	r3, #5
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8003968:	23a0      	movs	r3, #160	; 0xa0
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800396c:	2302      	movs	r3, #2
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003970:	2302      	movs	r3, #2
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 32;
 8003974:	2320      	movs	r3, #32
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	4618      	mov	r0, r3
 8003986:	f005 fe65 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 800398a:	4603      	mov	r3, r0
}
 800398c:	4618      	mov	r0, r3
 800398e:	37c8      	adds	r7, #200	; 0xc8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039a8:	f06f 0301 	mvn.w	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e00a      	b.n	80039c6 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80039b0:	4908      	ldr	r1, [pc, #32]	; (80039d4 <BSP_LCD_GetPixelFormat+0x40>)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	330c      	adds	r3, #12
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200019ec 	.word	0x200019ec

080039d8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039ec:	f06f 0301 	mvn.w	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e009      	b.n	8003a08 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80039f4:	4908      	ldr	r1, [pc, #32]	; (8003a18 <BSP_LCD_SetActiveLayer+0x40>)
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	3308      	adds	r3, #8
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003a08:	68fb      	ldr	r3, [r7, #12]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	200019ec 	.word	0x200019ec

08003a1c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a30:	f06f 0301 	mvn.w	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e009      	b.n	8003a4c <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8003a38:	4908      	ldr	r1, [pc, #32]	; (8003a5c <BSP_LCD_GetXSize+0x40>)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	200019ec 	.word	0x200019ec

08003a60 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a74:	f06f 0301 	mvn.w	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e00a      	b.n	8003a92 <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003a7c:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <BSP_LCD_GetYSize+0x40>)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	440b      	add	r3, r1
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	200019ec 	.word	0x200019ec

08003aa4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08e      	sub	sp, #56	; 0x38
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	330a      	adds	r3, #10
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	330b      	adds	r3, #11
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	441a      	add	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	441a      	add	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	330d      	adds	r3, #13
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	4413      	add	r3, r2
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3312      	adds	r3, #18
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	3313      	adds	r3, #19
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	441a      	add	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	441a      	add	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	3315      	adds	r3, #21
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	4413      	add	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3316      	adds	r3, #22
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3317      	adds	r3, #23
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	441a      	add	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	441a      	add	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3319      	adds	r3, #25
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4413      	add	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	331c      	adds	r3, #28
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	331d      	adds	r3, #29
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	4413      	add	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8003b42:	4938      	ldr	r1, [pc, #224]	; (8003c24 <BSP_LCD_DrawBitmap+0x180>)
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	3308      	adds	r3, #8
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <BSP_LCD_DrawBitmap+0x184>)
 8003b56:	2134      	movs	r1, #52	; 0x34
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	335c      	adds	r3, #92	; 0x5c
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	4830      	ldr	r0, [pc, #192]	; (8003c24 <BSP_LCD_DrawBitmap+0x180>)
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4613      	mov	r3, r2
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4403      	add	r3, r0
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	fb03 f202 	mul.w	r2, r3, r2
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <BSP_LCD_DrawBitmap+0x188>)
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	440b      	add	r3, r1
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	3b20      	subs	r3, #32
 8003b8c:	2b07      	cmp	r3, #7
 8003b8e:	d802      	bhi.n	8003b96 <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e008      	b.n	8003ba8 <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3b10      	subs	r3, #16
 8003b9a:	2b07      	cmp	r3, #7
 8003b9c:	d802      	bhi.n	8003ba4 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	e001      	b.n	8003ba8 <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	08d2      	lsrs	r2, r2, #3
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	4413      	add	r3, r2
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	e022      	b.n	8003c10 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6a39      	ldr	r1, [r7, #32]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 faa9 	bl	800412c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8003bda:	4912      	ldr	r1, [pc, #72]	; (8003c24 <BSP_LCD_DrawBitmap+0x180>)
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <BSP_LCD_DrawBitmap+0x188>)
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf4:	4413      	add	r3, r2
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	08db      	lsrs	r3, r3, #3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	425b      	negs	r3, r3
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3d8      	bcc.n	8003bca <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 8003c18:	69fb      	ldr	r3, [r7, #28]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3730      	adds	r7, #48	; 0x30
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200019ec 	.word	0x200019ec
 8003c28:	20001944 	.word	0x20001944
 8003c2c:	200018d8 	.word	0x200018d8

08003c30 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e02e      	b.n	8003ca2 <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e024      	b.n	8003c94 <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	3303      	adds	r3, #3
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	18d1      	adds	r1, r2, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f976 	bl	8003f70 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <BSP_LCD_FillRGBRect+0x84>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3d6      	bcc.n	8003c4a <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3cc      	bcc.n	8003c44 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200018d8 	.word	0x200018d8

08003cb8 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af04      	add	r7, sp, #16
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8003cc6:	491e      	ldr	r1, [pc, #120]	; (8003d40 <BSP_LCD_DrawHLine+0x88>)
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <BSP_LCD_DrawHLine+0x8c>)
 8003cda:	2134      	movs	r1, #52	; 0x34
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	6819      	ldr	r1, [r3, #0]
 8003ce6:	4816      	ldr	r0, [pc, #88]	; (8003d40 <BSP_LCD_DrawHLine+0x88>)
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4403      	add	r3, r0
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	fb03 f202 	mul.w	r2, r3, r2
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <BSP_LCD_DrawHLine+0x90>)
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	440b      	add	r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <BSP_LCD_DrawHLine+0x88>)
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	9302      	str	r3, [sp, #8]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f988 	bl	8004044 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200019ec 	.word	0x200019ec
 8003d44:	20001944 	.word	0x20001944
 8003d48:	200018d8 	.word	0x200018d8

08003d4c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b08b      	sub	sp, #44	; 0x2c
 8003d50:	af04      	add	r7, sp, #16
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8003d5a:	4922      	ldr	r1, [pc, #136]	; (8003de4 <BSP_LCD_DrawVLine+0x98>)
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	3308      	adds	r3, #8
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <BSP_LCD_DrawVLine+0x9c>)
 8003d6e:	2134      	movs	r1, #52	; 0x34
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	335c      	adds	r3, #92	; 0x5c
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	481a      	ldr	r0, [pc, #104]	; (8003de4 <BSP_LCD_DrawVLine+0x98>)
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4403      	add	r3, r0
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	fb03 f202 	mul.w	r2, r3, r2
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4413      	add	r3, r2
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <BSP_LCD_DrawVLine+0xa0>)
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8003da0:	4910      	ldr	r1, [pc, #64]	; (8003de4 <BSP_LCD_DrawVLine+0x98>)
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	440b      	add	r3, r1
 8003dae:	3308      	adds	r3, #8
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	4c0b      	ldr	r4, [pc, #44]	; (8003de4 <BSP_LCD_DrawVLine+0x98>)
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4423      	add	r3, r4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	9202      	str	r2, [sp, #8]
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f935 	bl	8004044 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}
 8003de4:	200019ec 	.word	0x200019ec
 8003de8:	20001944 	.word	0x20001944
 8003dec:	200018d8 	.word	0x200018d8

08003df0 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b08b      	sub	sp, #44	; 0x2c
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8003dfe:	4923      	ldr	r1, [pc, #140]	; (8003e8c <BSP_LCD_FillRect+0x9c>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <BSP_LCD_FillRect+0xa0>)
 8003e12:	2134      	movs	r1, #52	; 0x34
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	481b      	ldr	r0, [pc, #108]	; (8003e8c <BSP_LCD_FillRect+0x9c>)
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4403      	add	r3, r0
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	fb03 f202 	mul.w	r2, r3, r2
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4413      	add	r3, r2
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <BSP_LCD_FillRect+0xa4>)
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	440b      	add	r3, r1
 8003e42:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <BSP_LCD_FillRect+0x9c>)
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	440b      	add	r3, r1
 8003e52:	3308      	adds	r3, #8
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <BSP_LCD_FillRect+0x9c>)
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4423      	add	r3, r4
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	9202      	str	r2, [sp, #8]
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f8e2 	bl	8004044 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200019ec 	.word	0x200019ec
 8003e90:	20001944 	.word	0x20001944
 8003e94:	200018d8 	.word	0x200018d8

08003e98 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ea6:	4930      	ldr	r1, [pc, #192]	; (8003f68 <BSP_LCD_ReadPixel+0xd0>)
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <BSP_LCD_ReadPixel+0xd4>)
 8003eba:	2134      	movs	r1, #52	; 0x34
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3348      	adds	r3, #72	; 0x48
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d122      	bne.n	8003f10 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8003eca:	4927      	ldr	r1, [pc, #156]	; (8003f68 <BSP_LCD_ReadPixel+0xd0>)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3308      	adds	r3, #8
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <BSP_LCD_ReadPixel+0xd4>)
 8003ede:	2134      	movs	r1, #52	; 0x34
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	335c      	adds	r3, #92	; 0x5c
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	481f      	ldr	r0, [pc, #124]	; (8003f68 <BSP_LCD_ReadPixel+0xd0>)
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4403      	add	r3, r0
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	fb03 f202 	mul.w	r2, r3, r2
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e023      	b.n	8003f58 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8003f10:	4915      	ldr	r1, [pc, #84]	; (8003f68 <BSP_LCD_ReadPixel+0xd0>)
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3308      	adds	r3, #8
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <BSP_LCD_ReadPixel+0xd4>)
 8003f24:	2134      	movs	r1, #52	; 0x34
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	335c      	adds	r3, #92	; 0x5c
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <BSP_LCD_ReadPixel+0xd0>)
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4403      	add	r3, r0
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4413      	add	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	440b      	add	r3, r1
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200019ec 	.word	0x200019ec
 8003f6c:	20001944 	.word	0x20001944

08003f70 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f7e:	492f      	ldr	r1, [pc, #188]	; (800403c <BSP_LCD_WritePixel+0xcc>)
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <BSP_LCD_WritePixel+0xd0>)
 8003f92:	2134      	movs	r1, #52	; 0x34
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3348      	adds	r3, #72	; 0x48
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d122      	bne.n	8003fe8 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8003fa2:	4926      	ldr	r1, [pc, #152]	; (800403c <BSP_LCD_WritePixel+0xcc>)
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <BSP_LCD_WritePixel+0xd0>)
 8003fb6:	2134      	movs	r1, #52	; 0x34
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	335c      	adds	r3, #92	; 0x5c
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	481e      	ldr	r0, [pc, #120]	; (800403c <BSP_LCD_WritePixel+0xcc>)
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4403      	add	r3, r0
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	fb03 f202 	mul.w	r2, r3, r2
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e021      	b.n	800402c <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8003fe8:	4914      	ldr	r1, [pc, #80]	; (800403c <BSP_LCD_WritePixel+0xcc>)
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a11      	ldr	r2, [pc, #68]	; (8004040 <BSP_LCD_WritePixel+0xd0>)
 8003ffc:	2134      	movs	r1, #52	; 0x34
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	335c      	adds	r3, #92	; 0x5c
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	480c      	ldr	r0, [pc, #48]	; (800403c <BSP_LCD_WritePixel+0xcc>)
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4403      	add	r3, r0
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	fb03 f202 	mul.w	r2, r3, r2
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4413      	add	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	440b      	add	r3, r1
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	b292      	uxth	r2, r2
 800402a:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200019ec 	.word	0x200019ec
 8004040:	20001944 	.word	0x20001944

08004044 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004056:	4932      	ldr	r1, [pc, #200]	; (8004120 <LL_FillBuffer+0xdc>)
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	330c      	adds	r3, #12
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d129      	bne.n	80040c0 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800406c:	2302      	movs	r3, #2
 800406e:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	0adb      	lsrs	r3, r3, #11
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	3317      	adds	r3, #23
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	0419      	lsls	r1, r3, #16
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004090:	4613      	mov	r3, r2
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	3321      	adds	r3, #33	; 0x21
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	4319      	orrs	r1, r3
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	4413      	add	r3, r2
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	3317      	adds	r3, #23
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	613b      	str	r3, [r7, #16]
    break;
 80040be:	e002      	b.n	80040c6 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
    break;
 80040c4:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <LL_FillBuffer+0xe0>)
 80040c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040cc:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <LL_FillBuffer+0xe0>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <LL_FillBuffer+0xe0>)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <LL_FillBuffer+0xe0>)
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <LL_FillBuffer+0xe4>)
 80040de:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80040e0:	4810      	ldr	r0, [pc, #64]	; (8004124 <LL_FillBuffer+0xe0>)
 80040e2:	f001 fcbb 	bl	8005a5c <HAL_DMA2D_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d115      	bne.n	8004118 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80040ec:	2101      	movs	r1, #1
 80040ee:	480d      	ldr	r0, [pc, #52]	; (8004124 <LL_FillBuffer+0xe0>)
 80040f0:	f001 fe36 	bl	8005d60 <HAL_DMA2D_ConfigLayer>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10e      	bne.n	8004118 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <LL_FillBuffer+0xe0>)
 8004106:	f001 fd17 	bl	8005b38 <HAL_DMA2D_Start>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004110:	2119      	movs	r1, #25
 8004112:	4804      	ldr	r0, [pc, #16]	; (8004124 <LL_FillBuffer+0xe0>)
 8004114:	f001 fd3b 	bl	8005b8e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004118:	bf00      	nop
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200019ec 	.word	0x200019ec
 8004124:	200018dc 	.word	0x200018dc
 8004128:	52001000 	.word	0x52001000

0800412c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800413a:	4925      	ldr	r1, [pc, #148]	; (80041d0 <LL_ConvertLineToRGB+0xa4>)
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	330c      	adds	r3, #12
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d102      	bne.n	8004156 <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004150:	2302      	movs	r3, #2
 8004152:	617b      	str	r3, [r7, #20]
    break;
 8004154:	e002      	b.n	800415c <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
    break;
 800415a:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 800415e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004162:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 800416c:	2200      	movs	r2, #0
 800416e:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 8004172:	2200      	movs	r2, #0
 8004174:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 8004184:	2200      	movs	r2, #0
 8004186:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 800418a:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <LL_ConvertLineToRGB+0xac>)
 800418c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800418e:	4811      	ldr	r0, [pc, #68]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 8004190:	f001 fc64 	bl	8005a5c <HAL_DMA2D_Init>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d115      	bne.n	80041c6 <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800419a:	2101      	movs	r1, #1
 800419c:	480d      	ldr	r0, [pc, #52]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 800419e:	f001 fddf 	bl	8005d60 <HAL_DMA2D_ConfigLayer>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10e      	bne.n	80041c6 <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	2301      	movs	r3, #1
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4808      	ldr	r0, [pc, #32]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 80041b4:	f001 fcc0 	bl	8005b38 <HAL_DMA2D_Start>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80041be:	2119      	movs	r1, #25
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <LL_ConvertLineToRGB+0xa8>)
 80041c2:	f001 fce4 	bl	8005b8e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200019ec 	.word	0x200019ec
 80041d4:	200018dc 	.word	0x200018dc
 80041d8:	52001000 	.word	0x52001000

080041dc <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <LTDC_MspInit+0x100>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d171      	bne.n	80042d2 <LTDC_MspInit+0xf6>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80041ee:	4b3c      	ldr	r3, [pc, #240]	; (80042e0 <LTDC_MspInit+0x104>)
 80041f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041f4:	4a3a      	ldr	r2, [pc, #232]	; (80042e0 <LTDC_MspInit+0x104>)
 80041f6:	f043 0308 	orr.w	r3, r3, #8
 80041fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80041fe:	4b38      	ldr	r3, [pc, #224]	; (80042e0 <LTDC_MspInit+0x104>)
 8004200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	69bb      	ldr	r3, [r7, #24]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <LTDC_MspInit+0x104>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004212:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <LTDC_MspInit+0x104>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800421c:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <LTDC_MspInit+0x104>)
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <LTDC_MspInit+0x104>)
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004230:	4a2b      	ldr	r2, [pc, #172]	; (80042e0 <LTDC_MspInit+0x104>)
 8004232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <LTDC_MspInit+0x104>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <LTDC_MspInit+0x104>)
 800424a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800424e:	4a24      	ldr	r2, [pc, #144]	; (80042e0 <LTDC_MspInit+0x104>)
 8004250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <LTDC_MspInit+0x104>)
 800425a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800425e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004266:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800426a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004274:	2302      	movs	r3, #2
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004278:	230e      	movs	r3, #14
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800427c:	f107 031c 	add.w	r3, r7, #28
 8004280:	4619      	mov	r1, r3
 8004282:	4818      	ldr	r0, [pc, #96]	; (80042e4 <LTDC_MspInit+0x108>)
 8004284:	f002 fc64 	bl	8006b50 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800428c:	61fb      	str	r3, [r7, #28]
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800428e:	230e      	movs	r3, #14
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8004292:	f107 031c 	add.w	r3, r7, #28
 8004296:	4619      	mov	r1, r3
 8004298:	4813      	ldr	r0, [pc, #76]	; (80042e8 <LTDC_MspInit+0x10c>)
 800429a:	f002 fc59 	bl	8006b50 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800429e:	23ff      	movs	r3, #255	; 0xff
 80042a0:	61fb      	str	r3, [r7, #28]
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042a2:	230e      	movs	r3, #14
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80042a6:	f107 031c 	add.w	r3, r7, #28
 80042aa:	4619      	mov	r1, r3
 80042ac:	480f      	ldr	r0, [pc, #60]	; (80042ec <LTDC_MspInit+0x110>)
 80042ae:	f002 fc4f 	bl	8006b50 <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <LTDC_MspInit+0x104>)
 80042b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <LTDC_MspInit+0x104>)
 80042ba:	f043 0308 	orr.w	r3, r3, #8
 80042be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <LTDC_MspInit+0x104>)
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <LTDC_MspInit+0x104>)
 80042ca:	f023 0308 	bic.w	r3, r3, #8
 80042ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80042d2:	bf00      	nop
 80042d4:	3730      	adds	r7, #48	; 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	50001000 	.word	0x50001000
 80042e0:	58024400 	.word	0x58024400
 80042e4:	58022000 	.word	0x58022000
 80042e8:	58022400 	.word	0x58022400
 80042ec:	58022800 	.word	0x58022800

080042f0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <DMA2D_MspInit+0x54>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11a      	bne.n	8004338 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <DMA2D_MspInit+0x58>)
 8004304:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004308:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <DMA2D_MspInit+0x58>)
 800430a:	f043 0310 	orr.w	r3, r3, #16
 800430e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <DMA2D_MspInit+0x58>)
 8004314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <DMA2D_MspInit+0x58>)
 8004322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <DMA2D_MspInit+0x58>)
 8004326:	f043 0310 	orr.w	r3, r3, #16
 800432a:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <DMA2D_MspInit+0x58>)
 800432e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004330:	4a05      	ldr	r2, [pc, #20]	; (8004348 <DMA2D_MspInit+0x58>)
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	52001000 	.word	0x52001000
 8004348:	58024400 	.word	0x58024400

0800434c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800G_Context_t pRegMode;

  if(Instance >= SDRAM_INSTANCES_NBR)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800435a:	f06f 0301 	mvn.w	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e047      	b.n	80043f2 <BSP_SDRAM_Init+0xa6>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2234      	movs	r2, #52	; 0x34
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a23      	ldr	r2, [pc, #140]	; (80043fc <BSP_SDRAM_Init+0xb0>)
 8004370:	4413      	add	r3, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f88e 	bl	8004494 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(ret == BSP_ERROR_NONE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d139      	bne.n	80043f2 <BSP_SDRAM_Init+0xa6>
    {
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2234      	movs	r2, #52	; 0x34
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <BSP_SDRAM_Init+0xb0>)
 8004388:	4413      	add	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f83a 	bl	8004404 <MX_SDRAM_BANK2_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <BSP_SDRAM_Init+0x52>
      {
        ret = BSP_ERROR_NO_INIT;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e029      	b.n	80043f2 <BSP_SDRAM_Init+0xa6>
      }
      else
      {
        /* External memory mode register configuration */
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043a0:	2208      	movs	r2, #8
 80043a2:	601a      	str	r2, [r3, #0]
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043a6:	2203      	movs	r2, #3
 80043a8:	605a      	str	r2, [r3, #4]
        pRegMode.RefreshRate     = REFRESH_COUNT;
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043ac:	f240 6203 	movw	r2, #1539	; 0x603
 80043b0:	609a      	str	r2, [r3, #8]
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	60da      	str	r2, [r3, #12]
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043c0:	2230      	movs	r2, #48	; 0x30
 80043c2:	615a      	str	r2, [r3, #20]
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	619a      	str	r2, [r3, #24]
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d0:	61da      	str	r2, [r3, #28]

        /* SDRAM initialization sequence */
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2234      	movs	r2, #52	; 0x34
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <BSP_SDRAM_Init+0xb0>)
 80043dc:	4413      	add	r3, r2
 80043de:	4908      	ldr	r1, [pc, #32]	; (8004400 <BSP_SDRAM_Init+0xb4>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe f8e4 	bl	80025ae <IS42S32800G_Init>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <BSP_SDRAM_Init+0xa6>
        {
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 80043ec:	f06f 0304 	mvn.w	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80043f2:	68fb      	ldr	r3, [r7, #12]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20001a04 	.word	0x20001a04
 8004400:	20001a38 	.word	0x20001a38

08004404 <MX_SDRAM_BANK2_Init>:
  * @brief  Initializes the SDRAM periperal.
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <MX_SDRAM_BANK2_Init+0x8c>)
 8004410:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2204      	movs	r2, #4
 8004422:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2240      	movs	r2, #64	; 0x40
 800442e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004436:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004444:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8004454:	2302      	movs	r3, #2
 8004456:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8004458:	2307      	movs	r3, #7
 800445a:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 800445c:	2304      	movs	r3, #4
 800445e:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8004460:	2307      	movs	r3, #7
 8004462:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8004464:	2302      	movs	r3, #2
 8004466:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8004468:	2302      	movs	r3, #2
 800446a:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 800446c:	2302      	movs	r3, #2
 800446e:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f006 ff18 	bl	800b2ac <HAL_SDRAM_Init>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_SDRAM_BANK2_Init+0x82>
  {
    return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <MX_SDRAM_BANK2_Init+0x84>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	52004140 	.word	0x52004140

08004494 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b090      	sub	sp, #64	; 0x40
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800449c:	4b7f      	ldr	r3, [pc, #508]	; (800469c <SDRAM_MspInit+0x208>)
 800449e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044a2:	4a7e      	ldr	r2, [pc, #504]	; (800469c <SDRAM_MspInit+0x208>)
 80044a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044a8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80044ac:	4b7b      	ldr	r3, [pc, #492]	; (800469c <SDRAM_MspInit+0x208>)
 80044ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80044ba:	4b78      	ldr	r3, [pc, #480]	; (800469c <SDRAM_MspInit+0x208>)
 80044bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044c0:	4a76      	ldr	r2, [pc, #472]	; (800469c <SDRAM_MspInit+0x208>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80044ca:	4b74      	ldr	r3, [pc, #464]	; (800469c <SDRAM_MspInit+0x208>)
 80044cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d8:	4b70      	ldr	r3, [pc, #448]	; (800469c <SDRAM_MspInit+0x208>)
 80044da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044de:	4a6f      	ldr	r2, [pc, #444]	; (800469c <SDRAM_MspInit+0x208>)
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044e8:	4b6c      	ldr	r3, [pc, #432]	; (800469c <SDRAM_MspInit+0x208>)
 80044ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044f6:	4b69      	ldr	r3, [pc, #420]	; (800469c <SDRAM_MspInit+0x208>)
 80044f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fc:	4a67      	ldr	r2, [pc, #412]	; (800469c <SDRAM_MspInit+0x208>)
 80044fe:	f043 0310 	orr.w	r3, r3, #16
 8004502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004506:	4b65      	ldr	r3, [pc, #404]	; (800469c <SDRAM_MspInit+0x208>)
 8004508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004514:	4b61      	ldr	r3, [pc, #388]	; (800469c <SDRAM_MspInit+0x208>)
 8004516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800451a:	4a60      	ldr	r2, [pc, #384]	; (800469c <SDRAM_MspInit+0x208>)
 800451c:	f043 0320 	orr.w	r3, r3, #32
 8004520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004524:	4b5d      	ldr	r3, [pc, #372]	; (800469c <SDRAM_MspInit+0x208>)
 8004526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004532:	4b5a      	ldr	r3, [pc, #360]	; (800469c <SDRAM_MspInit+0x208>)
 8004534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004538:	4a58      	ldr	r2, [pc, #352]	; (800469c <SDRAM_MspInit+0x208>)
 800453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004542:	4b56      	ldr	r3, [pc, #344]	; (800469c <SDRAM_MspInit+0x208>)
 8004544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <SDRAM_MspInit+0x208>)
 8004552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004556:	4a51      	ldr	r2, [pc, #324]	; (800469c <SDRAM_MspInit+0x208>)
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004560:	4b4e      	ldr	r3, [pc, #312]	; (800469c <SDRAM_MspInit+0x208>)
 8004562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800456e:	4b4b      	ldr	r3, [pc, #300]	; (800469c <SDRAM_MspInit+0x208>)
 8004570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004574:	4a49      	ldr	r2, [pc, #292]	; (800469c <SDRAM_MspInit+0x208>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <SDRAM_MspInit+0x208>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800458c:	2302      	movs	r3, #2
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004590:	2301      	movs	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004594:	2303      	movs	r3, #3
 8004596:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004598:	230c      	movs	r3, #12
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800459c:	f24c 7303 	movw	r3, #50947	; 0xc703
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80045a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a6:	4619      	mov	r1, r3
 80045a8:	483d      	ldr	r0, [pc, #244]	; (80046a0 <SDRAM_MspInit+0x20c>)
 80045aa:	f002 fad1 	bl	8006b50 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80045ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80045b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b8:	4619      	mov	r1, r3
 80045ba:	483a      	ldr	r0, [pc, #232]	; (80046a4 <SDRAM_MspInit+0x210>)
 80045bc:	f002 fac8 	bl	8006b50 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80045c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80045c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ca:	4619      	mov	r1, r3
 80045cc:	4836      	ldr	r0, [pc, #216]	; (80046a8 <SDRAM_MspInit+0x214>)
 80045ce:	f002 fabf 	bl	8006b50 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80045d2:	f248 133f 	movw	r3, #33087	; 0x813f
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80045d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045dc:	4619      	mov	r1, r3
 80045de:	4833      	ldr	r0, [pc, #204]	; (80046ac <SDRAM_MspInit+0x218>)
 80045e0:	f002 fab6 	bl	8006b50 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80045e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80045ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ee:	4619      	mov	r1, r3
 80045f0:	482f      	ldr	r0, [pc, #188]	; (80046b0 <SDRAM_MspInit+0x21c>)
 80045f2:	f002 faad 	bl	8006b50 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80045f6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80045fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004600:	4619      	mov	r1, r3
 8004602:	482c      	ldr	r0, [pc, #176]	; (80046b4 <SDRAM_MspInit+0x220>)
 8004604:	f002 faa4 	bl	8006b50 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <SDRAM_MspInit+0x224>)
 800460a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800460e:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8004610:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <SDRAM_MspInit+0x224>)
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004626:	f240 2202 	movw	r2, #514	; 0x202
 800462a:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <SDRAM_MspInit+0x224>)
 800462e:	f640 0208 	movw	r2, #2056	; 0x808
 8004632:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8004634:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004636:	2220      	movs	r2, #32
 8004638:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800463a:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <SDRAM_MspInit+0x224>)
 800463c:	2280      	movs	r2, #128	; 0x80
 800463e:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <SDRAM_MspInit+0x224>)
 800464a:	2200      	movs	r2, #0
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8004654:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <SDRAM_MspInit+0x224>)
 800465c:	2200      	movs	r2, #0
 800465e:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004662:	2200      	movs	r2, #0
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <SDRAM_MspInit+0x228>)
 800466a:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6413      	str	r3, [r2, #64]	; 0x40

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8004678:	480f      	ldr	r0, [pc, #60]	; (80046b8 <SDRAM_MspInit+0x224>)
 800467a:	f003 fedb 	bl	8008434 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 800467e:	480e      	ldr	r0, [pc, #56]	; (80046b8 <SDRAM_MspInit+0x224>)
 8004680:	f003 fe8c 	bl	800839c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8004684:	2200      	movs	r2, #0
 8004686:	210f      	movs	r1, #15
 8004688:	207a      	movs	r0, #122	; 0x7a
 800468a:	f000 fc4a 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800468e:	207a      	movs	r0, #122	; 0x7a
 8004690:	f000 fc61 	bl	8004f56 <HAL_NVIC_EnableIRQ>
}
 8004694:	bf00      	nop
 8004696:	3740      	adds	r7, #64	; 0x40
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58024400 	.word	0x58024400
 80046a0:	58020c00 	.word	0x58020c00
 80046a4:	58021000 	.word	0x58021000
 80046a8:	58021400 	.word	0x58021400
 80046ac:	58021800 	.word	0x58021800
 80046b0:	58021c00 	.word	0x58021c00
 80046b4:	58022000 	.word	0x58022000
 80046b8:	20001a58 	.word	0x20001a58
 80046bc:	52000040 	.word	0x52000040

080046c0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11c      	bne.n	800470e <BSP_TS_Init+0x4e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d018      	beq.n	800470e <BSP_TS_Init+0x4e>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80046e4:	d813      	bhi.n	800470e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80046f6:	d80a      	bhi.n	800470e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	428b      	cmp	r3, r1
 8004706:	bf28      	it	cs
 8004708:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800470a:	429a      	cmp	r2, r3
 800470c:	d903      	bls.n	8004716 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800470e:	f06f 0301 	mvn.w	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e068      	b.n	80047e8 <BSP_TS_Init+0x128>
  }
  else
  {
#if (USE_EXC7200_TS_CTRL == 1U)
    ret = EXC7200_Probe(Instance);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f986 	bl	8004a28 <EXC7200_Probe>
 800471c:	6178      	str	r0, [r7, #20]
#endif
#if (USE_TS3510_TS_CTRL == 1U)
    if(ret != BSP_ERROR_NONE)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <BSP_TS_Init+0x6c>
    {
      ret = TS3510_Probe(Instance);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9e3 	bl	8004af0 <TS3510_Probe>
 800472a:	6178      	str	r0, [r7, #20]
    }
#endif
    if(ret != BSP_ERROR_NONE)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <BSP_TS_Init+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004732:	f06f 0306 	mvn.w	r3, #6
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e056      	b.n	80047e8 <BSP_TS_Init+0x128>
    }
    else
    {
      TS_Capabilities_t Capabilities;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	492d      	ldr	r1, [pc, #180]	; (80047f4 <BSP_TS_Init+0x134>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	440b      	add	r3, r1
 8004746:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4929      	ldr	r1, [pc, #164]	; (80047f4 <BSP_TS_Init+0x134>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	015b      	lsls	r3, r3, #5
 8004752:	440b      	add	r3, r1
 8004754:	3304      	adds	r3, #4
 8004756:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4925      	ldr	r1, [pc, #148]	; (80047f4 <BSP_TS_Init+0x134>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	015b      	lsls	r3, r3, #5
 8004762:	440b      	add	r3, r1
 8004764:	3308      	adds	r3, #8
 8004766:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4921      	ldr	r1, [pc, #132]	; (80047f4 <BSP_TS_Init+0x134>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	015b      	lsls	r3, r3, #5
 8004772:	440b      	add	r3, r1
 8004774:	330c      	adds	r3, #12
 8004776:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <BSP_TS_Init+0x138>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	491f      	ldr	r1, [pc, #124]	; (80047fc <BSP_TS_Init+0x13c>)
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004786:	f107 0108 	add.w	r1, r7, #8
 800478a:	4610      	mov	r0, r2
 800478c:	4798      	blx	r3
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	da03      	bge.n	800479c <BSP_TS_Init+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004794:	f06f 0304 	mvn.w	r3, #4
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e025      	b.n	80047e8 <BSP_TS_Init+0x128>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4915      	ldr	r1, [pc, #84]	; (80047f4 <BSP_TS_Init+0x134>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	015b      	lsls	r3, r3, #5
 80047a4:	440b      	add	r3, r1
 80047a6:	3310      	adds	r3, #16
 80047a8:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4911      	ldr	r1, [pc, #68]	; (80047f4 <BSP_TS_Init+0x134>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	015b      	lsls	r3, r3, #5
 80047b2:	440b      	add	r3, r1
 80047b4:	3314      	adds	r3, #20
 80047b6:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <BSP_TS_Init+0x134>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	015b      	lsls	r3, r3, #5
 80047ca:	440b      	add	r3, r1
 80047cc:	3318      	adds	r3, #24
 80047ce:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	4905      	ldr	r1, [pc, #20]	; (80047f4 <BSP_TS_Init+0x134>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	015b      	lsls	r3, r3, #5
 80047e2:	440b      	add	r3, r1
 80047e4:	331c      	adds	r3, #28
 80047e6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return ret;
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20001acc 	.word	0x20001acc
 80047f8:	20001ac4 	.word	0x20001ac4
 80047fc:	20001ac8 	.word	0x20001ac8

08004800 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004814:	f06f 0301 	mvn.w	r3, #1
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e0f9      	b.n	8004a10 <BSP_TS_GetState+0x210>
  else
  {
    EXC7200_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800481c:	4b7f      	ldr	r3, [pc, #508]	; (8004a1c <BSP_TS_GetState+0x21c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	497f      	ldr	r1, [pc, #508]	; (8004a20 <BSP_TS_GetState+0x220>)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800482a:	f107 0108 	add.w	r1, r7, #8
 800482e:	4610      	mov	r0, r2
 8004830:	4798      	blx	r3
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	da03      	bge.n	8004840 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004838:	f06f 0304 	mvn.w	r3, #4
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	e0e7      	b.n	8004a10 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80d1 	beq.w	80049ea <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004850:	4a74      	ldr	r2, [pc, #464]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	015b      	lsls	r3, r3, #5
 8004856:	4413      	add	r3, r2
 8004858:	3308      	adds	r3, #8
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800486c:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <BSP_TS_GetState+0x224>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	015b      	lsls	r3, r3, #5
 8004872:	4413      	add	r3, r2
 8004874:	3308      	adds	r3, #8
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004880:	4a68      	ldr	r2, [pc, #416]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	015b      	lsls	r3, r3, #5
 8004886:	4413      	add	r3, r2
 8004888:	3310      	adds	r3, #16
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004894:	4a63      	ldr	r2, [pc, #396]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	015b      	lsls	r3, r3, #5
 800489a:	4413      	add	r3, r2
 800489c:	3308      	adds	r3, #8
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80048a8:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <BSP_TS_GetState+0x224>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	015b      	lsls	r3, r3, #5
 80048ae:	4413      	add	r3, r2
 80048b0:	3314      	adds	r3, #20
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80048ba:	4a5a      	ldr	r2, [pc, #360]	; (8004a24 <BSP_TS_GetState+0x224>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	015b      	lsls	r3, r3, #5
 80048c0:	4413      	add	r3, r2
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	fb03 f202 	mul.w	r2, r3, r2
 80048ca:	4956      	ldr	r1, [pc, #344]	; (8004a24 <BSP_TS_GetState+0x224>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	015b      	lsls	r3, r3, #5
 80048d0:	440b      	add	r3, r1
 80048d2:	3310      	adds	r3, #16
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80048de:	4a51      	ldr	r2, [pc, #324]	; (8004a24 <BSP_TS_GetState+0x224>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	015b      	lsls	r3, r3, #5
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	fb03 f202 	mul.w	r2, r3, r2
 80048f0:	494c      	ldr	r1, [pc, #304]	; (8004a24 <BSP_TS_GetState+0x224>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	015b      	lsls	r3, r3, #5
 80048f6:	440b      	add	r3, r1
 80048f8:	3314      	adds	r3, #20
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4945      	ldr	r1, [pc, #276]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	015b      	lsls	r3, r3, #5
 8004914:	440b      	add	r3, r1
 8004916:	3318      	adds	r3, #24
 8004918:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800491a:	429a      	cmp	r2, r3
 800491c:	d909      	bls.n	8004932 <BSP_TS_GetState+0x132>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4940      	ldr	r1, [pc, #256]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	015b      	lsls	r3, r3, #5
 8004928:	440b      	add	r3, r1
 800492a:	3318      	adds	r3, #24
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	e008      	b.n	8004944 <BSP_TS_GetState+0x144>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8004932:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	015b      	lsls	r3, r3, #5
 8004938:	4413      	add	r3, r2
 800493a:	3318      	adds	r3, #24
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004942:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8004944:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	4936      	ldr	r1, [pc, #216]	; (8004a24 <BSP_TS_GetState+0x224>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	015b      	lsls	r3, r3, #5
 8004950:	440b      	add	r3, r1
 8004952:	331c      	adds	r3, #28
 8004954:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004956:	429a      	cmp	r2, r3
 8004958:	d909      	bls.n	800496e <BSP_TS_GetState+0x16e>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	4931      	ldr	r1, [pc, #196]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	015b      	lsls	r3, r3, #5
 8004964:	440b      	add	r3, r1
 8004966:	331c      	adds	r3, #28
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	e008      	b.n	8004980 <BSP_TS_GetState+0x180>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	4413      	add	r3, r2
 8004976:	331c      	adds	r3, #28
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800497e:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004980:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004982:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	015b      	lsls	r3, r3, #5
 8004988:	4413      	add	r3, r2
 800498a:	330c      	adds	r3, #12
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	429a      	cmp	r2, r3
 8004992:	d808      	bhi.n	80049a6 <BSP_TS_GetState+0x1a6>
 8004994:	4a23      	ldr	r2, [pc, #140]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	015b      	lsls	r3, r3, #5
 800499a:	4413      	add	r3, r2
 800499c:	330c      	adds	r3, #12
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d910      	bls.n	80049c8 <BSP_TS_GetState+0x1c8>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	491e      	ldr	r1, [pc, #120]	; (8004a24 <BSP_TS_GetState+0x224>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	015b      	lsls	r3, r3, #5
 80049b0:	440b      	add	r3, r1
 80049b2:	3318      	adds	r3, #24
 80049b4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	491a      	ldr	r1, [pc, #104]	; (8004a24 <BSP_TS_GetState+0x224>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	015b      	lsls	r3, r3, #5
 80049c0:	440b      	add	r3, r1
 80049c2:	331c      	adds	r3, #28
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e023      	b.n	8004a10 <BSP_TS_GetState+0x210>
      }
      else
      {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <BSP_TS_GetState+0x224>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	015b      	lsls	r3, r3, #5
 80049ce:	4413      	add	r3, r2
 80049d0:	3318      	adds	r3, #24
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <BSP_TS_GetState+0x224>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	015b      	lsls	r3, r3, #5
 80049de:	4413      	add	r3, r2
 80049e0:	331c      	adds	r3, #28
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	e012      	b.n	8004a10 <BSP_TS_GetState+0x210>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80049f0:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <BSP_TS_GetState+0x224>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	015b      	lsls	r3, r3, #5
 80049f6:	4413      	add	r3, r2
 80049f8:	3318      	adds	r3, #24
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004a00:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <BSP_TS_GetState+0x224>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	4413      	add	r3, r2
 8004a08:	331c      	adds	r3, #28
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3728      	adds	r7, #40	; 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20001ac4 	.word	0x20001ac4
 8004a20:	20001ac8 	.word	0x20001ac8
 8004a24:	20001acc 	.word	0x20001acc

08004a28 <EXC7200_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t EXC7200_Probe(uint32_t Instance)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  int32_t ret               = BSP_ERROR_NONE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
  EXC7200_IO_t              IOCtx;
  static EXC7200_Object_t   EXC7200Obj;
  uint32_t exc7200_id       = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8004a38:	2308      	movs	r3, #8
 8004a3a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
 8004a3c:	4b23      	ldr	r3, [pc, #140]	; (8004acc <EXC7200_Probe+0xa4>)
 8004a3e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <EXC7200_Probe+0xa8>)
 8004a42:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <EXC7200_Probe+0xac>)
 8004a46:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <EXC7200_Probe+0xb0>)
 8004a4a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <EXC7200_Probe+0xb4>)
 8004a4e:	623b      	str	r3, [r7, #32]

  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	4619      	mov	r1, r3
 8004a56:	4822      	ldr	r0, [pc, #136]	; (8004ae0 <EXC7200_Probe+0xb8>)
 8004a58:	f7fd fbf8 	bl	800224c <EXC7200_RegisterBusIO>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <EXC7200_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8004a62:	f06f 0307 	mvn.w	r3, #7
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e02b      	b.n	8004ac2 <EXC7200_Probe+0x9a>
  }
  else if(EXC7200_ReadID(&EXC7200Obj, &exc7200_id) != EXC7200_OK)
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4619      	mov	r1, r3
 8004a70:	481b      	ldr	r0, [pc, #108]	; (8004ae0 <EXC7200_Probe+0xb8>)
 8004a72:	f7fd fc93 	bl	800239c <EXC7200_ReadID>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <EXC7200_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a7c:	f06f 0304 	mvn.w	r3, #4
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	e01e      	b.n	8004ac2 <EXC7200_Probe+0x9a>
  }
  else if(exc7200_id != EXC7200_ID)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 8004a8a:	d003      	beq.n	8004a94 <EXC7200_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004a8c:	f06f 0306 	mvn.w	r3, #6
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	e016      	b.n	8004ac2 <EXC7200_Probe+0x9a>
  }
  else
  {
    Ts_CompObj[Instance] = &EXC7200Obj;
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <EXC7200_Probe+0xbc>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4911      	ldr	r1, [pc, #68]	; (8004ae0 <EXC7200_Probe+0xb8>)
 8004a9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <EXC7200_Probe+0xc0>)
 8004aa0:	4a12      	ldr	r2, [pc, #72]	; (8004aec <EXC7200_Probe+0xc4>)
 8004aa2:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <EXC7200_Probe+0xc0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <EXC7200_Probe+0xbc>)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4798      	blx	r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <EXC7200_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004abc:	f06f 0304 	mvn.w	r3, #4
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	; 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	08002c09 	.word	0x08002c09
 8004ad0:	08002c81 	.word	0x08002c81
 8004ad4:	08002db1 	.word	0x08002db1
 8004ad8:	08002d55 	.word	0x08002d55
 8004adc:	08002e0d 	.word	0x08002e0d
 8004ae0:	20001aec 	.word	0x20001aec
 8004ae4:	20001ac8 	.word	0x20001ac8
 8004ae8:	20001ac4 	.word	0x20001ac4
 8004aec:	20000008 	.word	0x20000008

08004af0 <TS3510_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t TS3510_Probe(uint32_t Instance)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  TS3510_IO_t              IOCtx;
  static TS3510_Object_t   TS3510Obj;
  uint32_t ts3510_id       = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <TS3510_Probe+0xa8>)
 8004b06:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <TS3510_Probe+0xac>)
 8004b0a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8004b0c:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <TS3510_Probe+0xb0>)
 8004b0e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <TS3510_Probe+0xb4>)
 8004b12:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004b14:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <TS3510_Probe+0xb8>)
 8004b16:	623b      	str	r3, [r7, #32]

  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4823      	ldr	r0, [pc, #140]	; (8004bac <TS3510_Probe+0xbc>)
 8004b20:	f7fd fe50 	bl	80027c4 <TS3510_RegisterBusIO>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <TS3510_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8004b2a:	f06f 0307 	mvn.w	r3, #7
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b30:	e02c      	b.n	8004b8c <TS3510_Probe+0x9c>
  }
  else if(TS3510_ReadID(&TS3510Obj, &ts3510_id) != TS3510_OK)
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	4619      	mov	r1, r3
 8004b38:	481c      	ldr	r0, [pc, #112]	; (8004bac <TS3510_Probe+0xbc>)
 8004b3a:	f7fd feeb 	bl	8002914 <TS3510_ReadID>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <TS3510_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b44:	f06f 0304 	mvn.w	r3, #4
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4a:	e01f      	b.n	8004b8c <TS3510_Probe+0x9c>
  }
  else if(ts3510_id != TS3510_ID)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f243 5210 	movw	r2, #13584	; 0x3510
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TS3510_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b56:	f06f 0306 	mvn.w	r3, #6
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	e016      	b.n	8004b8c <TS3510_Probe+0x9c>
  }
  else
  {
    Ts_CompObj[Instance] = &TS3510Obj;
 8004b5e:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <TS3510_Probe+0xc0>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4912      	ldr	r1, [pc, #72]	; (8004bac <TS3510_Probe+0xbc>)
 8004b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 8004b68:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <TS3510_Probe+0xc4>)
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <TS3510_Probe+0xc8>)
 8004b6c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <TS3510_Probe+0xc4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <TS3510_Probe+0xc0>)
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4798      	blx	r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <TS3510_Probe+0x9c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b86:	f06f 0304 	mvn.w	r3, #4
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	08002c09 	.word	0x08002c09
 8004b9c:	08002c81 	.word	0x08002c81
 8004ba0:	08002db1 	.word	0x08002db1
 8004ba4:	08002d55 	.word	0x08002d55
 8004ba8:	08002e0d 	.word	0x08002e0d
 8004bac:	20001b14 	.word	0x20001b14
 8004bb0:	20001ac8 	.word	0x20001ac8
 8004bb4:	20001ac4 	.word	0x20001ac4
 8004bb8:	20000038 	.word	0x20000038

08004bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	f000 f9a2 	bl	8004f0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bc8:	f004 fb6e 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <HAL_Init+0x68>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	4913      	ldr	r1, [pc, #76]	; (8004c28 <HAL_Init+0x6c>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004be6:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <HAL_Init+0x68>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <HAL_Init+0x6c>)
 8004bf0:	5cd3      	ldrb	r3, [r2, r3]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <HAL_Init+0x70>)
 8004bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c00:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <HAL_Init+0x74>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c06:	2000      	movs	r0, #0
 8004c08:	f000 f814 	bl	8004c34 <HAL_InitTick>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e002      	b.n	8004c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c16:	f7fd f91f 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	58024400 	.word	0x58024400
 8004c28:	08011820 	.word	0x08011820
 8004c2c:	20000004 	.word	0x20000004
 8004c30:	20000000 	.word	0x20000000

08004c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004c3c:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_InitTick+0x60>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e021      	b.n	8004c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_InitTick+0x64>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_InitTick+0x60>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f98b 	bl	8004f7a <HAL_SYSTICK_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e00e      	b.n	8004c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d80a      	bhi.n	8004c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c74:	2200      	movs	r2, #0
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	f000 f951 	bl	8004f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c80:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <HAL_InitTick+0x68>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2000006c 	.word	0x2000006c
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	20000068 	.word	0x20000068

08004ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_IncTick+0x20>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_IncTick+0x24>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_IncTick+0x24>)
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	2000006c 	.word	0x2000006c
 8004cc4:	20001b3c 	.word	0x20001b3c

08004cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return uwTick;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <HAL_GetTick+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20001b3c 	.word	0x20001b3c

08004ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ce8:	f7ff ffee 	bl	8004cc8 <HAL_GetTick>
 8004cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d005      	beq.n	8004d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_Delay+0x44>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d06:	bf00      	nop
 8004d08:	f7ff ffde 	bl	8004cc8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d8f7      	bhi.n	8004d08 <HAL_Delay+0x28>
  {
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	2000006c 	.word	0x2000006c

08004d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_GetREVID+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0c1b      	lsrs	r3, r3, #16
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	5c001000 	.word	0x5c001000

08004d40 <__NVIC_SetPriorityGrouping>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <__NVIC_SetPriorityGrouping+0x40>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <__NVIC_SetPriorityGrouping+0x44>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <__NVIC_SetPriorityGrouping+0x40>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	60d3      	str	r3, [r2, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00
 8004d84:	05fa0000 	.word	0x05fa0000

08004d88 <__NVIC_GetPriorityGrouping>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_GetPriorityGrouping+0x18>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0307 	and.w	r3, r3, #7
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <__NVIC_EnableIRQ>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db0b      	blt.n	8004dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4907      	ldr	r1, [pc, #28]	; (8004ddc <__NVIC_EnableIRQ+0x38>)
 8004dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e100 	.word	0xe000e100

08004de0 <__NVIC_SetPriority>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db0a      	blt.n	8004e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	490c      	ldr	r1, [pc, #48]	; (8004e2c <__NVIC_SetPriority+0x4c>)
 8004dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	440b      	add	r3, r1
 8004e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e08:	e00a      	b.n	8004e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4908      	ldr	r1, [pc, #32]	; (8004e30 <__NVIC_SetPriority+0x50>)
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3b04      	subs	r3, #4
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	761a      	strb	r2, [r3, #24]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e100 	.word	0xe000e100
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <NVIC_EncodePriority>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	; 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf28      	it	cs
 8004e52:	2304      	movcs	r3, #4
 8004e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d902      	bls.n	8004e64 <NVIC_EncodePriority+0x30>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3b03      	subs	r3, #3
 8004e62:	e000      	b.n	8004e66 <NVIC_EncodePriority+0x32>
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	401a      	ands	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43d9      	mvns	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	4313      	orrs	r3, r2
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <__NVIC_SystemReset>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004ea0:	f3bf 8f4f 	dsb	sy
}
 8004ea4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <__NVIC_SystemReset+0x24>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004eae:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <__NVIC_SystemReset+0x24>)
 8004eb0:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <__NVIC_SystemReset+0x28>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004eb6:	f3bf 8f4f 	dsb	sy
}
 8004eba:	bf00      	nop
    __NOP();
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <__NVIC_SystemReset+0x20>
 8004ec0:	e000ed00 	.word	0xe000ed00
 8004ec4:	05fa0004 	.word	0x05fa0004

08004ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d301      	bcc.n	8004ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eda:	2301      	movs	r3, #1
 8004edc:	e00f      	b.n	8004efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <SysTick_Config+0x40>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee6:	210f      	movs	r1, #15
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	f7ff ff78 	bl	8004de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <SysTick_Config+0x40>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <SysTick_Config+0x40>)
 8004ef8:	2207      	movs	r2, #7
 8004efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	e000e010 	.word	0xe000e010

08004f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff13 	bl	8004d40 <__NVIC_SetPriorityGrouping>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f30:	f7ff ff2a 	bl	8004d88 <__NVIC_GetPriorityGrouping>
 8004f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	6978      	ldr	r0, [r7, #20]
 8004f3c:	f7ff ff7a 	bl	8004e34 <NVIC_EncodePriority>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff49 	bl	8004de0 <__NVIC_SetPriority>
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff1d 	bl	8004da4 <__NVIC_EnableIRQ>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004f76:	f7ff ff91 	bl	8004e9c <__NVIC_SystemReset>

08004f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff ffa0 	bl	8004ec8 <SysTick_Config>
 8004f88:	4603      	mov	r3, r0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004f9c:	f7ff fe94 	bl	8004cc8 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e2dc      	b.n	8005566 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d008      	beq.n	8004fca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e2cd      	b.n	8005566 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a76      	ldr	r2, [pc, #472]	; (80051a8 <HAL_DMA_Abort+0x214>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d04a      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a74      	ldr	r2, [pc, #464]	; (80051ac <HAL_DMA_Abort+0x218>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d045      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a73      	ldr	r2, [pc, #460]	; (80051b0 <HAL_DMA_Abort+0x21c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d040      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a71      	ldr	r2, [pc, #452]	; (80051b4 <HAL_DMA_Abort+0x220>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d03b      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a70      	ldr	r2, [pc, #448]	; (80051b8 <HAL_DMA_Abort+0x224>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d036      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a6e      	ldr	r2, [pc, #440]	; (80051bc <HAL_DMA_Abort+0x228>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d031      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6d      	ldr	r2, [pc, #436]	; (80051c0 <HAL_DMA_Abort+0x22c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d02c      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6b      	ldr	r2, [pc, #428]	; (80051c4 <HAL_DMA_Abort+0x230>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d027      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <HAL_DMA_Abort+0x234>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a68      	ldr	r2, [pc, #416]	; (80051cc <HAL_DMA_Abort+0x238>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01d      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a67      	ldr	r2, [pc, #412]	; (80051d0 <HAL_DMA_Abort+0x23c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a65      	ldr	r2, [pc, #404]	; (80051d4 <HAL_DMA_Abort+0x240>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a64      	ldr	r2, [pc, #400]	; (80051d8 <HAL_DMA_Abort+0x244>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a62      	ldr	r2, [pc, #392]	; (80051dc <HAL_DMA_Abort+0x248>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a61      	ldr	r2, [pc, #388]	; (80051e0 <HAL_DMA_Abort+0x24c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_DMA_Abort+0xd6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5f      	ldr	r2, [pc, #380]	; (80051e4 <HAL_DMA_Abort+0x250>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_DMA_Abort+0xda>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <HAL_DMA_Abort+0xdc>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 021e 	bic.w	r2, r2, #30
 8005082:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005092:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e00a      	b.n	80050b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 020e 	bic.w	r2, r2, #14
 80050aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <HAL_DMA_Abort+0x214>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d072      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <HAL_DMA_Abort+0x218>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d06d      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <HAL_DMA_Abort+0x21c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d068      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a37      	ldr	r2, [pc, #220]	; (80051b4 <HAL_DMA_Abort+0x220>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d063      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a36      	ldr	r2, [pc, #216]	; (80051b8 <HAL_DMA_Abort+0x224>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d05e      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a34      	ldr	r2, [pc, #208]	; (80051bc <HAL_DMA_Abort+0x228>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d059      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <HAL_DMA_Abort+0x22c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d054      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a31      	ldr	r2, [pc, #196]	; (80051c4 <HAL_DMA_Abort+0x230>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d04f      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <HAL_DMA_Abort+0x234>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d04a      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <HAL_DMA_Abort+0x238>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d045      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <HAL_DMA_Abort+0x23c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d040      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <HAL_DMA_Abort+0x240>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d03b      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <HAL_DMA_Abort+0x244>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	; (80051dc <HAL_DMA_Abort+0x248>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d031      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <HAL_DMA_Abort+0x24c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d02c      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <HAL_DMA_Abort+0x250>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d027      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <HAL_DMA_Abort+0x254>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_DMA_Abort+0x258>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_DMA_Abort+0x25c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <HAL_DMA_Abort+0x260>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_DMA_Abort+0x264>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <HAL_DMA_Abort+0x268>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <HAL_DMA_Abort+0x26c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_DMA_Abort+0x20e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_DMA_Abort+0x270>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d132      	bne.n	8005208 <HAL_DMA_Abort+0x274>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e031      	b.n	800520a <HAL_DMA_Abort+0x276>
 80051a6:	bf00      	nop
 80051a8:	40020010 	.word	0x40020010
 80051ac:	40020028 	.word	0x40020028
 80051b0:	40020040 	.word	0x40020040
 80051b4:	40020058 	.word	0x40020058
 80051b8:	40020070 	.word	0x40020070
 80051bc:	40020088 	.word	0x40020088
 80051c0:	400200a0 	.word	0x400200a0
 80051c4:	400200b8 	.word	0x400200b8
 80051c8:	40020410 	.word	0x40020410
 80051cc:	40020428 	.word	0x40020428
 80051d0:	40020440 	.word	0x40020440
 80051d4:	40020458 	.word	0x40020458
 80051d8:	40020470 	.word	0x40020470
 80051dc:	40020488 	.word	0x40020488
 80051e0:	400204a0 	.word	0x400204a0
 80051e4:	400204b8 	.word	0x400204b8
 80051e8:	58025408 	.word	0x58025408
 80051ec:	5802541c 	.word	0x5802541c
 80051f0:	58025430 	.word	0x58025430
 80051f4:	58025444 	.word	0x58025444
 80051f8:	58025458 	.word	0x58025458
 80051fc:	5802546c 	.word	0x5802546c
 8005200:	58025480 	.word	0x58025480
 8005204:	58025494 	.word	0x58025494
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a6d      	ldr	r2, [pc, #436]	; (80053d8 <HAL_DMA_Abort+0x444>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d04a      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6b      	ldr	r2, [pc, #428]	; (80053dc <HAL_DMA_Abort+0x448>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d045      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6a      	ldr	r2, [pc, #424]	; (80053e0 <HAL_DMA_Abort+0x44c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d040      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a68      	ldr	r2, [pc, #416]	; (80053e4 <HAL_DMA_Abort+0x450>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d03b      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a67      	ldr	r2, [pc, #412]	; (80053e8 <HAL_DMA_Abort+0x454>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d036      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a65      	ldr	r2, [pc, #404]	; (80053ec <HAL_DMA_Abort+0x458>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a64      	ldr	r2, [pc, #400]	; (80053f0 <HAL_DMA_Abort+0x45c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02c      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a62      	ldr	r2, [pc, #392]	; (80053f4 <HAL_DMA_Abort+0x460>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d027      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <HAL_DMA_Abort+0x464>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5f      	ldr	r2, [pc, #380]	; (80053fc <HAL_DMA_Abort+0x468>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <HAL_DMA_Abort+0x46c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5c      	ldr	r2, [pc, #368]	; (8005404 <HAL_DMA_Abort+0x470>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5b      	ldr	r2, [pc, #364]	; (8005408 <HAL_DMA_Abort+0x474>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a59      	ldr	r2, [pc, #356]	; (800540c <HAL_DMA_Abort+0x478>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a58      	ldr	r2, [pc, #352]	; (8005410 <HAL_DMA_Abort+0x47c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_DMA_Abort+0x32a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a56      	ldr	r2, [pc, #344]	; (8005414 <HAL_DMA_Abort+0x480>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <HAL_DMA_Abort+0x33c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e007      	b.n	80052e0 <HAL_DMA_Abort+0x34c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80052e0:	e013      	b.n	800530a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052e2:	f7ff fcf1 	bl	8004cc8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d90c      	bls.n	800530a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2203      	movs	r2, #3
 80052fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e12d      	b.n	8005566 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <HAL_DMA_Abort+0x444>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d04a      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <HAL_DMA_Abort+0x448>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <HAL_DMA_Abort+0x44c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d040      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <HAL_DMA_Abort+0x450>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <HAL_DMA_Abort+0x454>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d036      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a27      	ldr	r2, [pc, #156]	; (80053ec <HAL_DMA_Abort+0x458>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <HAL_DMA_Abort+0x45c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d02c      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <HAL_DMA_Abort+0x460>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <HAL_DMA_Abort+0x464>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_DMA_Abort+0x468>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a20      	ldr	r2, [pc, #128]	; (8005400 <HAL_DMA_Abort+0x46c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_DMA_Abort+0x470>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_DMA_Abort+0x474>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_DMA_Abort+0x478>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_DMA_Abort+0x47c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_Abort+0x422>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_DMA_Abort+0x480>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d101      	bne.n	80053ba <HAL_DMA_Abort+0x426>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_DMA_Abort+0x428>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02b      	beq.n	8005418 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	223f      	movs	r2, #63	; 0x3f
 80053d0:	409a      	lsls	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	e02a      	b.n	800542e <HAL_DMA_Abort+0x49a>
 80053d8:	40020010 	.word	0x40020010
 80053dc:	40020028 	.word	0x40020028
 80053e0:	40020040 	.word	0x40020040
 80053e4:	40020058 	.word	0x40020058
 80053e8:	40020070 	.word	0x40020070
 80053ec:	40020088 	.word	0x40020088
 80053f0:	400200a0 	.word	0x400200a0
 80053f4:	400200b8 	.word	0x400200b8
 80053f8:	40020410 	.word	0x40020410
 80053fc:	40020428 	.word	0x40020428
 8005400:	40020440 	.word	0x40020440
 8005404:	40020458 	.word	0x40020458
 8005408:	40020470 	.word	0x40020470
 800540c:	40020488 	.word	0x40020488
 8005410:	400204a0 	.word	0x400204a0
 8005414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2201      	movs	r2, #1
 8005428:	409a      	lsls	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a4f      	ldr	r2, [pc, #316]	; (8005570 <HAL_DMA_Abort+0x5dc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d072      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4d      	ldr	r2, [pc, #308]	; (8005574 <HAL_DMA_Abort+0x5e0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d06d      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4c      	ldr	r2, [pc, #304]	; (8005578 <HAL_DMA_Abort+0x5e4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d068      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a4a      	ldr	r2, [pc, #296]	; (800557c <HAL_DMA_Abort+0x5e8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d063      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a49      	ldr	r2, [pc, #292]	; (8005580 <HAL_DMA_Abort+0x5ec>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d05e      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a47      	ldr	r2, [pc, #284]	; (8005584 <HAL_DMA_Abort+0x5f0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d059      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a46      	ldr	r2, [pc, #280]	; (8005588 <HAL_DMA_Abort+0x5f4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d054      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a44      	ldr	r2, [pc, #272]	; (800558c <HAL_DMA_Abort+0x5f8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d04f      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a43      	ldr	r2, [pc, #268]	; (8005590 <HAL_DMA_Abort+0x5fc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d04a      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a41      	ldr	r2, [pc, #260]	; (8005594 <HAL_DMA_Abort+0x600>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d045      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a40      	ldr	r2, [pc, #256]	; (8005598 <HAL_DMA_Abort+0x604>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d040      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a3e      	ldr	r2, [pc, #248]	; (800559c <HAL_DMA_Abort+0x608>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d03b      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <HAL_DMA_Abort+0x60c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d036      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	; (80055a4 <HAL_DMA_Abort+0x610>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d031      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3a      	ldr	r2, [pc, #232]	; (80055a8 <HAL_DMA_Abort+0x614>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d02c      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a38      	ldr	r2, [pc, #224]	; (80055ac <HAL_DMA_Abort+0x618>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d027      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <HAL_DMA_Abort+0x61c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d022      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a35      	ldr	r2, [pc, #212]	; (80055b4 <HAL_DMA_Abort+0x620>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01d      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_DMA_Abort+0x624>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d018      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_DMA_Abort+0x628>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <HAL_DMA_Abort+0x62c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_DMA_Abort+0x630>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_DMA_Abort+0x634>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_DMA_Abort+0x58a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <HAL_DMA_Abort+0x638>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_DMA_Abort+0x58e>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_DMA_Abort+0x590>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005530:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005552:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8
 80055b0:	58025408 	.word	0x58025408
 80055b4:	5802541c 	.word	0x5802541c
 80055b8:	58025430 	.word	0x58025430
 80055bc:	58025444 	.word	0x58025444
 80055c0:	58025458 	.word	0x58025458
 80055c4:	5802546c 	.word	0x5802546c
 80055c8:	58025480 	.word	0x58025480
 80055cc:	58025494 	.word	0x58025494

080055d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e237      	b.n	8005a52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e22c      	b.n	8005a52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5c      	ldr	r2, [pc, #368]	; (8005770 <HAL_DMA_Abort_IT+0x1a0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d04a      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a5b      	ldr	r2, [pc, #364]	; (8005774 <HAL_DMA_Abort_IT+0x1a4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d045      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a59      	ldr	r2, [pc, #356]	; (8005778 <HAL_DMA_Abort_IT+0x1a8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d040      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_DMA_Abort_IT+0x1ac>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d03b      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a56      	ldr	r2, [pc, #344]	; (8005780 <HAL_DMA_Abort_IT+0x1b0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d036      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a55      	ldr	r2, [pc, #340]	; (8005784 <HAL_DMA_Abort_IT+0x1b4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d031      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a53      	ldr	r2, [pc, #332]	; (8005788 <HAL_DMA_Abort_IT+0x1b8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02c      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a52      	ldr	r2, [pc, #328]	; (800578c <HAL_DMA_Abort_IT+0x1bc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d027      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a50      	ldr	r2, [pc, #320]	; (8005790 <HAL_DMA_Abort_IT+0x1c0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a4f      	ldr	r2, [pc, #316]	; (8005794 <HAL_DMA_Abort_IT+0x1c4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01d      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a4d      	ldr	r2, [pc, #308]	; (8005798 <HAL_DMA_Abort_IT+0x1c8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a4c      	ldr	r2, [pc, #304]	; (800579c <HAL_DMA_Abort_IT+0x1cc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a4a      	ldr	r2, [pc, #296]	; (80057a0 <HAL_DMA_Abort_IT+0x1d0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a49      	ldr	r2, [pc, #292]	; (80057a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a47      	ldr	r2, [pc, #284]	; (80057a8 <HAL_DMA_Abort_IT+0x1d8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_DMA_Abort_IT+0xc8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a46      	ldr	r2, [pc, #280]	; (80057ac <HAL_DMA_Abort_IT+0x1dc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_DMA_Abort_IT+0xcc>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_DMA_Abort_IT+0xce>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8086 	beq.w	80057b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2f      	ldr	r2, [pc, #188]	; (8005770 <HAL_DMA_Abort_IT+0x1a0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d04a      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2e      	ldr	r2, [pc, #184]	; (8005774 <HAL_DMA_Abort_IT+0x1a4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d045      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <HAL_DMA_Abort_IT+0x1a8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d040      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2b      	ldr	r2, [pc, #172]	; (800577c <HAL_DMA_Abort_IT+0x1ac>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d03b      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a29      	ldr	r2, [pc, #164]	; (8005780 <HAL_DMA_Abort_IT+0x1b0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d036      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a28      	ldr	r2, [pc, #160]	; (8005784 <HAL_DMA_Abort_IT+0x1b4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d031      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a26      	ldr	r2, [pc, #152]	; (8005788 <HAL_DMA_Abort_IT+0x1b8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d02c      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a25      	ldr	r2, [pc, #148]	; (800578c <HAL_DMA_Abort_IT+0x1bc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d027      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <HAL_DMA_Abort_IT+0x1c0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a22      	ldr	r2, [pc, #136]	; (8005794 <HAL_DMA_Abort_IT+0x1c4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d01d      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a20      	ldr	r2, [pc, #128]	; (8005798 <HAL_DMA_Abort_IT+0x1c8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1f      	ldr	r2, [pc, #124]	; (800579c <HAL_DMA_Abort_IT+0x1cc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_DMA_Abort_IT+0x1d0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <HAL_DMA_Abort_IT+0x1d8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_DMA_Abort_IT+0x17c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_DMA_Abort_IT+0x1dc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <HAL_DMA_Abort_IT+0x18e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e178      	b.n	8005a50 <HAL_DMA_Abort_IT+0x480>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e16f      	b.n	8005a50 <HAL_DMA_Abort_IT+0x480>
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 020e 	bic.w	r2, r2, #14
 80057be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a6c      	ldr	r2, [pc, #432]	; (8005978 <HAL_DMA_Abort_IT+0x3a8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d04a      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a6b      	ldr	r2, [pc, #428]	; (800597c <HAL_DMA_Abort_IT+0x3ac>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d045      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a69      	ldr	r2, [pc, #420]	; (8005980 <HAL_DMA_Abort_IT+0x3b0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d040      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a68      	ldr	r2, [pc, #416]	; (8005984 <HAL_DMA_Abort_IT+0x3b4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d03b      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a66      	ldr	r2, [pc, #408]	; (8005988 <HAL_DMA_Abort_IT+0x3b8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d036      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a65      	ldr	r2, [pc, #404]	; (800598c <HAL_DMA_Abort_IT+0x3bc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d031      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a63      	ldr	r2, [pc, #396]	; (8005990 <HAL_DMA_Abort_IT+0x3c0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02c      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a62      	ldr	r2, [pc, #392]	; (8005994 <HAL_DMA_Abort_IT+0x3c4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d027      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a60      	ldr	r2, [pc, #384]	; (8005998 <HAL_DMA_Abort_IT+0x3c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d022      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5f      	ldr	r2, [pc, #380]	; (800599c <HAL_DMA_Abort_IT+0x3cc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d01d      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5d      	ldr	r2, [pc, #372]	; (80059a0 <HAL_DMA_Abort_IT+0x3d0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a5c      	ldr	r2, [pc, #368]	; (80059a4 <HAL_DMA_Abort_IT+0x3d4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_DMA_Abort_IT+0x3d8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a59      	ldr	r2, [pc, #356]	; (80059ac <HAL_DMA_Abort_IT+0x3dc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a57      	ldr	r2, [pc, #348]	; (80059b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_DMA_Abort_IT+0x290>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a56      	ldr	r2, [pc, #344]	; (80059b4 <HAL_DMA_Abort_IT+0x3e4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <HAL_DMA_Abort_IT+0x2a2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e007      	b.n	8005882 <HAL_DMA_Abort_IT+0x2b2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <HAL_DMA_Abort_IT+0x3a8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d072      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a3a      	ldr	r2, [pc, #232]	; (800597c <HAL_DMA_Abort_IT+0x3ac>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d06d      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a39      	ldr	r2, [pc, #228]	; (8005980 <HAL_DMA_Abort_IT+0x3b0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d068      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a37      	ldr	r2, [pc, #220]	; (8005984 <HAL_DMA_Abort_IT+0x3b4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d063      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a36      	ldr	r2, [pc, #216]	; (8005988 <HAL_DMA_Abort_IT+0x3b8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d05e      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a34      	ldr	r2, [pc, #208]	; (800598c <HAL_DMA_Abort_IT+0x3bc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d059      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a33      	ldr	r2, [pc, #204]	; (8005990 <HAL_DMA_Abort_IT+0x3c0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d054      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <HAL_DMA_Abort_IT+0x3c4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04f      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a30      	ldr	r2, [pc, #192]	; (8005998 <HAL_DMA_Abort_IT+0x3c8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d04a      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2e      	ldr	r2, [pc, #184]	; (800599c <HAL_DMA_Abort_IT+0x3cc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d045      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <HAL_DMA_Abort_IT+0x3d0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d040      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <HAL_DMA_Abort_IT+0x3d4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d03b      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <HAL_DMA_Abort_IT+0x3d8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d036      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <HAL_DMA_Abort_IT+0x3dc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d031      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d02c      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <HAL_DMA_Abort_IT+0x3e4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d027      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <HAL_DMA_Abort_IT+0x3e8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_DMA_Abort_IT+0x3ec>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01d      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <HAL_DMA_Abort_IT+0x3f0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <HAL_DMA_Abort_IT+0x3f4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1e      	ldr	r2, [pc, #120]	; (80059c8 <HAL_DMA_Abort_IT+0x3f8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <HAL_DMA_Abort_IT+0x3fc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_DMA_Abort_IT+0x400>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_DMA_Abort_IT+0x3a2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <HAL_DMA_Abort_IT+0x404>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d132      	bne.n	80059d8 <HAL_DMA_Abort_IT+0x408>
 8005972:	2301      	movs	r3, #1
 8005974:	e031      	b.n	80059da <HAL_DMA_Abort_IT+0x40a>
 8005976:	bf00      	nop
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
 80059b8:	58025408 	.word	0x58025408
 80059bc:	5802541c 	.word	0x5802541c
 80059c0:	58025430 	.word	0x58025430
 80059c4:	58025444 	.word	0x58025444
 80059c8:	58025458 	.word	0x58025458
 80059cc:	5802546c 	.word	0x5802546c
 80059d0:	58025480 	.word	0x58025480
 80059d4:	58025494 	.word	0x58025494
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d028      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2201      	movs	r2, #1
 80059fe:	409a      	lsls	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e04f      	b.n	8005b0e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f84e 	bl	8005b24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <HAL_DMA2D_Init+0xbc>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6851      	ldr	r1, [r2, #4]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	69d2      	ldr	r2, [r2, #28]
 8005aa2:	4311      	orrs	r1, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_DMA2D_Init+0xc0>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6891      	ldr	r1, [r2, #8]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6992      	ldr	r2, [r2, #24]
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <HAL_DMA2D_Init+0xc4>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68d1      	ldr	r1, [r2, #12]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	051a      	lsls	r2, r3, #20
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	055b      	lsls	r3, r3, #21
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	fff8ffbf 	.word	0xfff8ffbf
 8005b1c:	fffffef8 	.word	0xfffffef8
 8005b20:	ffff0000 	.word	0xffff0000

08005b24 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_DMA2D_Start+0x1c>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e018      	b.n	8005b86 <HAL_DMA2D_Start+0x4e>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f9a4 	bl	8005ebc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d056      	beq.n	8005c58 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005baa:	f7ff f88d 	bl	8004cc8 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005bb0:	e04b      	b.n	8005c4a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d023      	beq.n	8005c0c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2221      	movs	r2, #33	; 0x21
 8005bf6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a5      	b.n	8005d58 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d01a      	beq.n	8005c4a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c14:	f7ff f858 	bl	8004cc8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d302      	bcc.n	8005c2a <HAL_DMA2D_PollForTransfer+0x9c>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2203      	movs	r2, #3
 8005c3a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e086      	b.n	8005d58 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ac      	beq.n	8005bb2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d061      	beq.n	8005d3e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7a:	f7ff f825 	bl	8004cc8 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c80:	e056      	b.n	8005d30 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02e      	beq.n	8005cf2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca2:	f043 0204 	orr.w	r2, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb8:	f043 0202 	orr.w	r2, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cce:	f043 0201 	orr.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2229      	movs	r2, #41	; 0x29
 8005cdc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e032      	b.n	8005d58 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d01a      	beq.n	8005d30 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cfa:	f7fe ffe5 	bl	8004cc8 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <HAL_DMA2D_PollForTransfer+0x182>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10f      	bne.n	8005d30 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d14:	f043 0220 	orr.w	r2, r3, #32
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2203      	movs	r2, #3
 8005d20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e013      	b.n	8005d58 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0a1      	beq.n	8005c82 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2212      	movs	r2, #18
 8005d44:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_DMA2D_ConfigLayer+0x24>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e092      	b.n	8005eaa <HAL_DMA2D_ConfigLayer+0x14a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	3328      	adds	r3, #40	; 0x28
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005db8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_DMA2D_ConfigLayer+0x158>)
 8005dc6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b0a      	cmp	r3, #10
 8005dce:	d003      	beq.n	8005dd8 <HAL_DMA2D_ConfigLayer+0x78>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	d107      	bne.n	8005de8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e005      	b.n	8005df4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	061b      	lsls	r3, r3, #24
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d120      	bne.n	8005e3c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	ea02 0103 	and.w	r1, r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b0a      	cmp	r3, #10
 8005e22:	d003      	beq.n	8005e2c <HAL_DMA2D_ConfigLayer+0xcc>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	d135      	bne.n	8005e98 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
 8005e3a:	e02d      	b.n	8005e98 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b0b      	cmp	r3, #11
 8005e42:	d109      	bne.n	8005e58 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	049b      	lsls	r3, r3, #18
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005e56:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	43db      	mvns	r3, r3
 8005e62:	ea02 0103 	and.w	r1, r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b0a      	cmp	r3, #10
 8005e80:	d003      	beq.n	8005e8a <HAL_DMA2D_ConfigLayer+0x12a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	d106      	bne.n	8005e98 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e96:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	ff33000f 	.word	0xff33000f

08005ebc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b08b      	sub	sp, #44	; 0x2c
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	041a      	lsls	r2, r3, #16
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ef4:	d174      	bne.n	8005fe0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d108      	bne.n	8005f2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	e053      	b.n	8005fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d106      	bne.n	8005f44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	e048      	b.n	8005fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d111      	bne.n	8005f70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	0cdb      	lsrs	r3, r3, #19
 8005f50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	0a9b      	lsrs	r3, r3, #10
 8005f56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	02db      	lsls	r3, r3, #11
 8005f66:	4313      	orrs	r3, r2
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	e032      	b.n	8005fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d117      	bne.n	8005fa8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	0fdb      	lsrs	r3, r3, #31
 8005f7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	0cdb      	lsrs	r3, r3, #19
 8005f82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	0adb      	lsrs	r3, r3, #11
 8005f88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	029b      	lsls	r3, r3, #10
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	03db      	lsls	r3, r3, #15
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	e016      	b.n	8005fd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	0f1b      	lsrs	r3, r3, #28
 8005fac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	0d1b      	lsrs	r3, r3, #20
 8005fb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	0b1b      	lsrs	r3, r3, #12
 8005fb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	011a      	lsls	r2, r3, #4
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005fde:	e00d      	b.n	8005ffc <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fe8:	d104      	bne.n	8005ff4 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	615a      	str	r2, [r3, #20]
}
 8005ff2:	e003      	b.n	8005ffc <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	60da      	str	r2, [r3, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	372c      	adds	r7, #44	; 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800600c:	4b18      	ldr	r3, [pc, #96]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 800601a:	4a16      	ldr	r2, [pc, #88]	; (8006074 <HAL_FLASH_Unlock+0x6c>)
 800601c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_FLASH_Unlock+0x70>)
 8006022:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8006024:	4b12      	ldr	r3, [pc, #72]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e018      	b.n	8006066 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 8006036:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d010      	beq.n	8006064 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 8006044:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <HAL_FLASH_Unlock+0x6c>)
 8006046:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 800604c:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <HAL_FLASH_Unlock+0x70>)
 800604e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <HAL_FLASH_Unlock+0x68>)
 8006054:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	52002000 	.word	0x52002000
 8006074:	45670123 	.word	0x45670123
 8006078:	cdef89ab 	.word	0xcdef89ab

0800607c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_FLASH_OB_Unlock+0x38>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00d      	beq.n	80060a8 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_FLASH_OB_Unlock+0x38>)
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <HAL_FLASH_OB_Unlock+0x3c>)
 8006090:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <HAL_FLASH_OB_Unlock+0x38>)
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <HAL_FLASH_OB_Unlock+0x40>)
 8006096:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_FLASH_OB_Unlock+0x38>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	52002000 	.word	0x52002000
 80060b8:	08192a3b 	.word	0x08192a3b
 80060bc:	4c5d6e7f 	.word	0x4c5d6e7f

080060c0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80060c6:	2101      	movs	r1, #1
 80060c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060cc:	f000 f902 	bl	80062d4 <FLASH_CRC_WaitForLastOperation>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	e00c      	b.n	80060f6 <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80060dc:	2102      	movs	r1, #2
 80060de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060e2:	f000 f8f7 	bl	80062d4 <FLASH_CRC_WaitForLastOperation>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	71fb      	strb	r3, [r7, #7]
 80060f0:	e001      	b.n	80060f6 <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <HAL_FLASH_OB_Launch+0x60>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	4a07      	ldr	r2, [pc, #28]	; (8006120 <HAL_FLASH_OB_Launch+0x60>)
 8006102:	f043 0302 	orr.w	r3, r3, #2
 8006106:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800610c:	f000 f8a6 	bl	800625c <FLASH_OB_WaitForLastOperation>
 8006110:	4603      	mov	r3, r0
 8006112:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006114:	79fb      	ldrb	r3, [r7, #7]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	52002000 	.word	0x52002000

08006124 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800612e:	2304      	movs	r3, #4
 8006130:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8006136:	f7fe fdc7 	bl	8004cc8 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d113      	bne.n	800616a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8006142:	4b41      	ldr	r3, [pc, #260]	; (8006248 <FLASH_WaitForLastOperation+0x124>)
 8006144:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8006146:	e010      	b.n	800616a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00c      	beq.n	800616a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006150:	f7fe fdba 	bl	8004cc8 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <FLASH_WaitForLastOperation+0x42>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e06a      	b.n	8006240 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4b37      	ldr	r3, [pc, #220]	; (800624c <FLASH_WaitForLastOperation+0x128>)
 800616e:	4013      	ands	r3, r2
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	429a      	cmp	r2, r3
 8006174:	d10a      	bne.n	800618c <FLASH_WaitForLastOperation+0x68>
 8006176:	4b36      	ldr	r3, [pc, #216]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4013      	ands	r3, r2
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	429a      	cmp	r2, r3
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e00c      	b.n	80061a6 <FLASH_WaitForLastOperation+0x82>
 800618c:	4b30      	ldr	r3, [pc, #192]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 800618e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8006192:	43da      	mvns	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4013      	ands	r3, r2
 8006198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ce      	bne.n	8006148 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d105      	bne.n	80061bc <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	4b27      	ldr	r3, [pc, #156]	; (8006254 <FLASH_WaitForLastOperation+0x130>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e007      	b.n	80061cc <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80061bc:	4b24      	ldr	r3, [pc, #144]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 80061be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <FLASH_WaitForLastOperation+0x130>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ca:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d017      	beq.n	8006206 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <FLASH_WaitForLastOperation+0x134>)
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <FLASH_WaitForLastOperation+0x134>)
 80061e0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4b19      	ldr	r3, [pc, #100]	; (800624c <FLASH_WaitForLastOperation+0x128>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d103      	bne.n	80061f6 <FLASH_WaitForLastOperation+0xd2>
 80061ee:	4a18      	ldr	r2, [pc, #96]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6153      	str	r3, [r2, #20]
 80061f4:	e005      	b.n	8006202 <FLASH_WaitForLastOperation+0xde>
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e01c      	b.n	8006240 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10b      	bne.n	8006224 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800620c:	4b10      	ldr	r3, [pc, #64]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d111      	bne.n	800623e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 800621c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006220:	615a      	str	r2, [r3, #20]
 8006222:	e00c      	b.n	800623e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 8006226:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800622a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006232:	d104      	bne.n	800623e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <FLASH_WaitForLastOperation+0x12c>)
 8006236:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800623a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	80000004 	.word	0x80000004
 800624c:	1fef000f 	.word	0x1fef000f
 8006250:	52002000 	.word	0x52002000
 8006254:	17ee0000 	.word	0x17ee0000
 8006258:	20001b40 	.word	0x20001b40

0800625c <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 8006264:	f7fe fd30 	bl	8004cc8 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 800626a:	e010      	b.n	800628e <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d00c      	beq.n	800628e <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fe fd28 	bl	8004cc8 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <FLASH_OB_WaitForLastOperation+0x2e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e01a      	b.n	80062c4 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <FLASH_OB_WaitForLastOperation+0x70>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e8      	bne.n	800626c <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <FLASH_OB_WaitForLastOperation+0x70>)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <FLASH_OB_WaitForLastOperation+0x74>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <FLASH_OB_WaitForLastOperation+0x74>)
 80062b0:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <FLASH_OB_WaitForLastOperation+0x70>)
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <FLASH_OB_WaitForLastOperation+0x70>)
 80062b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	52002000 	.word	0x52002000
 80062d0:	20001b40 	.word	0x20001b40

080062d4 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 80062de:	f7fe fcf3 	bl	8004cc8 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d102      	bne.n	80062f0 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 80062ea:	2308      	movs	r3, #8
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e013      	b.n	8006318 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 80062f0:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <FLASH_CRC_WaitForLastOperation+0xe4>)
 80062f2:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80062f4:	e010      	b.n	8006318 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d00c      	beq.n	8006318 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fe fce3 	bl	8004cc8 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <FLASH_CRC_WaitForLastOperation+0x40>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e04b      	b.n	80063b0 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4b28      	ldr	r3, [pc, #160]	; (80063bc <FLASH_CRC_WaitForLastOperation+0xe8>)
 800631c:	4013      	ands	r3, r2
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	429a      	cmp	r2, r3
 8006322:	d10a      	bne.n	800633a <FLASH_CRC_WaitForLastOperation+0x66>
 8006324:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4013      	ands	r3, r2
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	e00c      	b.n	8006354 <FLASH_CRC_WaitForLastOperation+0x80>
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 800633c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8006340:	43da      	mvns	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4013      	ands	r3, r2
 8006346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1ce      	bne.n	80062f6 <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d112      	bne.n	8006384 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 800635e:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636a:	d120      	bne.n	80063ae <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 800636c:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <FLASH_CRC_WaitForLastOperation+0xf0>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006374:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8006376:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637e:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e015      	b.n	80063b0 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 8006386:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800638a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d10c      	bne.n	80063ae <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 800639c:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <FLASH_CRC_WaitForLastOperation+0xf0>)
 800639e:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <FLASH_CRC_WaitForLastOperation+0xec>)
 80063a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	80000008 	.word	0x80000008
 80063bc:	1fef000f 	.word	0x1fef000f
 80063c0:	52002000 	.word	0x52002000
 80063c4:	20001b40 	.word	0x20001b40

080063c8 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063d0:	4b4e      	ldr	r3, [pc, #312]	; (800650c <HAL_FLASHEx_OBProgram+0x144>)
 80063d2:	7d1b      	ldrb	r3, [r3, #20]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_FLASHEx_OBProgram+0x14>
 80063d8:	2302      	movs	r3, #2
 80063da:	e092      	b.n	8006502 <HAL_FLASHEx_OBProgram+0x13a>
 80063dc:	4b4b      	ldr	r3, [pc, #300]	; (800650c <HAL_FLASHEx_OBProgram+0x144>)
 80063de:	2201      	movs	r2, #1
 80063e0:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80063e2:	4b4a      	ldr	r3, [pc, #296]	; (800650c <HAL_FLASHEx_OBProgram+0x144>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80063e8:	2101      	movs	r1, #1
 80063ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063ee:	f7ff fe99 	bl	8006124 <FLASH_WaitForLastOperation>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e00c      	b.n	8006418 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80063fe:	2102      	movs	r1, #2
 8006400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006404:	f7ff fe8e 	bl	8006124 <FLASH_WaitForLastOperation>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	e001      	b.n	8006418 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d16d      	bne.n	80064fa <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d108      	bne.n	8006444 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f000 f8c3 	bl	80065c8 <FLASH_OB_EnableWRP>
 8006442:	e007      	b.n	8006454 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f000 f8e4 	bl	800661c <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 f92f 	bl	80066c8 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f000 f951 	bl	8006728 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a18      	ldr	r0, [r3, #32]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f000 f9f9 	bl	8006898 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fa66 	bl	8006988 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	461a      	mov	r2, r3
 80064d6:	f000 fa79 	bl	80069cc <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f000 faaf 	bl	8006a58 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064fa:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_FLASHEx_OBProgram+0x144>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	751a      	strb	r2, [r3, #20]

  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20001b40 	.word	0x20001b40

08006510 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2216      	movs	r2, #22
 800651c:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800651e:	f000 f8e7 	bl	80066f0 <FLASH_OB_GetRDP>
 8006522:	4602      	mov	r2, r0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8006528:	f000 f9a0 	bl	800686c <FLASH_OB_GetUser>
 800652c:	4602      	mov	r2, r0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8006532:	f000 fa3d 	bl	80069b0 <FLASH_OB_GetBOR>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d003      	beq.n	800654c <HAL_FLASHEx_OBGetConfig+0x3c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d129      	bne.n	80065a0 <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	1d18      	adds	r0, r3, #4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f103 0108 	add.w	r1, r3, #8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	461a      	mov	r2, r3
 8006568:	f000 f880 	bl	800666c <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f103 0020 	add.w	r0, r3, #32
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f000 f9bf 	bl	8006904 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f000 fa96 	bl	8006acc <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3334      	adds	r3, #52	; 0x34
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fa37 	bl	8006a20 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <FLASH_OB_EnableWRP+0x50>)
 80065de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	490c      	ldr	r1, [pc, #48]	; (8006618 <FLASH_OB_EnableWRP+0x50>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <FLASH_OB_EnableWRP+0x50>)
 80065f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	4905      	ldr	r1, [pc, #20]	; (8006618 <FLASH_OB_EnableWRP+0x50>)
 8006604:	4013      	ands	r3, r2
 8006606:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	52002000 	.word	0x52002000

0800661c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <FLASH_OB_DisableWRP+0x4c>)
 8006632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	490b      	ldr	r1, [pc, #44]	; (8006668 <FLASH_OB_DisableWRP+0x4c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <FLASH_OB_DisableWRP+0x4c>)
 800664a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	4905      	ldr	r1, [pc, #20]	; (8006668 <FLASH_OB_DisableWRP+0x4c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	52002000 	.word	0x52002000

0800666c <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <FLASH_OB_GetWRP+0x58>)
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d103      	bne.n	8006696 <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <FLASH_OB_GetWRP+0x58>)
 8006690:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006694:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	43db      	mvns	r3, r3
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 80066ae:	e002      	b.n	80066b6 <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	52002000 	.word	0x52002000

080066c8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <FLASH_OB_RDPConfig+0x24>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066d8:	4904      	ldr	r1, [pc, #16]	; (80066ec <FLASH_OB_RDPConfig+0x24>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4313      	orrs	r3, r2
 80066de:	620b      	str	r3, [r1, #32]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	52002000 	.word	0x52002000

080066f0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <FLASH_OB_GetRDP+0x34>)
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066fe:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8006706:	d006      	beq.n	8006716 <FLASH_OB_GetRDP+0x26>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 800670e:	d002      	beq.n	8006716 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 8006710:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 8006714:	e000      	b.n	8006718 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 8006716:	687b      	ldr	r3, [r7, #4]
  }
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	52002000 	.word	0x52002000

08006728 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f043 0310 	orr.w	r3, r3, #16
 8006756:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006774:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006792:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b0:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ce:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80067ec:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800680a:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006828:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006846:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <FLASH_OB_UserConfig+0x140>)
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	43db      	mvns	r3, r3
 8006850:	401a      	ands	r2, r3
 8006852:	4905      	ldr	r1, [pc, #20]	; (8006868 <FLASH_OB_UserConfig+0x140>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	620b      	str	r3, [r1, #32]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	52002000 	.word	0x52002000

0800686c <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <FLASH_OB_GetUser+0x24>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <FLASH_OB_GetUser+0x28>)
 800687c:	4013      	ands	r3, r2
 800687e:	607b      	str	r3, [r7, #4]

  return userConfig;
 8006880:	687b      	ldr	r3, [r7, #4]
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	52002000 	.word	0x52002000
 8006894:	ffff00f3 	.word	0xffff00f3

08006898 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80068b6:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80068c2:	431a      	orrs	r2, r3
 80068c4:	490e      	ldr	r1, [pc, #56]	; (8006900 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80068ca:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00e      	beq.n	80068f4 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80068dc:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80068e8:	431a      	orrs	r2, r3
 80068ea:	4905      	ldr	r1, [pc, #20]	; (8006900 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80068f0:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	52002000 	.word	0x52002000

08006904 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d105      	bne.n	800692c <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <FLASH_OB_GetPCROP+0x7c>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8006926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800692a:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d106      	bne.n	8006940 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <FLASH_OB_GetPCROP+0x7c>)
 8006934:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8006938:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 800693a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800693e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <FLASH_OB_GetPCROP+0x80>)
 8006950:	4013      	ands	r3, r2
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	441a      	add	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	52002000 	.word	0x52002000
 8006984:	000fff00 	.word	0x000fff00

08006988 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <FLASH_OB_BOR_LevelConfig+0x24>)
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 020c 	bic.w	r2, r3, #12
 8006998:	4904      	ldr	r1, [pc, #16]	; (80069ac <FLASH_OB_BOR_LevelConfig+0x24>)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4313      	orrs	r3, r2
 800699e:	620b      	str	r3, [r1, #32]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	52002000 	.word	0x52002000

080069b0 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <FLASH_OB_GetBOR+0x18>)
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f003 030c 	and.w	r3, r3, #12
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	52002000 	.word	0x52002000

080069cc <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 80069e2:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <FLASH_OB_BootAddConfig+0x4c>)
 80069e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <FLASH_OB_BootAddConfig+0x50>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	0c12      	lsrs	r2, r2, #16
 80069ee:	490a      	ldr	r1, [pc, #40]	; (8006a18 <FLASH_OB_BootAddConfig+0x4c>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <FLASH_OB_BootAddConfig+0x4c>)
 8006a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <FLASH_OB_BootAddConfig+0x4c>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	52002000 	.word	0x52002000
 8006a1c:	ffff0000 	.word	0xffff0000

08006a20 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <FLASH_OB_GetBootAdd+0x30>)
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	041a      	lsls	r2, r3, #16
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <FLASH_OB_GetBootAdd+0x34>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	52002000 	.word	0x52002000
 8006a54:	ffff0000 	.word	0xffff0000

08006a58 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00f      	beq.n	8006a90 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006a76:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006a82:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006a8a:	490f      	ldr	r1, [pc, #60]	; (8006ac8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006a8c:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006a8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8006aa0:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8006aa8:	0a1b      	lsrs	r3, r3, #8
 8006aaa:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006aac:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006ab4:	4904      	ldr	r1, [pc, #16]	; (8006ac8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006ab6:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006ab8:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	52002000 	.word	0x52002000

08006acc <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d105      	bne.n	8006af4 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <FLASH_OB_GetSecureArea+0x7c>)
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8006aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006af2:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d106      	bne.n	8006b08 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <FLASH_OB_GetSecureArea+0x7c>)
 8006afc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006b00:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 8006b02:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8006b06:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <FLASH_OB_GetSecureArea+0x80>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	021a      	lsls	r2, r3, #8
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	441a      	add	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	601a      	str	r2, [r3, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	52002000 	.word	0x52002000
 8006b4c:	000fff00 	.word	0x000fff00

08006b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b089      	sub	sp, #36	; 0x24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b5e:	4b89      	ldr	r3, [pc, #548]	; (8006d84 <HAL_GPIO_Init+0x234>)
 8006b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b62:	e194      	b.n	8006e8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b70:	4013      	ands	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8186 	beq.w	8006e88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d005      	beq.n	8006b94 <HAL_GPIO_Init+0x44>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d130      	bne.n	8006bf6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bca:	2201      	movs	r2, #1
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 0201 	and.w	r2, r3, #1
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d017      	beq.n	8006c32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	4013      	ands	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d123      	bne.n	8006c86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	08da      	lsrs	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3208      	adds	r2, #8
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	220f      	movs	r2, #15
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	08da      	lsrs	r2, r3, #3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3208      	adds	r2, #8
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 0203 	and.w	r2, r3, #3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80e0 	beq.w	8006e88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cce:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <HAL_GPIO_Init+0x238>)
 8006cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <HAL_GPIO_Init+0x23c>)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	3302      	adds	r3, #2
 8006cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	220f      	movs	r2, #15
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_GPIO_Init+0x240>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d052      	beq.n	8006db8 <HAL_GPIO_Init+0x268>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_GPIO_Init+0x244>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d031      	beq.n	8006d7e <HAL_GPIO_Init+0x22e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_GPIO_Init+0x248>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <HAL_GPIO_Init+0x22a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_GPIO_Init+0x24c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d025      	beq.n	8006d76 <HAL_GPIO_Init+0x226>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_GPIO_Init+0x250>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01f      	beq.n	8006d72 <HAL_GPIO_Init+0x222>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_GPIO_Init+0x254>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d019      	beq.n	8006d6e <HAL_GPIO_Init+0x21e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_GPIO_Init+0x258>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <HAL_GPIO_Init+0x21a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a19      	ldr	r2, [pc, #100]	; (8006dac <HAL_GPIO_Init+0x25c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00d      	beq.n	8006d66 <HAL_GPIO_Init+0x216>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <HAL_GPIO_Init+0x260>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <HAL_GPIO_Init+0x212>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <HAL_GPIO_Init+0x264>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_GPIO_Init+0x20e>
 8006d5a:	2309      	movs	r3, #9
 8006d5c:	e02d      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e02b      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d62:	2308      	movs	r3, #8
 8006d64:	e029      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d66:	2307      	movs	r3, #7
 8006d68:	e027      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	e025      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d6e:	2305      	movs	r3, #5
 8006d70:	e023      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d72:	2304      	movs	r3, #4
 8006d74:	e021      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d76:	2303      	movs	r3, #3
 8006d78:	e01f      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e01d      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e01b      	b.n	8006dba <HAL_GPIO_Init+0x26a>
 8006d82:	bf00      	nop
 8006d84:	58000080 	.word	0x58000080
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	58000400 	.word	0x58000400
 8006d90:	58020000 	.word	0x58020000
 8006d94:	58020400 	.word	0x58020400
 8006d98:	58020800 	.word	0x58020800
 8006d9c:	58020c00 	.word	0x58020c00
 8006da0:	58021000 	.word	0x58021000
 8006da4:	58021400 	.word	0x58021400
 8006da8:	58021800 	.word	0x58021800
 8006dac:	58021c00 	.word	0x58021c00
 8006db0:	58022000 	.word	0x58022000
 8006db4:	58022400 	.word	0x58022400
 8006db8:	2300      	movs	r3, #0
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	f002 0203 	and.w	r2, r2, #3
 8006dc0:	0092      	lsls	r2, r2, #2
 8006dc2:	4093      	lsls	r3, r2
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dca:	4938      	ldr	r1, [pc, #224]	; (8006eac <HAL_GPIO_Init+0x35c>)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	089b      	lsrs	r3, r3, #2
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4013      	ands	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f ae63 	bne.w	8006b64 <HAL_GPIO_Init+0x14>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	58000400 	.word	0x58000400

08006eb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ebe:	4b75      	ldr	r3, [pc, #468]	; (8007094 <HAL_GPIO_DeInit+0x1e4>)
 8006ec0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006ec2:	e0d9      	b.n	8007078 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80cc 	beq.w	8007072 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006eda:	4a6f      	ldr	r2, [pc, #444]	; (8007098 <HAL_GPIO_DeInit+0x1e8>)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	220f      	movs	r2, #15
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a67      	ldr	r2, [pc, #412]	; (800709c <HAL_GPIO_DeInit+0x1ec>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d037      	beq.n	8006f74 <HAL_GPIO_DeInit+0xc4>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a66      	ldr	r2, [pc, #408]	; (80070a0 <HAL_GPIO_DeInit+0x1f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d031      	beq.n	8006f70 <HAL_GPIO_DeInit+0xc0>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a65      	ldr	r2, [pc, #404]	; (80070a4 <HAL_GPIO_DeInit+0x1f4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02b      	beq.n	8006f6c <HAL_GPIO_DeInit+0xbc>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a64      	ldr	r2, [pc, #400]	; (80070a8 <HAL_GPIO_DeInit+0x1f8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d025      	beq.n	8006f68 <HAL_GPIO_DeInit+0xb8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a63      	ldr	r2, [pc, #396]	; (80070ac <HAL_GPIO_DeInit+0x1fc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d01f      	beq.n	8006f64 <HAL_GPIO_DeInit+0xb4>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a62      	ldr	r2, [pc, #392]	; (80070b0 <HAL_GPIO_DeInit+0x200>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d019      	beq.n	8006f60 <HAL_GPIO_DeInit+0xb0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a61      	ldr	r2, [pc, #388]	; (80070b4 <HAL_GPIO_DeInit+0x204>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d013      	beq.n	8006f5c <HAL_GPIO_DeInit+0xac>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a60      	ldr	r2, [pc, #384]	; (80070b8 <HAL_GPIO_DeInit+0x208>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00d      	beq.n	8006f58 <HAL_GPIO_DeInit+0xa8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a5f      	ldr	r2, [pc, #380]	; (80070bc <HAL_GPIO_DeInit+0x20c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <HAL_GPIO_DeInit+0xa4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a5e      	ldr	r2, [pc, #376]	; (80070c0 <HAL_GPIO_DeInit+0x210>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d101      	bne.n	8006f50 <HAL_GPIO_DeInit+0xa0>
 8006f4c:	2309      	movs	r3, #9
 8006f4e:	e012      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f50:	230a      	movs	r3, #10
 8006f52:	e010      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f54:	2308      	movs	r3, #8
 8006f56:	e00e      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f58:	2307      	movs	r3, #7
 8006f5a:	e00c      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f5c:	2306      	movs	r3, #6
 8006f5e:	e00a      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f60:	2305      	movs	r3, #5
 8006f62:	e008      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f64:	2304      	movs	r3, #4
 8006f66:	e006      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e004      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e002      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <HAL_GPIO_DeInit+0xc6>
 8006f74:	2300      	movs	r3, #0
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	f002 0203 	and.w	r2, r2, #3
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	4093      	lsls	r3, r2
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d136      	bne.n	8006ff4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	401a      	ands	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	401a      	ands	r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	43db      	mvns	r3, r3
 8006fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	220f      	movs	r2, #15
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006fd6:	4a30      	ldr	r2, [pc, #192]	; (8007098 <HAL_GPIO_DeInit+0x1e8>)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	3302      	adds	r3, #2
 8006fde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	43da      	mvns	r2, r3
 8006fe6:	482c      	ldr	r0, [pc, #176]	; (8007098 <HAL_GPIO_DeInit+0x1e8>)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	400a      	ands	r2, r1
 8006fee:	3302      	adds	r3, #2
 8006ff0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2103      	movs	r1, #3
 8006ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	08da      	lsrs	r2, r3, #3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3208      	adds	r2, #8
 8007010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	220f      	movs	r2, #15
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	43db      	mvns	r3, r3
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	08d2      	lsrs	r2, r2, #3
 8007028:	4019      	ands	r1, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3208      	adds	r2, #8
 800702e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	2103      	movs	r1, #3
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	43db      	mvns	r3, r3
 8007042:	401a      	ands	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	2101      	movs	r1, #1
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	43db      	mvns	r3, r3
 8007056:	401a      	ands	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	2103      	movs	r1, #3
 8007066:	fa01 f303 	lsl.w	r3, r1, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	401a      	ands	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	3301      	adds	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f af1f 	bne.w	8006ec4 <HAL_GPIO_DeInit+0x14>
  }
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	58000080 	.word	0x58000080
 8007098:	58000400 	.word	0x58000400
 800709c:	58020000 	.word	0x58020000
 80070a0:	58020400 	.word	0x58020400
 80070a4:	58020800 	.word	0x58020800
 80070a8:	58020c00 	.word	0x58020c00
 80070ac:	58021000 	.word	0x58021000
 80070b0:	58021400 	.word	0x58021400
 80070b4:	58021800 	.word	0x58021800
 80070b8:	58021c00 	.word	0x58021c00
 80070bc:	58022000 	.word	0x58022000
 80070c0:	58022400 	.word	0x58022400

080070c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
 80070d0:	4613      	mov	r3, r2
 80070d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070d4:	787b      	ldrb	r3, [r7, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80070e0:	e003      	b.n	80070ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	041a      	lsls	r2, r3, #16
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	619a      	str	r2, [r3, #24]
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007108:	887a      	ldrh	r2, [r7, #2]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4013      	ands	r3, r2
 800710e:	041a      	lsls	r2, r3, #16
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	43d9      	mvns	r1, r3
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	400b      	ands	r3, r1
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	619a      	str	r2, [r3, #24]
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	4603      	mov	r3, r0
 8007132:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007138:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	4618      	mov	r0, r3
 8007152:	f7fa fe11 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e07f      	b.n	8007272 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8a9 	bl	80072de <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2224      	movs	r2, #36	; 0x24
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d107      	bne.n	80071da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e006      	b.n	80071e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d104      	bne.n	80071fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6859      	ldr	r1, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b1d      	ldr	r3, [pc, #116]	; (800727c <HAL_I2C_Init+0x11c>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69d9      	ldr	r1, [r3, #28]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	02008000 	.word	0x02008000

08007280 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e021      	b.n	80072d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	; 0x24
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f821 	bl	80072f2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af02      	add	r7, sp, #8
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	4608      	mov	r0, r1
 8007312:	4611      	mov	r1, r2
 8007314:	461a      	mov	r2, r3
 8007316:	4603      	mov	r3, r0
 8007318:	817b      	strh	r3, [r7, #10]
 800731a:	460b      	mov	r3, r1
 800731c:	813b      	strh	r3, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b20      	cmp	r3, #32
 800732c:	f040 80f9 	bne.w	8007522 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_I2C_Mem_Write+0x34>
 8007336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007342:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0ed      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_I2C_Mem_Write+0x4e>
 8007352:	2302      	movs	r3, #2
 8007354:	e0e6      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800735e:	f7fd fcb3 	bl	8004cc8 <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2319      	movs	r3, #25
 800736a:	2201      	movs	r2, #1
 800736c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fadd 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0d1      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2221      	movs	r2, #33	; 0x21
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2240      	movs	r2, #64	; 0x40
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a3a      	ldr	r2, [r7, #32]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073a8:	88f8      	ldrh	r0, [r7, #6]
 80073aa:	893a      	ldrh	r2, [r7, #8]
 80073ac:	8979      	ldrh	r1, [r7, #10]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4603      	mov	r3, r0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f9ed 	bl	8007798 <I2C_RequestMemoryWrite>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0a9      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2bff      	cmp	r3, #255	; 0xff
 80073d8:	d90e      	bls.n	80073f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	8979      	ldrh	r1, [r7, #10]
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fc57 	bl	8007ca4 <I2C_TransferConfig>
 80073f6:	e00f      	b.n	8007418 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	b2da      	uxtb	r2, r3
 8007408:	8979      	ldrh	r1, [r7, #10]
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fc46 	bl	8007ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fad6 	bl	80079ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e07b      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d034      	beq.n	80074d0 <HAL_I2C_Mem_Write+0x1c8>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d130      	bne.n	80074d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fa59 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e04d      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748c:	b29b      	uxth	r3, r3
 800748e:	2bff      	cmp	r3, #255	; 0xff
 8007490:	d90e      	bls.n	80074b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	22ff      	movs	r2, #255	; 0xff
 8007496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	b2da      	uxtb	r2, r3
 800749e:	8979      	ldrh	r1, [r7, #10]
 80074a0:	2300      	movs	r3, #0
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fbfb 	bl	8007ca4 <I2C_TransferConfig>
 80074ae:	e00f      	b.n	80074d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	8979      	ldrh	r1, [r7, #10]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fbea 	bl	8007ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d19e      	bne.n	8007418 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fabc 	bl	8007a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e01a      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2220      	movs	r2, #32
 80074f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6859      	ldr	r1, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <HAL_I2C_Mem_Write+0x224>)
 8007502:	400b      	ands	r3, r1
 8007504:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	e000      	b.n	8007524 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007522:	2302      	movs	r3, #2
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	fe00e800 	.word	0xfe00e800

08007530 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	4603      	mov	r3, r0
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	460b      	mov	r3, r1
 8007544:	813b      	strh	r3, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b20      	cmp	r3, #32
 8007554:	f040 80fd 	bne.w	8007752 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_I2C_Mem_Read+0x34>
 800755e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800756a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e0f1      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_I2C_Mem_Read+0x4e>
 800757a:	2302      	movs	r3, #2
 800757c:	e0ea      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007586:	f7fd fb9f 	bl	8004cc8 <HAL_GetTick>
 800758a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2319      	movs	r3, #25
 8007592:	2201      	movs	r2, #1
 8007594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f9c9 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0d5      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2222      	movs	r2, #34	; 0x22
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a3a      	ldr	r2, [r7, #32]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075d0:	88f8      	ldrh	r0, [r7, #6]
 80075d2:	893a      	ldrh	r2, [r7, #8]
 80075d4:	8979      	ldrh	r1, [r7, #10]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4603      	mov	r3, r0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f92d 	bl	8007840 <I2C_RequestMemoryRead>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0ad      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2bff      	cmp	r3, #255	; 0xff
 8007600:	d90e      	bls.n	8007620 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760c:	b2da      	uxtb	r2, r3
 800760e:	8979      	ldrh	r1, [r7, #10]
 8007610:	4b52      	ldr	r3, [pc, #328]	; (800775c <HAL_I2C_Mem_Read+0x22c>)
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fb43 	bl	8007ca4 <I2C_TransferConfig>
 800761e:	e00f      	b.n	8007640 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762e:	b2da      	uxtb	r2, r3
 8007630:	8979      	ldrh	r1, [r7, #10]
 8007632:	4b4a      	ldr	r3, [pc, #296]	; (800775c <HAL_I2C_Mem_Read+0x22c>)
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fb32 	bl	8007ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2200      	movs	r2, #0
 8007648:	2104      	movs	r1, #4
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f970 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e07c      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d034      	beq.n	8007700 <HAL_I2C_Mem_Read+0x1d0>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d130      	bne.n	8007700 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2200      	movs	r2, #0
 80076a6:	2180      	movs	r1, #128	; 0x80
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f941 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e04d      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2bff      	cmp	r3, #255	; 0xff
 80076c0:	d90e      	bls.n	80076e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	8979      	ldrh	r1, [r7, #10]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fae3 	bl	8007ca4 <I2C_TransferConfig>
 80076de:	e00f      	b.n	8007700 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	8979      	ldrh	r1, [r7, #10]
 80076f2:	2300      	movs	r3, #0
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fad2 	bl	8007ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d19a      	bne.n	8007640 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f9a4 	bl	8007a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e01a      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2220      	movs	r2, #32
 8007724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <HAL_I2C_Mem_Read+0x230>)
 8007732:	400b      	ands	r3, r1
 8007734:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	80002400 	.word	0x80002400
 8007760:	fe00e800 	.word	0xfe00e800

08007764 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007772:	b2db      	uxtb	r3, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	817b      	strh	r3, [r7, #10]
 80077aa:	460b      	mov	r3, r1
 80077ac:	813b      	strh	r3, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	8979      	ldrh	r1, [r7, #10]
 80077b8:	4b20      	ldr	r3, [pc, #128]	; (800783c <I2C_RequestMemoryWrite+0xa4>)
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fa6f 	bl	8007ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	69b9      	ldr	r1, [r7, #24]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f8ff 	bl	80079ce <I2C_WaitOnTXISFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e02c      	b.n	8007834 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d105      	bne.n	80077ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077e0:	893b      	ldrh	r3, [r7, #8]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28
 80077ea:	e015      	b.n	8007818 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077ec:	893b      	ldrh	r3, [r7, #8]
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	69b9      	ldr	r1, [r7, #24]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f8e5 	bl	80079ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e012      	b.n	8007834 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800780e:	893b      	ldrh	r3, [r7, #8]
 8007810:	b2da      	uxtb	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	2200      	movs	r2, #0
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f884 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	80002000 	.word	0x80002000

08007840 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	461a      	mov	r2, r3
 800784e:	4603      	mov	r3, r0
 8007850:	817b      	strh	r3, [r7, #10]
 8007852:	460b      	mov	r3, r1
 8007854:	813b      	strh	r3, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	8979      	ldrh	r1, [r7, #10]
 8007860:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <I2C_RequestMemoryRead+0xa4>)
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2300      	movs	r3, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fa1c 	bl	8007ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f8ac 	bl	80079ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e02c      	b.n	80078da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
 8007890:	e015      	b.n	80078be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	b29b      	uxth	r3, r3
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	69b9      	ldr	r1, [r7, #24]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f892 	bl	80079ce <I2C_WaitOnTXISFlagUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e012      	b.n	80078da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078b4:	893b      	ldrh	r3, [r7, #8]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2140      	movs	r1, #64	; 0x40
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f831 	bl	8007930 <I2C_WaitOnFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	80002000 	.word	0x80002000

080078e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d103      	bne.n	8007906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d007      	beq.n	8007924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	619a      	str	r2, [r3, #24]
  }
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007940:	e031      	b.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d02d      	beq.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794a:	f7fd f9bd 	bl	8004cc8 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d122      	bne.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4013      	ands	r3, r2
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	bf0c      	ite	eq
 8007970:	2301      	moveq	r3, #1
 8007972:	2300      	movne	r3, #0
 8007974:	b2db      	uxtb	r3, r3
 8007976:	461a      	mov	r2, r3
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	429a      	cmp	r2, r3
 800797c:	d113      	bne.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	f043 0220 	orr.w	r2, r3, #32
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e00f      	b.n	80079c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	bf0c      	ite	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	2300      	movne	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d0be      	beq.n	8007942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079da:	e033      	b.n	8007a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f87f 	bl	8007ae4 <I2C_IsErrorOccurred>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e031      	b.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d025      	beq.n	8007a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f8:	f7fd f966 	bl	8004cc8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d302      	bcc.n	8007a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d11a      	bne.n	8007a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d013      	beq.n	8007a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a20:	f043 0220 	orr.w	r2, r3, #32
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e007      	b.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d1c4      	bne.n	80079dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a68:	e02f      	b.n	8007aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f838 	bl	8007ae4 <I2C_IsErrorOccurred>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e02d      	b.n	8007ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7e:	f7fd f923 	bl	8004cc8 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11a      	bne.n	8007aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d013      	beq.n	8007aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa6:	f043 0220 	orr.w	r2, r3, #32
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e007      	b.n	8007ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d1c8      	bne.n	8007a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d068      	beq.n	8007be2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2210      	movs	r2, #16
 8007b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b18:	e049      	b.n	8007bae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d045      	beq.n	8007bae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b22:	f7fd f8d1 	bl	8004cc8 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d302      	bcc.n	8007b38 <I2C_IsErrorOccurred+0x54>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d13a      	bne.n	8007bae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5a:	d121      	bne.n	8007ba0 <I2C_IsErrorOccurred+0xbc>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b62:	d01d      	beq.n	8007ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d01a      	beq.n	8007ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b7a:	f7fd f8a5 	bl	8004cc8 <HAL_GetTick>
 8007b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b80:	e00e      	b.n	8007ba0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b82:	f7fd f8a1 	bl	8004cc8 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b19      	cmp	r3, #25
 8007b8e:	d907      	bls.n	8007ba0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	f043 0320 	orr.w	r3, r3, #32
 8007b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007b9e:	e006      	b.n	8007bae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d1e9      	bne.n	8007b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d003      	beq.n	8007bc4 <I2C_IsErrorOccurred+0xe0>
 8007bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0aa      	beq.n	8007b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	f043 0304 	orr.w	r3, r3, #4
 8007bda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f043 0308 	orr.w	r3, r3, #8
 8007c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	f043 0302 	orr.w	r3, r3, #2
 8007c3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01c      	beq.n	8007c92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fe45 	bl	80078e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6859      	ldr	r1, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <I2C_IsErrorOccurred+0x1bc>)
 8007c6a:	400b      	ands	r3, r1
 8007c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3728      	adds	r7, #40	; 0x28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	fe00e800 	.word	0xfe00e800

08007ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	817b      	strh	r3, [r7, #10]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cb6:	897b      	ldrh	r3, [r7, #10]
 8007cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cbc:	7a7b      	ldrb	r3, [r7, #9]
 8007cbe:	041b      	lsls	r3, r3, #16
 8007cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	0d5b      	lsrs	r3, r3, #21
 8007cde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ce2:	4b08      	ldr	r3, [pc, #32]	; (8007d04 <I2C_TransferConfig+0x60>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	ea02 0103 	and.w	r1, r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	03ff63ff 	.word	0x03ff63ff

08007d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d138      	bne.n	8007d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e032      	b.n	8007d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0201 	bic.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b085      	sub	sp, #20
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d139      	bne.n	8007e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e033      	b.n	8007e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2224      	movs	r2, #36	; 0x24
 8007dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e0bf      	b.n	8007fca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8ba 	bl	8007fd8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007e7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6999      	ldr	r1, [r3, #24]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6899      	ldr	r1, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b4a      	ldr	r3, [pc, #296]	; (8007fd4 <HAL_LTDC_Init+0x19c>)
 8007eac:	400b      	ands	r3, r1
 8007eae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6899      	ldr	r1, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b3e      	ldr	r3, [pc, #248]	; (8007fd4 <HAL_LTDC_Init+0x19c>)
 8007eda:	400b      	ands	r3, r1
 8007edc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68d9      	ldr	r1, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1a      	ldr	r2, [r3, #32]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6919      	ldr	r1, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b33      	ldr	r3, [pc, #204]	; (8007fd4 <HAL_LTDC_Init+0x19c>)
 8007f08:	400b      	ands	r3, r1
 8007f0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	041b      	lsls	r3, r3, #16
 8007f12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6919      	ldr	r1, [r3, #16]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6959      	ldr	r1, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <HAL_LTDC_Init+0x19c>)
 8007f36:	400b      	ands	r3, r1
 8007f38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6959      	ldr	r1, [r3, #20]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f68:	041b      	lsls	r3, r3, #16
 8007f6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0206 	orr.w	r2, r2, #6
 8007fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	f000f800 	.word	0xf000f800

08007fd8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007fec:	b5b0      	push	{r4, r5, r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_LTDC_ConfigLayer+0x1a>
 8008002:	2302      	movs	r3, #2
 8008004:	e02c      	b.n	8008060 <HAL_LTDC_ConfigLayer+0x74>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2134      	movs	r1, #52	; 0x34
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	4413      	add	r3, r2
 8008022:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4614      	mov	r4, r2
 800802a:	461d      	mov	r5, r3
 800802c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800802e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f811 	bl	8008068 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2201      	movs	r2, #1
 800804c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bdb0      	pop	{r4, r5, r7, pc}

08008068 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008068:	b480      	push	{r7}
 800806a:	b089      	sub	sp, #36	; 0x24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008084:	4413      	add	r3, r2
 8008086:	041b      	lsls	r3, r3, #16
 8008088:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	01db      	lsls	r3, r3, #7
 8008094:	4413      	add	r3, r2
 8008096:	3384      	adds	r3, #132	; 0x84
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	4611      	mov	r1, r2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	01d2      	lsls	r2, r2, #7
 80080a4:	440a      	add	r2, r1
 80080a6:	3284      	adds	r2, #132	; 0x84
 80080a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80080ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80080be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	440b      	add	r3, r1
 80080ce:	3384      	adds	r3, #132	; 0x84
 80080d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80080d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e6:	4413      	add	r3, r2
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	01db      	lsls	r3, r3, #7
 80080f6:	4413      	add	r3, r2
 80080f8:	3384      	adds	r3, #132	; 0x84
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	4611      	mov	r1, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	01d2      	lsls	r2, r2, #7
 8008106:	440a      	add	r2, r1
 8008108:	3284      	adds	r2, #132	; 0x84
 800810a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800810e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800811e:	4413      	add	r3, r2
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4619      	mov	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	01db      	lsls	r3, r3, #7
 800812c:	440b      	add	r3, r1
 800812e:	3384      	adds	r3, #132	; 0x84
 8008130:	4619      	mov	r1, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4313      	orrs	r3, r2
 8008136:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	01db      	lsls	r3, r3, #7
 8008142:	4413      	add	r3, r2
 8008144:	3384      	adds	r3, #132	; 0x84
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	4611      	mov	r1, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	01d2      	lsls	r2, r2, #7
 8008152:	440a      	add	r2, r1
 8008154:	3284      	adds	r2, #132	; 0x84
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	01db      	lsls	r3, r3, #7
 8008166:	4413      	add	r3, r2
 8008168:	3384      	adds	r3, #132	; 0x84
 800816a:	461a      	mov	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	061b      	lsls	r3, r3, #24
 800818c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	01db      	lsls	r3, r3, #7
 8008198:	4413      	add	r3, r2
 800819a:	3384      	adds	r3, #132	; 0x84
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	01db      	lsls	r3, r3, #7
 80081a8:	4413      	add	r3, r2
 80081aa:	3384      	adds	r3, #132	; 0x84
 80081ac:	461a      	mov	r2, r3
 80081ae:	2300      	movs	r3, #0
 80081b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081b8:	461a      	mov	r2, r3
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	431a      	orrs	r2, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	431a      	orrs	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4619      	mov	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	01db      	lsls	r3, r3, #7
 80081cc:	440b      	add	r3, r1
 80081ce:	3384      	adds	r3, #132	; 0x84
 80081d0:	4619      	mov	r1, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	01db      	lsls	r3, r3, #7
 80081e2:	4413      	add	r3, r2
 80081e4:	3384      	adds	r3, #132	; 0x84
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	4611      	mov	r1, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	01d2      	lsls	r2, r2, #7
 80081f2:	440a      	add	r2, r1
 80081f4:	3284      	adds	r2, #132	; 0x84
 80081f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	01db      	lsls	r3, r3, #7
 8008206:	4413      	add	r3, r2
 8008208:	3384      	adds	r3, #132	; 0x84
 800820a:	461a      	mov	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	01db      	lsls	r3, r3, #7
 800821c:	4413      	add	r3, r2
 800821e:	3384      	adds	r3, #132	; 0x84
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4619      	mov	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	01db      	lsls	r3, r3, #7
 800822c:	440b      	add	r3, r1
 800822e:	3384      	adds	r3, #132	; 0x84
 8008230:	4619      	mov	r1, r3
 8008232:	4b58      	ldr	r3, [pc, #352]	; (8008394 <LTDC_SetConfig+0x32c>)
 8008234:	4013      	ands	r3, r2
 8008236:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	68f9      	ldr	r1, [r7, #12]
 8008242:	6809      	ldr	r1, [r1, #0]
 8008244:	4608      	mov	r0, r1
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	01c9      	lsls	r1, r1, #7
 800824a:	4401      	add	r1, r0
 800824c:	3184      	adds	r1, #132	; 0x84
 800824e:	4313      	orrs	r3, r2
 8008250:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	01db      	lsls	r3, r3, #7
 800825c:	4413      	add	r3, r2
 800825e:	3384      	adds	r3, #132	; 0x84
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	4413      	add	r3, r2
 800826e:	3384      	adds	r3, #132	; 0x84
 8008270:	461a      	mov	r2, r3
 8008272:	2300      	movs	r3, #0
 8008274:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	4413      	add	r3, r2
 8008282:	3384      	adds	r3, #132	; 0x84
 8008284:	461a      	mov	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008294:	2304      	movs	r3, #4
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e01b      	b.n	80082d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d102      	bne.n	80082a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80082a2:	2303      	movs	r3, #3
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e014      	b.n	80082d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d00b      	beq.n	80082c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d007      	beq.n	80082c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d003      	beq.n	80082c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082c4:	2b07      	cmp	r3, #7
 80082c6:	d102      	bne.n	80082ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80082c8:	2302      	movs	r3, #2
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	e001      	b.n	80082d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	01db      	lsls	r3, r3, #7
 80082dc:	4413      	add	r3, r2
 80082de:	3384      	adds	r3, #132	; 0x84
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	4611      	mov	r1, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	01d2      	lsls	r2, r2, #7
 80082ec:	440a      	add	r2, r1
 80082ee:	3284      	adds	r2, #132	; 0x84
 80082f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80082f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	fb02 f303 	mul.w	r3, r2, r3
 8008300:	041a      	lsls	r2, r3, #16
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6859      	ldr	r1, [r3, #4]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1acb      	subs	r3, r1, r3
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	3307      	adds	r3, #7
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	6809      	ldr	r1, [r1, #0]
 8008318:	4608      	mov	r0, r1
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	01c9      	lsls	r1, r1, #7
 800831e:	4401      	add	r1, r0
 8008320:	3184      	adds	r1, #132	; 0x84
 8008322:	4313      	orrs	r3, r2
 8008324:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	01db      	lsls	r3, r3, #7
 8008330:	4413      	add	r3, r2
 8008332:	3384      	adds	r3, #132	; 0x84
 8008334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	01db      	lsls	r3, r3, #7
 8008340:	440b      	add	r3, r1
 8008342:	3384      	adds	r3, #132	; 0x84
 8008344:	4619      	mov	r1, r3
 8008346:	4b14      	ldr	r3, [pc, #80]	; (8008398 <LTDC_SetConfig+0x330>)
 8008348:	4013      	ands	r3, r2
 800834a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	01db      	lsls	r3, r3, #7
 8008356:	4413      	add	r3, r2
 8008358:	3384      	adds	r3, #132	; 0x84
 800835a:	461a      	mov	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	4413      	add	r3, r2
 800836e:	3384      	adds	r3, #132	; 0x84
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	4611      	mov	r1, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	01d2      	lsls	r2, r2, #7
 800837c:	440a      	add	r2, r1
 800837e:	3284      	adds	r2, #132	; 0x84
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6013      	str	r3, [r2, #0]
}
 8008386:	bf00      	nop
 8008388:	3724      	adds	r7, #36	; 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	fffff8f8 	.word	0xfffff8f8
 8008398:	fffff800 	.word	0xfffff800

0800839c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083a4:	f7fc fc90 	bl	8004cc8 <HAL_GetTick>
 80083a8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e03b      	b.n	800842c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0201 	bic.w	r2, r2, #1
 80083d2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80083d4:	e00f      	b.n	80083f6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80083d6:	f7fc fc77 	bl	8004cc8 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d908      	bls.n	80083f6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2240      	movs	r2, #64	; 0x40
 80083e8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2203      	movs	r2, #3
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e01a      	b.n	800842c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e8      	bne.n	80083d6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f86d 	bl	80084e4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e048      	b.n	80084d8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2200      	movs	r2, #0
 8008484:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	221f      	movs	r2, #31
 80084ac:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68d9      	ldr	r1, [r3, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800850a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008516:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008522:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	3b01      	subs	r3, #1
 800852a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800852c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008538:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800853a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d107      	bne.n	8008556 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691a      	ldr	r2, [r3, #16]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008554:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008562:	2b00      	cmp	r3, #0
 8008564:	da11      	bge.n	800858a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008574:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	425b      	negs	r3, r3
 800857c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	b292      	uxth	r2, r2
 8008586:	621a      	str	r2, [r3, #32]
 8008588:	e006      	b.n	8008598 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	b292      	uxth	r2, r2
 8008596:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	da15      	bge.n	80085cc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80085ae:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	425b      	negs	r3, r3
 80085b6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6a19      	ldr	r1, [r3, #32]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	041a      	lsls	r2, r3, #16
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	621a      	str	r2, [r3, #32]
 80085ca:	e009      	b.n	80085e0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6a19      	ldr	r1, [r3, #32]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	041a      	lsls	r2, r3, #16
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e8:	d006      	beq.n	80085f8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	629a      	str	r2, [r3, #40]	; 0x28
 80085f6:	e003      	b.n	8008600 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2200      	movs	r2, #0
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800861c:	4b19      	ldr	r3, [pc, #100]	; (8008684 <HAL_PWREx_ConfigSupply+0x70>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d00a      	beq.n	800863e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008628:	4b16      	ldr	r3, [pc, #88]	; (8008684 <HAL_PWREx_ConfigSupply+0x70>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0307 	and.w	r3, r3, #7
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d001      	beq.n	800863a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e01f      	b.n	800867a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e01d      	b.n	800867a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <HAL_PWREx_ConfigSupply+0x70>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f023 0207 	bic.w	r2, r3, #7
 8008646:	490f      	ldr	r1, [pc, #60]	; (8008684 <HAL_PWREx_ConfigSupply+0x70>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4313      	orrs	r3, r2
 800864c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800864e:	f7fc fb3b 	bl	8004cc8 <HAL_GetTick>
 8008652:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008654:	e009      	b.n	800866a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008656:	f7fc fb37 	bl	8004cc8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008664:	d901      	bls.n	800866a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e007      	b.n	800867a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_PWREx_ConfigSupply+0x70>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008676:	d1ee      	bne.n	8008656 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	58024800 	.word	0x58024800

08008688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f000 bc48 	b.w	8008f2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8088 	beq.w	80087ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086aa:	4b99      	ldr	r3, [pc, #612]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086b4:	4b96      	ldr	r3, [pc, #600]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d007      	beq.n	80086d0 <HAL_RCC_OscConfig+0x48>
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	2b18      	cmp	r3, #24
 80086c4:	d111      	bne.n	80086ea <HAL_RCC_OscConfig+0x62>
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d10c      	bne.n	80086ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d0:	4b8f      	ldr	r3, [pc, #572]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d06d      	beq.n	80087b8 <HAL_RCC_OscConfig+0x130>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d169      	bne.n	80087b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f000 bc21 	b.w	8008f2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f2:	d106      	bne.n	8008702 <HAL_RCC_OscConfig+0x7a>
 80086f4:	4b86      	ldr	r3, [pc, #536]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a85      	ldr	r2, [pc, #532]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80086fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	e02e      	b.n	8008760 <HAL_RCC_OscConfig+0xd8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10c      	bne.n	8008724 <HAL_RCC_OscConfig+0x9c>
 800870a:	4b81      	ldr	r3, [pc, #516]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a80      	ldr	r2, [pc, #512]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4b7e      	ldr	r3, [pc, #504]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7d      	ldr	r2, [pc, #500]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800871c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	e01d      	b.n	8008760 <HAL_RCC_OscConfig+0xd8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800872c:	d10c      	bne.n	8008748 <HAL_RCC_OscConfig+0xc0>
 800872e:	4b78      	ldr	r3, [pc, #480]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a77      	ldr	r2, [pc, #476]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	4b75      	ldr	r3, [pc, #468]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a74      	ldr	r2, [pc, #464]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	e00b      	b.n	8008760 <HAL_RCC_OscConfig+0xd8>
 8008748:	4b71      	ldr	r3, [pc, #452]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a70      	ldr	r2, [pc, #448]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800874e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	4b6e      	ldr	r3, [pc, #440]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6d      	ldr	r2, [pc, #436]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800875a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800875e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d013      	beq.n	8008790 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008768:	f7fc faae 	bl	8004cc8 <HAL_GetTick>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008770:	f7fc faaa 	bl	8004cc8 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b64      	cmp	r3, #100	; 0x64
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e3d4      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008782:	4b63      	ldr	r3, [pc, #396]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0f0      	beq.n	8008770 <HAL_RCC_OscConfig+0xe8>
 800878e:	e014      	b.n	80087ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fc fa9a 	bl	8004cc8 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008798:	f7fc fa96 	bl	8004cc8 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b64      	cmp	r3, #100	; 0x64
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e3c0      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087aa:	4b59      	ldr	r3, [pc, #356]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x110>
 80087b6:	e000      	b.n	80087ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80ca 	beq.w	800895c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c8:	4b51      	ldr	r3, [pc, #324]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <HAL_RCC_OscConfig+0x166>
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	2b18      	cmp	r3, #24
 80087e2:	d156      	bne.n	8008892 <HAL_RCC_OscConfig+0x20a>
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d151      	bne.n	8008892 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ee:	4b48      	ldr	r3, [pc, #288]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RCC_OscConfig+0x17e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e392      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008806:	4b42      	ldr	r3, [pc, #264]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 0219 	bic.w	r2, r3, #25
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	493f      	ldr	r1, [pc, #252]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008814:	4313      	orrs	r3, r2
 8008816:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008818:	f7fc fa56 	bl	8004cc8 <HAL_GetTick>
 800881c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008820:	f7fc fa52 	bl	8004cc8 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e37c      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008832:	4b37      	ldr	r3, [pc, #220]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800883e:	f7fc fa73 	bl	8004d28 <HAL_GetREVID>
 8008842:	4603      	mov	r3, r0
 8008844:	f241 0203 	movw	r2, #4099	; 0x1003
 8008848:	4293      	cmp	r3, r2
 800884a:	d817      	bhi.n	800887c <HAL_RCC_OscConfig+0x1f4>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d108      	bne.n	8008866 <HAL_RCC_OscConfig+0x1de>
 8008854:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800885c:	4a2c      	ldr	r2, [pc, #176]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800885e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008862:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008864:	e07a      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008866:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	031b      	lsls	r3, r3, #12
 8008874:	4926      	ldr	r1, [pc, #152]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 8008876:	4313      	orrs	r3, r2
 8008878:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800887a:	e06f      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887c:	4b24      	ldr	r3, [pc, #144]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	061b      	lsls	r3, r3, #24
 800888a:	4921      	ldr	r1, [pc, #132]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800888c:	4313      	orrs	r3, r2
 800888e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008890:	e064      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d047      	beq.n	800892a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800889a:	4b1d      	ldr	r3, [pc, #116]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 0219 	bic.w	r2, r3, #25
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	491a      	ldr	r1, [pc, #104]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fc fa0c 	bl	8004cc8 <HAL_GetTick>
 80088b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b4:	f7fc fa08 	bl	8004cc8 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e332      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088c6:	4b12      	ldr	r3, [pc, #72]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0304 	and.w	r3, r3, #4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d2:	f7fc fa29 	bl	8004d28 <HAL_GetREVID>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80088dc:	4293      	cmp	r3, r2
 80088de:	d819      	bhi.n	8008914 <HAL_RCC_OscConfig+0x28c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d108      	bne.n	80088fa <HAL_RCC_OscConfig+0x272>
 80088e8:	4b09      	ldr	r3, [pc, #36]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088f0:	4a07      	ldr	r2, [pc, #28]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80088f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f6:	6053      	str	r3, [r2, #4]
 80088f8:	e030      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	031b      	lsls	r3, r3, #12
 8008908:	4901      	ldr	r1, [pc, #4]	; (8008910 <HAL_RCC_OscConfig+0x288>)
 800890a:	4313      	orrs	r3, r2
 800890c:	604b      	str	r3, [r1, #4]
 800890e:	e025      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
 8008910:	58024400 	.word	0x58024400
 8008914:	4b9a      	ldr	r3, [pc, #616]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	4997      	ldr	r1, [pc, #604]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008924:	4313      	orrs	r3, r2
 8008926:	604b      	str	r3, [r1, #4]
 8008928:	e018      	b.n	800895c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800892a:	4b95      	ldr	r3, [pc, #596]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a94      	ldr	r2, [pc, #592]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008936:	f7fc f9c7 	bl	8004cc8 <HAL_GetTick>
 800893a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800893c:	e008      	b.n	8008950 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893e:	f7fc f9c3 	bl	8004cc8 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e2ed      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008950:	4b8b      	ldr	r3, [pc, #556]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f0      	bne.n	800893e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 80a9 	beq.w	8008abc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800896a:	4b85      	ldr	r3, [pc, #532]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008972:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008974:	4b82      	ldr	r3, [pc, #520]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d007      	beq.n	8008990 <HAL_RCC_OscConfig+0x308>
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b18      	cmp	r3, #24
 8008984:	d13a      	bne.n	80089fc <HAL_RCC_OscConfig+0x374>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d135      	bne.n	80089fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008990:	4b7b      	ldr	r3, [pc, #492]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_RCC_OscConfig+0x320>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d001      	beq.n	80089a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e2c1      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089a8:	f7fc f9be 	bl	8004d28 <HAL_GetREVID>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d817      	bhi.n	80089e6 <HAL_RCC_OscConfig+0x35e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d108      	bne.n	80089d0 <HAL_RCC_OscConfig+0x348>
 80089be:	4b70      	ldr	r3, [pc, #448]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089c6:	4a6e      	ldr	r2, [pc, #440]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ce:	e075      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089d0:	4b6b      	ldr	r3, [pc, #428]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	069b      	lsls	r3, r3, #26
 80089de:	4968      	ldr	r1, [pc, #416]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089e4:	e06a      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089e6:	4b66      	ldr	r3, [pc, #408]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	061b      	lsls	r3, r3, #24
 80089f4:	4962      	ldr	r1, [pc, #392]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089fa:	e05f      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d042      	beq.n	8008a8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a04:	4b5e      	ldr	r3, [pc, #376]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a5d      	ldr	r2, [pc, #372]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a10:	f7fc f95a 	bl	8004cc8 <HAL_GetTick>
 8008a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a18:	f7fc f956 	bl	8004cc8 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e280      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a2a:	4b55      	ldr	r3, [pc, #340]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a36:	f7fc f977 	bl	8004d28 <HAL_GetREVID>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d817      	bhi.n	8008a74 <HAL_RCC_OscConfig+0x3ec>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d108      	bne.n	8008a5e <HAL_RCC_OscConfig+0x3d6>
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a54:	4a4a      	ldr	r2, [pc, #296]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	e02e      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
 8008a5e:	4b48      	ldr	r3, [pc, #288]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	069b      	lsls	r3, r3, #26
 8008a6c:	4944      	ldr	r1, [pc, #272]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	604b      	str	r3, [r1, #4]
 8008a72:	e023      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
 8008a74:	4b42      	ldr	r3, [pc, #264]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	061b      	lsls	r3, r3, #24
 8008a82:	493f      	ldr	r1, [pc, #252]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60cb      	str	r3, [r1, #12]
 8008a88:	e018      	b.n	8008abc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a8a:	4b3d      	ldr	r3, [pc, #244]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a3c      	ldr	r2, [pc, #240]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a96:	f7fc f917 	bl	8004cc8 <HAL_GetTick>
 8008a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a9e:	f7fc f913 	bl	8004cc8 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d901      	bls.n	8008ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e23d      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ab0:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f0      	bne.n	8008a9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d036      	beq.n	8008b36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d019      	beq.n	8008b04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ad0:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad4:	4a2a      	ldr	r2, [pc, #168]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008adc:	f7fc f8f4 	bl	8004cc8 <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae4:	f7fc f8f0 	bl	8004cc8 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e21a      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008af6:	4b22      	ldr	r3, [pc, #136]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x45c>
 8008b02:	e018      	b.n	8008b36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b04:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b08:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b10:	f7fc f8da 	bl	8004cc8 <HAL_GetTick>
 8008b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b18:	f7fc f8d6 	bl	8004cc8 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e200      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1f0      	bne.n	8008b18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d039      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01c      	beq.n	8008b84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b56:	f7fc f8b7 	bl	8004cc8 <HAL_GetTick>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b5e:	f7fc f8b3 	bl	8004cc8 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e1dd      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b70:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <HAL_RCC_OscConfig+0x4f8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0f0      	beq.n	8008b5e <HAL_RCC_OscConfig+0x4d6>
 8008b7c:	e01b      	b.n	8008bb6 <HAL_RCC_OscConfig+0x52e>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b84:	4b9b      	ldr	r3, [pc, #620]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a9a      	ldr	r2, [pc, #616]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b90:	f7fc f89a 	bl	8004cc8 <HAL_GetTick>
 8008b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b98:	f7fc f896 	bl	8004cc8 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e1c0      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008baa:	4b92      	ldr	r3, [pc, #584]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f0      	bne.n	8008b98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 8081 	beq.w	8008cc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bc4:	4b8c      	ldr	r3, [pc, #560]	; (8008df8 <HAL_RCC_OscConfig+0x770>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a8b      	ldr	r2, [pc, #556]	; (8008df8 <HAL_RCC_OscConfig+0x770>)
 8008bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bd0:	f7fc f87a 	bl	8004cc8 <HAL_GetTick>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bd6:	e008      	b.n	8008bea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd8:	f7fc f876 	bl	8004cc8 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b64      	cmp	r3, #100	; 0x64
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e1a0      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bea:	4b83      	ldr	r3, [pc, #524]	; (8008df8 <HAL_RCC_OscConfig+0x770>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f0      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d106      	bne.n	8008c0c <HAL_RCC_OscConfig+0x584>
 8008bfe:	4b7d      	ldr	r3, [pc, #500]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	4a7c      	ldr	r2, [pc, #496]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	6713      	str	r3, [r2, #112]	; 0x70
 8008c0a:	e02d      	b.n	8008c68 <HAL_RCC_OscConfig+0x5e0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10c      	bne.n	8008c2e <HAL_RCC_OscConfig+0x5a6>
 8008c14:	4b77      	ldr	r3, [pc, #476]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c18:	4a76      	ldr	r2, [pc, #472]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c1a:	f023 0301 	bic.w	r3, r3, #1
 8008c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c20:	4b74      	ldr	r3, [pc, #464]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c24:	4a73      	ldr	r2, [pc, #460]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c26:	f023 0304 	bic.w	r3, r3, #4
 8008c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c2c:	e01c      	b.n	8008c68 <HAL_RCC_OscConfig+0x5e0>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d10c      	bne.n	8008c50 <HAL_RCC_OscConfig+0x5c8>
 8008c36:	4b6f      	ldr	r3, [pc, #444]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	4a6e      	ldr	r2, [pc, #440]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c3c:	f043 0304 	orr.w	r3, r3, #4
 8008c40:	6713      	str	r3, [r2, #112]	; 0x70
 8008c42:	4b6c      	ldr	r3, [pc, #432]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	4a6b      	ldr	r2, [pc, #428]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c4e:	e00b      	b.n	8008c68 <HAL_RCC_OscConfig+0x5e0>
 8008c50:	4b68      	ldr	r3, [pc, #416]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a67      	ldr	r2, [pc, #412]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5c:	4b65      	ldr	r3, [pc, #404]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	4a64      	ldr	r2, [pc, #400]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c62:	f023 0304 	bic.w	r3, r3, #4
 8008c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d015      	beq.n	8008c9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c70:	f7fc f82a 	bl	8004cc8 <HAL_GetTick>
 8008c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c78:	f7fc f826 	bl	8004cc8 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e14e      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0ee      	beq.n	8008c78 <HAL_RCC_OscConfig+0x5f0>
 8008c9a:	e014      	b.n	8008cc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c9c:	f7fc f814 	bl	8004cc8 <HAL_GetTick>
 8008ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ca2:	e00a      	b.n	8008cba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ca4:	f7fc f810 	bl	8004cc8 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e138      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cba:	4b4e      	ldr	r3, [pc, #312]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1ee      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 812d 	beq.w	8008f2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008cd0:	4b48      	ldr	r3, [pc, #288]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd8:	2b18      	cmp	r3, #24
 8008cda:	f000 80bd 	beq.w	8008e58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	f040 809e 	bne.w	8008e24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a41      	ldr	r2, [pc, #260]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf4:	f7fb ffe8 	bl	8004cc8 <HAL_GetTick>
 8008cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cfc:	f7fb ffe4 	bl	8004cc8 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e10e      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d0e:	4b39      	ldr	r3, [pc, #228]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d1a:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d1e:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <HAL_RCC_OscConfig+0x774>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d2a:	0112      	lsls	r2, r2, #4
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	4931      	ldr	r1, [pc, #196]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	628b      	str	r3, [r1, #40]	; 0x28
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	3b01      	subs	r3, #1
 8008d44:	025b      	lsls	r3, r3, #9
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	041b      	lsls	r3, r3, #16
 8008d52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d56:	431a      	orrs	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	061b      	lsls	r3, r3, #24
 8008d60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d64:	4923      	ldr	r1, [pc, #140]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d6a:	4b22      	ldr	r3, [pc, #136]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	4a21      	ldr	r2, [pc, #132]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d76:	4b1f      	ldr	r3, [pc, #124]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d7a:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <HAL_RCC_OscConfig+0x778>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d82:	00d2      	lsls	r2, r2, #3
 8008d84:	491b      	ldr	r1, [pc, #108]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	f023 020c 	bic.w	r2, r3, #12
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	4917      	ldr	r1, [pc, #92]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	f023 0202 	bic.w	r2, r3, #2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da8:	4912      	ldr	r1, [pc, #72]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	4a10      	ldr	r2, [pc, #64]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dba:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	4a0d      	ldr	r2, [pc, #52]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	4a0a      	ldr	r2, [pc, #40]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4a07      	ldr	r2, [pc, #28]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008dd8:	f043 0301 	orr.w	r3, r3, #1
 8008ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <HAL_RCC_OscConfig+0x76c>)
 8008de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dea:	f7fb ff6d 	bl	8004cc8 <HAL_GetTick>
 8008dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008df0:	e011      	b.n	8008e16 <HAL_RCC_OscConfig+0x78e>
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	58024800 	.word	0x58024800
 8008dfc:	fffffc0c 	.word	0xfffffc0c
 8008e00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e04:	f7fb ff60 	bl	8004cc8 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e08a      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e16:	4b47      	ldr	r3, [pc, #284]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x77c>
 8008e22:	e082      	b.n	8008f2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e24:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a42      	ldr	r2, [pc, #264]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fb ff4a 	bl	8004cc8 <HAL_GetTick>
 8008e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e38:	f7fb ff46 	bl	8004cc8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e070      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e4a:	4b3a      	ldr	r3, [pc, #232]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x7b0>
 8008e56:	e068      	b.n	8008f2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e58:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e5e:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d031      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f003 0203 	and.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d12a      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d122      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d11a      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	0a5b      	lsrs	r3, r3, #9
 8008e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d111      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d108      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d001      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e02b      	b.n	8008f2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008ed4:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	08db      	lsrs	r3, r3, #3
 8008eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ede:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d01f      	beq.n	8008f2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	4a11      	ldr	r2, [pc, #68]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ef6:	f7fb fee7 	bl	8004cc8 <HAL_GetTick>
 8008efa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008efc:	bf00      	nop
 8008efe:	f7fb fee3 	bl	8004cc8 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d0f9      	beq.n	8008efe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <HAL_RCC_OscConfig+0x8b0>)
 8008f10:	4013      	ands	r3, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f16:	00d2      	lsls	r2, r2, #3
 8008f18:	4906      	ldr	r1, [pc, #24]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	4a04      	ldr	r2, [pc, #16]	; (8008f34 <HAL_RCC_OscConfig+0x8ac>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	; 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	58024400 	.word	0x58024400
 8008f38:	ffff0007 	.word	0xffff0007

08008f3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e19c      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f50:	4b8a      	ldr	r3, [pc, #552]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 030f 	and.w	r3, r3, #15
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d910      	bls.n	8008f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f5e:	4b87      	ldr	r3, [pc, #540]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 020f 	bic.w	r2, r3, #15
 8008f66:	4985      	ldr	r1, [pc, #532]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6e:	4b83      	ldr	r3, [pc, #524]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d001      	beq.n	8008f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e184      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d010      	beq.n	8008fae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691a      	ldr	r2, [r3, #16]
 8008f90:	4b7b      	ldr	r3, [pc, #492]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d908      	bls.n	8008fae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f9c:	4b78      	ldr	r3, [pc, #480]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	4975      	ldr	r1, [pc, #468]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d010      	beq.n	8008fdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695a      	ldr	r2, [r3, #20]
 8008fbe:	4b70      	ldr	r3, [pc, #448]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d908      	bls.n	8008fdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fca:	4b6d      	ldr	r3, [pc, #436]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	496a      	ldr	r1, [pc, #424]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d010      	beq.n	800900a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	4b64      	ldr	r3, [pc, #400]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d908      	bls.n	800900a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ff8:	4b61      	ldr	r3, [pc, #388]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	495e      	ldr	r1, [pc, #376]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009006:	4313      	orrs	r3, r2
 8009008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d010      	beq.n	8009038 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69da      	ldr	r2, [r3, #28]
 800901a:	4b59      	ldr	r3, [pc, #356]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009022:	429a      	cmp	r2, r3
 8009024:	d908      	bls.n	8009038 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009026:	4b56      	ldr	r3, [pc, #344]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	4953      	ldr	r1, [pc, #332]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009034:	4313      	orrs	r3, r2
 8009036:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d010      	beq.n	8009066 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	4b4d      	ldr	r3, [pc, #308]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	429a      	cmp	r2, r3
 8009052:	d908      	bls.n	8009066 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009054:	4b4a      	ldr	r3, [pc, #296]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	f023 020f 	bic.w	r2, r3, #15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	4947      	ldr	r1, [pc, #284]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009062:	4313      	orrs	r3, r2
 8009064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d055      	beq.n	800911e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009072:	4b43      	ldr	r3, [pc, #268]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	4940      	ldr	r1, [pc, #256]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009080:	4313      	orrs	r3, r2
 8009082:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d107      	bne.n	800909c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800908c:	4b3c      	ldr	r3, [pc, #240]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d121      	bne.n	80090dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0f6      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d107      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090a4:	4b36      	ldr	r3, [pc, #216]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d115      	bne.n	80090dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0ea      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d107      	bne.n	80090cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090bc:	4b30      	ldr	r3, [pc, #192]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d109      	bne.n	80090dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0de      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090cc:	4b2c      	ldr	r3, [pc, #176]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0d6      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090dc:	4b28      	ldr	r3, [pc, #160]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f023 0207 	bic.w	r2, r3, #7
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4925      	ldr	r1, [pc, #148]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ee:	f7fb fdeb 	bl	8004cc8 <HAL_GetTick>
 80090f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090f4:	e00a      	b.n	800910c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090f6:	f7fb fde7 	bl	8004cc8 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	4293      	cmp	r3, r2
 8009106:	d901      	bls.n	800910c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e0be      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800910c:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	429a      	cmp	r2, r3
 800911c:	d1eb      	bne.n	80090f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d010      	beq.n	800914c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	429a      	cmp	r2, r3
 8009138:	d208      	bcs.n	800914c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800913a:	4b11      	ldr	r3, [pc, #68]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f023 020f 	bic.w	r2, r3, #15
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	490e      	ldr	r1, [pc, #56]	; (8009180 <HAL_RCC_ClockConfig+0x244>)
 8009148:	4313      	orrs	r3, r2
 800914a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800914c:	4b0b      	ldr	r3, [pc, #44]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d214      	bcs.n	8009184 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f023 020f 	bic.w	r2, r3, #15
 8009162:	4906      	ldr	r1, [pc, #24]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	4313      	orrs	r3, r2
 8009168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800916a:	4b04      	ldr	r3, [pc, #16]	; (800917c <HAL_RCC_ClockConfig+0x240>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d005      	beq.n	8009184 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e086      	b.n	800928a <HAL_RCC_ClockConfig+0x34e>
 800917c:	52002000 	.word	0x52002000
 8009180:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d010      	beq.n	80091b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800919c:	429a      	cmp	r2, r3
 800919e:	d208      	bcs.n	80091b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091a0:	4b3c      	ldr	r3, [pc, #240]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	4939      	ldr	r1, [pc, #228]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d010      	beq.n	80091e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	4b34      	ldr	r3, [pc, #208]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d208      	bcs.n	80091e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091ce:	4b31      	ldr	r3, [pc, #196]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	492e      	ldr	r1, [pc, #184]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d010      	beq.n	800920e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	4b28      	ldr	r3, [pc, #160]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d208      	bcs.n	800920e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	4922      	ldr	r1, [pc, #136]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 800920a:	4313      	orrs	r3, r2
 800920c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d010      	beq.n	800923c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69da      	ldr	r2, [r3, #28]
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009226:	429a      	cmp	r2, r3
 8009228:	d208      	bcs.n	800923c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	4917      	ldr	r1, [pc, #92]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 8009238:	4313      	orrs	r3, r2
 800923a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800923c:	f000 f834 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 8009240:	4602      	mov	r2, r0
 8009242:	4b14      	ldr	r3, [pc, #80]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	4912      	ldr	r1, [pc, #72]	; (8009298 <HAL_RCC_ClockConfig+0x35c>)
 800924e:	5ccb      	ldrb	r3, [r1, r3]
 8009250:	f003 031f 	and.w	r3, r3, #31
 8009254:	fa22 f303 	lsr.w	r3, r2, r3
 8009258:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800925a:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <HAL_RCC_ClockConfig+0x358>)
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <HAL_RCC_ClockConfig+0x35c>)
 8009264:	5cd3      	ldrb	r3, [r2, r3]
 8009266:	f003 031f 	and.w	r3, r3, #31
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	fa22 f303 	lsr.w	r3, r2, r3
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <HAL_RCC_ClockConfig+0x360>)
 8009272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009274:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <HAL_RCC_ClockConfig+0x364>)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800927a:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <HAL_RCC_ClockConfig+0x368>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7fb fcd8 	bl	8004c34 <HAL_InitTick>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	58024400 	.word	0x58024400
 8009298:	08011820 	.word	0x08011820
 800929c:	20000004 	.word	0x20000004
 80092a0:	20000000 	.word	0x20000000
 80092a4:	20000068 	.word	0x20000068

080092a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b089      	sub	sp, #36	; 0x24
 80092ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092ae:	4bb3      	ldr	r3, [pc, #716]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092b6:	2b18      	cmp	r3, #24
 80092b8:	f200 8155 	bhi.w	8009566 <HAL_RCC_GetSysClockFreq+0x2be>
 80092bc:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	08009329 	.word	0x08009329
 80092c8:	08009567 	.word	0x08009567
 80092cc:	08009567 	.word	0x08009567
 80092d0:	08009567 	.word	0x08009567
 80092d4:	08009567 	.word	0x08009567
 80092d8:	08009567 	.word	0x08009567
 80092dc:	08009567 	.word	0x08009567
 80092e0:	08009567 	.word	0x08009567
 80092e4:	0800934f 	.word	0x0800934f
 80092e8:	08009567 	.word	0x08009567
 80092ec:	08009567 	.word	0x08009567
 80092f0:	08009567 	.word	0x08009567
 80092f4:	08009567 	.word	0x08009567
 80092f8:	08009567 	.word	0x08009567
 80092fc:	08009567 	.word	0x08009567
 8009300:	08009567 	.word	0x08009567
 8009304:	08009355 	.word	0x08009355
 8009308:	08009567 	.word	0x08009567
 800930c:	08009567 	.word	0x08009567
 8009310:	08009567 	.word	0x08009567
 8009314:	08009567 	.word	0x08009567
 8009318:	08009567 	.word	0x08009567
 800931c:	08009567 	.word	0x08009567
 8009320:	08009567 	.word	0x08009567
 8009324:	0800935b 	.word	0x0800935b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009328:	4b94      	ldr	r3, [pc, #592]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009334:	4b91      	ldr	r3, [pc, #580]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	08db      	lsrs	r3, r3, #3
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	4a90      	ldr	r2, [pc, #576]	; (8009580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009340:	fa22 f303 	lsr.w	r3, r2, r3
 8009344:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009346:	e111      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009348:	4b8d      	ldr	r3, [pc, #564]	; (8009580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800934a:	61bb      	str	r3, [r7, #24]
      break;
 800934c:	e10e      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800934e:	4b8d      	ldr	r3, [pc, #564]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009350:	61bb      	str	r3, [r7, #24]
      break;
 8009352:	e10b      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009354:	4b8c      	ldr	r3, [pc, #560]	; (8009588 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009356:	61bb      	str	r3, [r7, #24]
      break;
 8009358:	e108      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800935a:	4b88      	ldr	r3, [pc, #544]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009364:	4b85      	ldr	r3, [pc, #532]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	091b      	lsrs	r3, r3, #4
 800936a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800936e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009370:	4b82      	ldr	r3, [pc, #520]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800937a:	4b80      	ldr	r3, [pc, #512]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009392:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80e1 	beq.w	8009560 <HAL_RCC_GetSysClockFreq+0x2b8>
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	f000 8083 	beq.w	80094ac <HAL_RCC_GetSysClockFreq+0x204>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	f200 80a1 	bhi.w	80094f0 <HAL_RCC_GetSysClockFreq+0x248>
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_RCC_GetSysClockFreq+0x114>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d056      	beq.n	8009468 <HAL_RCC_GetSysClockFreq+0x1c0>
 80093ba:	e099      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093bc:	4b6f      	ldr	r3, [pc, #444]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0320 	and.w	r3, r3, #32
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d02d      	beq.n	8009424 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093c8:	4b6c      	ldr	r3, [pc, #432]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	08db      	lsrs	r3, r3, #3
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	4a6b      	ldr	r2, [pc, #428]	; (8009580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093d4:	fa22 f303 	lsr.w	r3, r2, r3
 80093d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	ee07 3a90 	vmov	s15, r3
 80093e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f2:	4b62      	ldr	r3, [pc, #392]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009402:	ed97 6a02 	vldr	s12, [r7, #8]
 8009406:	eddf 5a61 	vldr	s11, [pc, #388]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e4>
 800940a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009422:	e087      	b.n	8009534 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009590 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b51      	ldr	r3, [pc, #324]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a02 	vldr	s12, [r7, #8]
 800944a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e4>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009466:	e065      	b.n	8009534 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b40      	ldr	r3, [pc, #256]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a02 	vldr	s12, [r7, #8]
 800948e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094aa:	e043      	b.n	8009534 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009598 <HAL_RCC_GetSysClockFreq+0x2f0>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b2f      	ldr	r3, [pc, #188]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ee:	e021      	b.n	8009534 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b1e      	ldr	r3, [pc, #120]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a02 	vldr	s12, [r7, #8]
 8009516:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e4>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009532:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009534:	4b11      	ldr	r3, [pc, #68]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	0a5b      	lsrs	r3, r3, #9
 800953a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800953e:	3301      	adds	r3, #1
 8009540:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800954c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009558:	ee17 3a90 	vmov	r3, s15
 800955c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800955e:	e005      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	61bb      	str	r3, [r7, #24]
      break;
 8009564:	e002      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009568:	61bb      	str	r3, [r7, #24]
      break;
 800956a:	bf00      	nop
  }

  return sysclockfreq;
 800956c:	69bb      	ldr	r3, [r7, #24]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3724      	adds	r7, #36	; 0x24
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	58024400 	.word	0x58024400
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900
 8009588:	017d7840 	.word	0x017d7840
 800958c:	46000000 	.word	0x46000000
 8009590:	4c742400 	.word	0x4c742400
 8009594:	4a742400 	.word	0x4a742400
 8009598:	4bbebc20 	.word	0x4bbebc20

0800959c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095a2:	f7ff fe81 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 80095a6:	4602      	mov	r2, r0
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <HAL_RCC_GetHCLKFreq+0x50>)
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	490f      	ldr	r1, [pc, #60]	; (80095f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80095b4:	5ccb      	ldrb	r3, [r1, r3]
 80095b6:	f003 031f 	and.w	r3, r3, #31
 80095ba:	fa22 f303 	lsr.w	r3, r2, r3
 80095be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <HAL_RCC_GetHCLKFreq+0x50>)
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80095ca:	5cd3      	ldrb	r3, [r2, r3]
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	fa22 f303 	lsr.w	r3, r2, r3
 80095d6:	4a07      	ldr	r2, [pc, #28]	; (80095f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80095d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095da:	4a07      	ldr	r2, [pc, #28]	; (80095f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80095e2:	681b      	ldr	r3, [r3, #0]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	58024400 	.word	0x58024400
 80095f0:	08011820 	.word	0x08011820
 80095f4:	20000004 	.word	0x20000004
 80095f8:	20000000 	.word	0x20000000

080095fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009600:	f7ff ffcc 	bl	800959c <HAL_RCC_GetHCLKFreq>
 8009604:	4602      	mov	r2, r0
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	091b      	lsrs	r3, r3, #4
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009612:	5ccb      	ldrb	r3, [r1, r3]
 8009614:	f003 031f 	and.w	r3, r3, #31
 8009618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800961c:	4618      	mov	r0, r3
 800961e:	bd80      	pop	{r7, pc}
 8009620:	58024400 	.word	0x58024400
 8009624:	08011820 	.word	0x08011820

08009628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800962c:	f7ff ffb6 	bl	800959c <HAL_RCC_GetHCLKFreq>
 8009630:	4602      	mov	r2, r0
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	4904      	ldr	r1, [pc, #16]	; (8009650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800963e:	5ccb      	ldrb	r3, [r1, r3]
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd80      	pop	{r7, pc}
 800964c:	58024400 	.word	0x58024400
 8009650:	08011820 	.word	0x08011820

08009654 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009658:	b0ca      	sub	sp, #296	; 0x128
 800965a:	af00      	add	r7, sp, #0
 800965c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009660:	2300      	movs	r3, #0
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009666:	2300      	movs	r3, #0
 8009668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800966c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009678:	2500      	movs	r5, #0
 800967a:	ea54 0305 	orrs.w	r3, r4, r5
 800967e:	d049      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800968a:	d02f      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800968c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009690:	d828      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009696:	d01a      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800969c:	d822      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80096a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096a6:	d007      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096a8:	e01c      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096aa:	4bb8      	ldr	r3, [pc, #736]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	4ab7      	ldr	r2, [pc, #732]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096b6:	e01a      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	3308      	adds	r3, #8
 80096be:	2102      	movs	r1, #2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 fc8f 	bl	800afe4 <RCCEx_PLL2_Config>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096cc:	e00f      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d2:	3328      	adds	r3, #40	; 0x28
 80096d4:	2102      	movs	r1, #2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 fd36 	bl	800b148 <RCCEx_PLL3_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096e2:	e004      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ea:	e000      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096f6:	4ba5      	ldr	r3, [pc, #660]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009704:	4aa1      	ldr	r2, [pc, #644]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009706:	430b      	orrs	r3, r1
 8009708:	6513      	str	r3, [r2, #80]	; 0x50
 800970a:	e003      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009720:	f04f 0900 	mov.w	r9, #0
 8009724:	ea58 0309 	orrs.w	r3, r8, r9
 8009728:	d047      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009730:	2b04      	cmp	r3, #4
 8009732:	d82a      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	08009751 	.word	0x08009751
 8009740:	0800975f 	.word	0x0800975f
 8009744:	08009775 	.word	0x08009775
 8009748:	08009793 	.word	0x08009793
 800974c:	08009793 	.word	0x08009793
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009750:	4b8e      	ldr	r3, [pc, #568]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	4a8d      	ldr	r2, [pc, #564]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800975a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800975c:	e01a      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009762:	3308      	adds	r3, #8
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f001 fc3c 	bl	800afe4 <RCCEx_PLL2_Config>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009772:	e00f      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009778:	3328      	adds	r3, #40	; 0x28
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f001 fce3 	bl	800b148 <RCCEx_PLL3_Config>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009788:	e004      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009790:	e000      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800979c:	4b7b      	ldr	r3, [pc, #492]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	f023 0107 	bic.w	r1, r3, #7
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	4a78      	ldr	r2, [pc, #480]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ac:	430b      	orrs	r3, r1
 80097ae:	6513      	str	r3, [r2, #80]	; 0x50
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80097c6:	f04f 0b00 	mov.w	fp, #0
 80097ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80097ce:	d04c      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097da:	d030      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e0:	d829      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097e2:	2bc0      	cmp	r3, #192	; 0xc0
 80097e4:	d02d      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097e6:	2bc0      	cmp	r3, #192	; 0xc0
 80097e8:	d825      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d018      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d821      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d007      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80097fa:	e01c      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fc:	4b63      	ldr	r3, [pc, #396]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	4a62      	ldr	r2, [pc, #392]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009808:	e01c      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	3308      	adds	r3, #8
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f001 fbe6 	bl	800afe4 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800981e:	e011      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009824:	3328      	adds	r3, #40	; 0x28
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f001 fc8d 	bl	800b148 <RCCEx_PLL3_Config>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009834:	e006      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800984c:	4b4f      	ldr	r3, [pc, #316]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985a:	4a4c      	ldr	r2, [pc, #304]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800985c:	430b      	orrs	r3, r1
 800985e:	6513      	str	r3, [r2, #80]	; 0x50
 8009860:	e003      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009876:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800987a:	2300      	movs	r3, #0
 800987c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009880:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009884:	460b      	mov	r3, r1
 8009886:	4313      	orrs	r3, r2
 8009888:	d053      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009896:	d035      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800989c:	d82e      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800989e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a2:	d031      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80098a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a8:	d828      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ae:	d01a      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80098b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b4:	d822      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80098ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098be:	d007      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80098c0:	e01c      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c2:	4b32      	ldr	r3, [pc, #200]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	4a31      	ldr	r2, [pc, #196]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ce:	e01c      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	3308      	adds	r3, #8
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fb83 	bl	800afe4 <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098e4:	e011      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ea:	3328      	adds	r3, #40	; 0x28
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 fc2a 	bl	800b148 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fa:	e006      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009902:	e002      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800990a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009912:	4b1e      	ldr	r3, [pc, #120]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800991a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009922:	4a1a      	ldr	r2, [pc, #104]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009924:	430b      	orrs	r3, r1
 8009926:	6593      	str	r3, [r2, #88]	; 0x58
 8009928:	e003      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800993e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009948:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800994c:	460b      	mov	r3, r1
 800994e:	4313      	orrs	r3, r2
 8009950:	d056      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800995a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800995e:	d038      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009964:	d831      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800996a:	d034      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800996c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009970:	d82b      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009976:	d01d      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800997c:	d825      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009986:	d00a      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009988:	e01f      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4ba2      	ldr	r3, [pc, #648]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4aa1      	ldr	r2, [pc, #644]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800999c:	e01c      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	3308      	adds	r3, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fb1c 	bl	800afe4 <RCCEx_PLL2_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099b2:	e011      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b8:	3328      	adds	r3, #40	; 0x28
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fbc3 	bl	800b148 <RCCEx_PLL3_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099c8:	e006      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099e0:	4b8e      	ldr	r3, [pc, #568]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099f0:	4a8a      	ldr	r2, [pc, #552]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099f2:	430b      	orrs	r3, r1
 80099f4:	6593      	str	r3, [r2, #88]	; 0x58
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a10:	2300      	movs	r3, #0
 8009a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d03a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	2b30      	cmp	r3, #48	; 0x30
 8009a28:	d01f      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009a2a:	2b30      	cmp	r3, #48	; 0x30
 8009a2c:	d819      	bhi.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	d00c      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d815      	bhi.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d019      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d111      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3e:	4b77      	ldr	r3, [pc, #476]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	4a76      	ldr	r2, [pc, #472]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a4a:	e011      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a50:	3308      	adds	r3, #8
 8009a52:	2102      	movs	r1, #2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fac5 	bl	800afe4 <RCCEx_PLL2_Config>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a60:	e006      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a68:	e002      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a78:	4b68      	ldr	r3, [pc, #416]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	4a65      	ldr	r2, [pc, #404]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a8c:	e003      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009aac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	d051      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac0:	d035      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac6:	d82e      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009acc:	d031      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ad2:	d828      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d01a      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	d822      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	d007      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009aea:	e01c      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aec:	4b4b      	ldr	r3, [pc, #300]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	4a4a      	ldr	r2, [pc, #296]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009af8:	e01c      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afe:	3308      	adds	r3, #8
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fa6e 	bl	800afe4 <RCCEx_PLL2_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b0e:	e011      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b14:	3328      	adds	r3, #40	; 0x28
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fb15 	bl	800b148 <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b24:	e006      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b3c:	4b37      	ldr	r3, [pc, #220]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b40:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4a:	4a34      	ldr	r2, [pc, #208]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009b74:	460b      	mov	r3, r1
 8009b76:	4313      	orrs	r3, r2
 8009b78:	d056      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b84:	d033      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009b86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b8a:	d82c      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b90:	d02f      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b96:	d826      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b9c:	d02b      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009b9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ba2:	d820      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba8:	d012      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bae:	d81a      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d022      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb8:	d115      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 fa0e 	bl	800afe4 <RCCEx_PLL2_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009bce:	e015      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	3328      	adds	r3, #40	; 0x28
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f001 fab5 	bl	800b148 <RCCEx_PLL3_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009be4:	e00a      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bee:	bf00      	nop
 8009bf0:	e004      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bf2:	bf00      	nop
 8009bf4:	e002      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bf6:	bf00      	nop
 8009bf8:	e000      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10d      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c12:	4a02      	ldr	r2, [pc, #8]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c14:	430b      	orrs	r3, r1
 8009c16:	6513      	str	r3, [r2, #80]	; 0x50
 8009c18:	e006      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c1a:	bf00      	nop
 8009c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d055      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c54:	d033      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5a:	d82c      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d02f      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c66:	d826      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c6c:	d02b      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c72:	d820      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c78:	d012      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d81a      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d022      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c88:	d115      	bne.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2101      	movs	r1, #1
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 f9a6 	bl	800afe4 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c9e:	e015      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca4:	3328      	adds	r3, #40	; 0x28
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 fa4d 	bl	800b148 <RCCEx_PLL3_Config>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cb4:	e00a      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cbc:	e006      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cbe:	bf00      	nop
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10b      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cd4:	4ba3      	ldr	r3, [pc, #652]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ce4:	4a9f      	ldr	r2, [pc, #636]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8009cea:	e003      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d037      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d1e:	d00e      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d24:	d816      	bhi.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d018      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d2e:	d111      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d30:	4b8c      	ldr	r3, [pc, #560]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a8b      	ldr	r2, [pc, #556]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d3c:	e00f      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d42:	3308      	adds	r3, #8
 8009d44:	2101      	movs	r1, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f94c 	bl	800afe4 <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d52:	e004      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d5a:	e000      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d66:	4b7f      	ldr	r3, [pc, #508]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	4a7b      	ldr	r2, [pc, #492]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d76:	430b      	orrs	r3, r1
 8009d78:	6513      	str	r3, [r2, #80]	; 0x50
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d039      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d81c      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009dae:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009df1 	.word	0x08009df1
 8009db8:	08009dc5 	.word	0x08009dc5
 8009dbc:	08009dd3 	.word	0x08009dd3
 8009dc0:	08009df1 	.word	0x08009df1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc4:	4b67      	ldr	r3, [pc, #412]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a66      	ldr	r2, [pc, #408]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009dd0:	e00f      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	2102      	movs	r1, #2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 f902 	bl	800afe4 <RCCEx_PLL2_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009de6:	e004      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dee:	e000      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009dfa:	4b5a      	ldr	r3, [pc, #360]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfe:	f023 0103 	bic.w	r1, r3, #3
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e08:	4a56      	ldr	r2, [pc, #344]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e0e:	e003      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f000 809f 	beq.w	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e3a:	4b4b      	ldr	r3, [pc, #300]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a4a      	ldr	r2, [pc, #296]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e46:	f7fa ff3f 	bl	8004cc8 <HAL_GetTick>
 8009e4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e4e:	e00b      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e50:	f7fa ff3a 	bl	8004cc8 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b64      	cmp	r3, #100	; 0x64
 8009e5e:	d903      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e66:	e005      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e68:	4b3f      	ldr	r3, [pc, #252]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0ed      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d179      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e7c:	4b39      	ldr	r3, [pc, #228]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e88:	4053      	eors	r3, r2
 8009e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d015      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e92:	4b34      	ldr	r3, [pc, #208]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e9e:	4b31      	ldr	r3, [pc, #196]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	4a30      	ldr	r2, [pc, #192]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009eaa:	4b2e      	ldr	r3, [pc, #184]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eae:	4a2d      	ldr	r2, [pc, #180]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009eb6:	4a2b      	ldr	r2, [pc, #172]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ebc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eca:	d118      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7fa fefc 	bl	8004cc8 <HAL_GetTick>
 8009ed0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ed4:	e00d      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed6:	f7fa fef7 	bl	8004cc8 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ee0:	1ad2      	subs	r2, r2, r3
 8009ee2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d903      	bls.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ef0:	e005      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0eb      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d129      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f16:	d10e      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f28:	091a      	lsrs	r2, r3, #4
 8009f2a:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	4a0d      	ldr	r2, [pc, #52]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6113      	str	r3, [r2, #16]
 8009f34:	e005      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f40:	6113      	str	r3, [r2, #16]
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f52:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f54:	430b      	orrs	r3, r1
 8009f56:	6713      	str	r3, [r2, #112]	; 0x70
 8009f58:	e00e      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009f62:	e009      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009f64:	58024400 	.word	0x58024400
 8009f68:	58024800 	.word	0x58024800
 8009f6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f002 0301 	and.w	r3, r2, #1
 8009f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f000 8089 	beq.w	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa0:	2b28      	cmp	r3, #40	; 0x28
 8009fa2:	d86b      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009fa4:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	0800a085 	.word	0x0800a085
 8009fb0:	0800a07d 	.word	0x0800a07d
 8009fb4:	0800a07d 	.word	0x0800a07d
 8009fb8:	0800a07d 	.word	0x0800a07d
 8009fbc:	0800a07d 	.word	0x0800a07d
 8009fc0:	0800a07d 	.word	0x0800a07d
 8009fc4:	0800a07d 	.word	0x0800a07d
 8009fc8:	0800a07d 	.word	0x0800a07d
 8009fcc:	0800a051 	.word	0x0800a051
 8009fd0:	0800a07d 	.word	0x0800a07d
 8009fd4:	0800a07d 	.word	0x0800a07d
 8009fd8:	0800a07d 	.word	0x0800a07d
 8009fdc:	0800a07d 	.word	0x0800a07d
 8009fe0:	0800a07d 	.word	0x0800a07d
 8009fe4:	0800a07d 	.word	0x0800a07d
 8009fe8:	0800a07d 	.word	0x0800a07d
 8009fec:	0800a067 	.word	0x0800a067
 8009ff0:	0800a07d 	.word	0x0800a07d
 8009ff4:	0800a07d 	.word	0x0800a07d
 8009ff8:	0800a07d 	.word	0x0800a07d
 8009ffc:	0800a07d 	.word	0x0800a07d
 800a000:	0800a07d 	.word	0x0800a07d
 800a004:	0800a07d 	.word	0x0800a07d
 800a008:	0800a07d 	.word	0x0800a07d
 800a00c:	0800a085 	.word	0x0800a085
 800a010:	0800a07d 	.word	0x0800a07d
 800a014:	0800a07d 	.word	0x0800a07d
 800a018:	0800a07d 	.word	0x0800a07d
 800a01c:	0800a07d 	.word	0x0800a07d
 800a020:	0800a07d 	.word	0x0800a07d
 800a024:	0800a07d 	.word	0x0800a07d
 800a028:	0800a07d 	.word	0x0800a07d
 800a02c:	0800a085 	.word	0x0800a085
 800a030:	0800a07d 	.word	0x0800a07d
 800a034:	0800a07d 	.word	0x0800a07d
 800a038:	0800a07d 	.word	0x0800a07d
 800a03c:	0800a07d 	.word	0x0800a07d
 800a040:	0800a07d 	.word	0x0800a07d
 800a044:	0800a07d 	.word	0x0800a07d
 800a048:	0800a07d 	.word	0x0800a07d
 800a04c:	0800a085 	.word	0x0800a085
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a054:	3308      	adds	r3, #8
 800a056:	2101      	movs	r1, #1
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 ffc3 	bl	800afe4 <RCCEx_PLL2_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a064:	e00f      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06a:	3328      	adds	r3, #40	; 0x28
 800a06c:	2101      	movs	r1, #1
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 f86a 	bl	800b148 <RCCEx_PLL3_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a07a:	e004      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a082:	e000      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a08e:	4bbf      	ldr	r3, [pc, #764]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a092:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09c:	4abb      	ldr	r2, [pc, #748]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6553      	str	r3, [r2, #84]	; 0x54
 800a0a2:	e003      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f002 0302 	and.w	r3, r2, #2
 800a0b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	d041      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d824      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a129 	.word	0x0800a129
 800a0e0:	0800a0f5 	.word	0x0800a0f5
 800a0e4:	0800a10b 	.word	0x0800a10b
 800a0e8:	0800a129 	.word	0x0800a129
 800a0ec:	0800a129 	.word	0x0800a129
 800a0f0:	0800a129 	.word	0x0800a129
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 ff71 	bl	800afe4 <RCCEx_PLL2_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a108:	e00f      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10e:	3328      	adds	r3, #40	; 0x28
 800a110:	2101      	movs	r1, #1
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f818 	bl	800b148 <RCCEx_PLL3_Config>
 800a118:	4603      	mov	r3, r0
 800a11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a11e:	e004      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a126:	e000      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a132:	4b96      	ldr	r3, [pc, #600]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	f023 0107 	bic.w	r1, r3, #7
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a140:	4a92      	ldr	r2, [pc, #584]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a142:	430b      	orrs	r3, r1
 800a144:	6553      	str	r3, [r2, #84]	; 0x54
 800a146:	e003      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f002 0304 	and.w	r3, r2, #4
 800a15c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a166:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d044      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d825      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a1d1 	.word	0x0800a1d1
 800a188:	0800a19d 	.word	0x0800a19d
 800a18c:	0800a1b3 	.word	0x0800a1b3
 800a190:	0800a1d1 	.word	0x0800a1d1
 800a194:	0800a1d1 	.word	0x0800a1d1
 800a198:	0800a1d1 	.word	0x0800a1d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 ff1d 	bl	800afe4 <RCCEx_PLL2_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1b0:	e00f      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	3328      	adds	r3, #40	; 0x28
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 ffc4 	bl	800b148 <RCCEx_PLL3_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e004      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1ce:	e000      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1da:	4b6c      	ldr	r3, [pc, #432]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1de:	f023 0107 	bic.w	r1, r3, #7
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ea:	4a68      	ldr	r2, [pc, #416]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a1f0:	e003      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f002 0320 	and.w	r3, r2, #32
 800a206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a20a:	2300      	movs	r3, #0
 800a20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a214:	460b      	mov	r3, r1
 800a216:	4313      	orrs	r3, r2
 800a218:	d055      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a226:	d033      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a22c:	d82c      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a232:	d02f      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a238:	d826      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a23a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a23e:	d02b      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a244:	d820      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a24a:	d012      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a250:	d81a      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d022      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a25a:	d115      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	3308      	adds	r3, #8
 800a262:	2100      	movs	r1, #0
 800a264:	4618      	mov	r0, r3
 800a266:	f000 febd 	bl	800afe4 <RCCEx_PLL2_Config>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a270:	e015      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	3328      	adds	r3, #40	; 0x28
 800a278:	2102      	movs	r1, #2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 ff64 	bl	800b148 <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a286:	e00a      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a28e:	e006      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a290:	bf00      	nop
 800a292:	e004      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a294:	bf00      	nop
 800a296:	e002      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a298:	bf00      	nop
 800a29a:	e000      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2a6:	4b39      	ldr	r3, [pc, #228]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b6:	4a35      	ldr	r2, [pc, #212]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	6553      	str	r3, [r2, #84]	; 0x54
 800a2bc:	e003      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a2d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	d058      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f2:	d033      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a2f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f8:	d82c      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fe:	d02f      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a304:	d826      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a30a:	d02b      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a30c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a310:	d820      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a316:	d012      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31c:	d81a      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d022      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a326:	d115      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32c:	3308      	adds	r3, #8
 800a32e:	2100      	movs	r1, #0
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fe57 	bl	800afe4 <RCCEx_PLL2_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a33c:	e015      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a342:	3328      	adds	r3, #40	; 0x28
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fefe 	bl	800b148 <RCCEx_PLL3_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a352:	e00a      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a35a:	e006      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a35c:	bf00      	nop
 800a35e:	e004      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a360:	bf00      	nop
 800a362:	e002      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a364:	bf00      	nop
 800a366:	e000      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a36a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10e      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a372:	4b06      	ldr	r3, [pc, #24]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a376:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a382:	4a02      	ldr	r2, [pc, #8]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a384:	430b      	orrs	r3, r1
 800a386:	6593      	str	r3, [r2, #88]	; 0x58
 800a388:	e006      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a38a:	bf00      	nop
 800a38c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a3a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d055      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3c4:	d033      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a3c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3ca:	d82c      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d0:	d02f      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a3d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d6:	d826      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3dc:	d02b      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a3de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3e2:	d820      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e8:	d012      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a3ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ee:	d81a      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d022      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a3f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f8:	d115      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	3308      	adds	r3, #8
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fdee 	bl	800afe4 <RCCEx_PLL2_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a40e:	e015      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a414:	3328      	adds	r3, #40	; 0x28
 800a416:	2102      	movs	r1, #2
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fe95 	bl	800b148 <RCCEx_PLL3_Config>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a424:	e00a      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a42c:	e006      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a42e:	bf00      	nop
 800a430:	e004      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a432:	bf00      	nop
 800a434:	e002      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a436:	bf00      	nop
 800a438:	e000      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a444:	4ba1      	ldr	r3, [pc, #644]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a448:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a454:	4a9d      	ldr	r2, [pc, #628]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a456:	430b      	orrs	r3, r1
 800a458:	6593      	str	r3, [r2, #88]	; 0x58
 800a45a:	e003      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f002 0308 	and.w	r3, r2, #8
 800a470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a474:	2300      	movs	r3, #0
 800a476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a47a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a47e:	460b      	mov	r3, r1
 800a480:	4313      	orrs	r3, r2
 800a482:	d01e      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a490:	d10c      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a496:	3328      	adds	r3, #40	; 0x28
 800a498:	2102      	movs	r1, #2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fe54 	bl	800b148 <RCCEx_PLL3_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4ac:	4b87      	ldr	r3, [pc, #540]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	4a83      	ldr	r2, [pc, #524]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f002 0310 	and.w	r3, r2, #16
 800a4ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a4d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	d01e      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	d10c      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f4:	3328      	adds	r3, #40	; 0x28
 800a4f6:	2102      	movs	r1, #2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fe25 	bl	800b148 <RCCEx_PLL3_Config>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a50a:	4b70      	ldr	r3, [pc, #448]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a51a:	4a6c      	ldr	r2, [pc, #432]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a52c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a530:	2300      	movs	r3, #0
 800a532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a536:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a53a:	460b      	mov	r3, r1
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d03e      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d022      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a552:	d81b      	bhi.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55c:	d00b      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a55e:	e015      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a564:	3308      	adds	r3, #8
 800a566:	2100      	movs	r1, #0
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fd3b 	bl	800afe4 <RCCEx_PLL2_Config>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a574:	e00f      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57a:	3328      	adds	r3, #40	; 0x28
 800a57c:	2102      	movs	r1, #2
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 fde2 	bl	800b148 <RCCEx_PLL3_Config>
 800a584:	4603      	mov	r3, r0
 800a586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a58a:	e004      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a592:	e000      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a594:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10b      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a59e:	4b4b      	ldr	r3, [pc, #300]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5ae:	4a47      	ldr	r2, [pc, #284]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a5b4:	e003      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a5ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	d03b      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5e6:	d01f      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a5e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5ec:	d818      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f2:	d003      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a5f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5f8:	d007      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a5fa:	e011      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5fc:	4b33      	ldr	r3, [pc, #204]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4a32      	ldr	r2, [pc, #200]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a608:	e00f      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60e:	3328      	adds	r3, #40	; 0x28
 800a610:	2101      	movs	r1, #1
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fd98 	bl	800b148 <RCCEx_PLL3_Config>
 800a618:	4603      	mov	r3, r0
 800a61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a61e:	e004      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a626:	e000      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a632:	4b26      	ldr	r3, [pc, #152]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a636:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a642:	4a22      	ldr	r2, [pc, #136]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a644:	430b      	orrs	r3, r1
 800a646:	6553      	str	r3, [r2, #84]	; 0x54
 800a648:	e003      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a64e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a65e:	673b      	str	r3, [r7, #112]	; 0x70
 800a660:	2300      	movs	r3, #0
 800a662:	677b      	str	r3, [r7, #116]	; 0x74
 800a664:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a668:	460b      	mov	r3, r1
 800a66a:	4313      	orrs	r3, r2
 800a66c:	d034      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67c:	d007      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a67e:	e011      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a680:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a11      	ldr	r2, [pc, #68]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a68c:	e00e      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a692:	3308      	adds	r3, #8
 800a694:	2102      	movs	r1, #2
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fca4 	bl	800afe4 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6a2:	e003      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10d      	bne.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a6b4:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c2:	4a02      	ldr	r2, [pc, #8]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6c8:	e006      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a6ca:	bf00      	nop
 800a6cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a6e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	d00c      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	3328      	adds	r3, #40	; 0x28
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fd23 	bl	800b148 <RCCEx_PLL3_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a71a:	663b      	str	r3, [r7, #96]	; 0x60
 800a71c:	2300      	movs	r3, #0
 800a71e:	667b      	str	r3, [r7, #100]	; 0x64
 800a720:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a724:	460b      	mov	r3, r1
 800a726:	4313      	orrs	r3, r2
 800a728:	d038      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a736:	d018      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a73c:	d811      	bhi.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a742:	d014      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a748:	d80b      	bhi.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a752:	d106      	bne.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a754:	4bc3      	ldr	r3, [pc, #780]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4ac2      	ldr	r2, [pc, #776]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a760:	e008      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a768:	e004      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a76a:	bf00      	nop
 800a76c:	e002      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a76e:	bf00      	nop
 800a770:	e000      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a772:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a77c:	4bb9      	ldr	r3, [pc, #740]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78c:	4ab5      	ldr	r2, [pc, #724]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a78e:	430b      	orrs	r3, r1
 800a790:	6553      	str	r3, [r2, #84]	; 0x54
 800a792:	e003      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d009      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a7b8:	4baa      	ldr	r3, [pc, #680]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c6:	4aa7      	ldr	r2, [pc, #668]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a7d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a7da:	2300      	movs	r3, #0
 800a7dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a7de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	d00a      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a7e8:	4b9e      	ldr	r3, [pc, #632]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7f8:	4a9a      	ldr	r2, [pc, #616]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a80a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a80c:	2300      	movs	r3, #0
 800a80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a810:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a814:	460b      	mov	r3, r1
 800a816:	4313      	orrs	r3, r2
 800a818:	d009      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a81a:	4b92      	ldr	r3, [pc, #584]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a828:	4a8e      	ldr	r2, [pc, #568]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a82a:	430b      	orrs	r3, r1
 800a82c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a83a:	643b      	str	r3, [r7, #64]	; 0x40
 800a83c:	2300      	movs	r3, #0
 800a83e:	647b      	str	r3, [r7, #68]	; 0x44
 800a840:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a844:	460b      	mov	r3, r1
 800a846:	4313      	orrs	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a84a:	4b86      	ldr	r3, [pc, #536]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4a85      	ldr	r2, [pc, #532]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a854:	6113      	str	r3, [r2, #16]
 800a856:	4b83      	ldr	r3, [pc, #524]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a858:	6919      	ldr	r1, [r3, #16]
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a862:	4a80      	ldr	r2, [pc, #512]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a864:	430b      	orrs	r3, r1
 800a866:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a874:	63bb      	str	r3, [r7, #56]	; 0x38
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a87e:	460b      	mov	r3, r1
 800a880:	4313      	orrs	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a884:	4b77      	ldr	r3, [pc, #476]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	4a74      	ldr	r2, [pc, #464]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a894:	430b      	orrs	r3, r1
 800a896:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a8a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d00a      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8b4:	4b6b      	ldr	r3, [pc, #428]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8c4:	4a67      	ldr	r2, [pc, #412]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	d011      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fb78 	bl	800afe4 <RCCEx_PLL2_Config>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	2100      	movs	r1, #0
 800a914:	6239      	str	r1, [r7, #32]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
 800a91c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a920:	460b      	mov	r3, r1
 800a922:	4313      	orrs	r3, r2
 800a924:	d011      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92a:	3308      	adds	r3, #8
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fb58 	bl	800afe4 <RCCEx_PLL2_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	2100      	movs	r1, #0
 800a954:	61b9      	str	r1, [r7, #24]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d011      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96a:	3308      	adds	r3, #8
 800a96c:	2102      	movs	r1, #2
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 fb38 	bl	800afe4 <RCCEx_PLL2_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	2100      	movs	r1, #0
 800a994:	6139      	str	r1, [r7, #16]
 800a996:	f003 0308 	and.w	r3, r3, #8
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	d011      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	3328      	adds	r3, #40	; 0x28
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fbca 	bl	800b148 <RCCEx_PLL3_Config>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	d011      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ea:	3328      	adds	r3, #40	; 0x28
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fbaa 	bl	800b148 <RCCEx_PLL3_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	2100      	movs	r1, #0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	607b      	str	r3, [r7, #4]
 800aa1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d011      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	3328      	adds	r3, #40	; 0x28
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 fb8a 	bl	800b148 <RCCEx_PLL3_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aa4a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa64:	58024400 	.word	0x58024400

0800aa68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa6c:	f7fe fd96 	bl	800959c <HAL_RCC_GetHCLKFreq>
 800aa70:	4602      	mov	r2, r0
 800aa72:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	091b      	lsrs	r3, r3, #4
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	4904      	ldr	r1, [pc, #16]	; (800aa90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa7e:	5ccb      	ldrb	r3, [r1, r3]
 800aa80:	f003 031f 	and.w	r3, r3, #31
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	08011820 	.word	0x08011820

0800aa94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b089      	sub	sp, #36	; 0x24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa9c:	4ba1      	ldr	r3, [pc, #644]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aaa6:	4b9f      	ldr	r3, [pc, #636]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaaa:	0b1b      	lsrs	r3, r3, #12
 800aaac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aab2:	4b9c      	ldr	r3, [pc, #624]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	091b      	lsrs	r3, r3, #4
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aabe:	4b99      	ldr	r3, [pc, #612]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	08db      	lsrs	r3, r3, #3
 800aac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	fb02 f303 	mul.w	r3, r2, r3
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8111 	beq.w	800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	f000 8083 	beq.w	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	f200 80a1 	bhi.w	800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d056      	beq.n	800abac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aafe:	e099      	b.n	800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab00:	4b88      	ldr	r3, [pc, #544]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d02d      	beq.n	800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab0c:	4b85      	ldr	r3, [pc, #532]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	08db      	lsrs	r3, r3, #3
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	4a84      	ldr	r2, [pc, #528]	; (800ad28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab18:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	ee07 3a90 	vmov	s15, r3
 800ab24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab36:	4b7b      	ldr	r3, [pc, #492]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab66:	e087      	b.n	800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7a:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abaa:	e065      	b.n	800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abbe:	4b59      	ldr	r3, [pc, #356]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abce:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abee:	e043      	b.n	800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac02:	4b48      	ldr	r3, [pc, #288]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac16:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac32:	e021      	b.n	800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac46:	4b37      	ldr	r3, [pc, #220]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac78:	4b2a      	ldr	r3, [pc, #168]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	0a5b      	lsrs	r3, r3, #9
 800ac7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac92:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac9e:	ee17 2a90 	vmov	r2, s15
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aca6:	4b1f      	ldr	r3, [pc, #124]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	0c1b      	lsrs	r3, r3, #16
 800acac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800accc:	ee17 2a90 	vmov	r2, s15
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800acd4:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	0e1b      	lsrs	r3, r3, #24
 800acda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acee:	edd7 6a07 	vldr	s13, [r7, #28]
 800acf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acfa:	ee17 2a90 	vmov	r2, s15
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad02:	e008      	b.n	800ad16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	609a      	str	r2, [r3, #8]
}
 800ad16:	bf00      	nop
 800ad18:	3724      	adds	r7, #36	; 0x24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	58024400 	.word	0x58024400
 800ad28:	03d09000 	.word	0x03d09000
 800ad2c:	46000000 	.word	0x46000000
 800ad30:	4c742400 	.word	0x4c742400
 800ad34:	4a742400 	.word	0x4a742400
 800ad38:	4bbebc20 	.word	0x4bbebc20

0800ad3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b089      	sub	sp, #36	; 0x24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad44:	4ba1      	ldr	r3, [pc, #644]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad4e:	4b9f      	ldr	r3, [pc, #636]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	0d1b      	lsrs	r3, r3, #20
 800ad54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad5a:	4b9c      	ldr	r3, [pc, #624]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5e:	0a1b      	lsrs	r3, r3, #8
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad66:	4b99      	ldr	r3, [pc, #612]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6a:	08db      	lsrs	r3, r3, #3
 800ad6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	fb02 f303 	mul.w	r3, r2, r3
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8111 	beq.w	800afac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	f000 8083 	beq.w	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	f200 80a1 	bhi.w	800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d056      	beq.n	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ada6:	e099      	b.n	800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ada8:	4b88      	ldr	r3, [pc, #544]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d02d      	beq.n	800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adb4:	4b85      	ldr	r3, [pc, #532]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	08db      	lsrs	r3, r3, #3
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	4a84      	ldr	r2, [pc, #528]	; (800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800adc0:	fa22 f303 	lsr.w	r3, r2, r3
 800adc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adde:	4b7b      	ldr	r3, [pc, #492]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade6:	ee07 3a90 	vmov	s15, r3
 800adea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adee:	ed97 6a03 	vldr	s12, [r7, #12]
 800adf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae0e:	e087      	b.n	800af20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae22:	4b6a      	ldr	r3, [pc, #424]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae36:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae52:	e065      	b.n	800af20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae66:	4b59      	ldr	r3, [pc, #356]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6e:	ee07 3a90 	vmov	s15, r3
 800ae72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae96:	e043      	b.n	800af20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeaa:	4b48      	ldr	r3, [pc, #288]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeba:	ed97 6a03 	vldr	s12, [r7, #12]
 800aebe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeda:	e021      	b.n	800af20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aeea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeee:	4b37      	ldr	r3, [pc, #220]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefe:	ed97 6a03 	vldr	s12, [r7, #12]
 800af02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800af20:	4b2a      	ldr	r3, [pc, #168]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	0a5b      	lsrs	r3, r3, #9
 800af26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af46:	ee17 2a90 	vmov	r2, s15
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af4e:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	0c1b      	lsrs	r3, r3, #16
 800af54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af58:	ee07 3a90 	vmov	s15, r3
 800af5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af68:	edd7 6a07 	vldr	s13, [r7, #28]
 800af6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af74:	ee17 2a90 	vmov	r2, s15
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af7c:	4b13      	ldr	r3, [pc, #76]	; (800afcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af80:	0e1b      	lsrs	r3, r3, #24
 800af82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af96:	edd7 6a07 	vldr	s13, [r7, #28]
 800af9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afa2:	ee17 2a90 	vmov	r2, s15
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800afaa:	e008      	b.n	800afbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	609a      	str	r2, [r3, #8]
}
 800afbe:	bf00      	nop
 800afc0:	3724      	adds	r7, #36	; 0x24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	58024400 	.word	0x58024400
 800afd0:	03d09000 	.word	0x03d09000
 800afd4:	46000000 	.word	0x46000000
 800afd8:	4c742400 	.word	0x4c742400
 800afdc:	4a742400 	.word	0x4a742400
 800afe0:	4bbebc20 	.word	0x4bbebc20

0800afe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aff2:	4b53      	ldr	r3, [pc, #332]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800aff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff6:	f003 0303 	and.w	r3, r3, #3
 800affa:	2b03      	cmp	r3, #3
 800affc:	d101      	bne.n	800b002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e099      	b.n	800b136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b002:	4b4f      	ldr	r3, [pc, #316]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a4e      	ldr	r2, [pc, #312]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b00e:	f7f9 fe5b 	bl	8004cc8 <HAL_GetTick>
 800b012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b014:	e008      	b.n	800b028 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b016:	f7f9 fe57 	bl	8004cc8 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e086      	b.n	800b136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b028:	4b45      	ldr	r3, [pc, #276]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f0      	bne.n	800b016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b034:	4b42      	ldr	r3, [pc, #264]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	493f      	ldr	r1, [pc, #252]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b044:	4313      	orrs	r3, r2
 800b046:	628b      	str	r3, [r1, #40]	; 0x28
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	3b01      	subs	r3, #1
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	3b01      	subs	r3, #1
 800b064:	041b      	lsls	r3, r3, #16
 800b066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b06a:	431a      	orrs	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	3b01      	subs	r3, #1
 800b072:	061b      	lsls	r3, r3, #24
 800b074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b078:	4931      	ldr	r1, [pc, #196]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b07e:	4b30      	ldr	r3, [pc, #192]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	492d      	ldr	r1, [pc, #180]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b090:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	f023 0220 	bic.w	r2, r3, #32
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	4928      	ldr	r1, [pc, #160]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b0a2:	4b27      	ldr	r3, [pc, #156]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	4a26      	ldr	r2, [pc, #152]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0a8:	f023 0310 	bic.w	r3, r3, #16
 800b0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0ae:	4b24      	ldr	r3, [pc, #144]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <RCCEx_PLL2_Config+0x160>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	69d2      	ldr	r2, [r2, #28]
 800b0ba:	00d2      	lsls	r2, r2, #3
 800b0bc:	4920      	ldr	r1, [pc, #128]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b0c2:	4b1f      	ldr	r3, [pc, #124]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0c8:	f043 0310 	orr.w	r3, r3, #16
 800b0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b0d4:	4b1a      	ldr	r3, [pc, #104]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	4a19      	ldr	r2, [pc, #100]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0e0:	e00f      	b.n	800b102 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d106      	bne.n	800b0f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b0e8:	4b15      	ldr	r3, [pc, #84]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a14      	ldr	r2, [pc, #80]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0f4:	e005      	b.n	800b102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b0f6:	4b12      	ldr	r3, [pc, #72]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	4a11      	ldr	r2, [pc, #68]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b0fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b102:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a0e      	ldr	r2, [pc, #56]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b10e:	f7f9 fddb 	bl	8004cc8 <HAL_GetTick>
 800b112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b114:	e008      	b.n	800b128 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b116:	f7f9 fdd7 	bl	8004cc8 <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d901      	bls.n	800b128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e006      	b.n	800b136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <RCCEx_PLL2_Config+0x15c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f0      	beq.n	800b116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	58024400 	.word	0x58024400
 800b144:	ffff0007 	.word	0xffff0007

0800b148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b156:	4b53      	ldr	r3, [pc, #332]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15a:	f003 0303 	and.w	r3, r3, #3
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d101      	bne.n	800b166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e099      	b.n	800b29a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b166:	4b4f      	ldr	r3, [pc, #316]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a4e      	ldr	r2, [pc, #312]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b172:	f7f9 fda9 	bl	8004cc8 <HAL_GetTick>
 800b176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b178:	e008      	b.n	800b18c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b17a:	f7f9 fda5 	bl	8004cc8 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	2b02      	cmp	r3, #2
 800b186:	d901      	bls.n	800b18c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e086      	b.n	800b29a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b18c:	4b45      	ldr	r3, [pc, #276]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1f0      	bne.n	800b17a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b198:	4b42      	ldr	r3, [pc, #264]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	051b      	lsls	r3, r3, #20
 800b1a6:	493f      	ldr	r1, [pc, #252]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	628b      	str	r3, [r1, #40]	; 0x28
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	025b      	lsls	r3, r3, #9
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	041b      	lsls	r3, r3, #16
 800b1ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	061b      	lsls	r3, r3, #24
 800b1d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1dc:	4931      	ldr	r1, [pc, #196]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b1e2:	4b30      	ldr	r3, [pc, #192]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	492d      	ldr	r1, [pc, #180]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b1f4:	4b2b      	ldr	r3, [pc, #172]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	4928      	ldr	r1, [pc, #160]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b202:	4313      	orrs	r3, r2
 800b204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20a:	4a26      	ldr	r2, [pc, #152]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b212:	4b24      	ldr	r3, [pc, #144]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b216:	4b24      	ldr	r3, [pc, #144]	; (800b2a8 <RCCEx_PLL3_Config+0x160>)
 800b218:	4013      	ands	r3, r2
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	69d2      	ldr	r2, [r2, #28]
 800b21e:	00d2      	lsls	r2, r2, #3
 800b220:	4920      	ldr	r1, [pc, #128]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b222:	4313      	orrs	r3, r2
 800b224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b226:	4b1f      	ldr	r3, [pc, #124]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	4a1e      	ldr	r2, [pc, #120]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d106      	bne.n	800b246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b238:	4b1a      	ldr	r3, [pc, #104]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a19      	ldr	r2, [pc, #100]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b23e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b244:	e00f      	b.n	800b266 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d106      	bne.n	800b25a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b24c:	4b15      	ldr	r3, [pc, #84]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	4a14      	ldr	r2, [pc, #80]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b256:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b258:	e005      	b.n	800b266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b25a:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	4a11      	ldr	r2, [pc, #68]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b266:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a0e      	ldr	r2, [pc, #56]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b272:	f7f9 fd29 	bl	8004cc8 <HAL_GetTick>
 800b276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b278:	e008      	b.n	800b28c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b27a:	f7f9 fd25 	bl	8004cc8 <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	2b02      	cmp	r3, #2
 800b286:	d901      	bls.n	800b28c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e006      	b.n	800b29a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b28c:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <RCCEx_PLL3_Config+0x15c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0f0      	beq.n	800b27a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b298:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	ffff0007 	.word	0xffff0007

0800b2ac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e02b      	b.n	800b318 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f825 	bl	800b324 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2202      	movs	r2, #2
 800b2de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f002 fe51 	bl	800df94 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	f002 fea5 	bl	800e04c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b302:	4b07      	ldr	r3, [pc, #28]	; (800b320 <HAL_SDRAM_Init+0x74>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a06      	ldr	r2, [pc, #24]	; (800b320 <HAL_SDRAM_Init+0x74>)
 800b308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b30c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	52004000 	.word	0x52004000

0800b324 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b34a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d101      	bne.n	800b356 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b352:	2302      	movs	r3, #2
 800b354:	e021      	b.n	800b39a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d002      	beq.n	800b362 <HAL_SDRAM_SendCommand+0x2a>
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	2b05      	cmp	r3, #5
 800b360:	d118      	bne.n	800b394 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2202      	movs	r2, #2
 800b366:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f002 fed4 	bl	800e120 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d104      	bne.n	800b38a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2205      	movs	r2, #5
 800b384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b388:	e006      	b.n	800b398 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b392:	e001      	b.n	800b398 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e000      	b.n	800b39a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d101      	bne.n	800b3bc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e016      	b.n	800b3ea <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d10f      	bne.n	800b3e8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f002 fec6 	bl	800e168 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e000      	b.n	800b3ea <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e042      	b.n	800b48a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d106      	bne.n	800b41c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7f6 fe7e 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2224      	movs	r2, #36	; 0x24
 800b420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f022 0201 	bic.w	r2, r2, #1
 800b432:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fce7 	bl	800be08 <UART_SetConfig>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e022      	b.n	800b48a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f001 fa43 	bl	800c8d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0201 	orr.w	r2, r2, #1
 800b480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f001 faca 	bl	800ca1c <UART_CheckIdleState>
 800b488:	4603      	mov	r3, r0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b494:	b480      	push	{r7}
 800b496:	b091      	sub	sp, #68	; 0x44
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	d178      	bne.n	800b59e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <HAL_UART_Transmit_IT+0x24>
 800b4b2:	88fb      	ldrh	r3, [r7, #6]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e071      	b.n	800b5a0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	88fa      	ldrh	r2, [r7, #6]
 800b4c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	88fa      	ldrh	r2, [r7, #6]
 800b4ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2221      	movs	r2, #33	; 0x21
 800b4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f0:	d12a      	bne.n	800b548 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fa:	d107      	bne.n	800b50c <HAL_UART_Transmit_IT+0x78>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4a29      	ldr	r2, [pc, #164]	; (800b5ac <HAL_UART_Transmit_IT+0x118>)
 800b508:	679a      	str	r2, [r3, #120]	; 0x78
 800b50a:	e002      	b.n	800b512 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a28      	ldr	r2, [pc, #160]	; (800b5b0 <HAL_UART_Transmit_IT+0x11c>)
 800b510:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b528:	63bb      	str	r3, [r7, #56]	; 0x38
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b532:	637a      	str	r2, [r7, #52]	; 0x34
 800b534:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e5      	bne.n	800b512 <HAL_UART_Transmit_IT+0x7e>
 800b546:	e028      	b.n	800b59a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b550:	d107      	bne.n	800b562 <HAL_UART_Transmit_IT+0xce>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d103      	bne.n	800b562 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	4a15      	ldr	r2, [pc, #84]	; (800b5b4 <HAL_UART_Transmit_IT+0x120>)
 800b55e:	679a      	str	r2, [r3, #120]	; 0x78
 800b560:	e002      	b.n	800b568 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a14      	ldr	r2, [pc, #80]	; (800b5b8 <HAL_UART_Transmit_IT+0x124>)
 800b566:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	613b      	str	r3, [r7, #16]
   return(result);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b586:	623b      	str	r3, [r7, #32]
 800b588:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	69f9      	ldr	r1, [r7, #28]
 800b58c:	6a3a      	ldr	r2, [r7, #32]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	61bb      	str	r3, [r7, #24]
   return(result);
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e6      	bne.n	800b568 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e000      	b.n	800b5a0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b59e:	2302      	movs	r3, #2
  }
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3744      	adds	r7, #68	; 0x44
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	0800d1d7 	.word	0x0800d1d7
 800b5b0:	0800d0f7 	.word	0x0800d0f7
 800b5b4:	0800d035 	.word	0x0800d035
 800b5b8:	0800cf7d 	.word	0x0800cf7d

0800b5bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	; 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d137      	bne.n	800b644 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <HAL_UART_Receive_IT+0x24>
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e030      	b.n	800b646 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	; (800b650 <HAL_UART_Receive_IT+0x94>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d01f      	beq.n	800b634 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d018      	beq.n	800b634 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	613b      	str	r3, [r7, #16]
   return(result);
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	623b      	str	r3, [r7, #32]
 800b622:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	69f9      	ldr	r1, [r7, #28]
 800b626:	6a3a      	ldr	r2, [r7, #32]
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e6      	bne.n	800b602 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	461a      	mov	r2, r3
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f001 fb00 	bl	800cc40 <UART_Start_Receive_IT>
 800b640:	4603      	mov	r3, r0
 800b642:	e000      	b.n	800b646 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b644:	2302      	movs	r3, #2
  }
}
 800b646:	4618      	mov	r0, r3
 800b648:	3728      	adds	r7, #40	; 0x28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	58000c00 	.word	0x58000c00

0800b654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b0ba      	sub	sp, #232	; 0xe8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b67a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b67e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b682:	4013      	ands	r3, r2
 800b684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d11b      	bne.n	800b6c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d015      	beq.n	800b6c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a0:	f003 0320 	and.w	r3, r3, #32
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d009      	beq.n	800b6c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 8377 	beq.w	800bdac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
      }
      return;
 800b6c6:	e371      	b.n	800bdac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8123 	beq.w	800b918 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6d6:	4b8d      	ldr	r3, [pc, #564]	; (800b90c <HAL_UART_IRQHandler+0x2b8>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b6de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b6e2:	4b8b      	ldr	r3, [pc, #556]	; (800b910 <HAL_UART_IRQHandler+0x2bc>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 8116 	beq.w	800b918 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d011      	beq.n	800b71c <HAL_UART_IRQHandler+0xc8>
 800b6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00b      	beq.n	800b71c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2201      	movs	r2, #1
 800b70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b712:	f043 0201 	orr.w	r2, r3, #1
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b720:	f003 0302 	and.w	r3, r3, #2
 800b724:	2b00      	cmp	r3, #0
 800b726:	d011      	beq.n	800b74c <HAL_UART_IRQHandler+0xf8>
 800b728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2202      	movs	r2, #2
 800b73a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b742:	f043 0204 	orr.w	r2, r3, #4
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b00      	cmp	r3, #0
 800b756:	d011      	beq.n	800b77c <HAL_UART_IRQHandler+0x128>
 800b758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00b      	beq.n	800b77c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2204      	movs	r2, #4
 800b76a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b772:	f043 0202 	orr.w	r2, r3, #2
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b780:	f003 0308 	and.w	r3, r3, #8
 800b784:	2b00      	cmp	r3, #0
 800b786:	d017      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b78c:	f003 0320 	and.w	r3, r3, #32
 800b790:	2b00      	cmp	r3, #0
 800b792:	d105      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b794:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b798:	4b5c      	ldr	r3, [pc, #368]	; (800b90c <HAL_UART_IRQHandler+0x2b8>)
 800b79a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2208      	movs	r2, #8
 800b7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ae:	f043 0208 	orr.w	r2, r3, #8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d012      	beq.n	800b7ea <HAL_UART_IRQHandler+0x196>
 800b7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00c      	beq.n	800b7ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e0:	f043 0220 	orr.w	r2, r3, #32
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 82dd 	beq.w	800bdb0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d013      	beq.n	800b82a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d105      	bne.n	800b81a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b80e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d007      	beq.n	800b82a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d005      	beq.n	800b84e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b846:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d054      	beq.n	800b8f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 fb18 	bl	800ce84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85e:	2b40      	cmp	r3, #64	; 0x40
 800b860:	d146      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b87c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3308      	adds	r3, #8
 800b88a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b88e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b89a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1d9      	bne.n	800b862 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d017      	beq.n	800b8e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8be:	4a15      	ldr	r2, [pc, #84]	; (800b914 <HAL_UART_IRQHandler+0x2c0>)
 800b8c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f9 fe81 	bl	80055d0 <HAL_DMA_Abort_IT>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d019      	beq.n	800b908 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e6:	e00f      	b.n	800b908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fa77 	bl	800bddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ee:	e00b      	b.n	800b908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fa73 	bl	800bddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f6:	e007      	b.n	800b908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fa6f 	bl	800bddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b906:	e253      	b.n	800bdb0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b908:	bf00      	nop
    return;
 800b90a:	e251      	b.n	800bdb0 <HAL_UART_IRQHandler+0x75c>
 800b90c:	10000001 	.word	0x10000001
 800b910:	04000120 	.word	0x04000120
 800b914:	0800cf51 	.word	0x0800cf51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	f040 81e7 	bne.w	800bcf0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b926:	f003 0310 	and.w	r3, r3, #16
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f000 81e0 	beq.w	800bcf0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b934:	f003 0310 	and.w	r3, r3, #16
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 81d9 	beq.w	800bcf0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2210      	movs	r2, #16
 800b944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b950:	2b40      	cmp	r3, #64	; 0x40
 800b952:	f040 8151 	bne.w	800bbf8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a96      	ldr	r2, [pc, #600]	; (800bbb8 <HAL_UART_IRQHandler+0x564>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d068      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a93      	ldr	r2, [pc, #588]	; (800bbbc <HAL_UART_IRQHandler+0x568>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d061      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a91      	ldr	r2, [pc, #580]	; (800bbc0 <HAL_UART_IRQHandler+0x56c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d05a      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a8e      	ldr	r2, [pc, #568]	; (800bbc4 <HAL_UART_IRQHandler+0x570>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d053      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a8c      	ldr	r2, [pc, #560]	; (800bbc8 <HAL_UART_IRQHandler+0x574>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d04c      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a89      	ldr	r2, [pc, #548]	; (800bbcc <HAL_UART_IRQHandler+0x578>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d045      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a87      	ldr	r2, [pc, #540]	; (800bbd0 <HAL_UART_IRQHandler+0x57c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d03e      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a84      	ldr	r2, [pc, #528]	; (800bbd4 <HAL_UART_IRQHandler+0x580>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d037      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a82      	ldr	r2, [pc, #520]	; (800bbd8 <HAL_UART_IRQHandler+0x584>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d030      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a7f      	ldr	r2, [pc, #508]	; (800bbdc <HAL_UART_IRQHandler+0x588>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d029      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a7d      	ldr	r2, [pc, #500]	; (800bbe0 <HAL_UART_IRQHandler+0x58c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d022      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a7a      	ldr	r2, [pc, #488]	; (800bbe4 <HAL_UART_IRQHandler+0x590>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d01b      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a78      	ldr	r2, [pc, #480]	; (800bbe8 <HAL_UART_IRQHandler+0x594>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d014      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a75      	ldr	r2, [pc, #468]	; (800bbec <HAL_UART_IRQHandler+0x598>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00d      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a73      	ldr	r2, [pc, #460]	; (800bbf0 <HAL_UART_IRQHandler+0x59c>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d006      	beq.n	800ba36 <HAL_UART_IRQHandler+0x3e2>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a70      	ldr	r2, [pc, #448]	; (800bbf4 <HAL_UART_IRQHandler+0x5a0>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d106      	bne.n	800ba44 <HAL_UART_IRQHandler+0x3f0>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	e005      	b.n	800ba50 <HAL_UART_IRQHandler+0x3fc>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f000 81ab 	beq.w	800bdb4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	f080 81a3 	bcs.w	800bdb4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba7e:	69db      	ldr	r3, [r3, #28]
 800ba80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba84:	f000 8087 	beq.w	800bb96 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800baa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bab6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800babe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bac2:	e841 2300 	strex	r3, r2, [r1]
 800bac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800baca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1da      	bne.n	800ba88 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bae4:	f023 0301 	bic.w	r3, r3, #1
 800bae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3308      	adds	r3, #8
 800baf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800baf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bafa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bafe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e1      	bne.n	800bad2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3308      	adds	r3, #8
 800bb14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb32:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e3      	bne.n	800bb0e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb5c:	e853 3f00 	ldrex	r3, [r3]
 800bb60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb64:	f023 0310 	bic.w	r3, r3, #16
 800bb68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb76:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb7e:	e841 2300 	strex	r3, r2, [r1]
 800bb82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1e4      	bne.n	800bb54 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7f9 f9ff 	bl	8004f94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f91d 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbb6:	e0fd      	b.n	800bdb4 <HAL_UART_IRQHandler+0x760>
 800bbb8:	40020010 	.word	0x40020010
 800bbbc:	40020028 	.word	0x40020028
 800bbc0:	40020040 	.word	0x40020040
 800bbc4:	40020058 	.word	0x40020058
 800bbc8:	40020070 	.word	0x40020070
 800bbcc:	40020088 	.word	0x40020088
 800bbd0:	400200a0 	.word	0x400200a0
 800bbd4:	400200b8 	.word	0x400200b8
 800bbd8:	40020410 	.word	0x40020410
 800bbdc:	40020428 	.word	0x40020428
 800bbe0:	40020440 	.word	0x40020440
 800bbe4:	40020458 	.word	0x40020458
 800bbe8:	40020470 	.word	0x40020470
 800bbec:	40020488 	.word	0x40020488
 800bbf0:	400204a0 	.word	0x400204a0
 800bbf4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 80cf 	beq.w	800bdb8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bc1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80ca 	beq.w	800bdb8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc46:	647b      	str	r3, [r7, #68]	; 0x44
 800bc48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e4      	bne.n	800bc24 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	623b      	str	r3, [r7, #32]
   return(result);
 800bc6a:	6a3a      	ldr	r2, [r7, #32]
 800bc6c:	4b55      	ldr	r3, [pc, #340]	; (800bdc4 <HAL_UART_IRQHandler+0x770>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3308      	adds	r3, #8
 800bc7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc7e:	633a      	str	r2, [r7, #48]	; 0x30
 800bc80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e3      	bne.n	800bc5a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2220      	movs	r2, #32
 800bc96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f023 0310 	bic.w	r3, r3, #16
 800bcba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	69b9      	ldr	r1, [r7, #24]
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e4      	bne.n	800bca6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2202      	movs	r2, #2
 800bce0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f881 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcee:	e063      	b.n	800bdb8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00e      	beq.n	800bd1a <HAL_UART_IRQHandler+0x6c6>
 800bcfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d008      	beq.n	800bd1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f002 f81c 	bl	800dd50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd18:	e051      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d014      	beq.n	800bd50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d008      	beq.n	800bd50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d03a      	beq.n	800bdbc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
    }
    return;
 800bd4e:	e035      	b.n	800bdbc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d009      	beq.n	800bd70 <HAL_UART_IRQHandler+0x71c>
 800bd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 faa9 	bl	800d2c0 <UART_EndTransmit_IT>
    return;
 800bd6e:	e026      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <HAL_UART_IRQHandler+0x73c>
 800bd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 fff5 	bl	800dd78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd8e:	e016      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d010      	beq.n	800bdbe <HAL_UART_IRQHandler+0x76a>
 800bd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	da0c      	bge.n	800bdbe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 ffdd 	bl	800dd64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdaa:	e008      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
      return;
 800bdac:	bf00      	nop
 800bdae:	e006      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
    return;
 800bdb0:	bf00      	nop
 800bdb2:	e004      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
      return;
 800bdb4:	bf00      	nop
 800bdb6:	e002      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
      return;
 800bdb8:	bf00      	nop
 800bdba:	e000      	b.n	800bdbe <HAL_UART_IRQHandler+0x76a>
    return;
 800bdbc:	bf00      	nop
  }
}
 800bdbe:	37e8      	adds	r7, #232	; 0xe8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	effffffe 	.word	0xeffffffe

0800bdc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be0c:	b092      	sub	sp, #72	; 0x48
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	689a      	ldr	r2, [r3, #8]
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	431a      	orrs	r2, r3
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	431a      	orrs	r2, r3
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	69db      	ldr	r3, [r3, #28]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	4bbe      	ldr	r3, [pc, #760]	; (800c130 <UART_SetConfig+0x328>)
 800be38:	4013      	ands	r3, r2
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	6812      	ldr	r2, [r2, #0]
 800be3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be40:	430b      	orrs	r3, r1
 800be42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	68da      	ldr	r2, [r3, #12]
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	430a      	orrs	r2, r1
 800be58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4ab3      	ldr	r2, [pc, #716]	; (800c134 <UART_SetConfig+0x32c>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d004      	beq.n	800be74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be70:	4313      	orrs	r3, r2
 800be72:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689a      	ldr	r2, [r3, #8]
 800be7a:	4baf      	ldr	r3, [pc, #700]	; (800c138 <UART_SetConfig+0x330>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	6812      	ldr	r2, [r2, #0]
 800be82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be84:	430b      	orrs	r3, r1
 800be86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8e:	f023 010f 	bic.w	r1, r3, #15
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	430a      	orrs	r2, r1
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4aa6      	ldr	r2, [pc, #664]	; (800c13c <UART_SetConfig+0x334>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d177      	bne.n	800bf98 <UART_SetConfig+0x190>
 800bea8:	4ba5      	ldr	r3, [pc, #660]	; (800c140 <UART_SetConfig+0x338>)
 800beaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800beb0:	2b28      	cmp	r3, #40	; 0x28
 800beb2:	d86d      	bhi.n	800bf90 <UART_SetConfig+0x188>
 800beb4:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <UART_SetConfig+0xb4>)
 800beb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beba:	bf00      	nop
 800bebc:	0800bf61 	.word	0x0800bf61
 800bec0:	0800bf91 	.word	0x0800bf91
 800bec4:	0800bf91 	.word	0x0800bf91
 800bec8:	0800bf91 	.word	0x0800bf91
 800becc:	0800bf91 	.word	0x0800bf91
 800bed0:	0800bf91 	.word	0x0800bf91
 800bed4:	0800bf91 	.word	0x0800bf91
 800bed8:	0800bf91 	.word	0x0800bf91
 800bedc:	0800bf69 	.word	0x0800bf69
 800bee0:	0800bf91 	.word	0x0800bf91
 800bee4:	0800bf91 	.word	0x0800bf91
 800bee8:	0800bf91 	.word	0x0800bf91
 800beec:	0800bf91 	.word	0x0800bf91
 800bef0:	0800bf91 	.word	0x0800bf91
 800bef4:	0800bf91 	.word	0x0800bf91
 800bef8:	0800bf91 	.word	0x0800bf91
 800befc:	0800bf71 	.word	0x0800bf71
 800bf00:	0800bf91 	.word	0x0800bf91
 800bf04:	0800bf91 	.word	0x0800bf91
 800bf08:	0800bf91 	.word	0x0800bf91
 800bf0c:	0800bf91 	.word	0x0800bf91
 800bf10:	0800bf91 	.word	0x0800bf91
 800bf14:	0800bf91 	.word	0x0800bf91
 800bf18:	0800bf91 	.word	0x0800bf91
 800bf1c:	0800bf79 	.word	0x0800bf79
 800bf20:	0800bf91 	.word	0x0800bf91
 800bf24:	0800bf91 	.word	0x0800bf91
 800bf28:	0800bf91 	.word	0x0800bf91
 800bf2c:	0800bf91 	.word	0x0800bf91
 800bf30:	0800bf91 	.word	0x0800bf91
 800bf34:	0800bf91 	.word	0x0800bf91
 800bf38:	0800bf91 	.word	0x0800bf91
 800bf3c:	0800bf81 	.word	0x0800bf81
 800bf40:	0800bf91 	.word	0x0800bf91
 800bf44:	0800bf91 	.word	0x0800bf91
 800bf48:	0800bf91 	.word	0x0800bf91
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bf91 	.word	0x0800bf91
 800bf54:	0800bf91 	.word	0x0800bf91
 800bf58:	0800bf91 	.word	0x0800bf91
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e222      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf68:	2304      	movs	r3, #4
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e21e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf70:	2308      	movs	r3, #8
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e21a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf78:	2310      	movs	r3, #16
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e216      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf80:	2320      	movs	r3, #32
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e212      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e20e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e20a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a69      	ldr	r2, [pc, #420]	; (800c144 <UART_SetConfig+0x33c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d130      	bne.n	800c004 <UART_SetConfig+0x1fc>
 800bfa2:	4b67      	ldr	r3, [pc, #412]	; (800c140 <UART_SetConfig+0x338>)
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d826      	bhi.n	800bffc <UART_SetConfig+0x1f4>
 800bfae:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <UART_SetConfig+0x1ac>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800bfcd 	.word	0x0800bfcd
 800bfb8:	0800bfd5 	.word	0x0800bfd5
 800bfbc:	0800bfdd 	.word	0x0800bfdd
 800bfc0:	0800bfe5 	.word	0x0800bfe5
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bff5 	.word	0x0800bff5
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd2:	e1ec      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e1e8      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bfdc:	2308      	movs	r3, #8
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e1e4      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bfe4:	2310      	movs	r3, #16
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e1e0      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bfec:	2320      	movs	r3, #32
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e1dc      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e1d8      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800bffc:	2380      	movs	r3, #128	; 0x80
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e1d4      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a4f      	ldr	r2, [pc, #316]	; (800c148 <UART_SetConfig+0x340>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d130      	bne.n	800c070 <UART_SetConfig+0x268>
 800c00e:	4b4c      	ldr	r3, [pc, #304]	; (800c140 <UART_SetConfig+0x338>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b05      	cmp	r3, #5
 800c018:	d826      	bhi.n	800c068 <UART_SetConfig+0x260>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <UART_SetConfig+0x218>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c041 	.word	0x0800c041
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c051 	.word	0x0800c051
 800c030:	0800c059 	.word	0x0800c059
 800c034:	0800c061 	.word	0x0800c061
 800c038:	2300      	movs	r3, #0
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03e:	e1b6      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c040:	2304      	movs	r3, #4
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e1b2      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c048:	2308      	movs	r3, #8
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e1ae      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c050:	2310      	movs	r3, #16
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e1aa      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c058:	2320      	movs	r3, #32
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e1a6      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e1a2      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c068:	2380      	movs	r3, #128	; 0x80
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e19e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a35      	ldr	r2, [pc, #212]	; (800c14c <UART_SetConfig+0x344>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d130      	bne.n	800c0dc <UART_SetConfig+0x2d4>
 800c07a:	4b31      	ldr	r3, [pc, #196]	; (800c140 <UART_SetConfig+0x338>)
 800c07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	2b05      	cmp	r3, #5
 800c084:	d826      	bhi.n	800c0d4 <UART_SetConfig+0x2cc>
 800c086:	a201      	add	r2, pc, #4	; (adr r2, 800c08c <UART_SetConfig+0x284>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c0a5 	.word	0x0800c0a5
 800c090:	0800c0ad 	.word	0x0800c0ad
 800c094:	0800c0b5 	.word	0x0800c0b5
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0aa:	e180      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b2:	e17c      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0b4:	2308      	movs	r3, #8
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e178      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0bc:	2310      	movs	r3, #16
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e174      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ca:	e170      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0cc:	2340      	movs	r3, #64	; 0x40
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d2:	e16c      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0d4:	2380      	movs	r3, #128	; 0x80
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0da:	e168      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a1b      	ldr	r2, [pc, #108]	; (800c150 <UART_SetConfig+0x348>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d142      	bne.n	800c16c <UART_SetConfig+0x364>
 800c0e6:	4b16      	ldr	r3, [pc, #88]	; (800c140 <UART_SetConfig+0x338>)
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ea:	f003 0307 	and.w	r3, r3, #7
 800c0ee:	2b05      	cmp	r3, #5
 800c0f0:	d838      	bhi.n	800c164 <UART_SetConfig+0x35c>
 800c0f2:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <UART_SetConfig+0x2f0>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c119 	.word	0x0800c119
 800c100:	0800c121 	.word	0x0800c121
 800c104:	0800c129 	.word	0x0800c129
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c15d 	.word	0x0800c15d
 800c110:	2300      	movs	r3, #0
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e14a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c118:	2304      	movs	r3, #4
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11e:	e146      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c120:	2308      	movs	r3, #8
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c126:	e142      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c128:	2310      	movs	r3, #16
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12e:	e13e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c130:	cfff69f3 	.word	0xcfff69f3
 800c134:	58000c00 	.word	0x58000c00
 800c138:	11fff4ff 	.word	0x11fff4ff
 800c13c:	40011000 	.word	0x40011000
 800c140:	58024400 	.word	0x58024400
 800c144:	40004400 	.word	0x40004400
 800c148:	40004800 	.word	0x40004800
 800c14c:	40004c00 	.word	0x40004c00
 800c150:	40005000 	.word	0x40005000
 800c154:	2320      	movs	r3, #32
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e128      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c15c:	2340      	movs	r3, #64	; 0x40
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e124      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c164:	2380      	movs	r3, #128	; 0x80
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e120      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4acb      	ldr	r2, [pc, #812]	; (800c4a0 <UART_SetConfig+0x698>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d176      	bne.n	800c264 <UART_SetConfig+0x45c>
 800c176:	4bcb      	ldr	r3, [pc, #812]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c17a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c17e:	2b28      	cmp	r3, #40	; 0x28
 800c180:	d86c      	bhi.n	800c25c <UART_SetConfig+0x454>
 800c182:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <UART_SetConfig+0x380>)
 800c184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c188:	0800c22d 	.word	0x0800c22d
 800c18c:	0800c25d 	.word	0x0800c25d
 800c190:	0800c25d 	.word	0x0800c25d
 800c194:	0800c25d 	.word	0x0800c25d
 800c198:	0800c25d 	.word	0x0800c25d
 800c19c:	0800c25d 	.word	0x0800c25d
 800c1a0:	0800c25d 	.word	0x0800c25d
 800c1a4:	0800c25d 	.word	0x0800c25d
 800c1a8:	0800c235 	.word	0x0800c235
 800c1ac:	0800c25d 	.word	0x0800c25d
 800c1b0:	0800c25d 	.word	0x0800c25d
 800c1b4:	0800c25d 	.word	0x0800c25d
 800c1b8:	0800c25d 	.word	0x0800c25d
 800c1bc:	0800c25d 	.word	0x0800c25d
 800c1c0:	0800c25d 	.word	0x0800c25d
 800c1c4:	0800c25d 	.word	0x0800c25d
 800c1c8:	0800c23d 	.word	0x0800c23d
 800c1cc:	0800c25d 	.word	0x0800c25d
 800c1d0:	0800c25d 	.word	0x0800c25d
 800c1d4:	0800c25d 	.word	0x0800c25d
 800c1d8:	0800c25d 	.word	0x0800c25d
 800c1dc:	0800c25d 	.word	0x0800c25d
 800c1e0:	0800c25d 	.word	0x0800c25d
 800c1e4:	0800c25d 	.word	0x0800c25d
 800c1e8:	0800c245 	.word	0x0800c245
 800c1ec:	0800c25d 	.word	0x0800c25d
 800c1f0:	0800c25d 	.word	0x0800c25d
 800c1f4:	0800c25d 	.word	0x0800c25d
 800c1f8:	0800c25d 	.word	0x0800c25d
 800c1fc:	0800c25d 	.word	0x0800c25d
 800c200:	0800c25d 	.word	0x0800c25d
 800c204:	0800c25d 	.word	0x0800c25d
 800c208:	0800c24d 	.word	0x0800c24d
 800c20c:	0800c25d 	.word	0x0800c25d
 800c210:	0800c25d 	.word	0x0800c25d
 800c214:	0800c25d 	.word	0x0800c25d
 800c218:	0800c25d 	.word	0x0800c25d
 800c21c:	0800c25d 	.word	0x0800c25d
 800c220:	0800c25d 	.word	0x0800c25d
 800c224:	0800c25d 	.word	0x0800c25d
 800c228:	0800c255 	.word	0x0800c255
 800c22c:	2301      	movs	r3, #1
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e0bc      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c234:	2304      	movs	r3, #4
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e0b8      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e0b4      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e0b0      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c24c:	2320      	movs	r3, #32
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e0ac      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e0a8      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c25c:	2380      	movs	r3, #128	; 0x80
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e0a4      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a8f      	ldr	r2, [pc, #572]	; (800c4a8 <UART_SetConfig+0x6a0>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d130      	bne.n	800c2d0 <UART_SetConfig+0x4c8>
 800c26e:	4b8d      	ldr	r3, [pc, #564]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b05      	cmp	r3, #5
 800c278:	d826      	bhi.n	800c2c8 <UART_SetConfig+0x4c0>
 800c27a:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <UART_SetConfig+0x478>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c299 	.word	0x0800c299
 800c284:	0800c2a1 	.word	0x0800c2a1
 800c288:	0800c2a9 	.word	0x0800c2a9
 800c28c:	0800c2b1 	.word	0x0800c2b1
 800c290:	0800c2b9 	.word	0x0800c2b9
 800c294:	0800c2c1 	.word	0x0800c2c1
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e086      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e082      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e07e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e07a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2b8:	2320      	movs	r3, #32
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e076      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e072      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2c8:	2380      	movs	r3, #128	; 0x80
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e06e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a75      	ldr	r2, [pc, #468]	; (800c4ac <UART_SetConfig+0x6a4>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d130      	bne.n	800c33c <UART_SetConfig+0x534>
 800c2da:	4b72      	ldr	r3, [pc, #456]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d826      	bhi.n	800c334 <UART_SetConfig+0x52c>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <UART_SetConfig+0x4e4>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c305 	.word	0x0800c305
 800c2f0:	0800c30d 	.word	0x0800c30d
 800c2f4:	0800c315 	.word	0x0800c315
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c325 	.word	0x0800c325
 800c300:	0800c32d 	.word	0x0800c32d
 800c304:	2300      	movs	r3, #0
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e050      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c30c:	2304      	movs	r3, #4
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e04c      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c314:	2308      	movs	r3, #8
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e048      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c31c:	2310      	movs	r3, #16
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e044      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c324:	2320      	movs	r3, #32
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e040      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e03c      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e038      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a5b      	ldr	r2, [pc, #364]	; (800c4b0 <UART_SetConfig+0x6a8>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d130      	bne.n	800c3a8 <UART_SetConfig+0x5a0>
 800c346:	4b57      	ldr	r3, [pc, #348]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d826      	bhi.n	800c3a0 <UART_SetConfig+0x598>
 800c352:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0x550>)
 800c354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c358:	0800c371 	.word	0x0800c371
 800c35c:	0800c379 	.word	0x0800c379
 800c360:	0800c381 	.word	0x0800c381
 800c364:	0800c389 	.word	0x0800c389
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c399 	.word	0x0800c399
 800c370:	2302      	movs	r3, #2
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e01a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c378:	2304      	movs	r3, #4
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e016      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c380:	2308      	movs	r3, #8
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c386:	e012      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c388:	2310      	movs	r3, #16
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e00e      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c390:	2320      	movs	r3, #32
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e00a      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c398:	2340      	movs	r3, #64	; 0x40
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e006      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c3a0:	2380      	movs	r3, #128	; 0x80
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a6:	e002      	b.n	800c3ae <UART_SetConfig+0x5a6>
 800c3a8:	2380      	movs	r3, #128	; 0x80
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a3f      	ldr	r2, [pc, #252]	; (800c4b0 <UART_SetConfig+0x6a8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	f040 80f8 	bne.w	800c5aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	dc46      	bgt.n	800c450 <UART_SetConfig+0x648>
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	f2c0 8082 	blt.w	800c4cc <UART_SetConfig+0x6c4>
 800c3c8:	3b02      	subs	r3, #2
 800c3ca:	2b1e      	cmp	r3, #30
 800c3cc:	d87e      	bhi.n	800c4cc <UART_SetConfig+0x6c4>
 800c3ce:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <UART_SetConfig+0x5cc>)
 800c3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d4:	0800c457 	.word	0x0800c457
 800c3d8:	0800c4cd 	.word	0x0800c4cd
 800c3dc:	0800c45f 	.word	0x0800c45f
 800c3e0:	0800c4cd 	.word	0x0800c4cd
 800c3e4:	0800c4cd 	.word	0x0800c4cd
 800c3e8:	0800c4cd 	.word	0x0800c4cd
 800c3ec:	0800c46f 	.word	0x0800c46f
 800c3f0:	0800c4cd 	.word	0x0800c4cd
 800c3f4:	0800c4cd 	.word	0x0800c4cd
 800c3f8:	0800c4cd 	.word	0x0800c4cd
 800c3fc:	0800c4cd 	.word	0x0800c4cd
 800c400:	0800c4cd 	.word	0x0800c4cd
 800c404:	0800c4cd 	.word	0x0800c4cd
 800c408:	0800c4cd 	.word	0x0800c4cd
 800c40c:	0800c47f 	.word	0x0800c47f
 800c410:	0800c4cd 	.word	0x0800c4cd
 800c414:	0800c4cd 	.word	0x0800c4cd
 800c418:	0800c4cd 	.word	0x0800c4cd
 800c41c:	0800c4cd 	.word	0x0800c4cd
 800c420:	0800c4cd 	.word	0x0800c4cd
 800c424:	0800c4cd 	.word	0x0800c4cd
 800c428:	0800c4cd 	.word	0x0800c4cd
 800c42c:	0800c4cd 	.word	0x0800c4cd
 800c430:	0800c4cd 	.word	0x0800c4cd
 800c434:	0800c4cd 	.word	0x0800c4cd
 800c438:	0800c4cd 	.word	0x0800c4cd
 800c43c:	0800c4cd 	.word	0x0800c4cd
 800c440:	0800c4cd 	.word	0x0800c4cd
 800c444:	0800c4cd 	.word	0x0800c4cd
 800c448:	0800c4cd 	.word	0x0800c4cd
 800c44c:	0800c4bf 	.word	0x0800c4bf
 800c450:	2b40      	cmp	r3, #64	; 0x40
 800c452:	d037      	beq.n	800c4c4 <UART_SetConfig+0x6bc>
 800c454:	e03a      	b.n	800c4cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c456:	f7fe fb07 	bl	800aa68 <HAL_RCCEx_GetD3PCLK1Freq>
 800c45a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c45c:	e03c      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c45e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fb16 	bl	800aa94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e034      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c46e:	f107 0318 	add.w	r3, r7, #24
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fc62 	bl	800ad3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e02c      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c47e:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	2b00      	cmp	r3, #0
 800c488:	d016      	beq.n	800c4b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c48a:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	08db      	lsrs	r3, r3, #3
 800c490:	f003 0303 	and.w	r3, r3, #3
 800c494:	4a07      	ldr	r2, [pc, #28]	; (800c4b4 <UART_SetConfig+0x6ac>)
 800c496:	fa22 f303 	lsr.w	r3, r2, r3
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c49c:	e01c      	b.n	800c4d8 <UART_SetConfig+0x6d0>
 800c49e:	bf00      	nop
 800c4a0:	40011400 	.word	0x40011400
 800c4a4:	58024400 	.word	0x58024400
 800c4a8:	40007800 	.word	0x40007800
 800c4ac:	40007c00 	.word	0x40007c00
 800c4b0:	58000c00 	.word	0x58000c00
 800c4b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c4b8:	4b9d      	ldr	r3, [pc, #628]	; (800c730 <UART_SetConfig+0x928>)
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4bc:	e00c      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4be:	4b9d      	ldr	r3, [pc, #628]	; (800c734 <UART_SetConfig+0x92c>)
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c2:	e009      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ca:	e005      	b.n	800c4d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c4d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 81de 	beq.w	800c89c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	4a94      	ldr	r2, [pc, #592]	; (800c738 <UART_SetConfig+0x930>)
 800c4e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c500:	429a      	cmp	r2, r3
 800c502:	d305      	bcc.n	800c510 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c50a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d903      	bls.n	800c518 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c516:	e1c1      	b.n	800c89c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51a:	2200      	movs	r2, #0
 800c51c:	60bb      	str	r3, [r7, #8]
 800c51e:	60fa      	str	r2, [r7, #12]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c524:	4a84      	ldr	r2, [pc, #528]	; (800c738 <UART_SetConfig+0x930>)
 800c526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	2200      	movs	r2, #0
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	607a      	str	r2, [r7, #4]
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c53a:	f7f3 ff39 	bl	80003b0 <__aeabi_uldivmod>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	f04f 0200 	mov.w	r2, #0
 800c54a:	f04f 0300 	mov.w	r3, #0
 800c54e:	020b      	lsls	r3, r1, #8
 800c550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c554:	0202      	lsls	r2, r0, #8
 800c556:	6979      	ldr	r1, [r7, #20]
 800c558:	6849      	ldr	r1, [r1, #4]
 800c55a:	0849      	lsrs	r1, r1, #1
 800c55c:	2000      	movs	r0, #0
 800c55e:	460c      	mov	r4, r1
 800c560:	4605      	mov	r5, r0
 800c562:	eb12 0804 	adds.w	r8, r2, r4
 800c566:	eb43 0905 	adc.w	r9, r3, r5
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	469a      	mov	sl, r3
 800c572:	4693      	mov	fp, r2
 800c574:	4652      	mov	r2, sl
 800c576:	465b      	mov	r3, fp
 800c578:	4640      	mov	r0, r8
 800c57a:	4649      	mov	r1, r9
 800c57c:	f7f3 ff18 	bl	80003b0 <__aeabi_uldivmod>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4613      	mov	r3, r2
 800c586:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c58e:	d308      	bcc.n	800c5a2 <UART_SetConfig+0x79a>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c596:	d204      	bcs.n	800c5a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c59e:	60da      	str	r2, [r3, #12]
 800c5a0:	e17c      	b.n	800c89c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5a8:	e178      	b.n	800c89c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5b2:	f040 80c5 	bne.w	800c740 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c5b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5ba:	2b20      	cmp	r3, #32
 800c5bc:	dc48      	bgt.n	800c650 <UART_SetConfig+0x848>
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	db7b      	blt.n	800c6ba <UART_SetConfig+0x8b2>
 800c5c2:	2b20      	cmp	r3, #32
 800c5c4:	d879      	bhi.n	800c6ba <UART_SetConfig+0x8b2>
 800c5c6:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <UART_SetConfig+0x7c4>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c657 	.word	0x0800c657
 800c5d0:	0800c65f 	.word	0x0800c65f
 800c5d4:	0800c6bb 	.word	0x0800c6bb
 800c5d8:	0800c6bb 	.word	0x0800c6bb
 800c5dc:	0800c667 	.word	0x0800c667
 800c5e0:	0800c6bb 	.word	0x0800c6bb
 800c5e4:	0800c6bb 	.word	0x0800c6bb
 800c5e8:	0800c6bb 	.word	0x0800c6bb
 800c5ec:	0800c677 	.word	0x0800c677
 800c5f0:	0800c6bb 	.word	0x0800c6bb
 800c5f4:	0800c6bb 	.word	0x0800c6bb
 800c5f8:	0800c6bb 	.word	0x0800c6bb
 800c5fc:	0800c6bb 	.word	0x0800c6bb
 800c600:	0800c6bb 	.word	0x0800c6bb
 800c604:	0800c6bb 	.word	0x0800c6bb
 800c608:	0800c6bb 	.word	0x0800c6bb
 800c60c:	0800c687 	.word	0x0800c687
 800c610:	0800c6bb 	.word	0x0800c6bb
 800c614:	0800c6bb 	.word	0x0800c6bb
 800c618:	0800c6bb 	.word	0x0800c6bb
 800c61c:	0800c6bb 	.word	0x0800c6bb
 800c620:	0800c6bb 	.word	0x0800c6bb
 800c624:	0800c6bb 	.word	0x0800c6bb
 800c628:	0800c6bb 	.word	0x0800c6bb
 800c62c:	0800c6bb 	.word	0x0800c6bb
 800c630:	0800c6bb 	.word	0x0800c6bb
 800c634:	0800c6bb 	.word	0x0800c6bb
 800c638:	0800c6bb 	.word	0x0800c6bb
 800c63c:	0800c6bb 	.word	0x0800c6bb
 800c640:	0800c6bb 	.word	0x0800c6bb
 800c644:	0800c6bb 	.word	0x0800c6bb
 800c648:	0800c6bb 	.word	0x0800c6bb
 800c64c:	0800c6ad 	.word	0x0800c6ad
 800c650:	2b40      	cmp	r3, #64	; 0x40
 800c652:	d02e      	beq.n	800c6b2 <UART_SetConfig+0x8aa>
 800c654:	e031      	b.n	800c6ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c656:	f7fc ffd1 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 800c65a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c65c:	e033      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c65e:	f7fc ffe3 	bl	8009628 <HAL_RCC_GetPCLK2Freq>
 800c662:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c664:	e02f      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fa12 	bl	800aa94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c674:	e027      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe fb5e 	bl	800ad3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c684:	e01f      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c686:	4b2d      	ldr	r3, [pc, #180]	; (800c73c <UART_SetConfig+0x934>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c692:	4b2a      	ldr	r3, [pc, #168]	; (800c73c <UART_SetConfig+0x934>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	08db      	lsrs	r3, r3, #3
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	4a24      	ldr	r2, [pc, #144]	; (800c730 <UART_SetConfig+0x928>)
 800c69e:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6a4:	e00f      	b.n	800c6c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6a6:	4b22      	ldr	r3, [pc, #136]	; (800c730 <UART_SetConfig+0x928>)
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6aa:	e00c      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6ac:	4b21      	ldr	r3, [pc, #132]	; (800c734 <UART_SetConfig+0x92c>)
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b0:	e009      	b.n	800c6c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b8:	e005      	b.n	800c6c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80e7 	beq.w	800c89c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	4a19      	ldr	r2, [pc, #100]	; (800c738 <UART_SetConfig+0x930>)
 800c6d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6e0:	005a      	lsls	r2, r3, #1
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	085b      	lsrs	r3, r3, #1
 800c6e8:	441a      	add	r2, r3
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	2b0f      	cmp	r3, #15
 800c6f8:	d916      	bls.n	800c728 <UART_SetConfig+0x920>
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c700:	d212      	bcs.n	800c728 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	b29b      	uxth	r3, r3
 800c706:	f023 030f 	bic.w	r3, r3, #15
 800c70a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	085b      	lsrs	r3, r3, #1
 800c710:	b29b      	uxth	r3, r3
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	b29a      	uxth	r2, r3
 800c718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c71a:	4313      	orrs	r3, r2
 800c71c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c724:	60da      	str	r2, [r3, #12]
 800c726:	e0b9      	b.n	800c89c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c72e:	e0b5      	b.n	800c89c <UART_SetConfig+0xa94>
 800c730:	03d09000 	.word	0x03d09000
 800c734:	003d0900 	.word	0x003d0900
 800c738:	080118e0 	.word	0x080118e0
 800c73c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c740:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c744:	2b20      	cmp	r3, #32
 800c746:	dc49      	bgt.n	800c7dc <UART_SetConfig+0x9d4>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	db7c      	blt.n	800c846 <UART_SetConfig+0xa3e>
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	d87a      	bhi.n	800c846 <UART_SetConfig+0xa3e>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <UART_SetConfig+0x950>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c7e3 	.word	0x0800c7e3
 800c75c:	0800c7eb 	.word	0x0800c7eb
 800c760:	0800c847 	.word	0x0800c847
 800c764:	0800c847 	.word	0x0800c847
 800c768:	0800c7f3 	.word	0x0800c7f3
 800c76c:	0800c847 	.word	0x0800c847
 800c770:	0800c847 	.word	0x0800c847
 800c774:	0800c847 	.word	0x0800c847
 800c778:	0800c803 	.word	0x0800c803
 800c77c:	0800c847 	.word	0x0800c847
 800c780:	0800c847 	.word	0x0800c847
 800c784:	0800c847 	.word	0x0800c847
 800c788:	0800c847 	.word	0x0800c847
 800c78c:	0800c847 	.word	0x0800c847
 800c790:	0800c847 	.word	0x0800c847
 800c794:	0800c847 	.word	0x0800c847
 800c798:	0800c813 	.word	0x0800c813
 800c79c:	0800c847 	.word	0x0800c847
 800c7a0:	0800c847 	.word	0x0800c847
 800c7a4:	0800c847 	.word	0x0800c847
 800c7a8:	0800c847 	.word	0x0800c847
 800c7ac:	0800c847 	.word	0x0800c847
 800c7b0:	0800c847 	.word	0x0800c847
 800c7b4:	0800c847 	.word	0x0800c847
 800c7b8:	0800c847 	.word	0x0800c847
 800c7bc:	0800c847 	.word	0x0800c847
 800c7c0:	0800c847 	.word	0x0800c847
 800c7c4:	0800c847 	.word	0x0800c847
 800c7c8:	0800c847 	.word	0x0800c847
 800c7cc:	0800c847 	.word	0x0800c847
 800c7d0:	0800c847 	.word	0x0800c847
 800c7d4:	0800c847 	.word	0x0800c847
 800c7d8:	0800c839 	.word	0x0800c839
 800c7dc:	2b40      	cmp	r3, #64	; 0x40
 800c7de:	d02e      	beq.n	800c83e <UART_SetConfig+0xa36>
 800c7e0:	e031      	b.n	800c846 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e2:	f7fc ff0b 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 800c7e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7e8:	e033      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7ea:	f7fc ff1d 	bl	8009628 <HAL_RCC_GetPCLK2Freq>
 800c7ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7f0:	e02f      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f94c 	bl	800aa94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c800:	e027      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c802:	f107 0318 	add.w	r3, r7, #24
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fa98 	bl	800ad3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c810:	e01f      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c812:	4b2d      	ldr	r3, [pc, #180]	; (800c8c8 <UART_SetConfig+0xac0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c81e:	4b2a      	ldr	r3, [pc, #168]	; (800c8c8 <UART_SetConfig+0xac0>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	08db      	lsrs	r3, r3, #3
 800c824:	f003 0303 	and.w	r3, r3, #3
 800c828:	4a28      	ldr	r2, [pc, #160]	; (800c8cc <UART_SetConfig+0xac4>)
 800c82a:	fa22 f303 	lsr.w	r3, r2, r3
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c830:	e00f      	b.n	800c852 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c832:	4b26      	ldr	r3, [pc, #152]	; (800c8cc <UART_SetConfig+0xac4>)
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c836:	e00c      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c838:	4b25      	ldr	r3, [pc, #148]	; (800c8d0 <UART_SetConfig+0xac8>)
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e009      	b.n	800c852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c83e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c844:	e005      	b.n	800c852 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c850:	bf00      	nop
    }

    if (pclk != 0U)
 800c852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d021      	beq.n	800c89c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85c:	4a1d      	ldr	r2, [pc, #116]	; (800c8d4 <UART_SetConfig+0xacc>)
 800c85e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c862:	461a      	mov	r2, r3
 800c864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c866:	fbb3 f2f2 	udiv	r2, r3, r2
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	085b      	lsrs	r3, r3, #1
 800c870:	441a      	add	r2, r3
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	2b0f      	cmp	r3, #15
 800c880:	d909      	bls.n	800c896 <UART_SetConfig+0xa8e>
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c888:	d205      	bcs.n	800c896 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	60da      	str	r2, [r3, #12]
 800c894:	e002      	b.n	800c89c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c8b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3748      	adds	r7, #72	; 0x48
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8c6:	bf00      	nop
 800c8c8:	58024400 	.word	0x58024400
 800c8cc:	03d09000 	.word	0x03d09000
 800c8d0:	003d0900 	.word	0x003d0900
 800c8d4:	080118e0 	.word	0x080118e0

0800c8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c906:	f003 0302 	and.w	r3, r3, #2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c928:	f003 0304 	and.w	r3, r3, #4
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00a      	beq.n	800c946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	f003 0308 	and.w	r3, r3, #8
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00a      	beq.n	800c968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	430a      	orrs	r2, r1
 800c966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96c:	f003 0310 	and.w	r3, r3, #16
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00a      	beq.n	800c98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98e:	f003 0320 	and.w	r3, r3, #32
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01a      	beq.n	800c9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9d6:	d10a      	bne.n	800c9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	605a      	str	r2, [r3, #4]
  }
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b098      	sub	sp, #96	; 0x60
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca2c:	f7f8 f94c 	bl	8004cc8 <HAL_GetTick>
 800ca30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b08      	cmp	r3, #8
 800ca3e:	d12f      	bne.n	800caa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f88e 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d022      	beq.n	800caa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca78:	647b      	str	r3, [r7, #68]	; 0x44
 800ca7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e6      	bne.n	800ca5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e063      	b.n	800cb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0304 	and.w	r3, r3, #4
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d149      	bne.n	800cb42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800caae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cab6:	2200      	movs	r2, #0
 800cab8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f857 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d03c      	beq.n	800cb42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	623b      	str	r3, [r7, #32]
   return(result);
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cadc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae6:	633b      	str	r3, [r7, #48]	; 0x30
 800cae8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e6      	bne.n	800cac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3308      	adds	r3, #8
 800cb00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	e853 3f00 	ldrex	r3, [r3]
 800cb08:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f023 0301 	bic.w	r3, r3, #1
 800cb10:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3308      	adds	r3, #8
 800cb18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb1a:	61fa      	str	r2, [r7, #28]
 800cb1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	69b9      	ldr	r1, [r7, #24]
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	617b      	str	r3, [r7, #20]
   return(result);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e5      	bne.n	800cafa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e012      	b.n	800cb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3758      	adds	r7, #88	; 0x58
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb80:	e049      	b.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb88:	d045      	beq.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb8a:	f7f8 f89d 	bl	8004cc8 <HAL_GetTick>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d302      	bcc.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e048      	b.n	800cc36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d031      	beq.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	f003 0308 	and.w	r3, r3, #8
 800cbbc:	2b08      	cmp	r3, #8
 800cbbe:	d110      	bne.n	800cbe2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2208      	movs	r2, #8
 800cbc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 f95b 	bl	800ce84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e029      	b.n	800cc36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69db      	ldr	r3, [r3, #28]
 800cbe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbf0:	d111      	bne.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 f941 	bl	800ce84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2220      	movs	r2, #32
 800cc06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e00f      	b.n	800cc36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	4013      	ands	r3, r2
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	bf0c      	ite	eq
 800cc26:	2301      	moveq	r3, #1
 800cc28:	2300      	movne	r3, #0
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d0a6      	beq.n	800cb82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b0a3      	sub	sp, #140	; 0x8c
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	88fa      	ldrh	r2, [r7, #6]
 800cc58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	88fa      	ldrh	r2, [r7, #6]
 800cc60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc72:	d10e      	bne.n	800cc92 <UART_Start_Receive_IT+0x52>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d105      	bne.n	800cc88 <UART_Start_Receive_IT+0x48>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cc82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc86:	e02d      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	22ff      	movs	r2, #255	; 0xff
 800cc8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc90:	e028      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10d      	bne.n	800ccb6 <UART_Start_Receive_IT+0x76>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d104      	bne.n	800ccac <UART_Start_Receive_IT+0x6c>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	22ff      	movs	r2, #255	; 0xff
 800cca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccaa:	e01b      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	227f      	movs	r2, #127	; 0x7f
 800ccb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccb4:	e016      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccbe:	d10d      	bne.n	800ccdc <UART_Start_Receive_IT+0x9c>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d104      	bne.n	800ccd2 <UART_Start_Receive_IT+0x92>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	227f      	movs	r2, #127	; 0x7f
 800cccc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccd0:	e008      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	223f      	movs	r2, #63	; 0x3f
 800ccd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccda:	e003      	b.n	800cce4 <UART_Start_Receive_IT+0xa4>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2222      	movs	r2, #34	; 0x22
 800ccf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccfe:	e853 3f00 	ldrex	r3, [r3]
 800cd02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd06:	f043 0301 	orr.w	r3, r3, #1
 800cd0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3308      	adds	r3, #8
 800cd14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cd18:	673a      	str	r2, [r7, #112]	; 0x70
 800cd1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd20:	e841 2300 	strex	r3, r2, [r1]
 800cd24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cd26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1e3      	bne.n	800ccf4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd34:	d14f      	bne.n	800cdd6 <UART_Start_Receive_IT+0x196>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd3c:	88fa      	ldrh	r2, [r7, #6]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d349      	bcc.n	800cdd6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd4a:	d107      	bne.n	800cd5c <UART_Start_Receive_IT+0x11c>
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d103      	bne.n	800cd5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	4a47      	ldr	r2, [pc, #284]	; (800ce74 <UART_Start_Receive_IT+0x234>)
 800cd58:	675a      	str	r2, [r3, #116]	; 0x74
 800cd5a:	e002      	b.n	800cd62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4a46      	ldr	r2, [pc, #280]	; (800ce78 <UART_Start_Receive_IT+0x238>)
 800cd60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01a      	beq.n	800cda0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd94:	e841 2300 	strex	r3, r2, [r1]
 800cd98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1e4      	bne.n	800cd6a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3308      	adds	r3, #8
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdaa:	e853 3f00 	ldrex	r3, [r3]
 800cdae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cdc0:	64ba      	str	r2, [r7, #72]	; 0x48
 800cdc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdc8:	e841 2300 	strex	r3, r2, [r1]
 800cdcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e5      	bne.n	800cda0 <UART_Start_Receive_IT+0x160>
 800cdd4:	e046      	b.n	800ce64 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdde:	d107      	bne.n	800cdf0 <UART_Start_Receive_IT+0x1b0>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d103      	bne.n	800cdf0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	4a24      	ldr	r2, [pc, #144]	; (800ce7c <UART_Start_Receive_IT+0x23c>)
 800cdec:	675a      	str	r2, [r3, #116]	; 0x74
 800cdee:	e002      	b.n	800cdf6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4a23      	ldr	r2, [pc, #140]	; (800ce80 <UART_Start_Receive_IT+0x240>)
 800cdf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d019      	beq.n	800ce32 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ce12:	677b      	str	r3, [r7, #116]	; 0x74
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce24:	e841 2300 	strex	r3, r2, [r1]
 800ce28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e6      	bne.n	800cdfe <UART_Start_Receive_IT+0x1be>
 800ce30:	e018      	b.n	800ce64 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	e853 3f00 	ldrex	r3, [r3]
 800ce3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	f043 0320 	orr.w	r3, r3, #32
 800ce46:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce50:	623b      	str	r3, [r7, #32]
 800ce52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	69f9      	ldr	r1, [r7, #28]
 800ce56:	6a3a      	ldr	r2, [r7, #32]
 800ce58:	e841 2300 	strex	r3, r2, [r1]
 800ce5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e6      	bne.n	800ce32 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	378c      	adds	r7, #140	; 0x8c
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	0800d9e9 	.word	0x0800d9e9
 800ce78:	0800d689 	.word	0x0800d689
 800ce7c:	0800d4d1 	.word	0x0800d4d1
 800ce80:	0800d319 	.word	0x0800d319

0800ce84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b095      	sub	sp, #84	; 0x54
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	e853 3f00 	ldrex	r3, [r3]
 800ce98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceaa:	643b      	str	r3, [r7, #64]	; 0x40
 800ceac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ceb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceb2:	e841 2300 	strex	r3, r2, [r1]
 800ceb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1e6      	bne.n	800ce8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3308      	adds	r3, #8
 800cec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	e853 3f00 	ldrex	r3, [r3]
 800cecc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	4b1e      	ldr	r3, [pc, #120]	; (800cf4c <UART_EndRxTransfer+0xc8>)
 800ced2:	4013      	ands	r3, r2
 800ced4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cede:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cee0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee6:	e841 2300 	strex	r3, r2, [r1]
 800ceea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e5      	bne.n	800cebe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d118      	bne.n	800cf2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	e853 3f00 	ldrex	r3, [r3]
 800cf06:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f023 0310 	bic.w	r3, r3, #16
 800cf0e:	647b      	str	r3, [r7, #68]	; 0x44
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	461a      	mov	r2, r3
 800cf16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf18:	61bb      	str	r3, [r7, #24]
 800cf1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1c:	6979      	ldr	r1, [r7, #20]
 800cf1e:	69ba      	ldr	r2, [r7, #24]
 800cf20:	e841 2300 	strex	r3, r2, [r1]
 800cf24:	613b      	str	r3, [r7, #16]
   return(result);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1e6      	bne.n	800cefa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2220      	movs	r2, #32
 800cf30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf40:	bf00      	nop
 800cf42:	3754      	adds	r7, #84	; 0x54
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	effffffe 	.word	0xeffffffe

0800cf50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7fe ff34 	bl	800bddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf74:	bf00      	nop
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b08f      	sub	sp, #60	; 0x3c
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8a:	2b21      	cmp	r3, #33	; 0x21
 800cf8c:	d14c      	bne.n	800d028 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d132      	bne.n	800d000 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	e853 3f00 	ldrex	r3, [r3]
 800cfa6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc0:	e841 2300 	strex	r3, r2, [r1]
 800cfc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e6      	bne.n	800cf9a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	e853 3f00 	ldrex	r3, [r3]
 800cfd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe0:	633b      	str	r3, [r7, #48]	; 0x30
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	61bb      	str	r3, [r7, #24]
 800cfec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6979      	ldr	r1, [r7, #20]
 800cff0:	69ba      	ldr	r2, [r7, #24]
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	613b      	str	r3, [r7, #16]
   return(result);
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e6      	bne.n	800cfcc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cffe:	e013      	b.n	800d028 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	b29a      	uxth	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800d028:	bf00      	nop
 800d02a:	373c      	adds	r7, #60	; 0x3c
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d034:	b480      	push	{r7}
 800d036:	b091      	sub	sp, #68	; 0x44
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d042:	2b21      	cmp	r3, #33	; 0x21
 800d044:	d151      	bne.n	800d0ea <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d132      	bne.n	800d0b8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	e853 3f00 	ldrex	r3, [r3]
 800d05e:	623b      	str	r3, [r7, #32]
   return(result);
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d066:	63bb      	str	r3, [r7, #56]	; 0x38
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d070:	633b      	str	r3, [r7, #48]	; 0x30
 800d072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d078:	e841 2300 	strex	r3, r2, [r1]
 800d07c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1e6      	bne.n	800d052 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	e853 3f00 	ldrex	r3, [r3]
 800d090:	60fb      	str	r3, [r7, #12]
   return(result);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d098:	637b      	str	r3, [r7, #52]	; 0x34
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a6:	69b9      	ldr	r1, [r7, #24]
 800d0a8:	69fa      	ldr	r2, [r7, #28]
 800d0aa:	e841 2300 	strex	r3, r2, [r1]
 800d0ae:	617b      	str	r3, [r7, #20]
   return(result);
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1e6      	bne.n	800d084 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d0b6:	e018      	b.n	800d0ea <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0d2:	1c9a      	adds	r2, r3, #2
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800d0ea:	bf00      	nop
 800d0ec:	3744      	adds	r7, #68	; 0x44
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b091      	sub	sp, #68	; 0x44
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d104:	2b21      	cmp	r3, #33	; 0x21
 800d106:	d160      	bne.n	800d1ca <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d10e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d110:	e057      	b.n	800d1c2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d118:	b29b      	uxth	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d133      	bne.n	800d186 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	623b      	str	r3, [r7, #32]
   return(result);
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d134:	63bb      	str	r3, [r7, #56]	; 0x38
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d13e:	633a      	str	r2, [r7, #48]	; 0x30
 800d140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e5      	bne.n	800d11e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	e853 3f00 	ldrex	r3, [r3]
 800d15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d166:	637b      	str	r3, [r7, #52]	; 0x34
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	461a      	mov	r2, r3
 800d16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d170:	61fb      	str	r3, [r7, #28]
 800d172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d174:	69b9      	ldr	r1, [r7, #24]
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	e841 2300 	strex	r3, r2, [r1]
 800d17c:	617b      	str	r3, [r7, #20]
   return(result);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1e6      	bne.n	800d152 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d184:	e021      	b.n	800d1ca <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69db      	ldr	r3, [r3, #28]
 800d18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d190:	2b00      	cmp	r3, #0
 800d192:	d013      	beq.n	800d1bc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d198:	781a      	ldrb	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d1bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d1c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1a4      	bne.n	800d112 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d1c8:	e7ff      	b.n	800d1ca <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d1ca:	bf00      	nop
 800d1cc:	3744      	adds	r7, #68	; 0x44
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b091      	sub	sp, #68	; 0x44
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1e4:	2b21      	cmp	r3, #33	; 0x21
 800d1e6:	d165      	bne.n	800d2b4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d1f0:	e05c      	b.n	800d2ac <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d133      	bne.n	800d266 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3308      	adds	r3, #8
 800d204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	e853 3f00 	ldrex	r3, [r3]
 800d20c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d214:	637b      	str	r3, [r7, #52]	; 0x34
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3308      	adds	r3, #8
 800d21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d21e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e5      	bne.n	800d1fe <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	e853 3f00 	ldrex	r3, [r3]
 800d23e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d246:	633b      	str	r3, [r7, #48]	; 0x30
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	61bb      	str	r3, [r7, #24]
 800d252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d254:	6979      	ldr	r1, [r7, #20]
 800d256:	69ba      	ldr	r2, [r7, #24]
 800d258:	e841 2300 	strex	r3, r2, [r1]
 800d25c:	613b      	str	r3, [r7, #16]
   return(result);
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1e6      	bne.n	800d232 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d264:	e026      	b.n	800d2b4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d270:	2b00      	cmp	r3, #0
 800d272:	d018      	beq.n	800d2a6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d278:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	881b      	ldrh	r3, [r3, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d288:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d28e:	1c9a      	adds	r2, r3, #2
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	3b01      	subs	r3, #1
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d2a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d2ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d19f      	bne.n	800d1f2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d2b2:	e7ff      	b.n	800d2b4 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d2b4:	bf00      	nop
 800d2b6:	3744      	adds	r7, #68	; 0x44
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	e853 3f00 	ldrex	r3, [r3]
 800d2d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2dc:	61fb      	str	r3, [r7, #28]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	61bb      	str	r3, [r7, #24]
 800d2e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	e841 2300 	strex	r3, r2, [r1]
 800d2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1e6      	bne.n	800d2c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2220      	movs	r2, #32
 800d2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7fe fd5d 	bl	800bdc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d30e:	bf00      	nop
 800d310:	3720      	adds	r7, #32
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b09c      	sub	sp, #112	; 0x70
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d326:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d330:	2b22      	cmp	r3, #34	; 0x22
 800d332:	f040 80be 	bne.w	800d4b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d344:	b2d9      	uxtb	r1, r3
 800d346:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d350:	400a      	ands	r2, r1
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d366:	b29b      	uxth	r3, r3
 800d368:	3b01      	subs	r3, #1
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d378:	b29b      	uxth	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f040 80a1 	bne.w	800d4c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d394:	66bb      	str	r3, [r7, #104]	; 0x68
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d39e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e6      	bne.n	800d380 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	e853 3f00 	ldrex	r3, [r3]
 800d3c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	667b      	str	r3, [r7, #100]	; 0x64
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3d2:	647a      	str	r2, [r7, #68]	; 0x44
 800d3d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3da:	e841 2300 	strex	r3, r2, [r1]
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e5      	bne.n	800d3b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a33      	ldr	r2, [pc, #204]	; (800d4cc <UART_RxISR_8BIT+0x1b4>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d01f      	beq.n	800d444 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d018      	beq.n	800d444 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	e853 3f00 	ldrex	r3, [r3]
 800d41e:	623b      	str	r3, [r7, #32]
   return(result);
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d426:	663b      	str	r3, [r7, #96]	; 0x60
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d430:	633b      	str	r3, [r7, #48]	; 0x30
 800d432:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d438:	e841 2300 	strex	r3, r2, [r1]
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e6      	bne.n	800d412 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d12e      	bne.n	800d4aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	e853 3f00 	ldrex	r3, [r3]
 800d45e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f023 0310 	bic.w	r3, r3, #16
 800d466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d474:	69b9      	ldr	r1, [r7, #24]
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	e841 2300 	strex	r3, r2, [r1]
 800d47c:	617b      	str	r3, [r7, #20]
   return(result);
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1e6      	bne.n	800d452 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	69db      	ldr	r3, [r3, #28]
 800d48a:	f003 0310 	and.w	r3, r3, #16
 800d48e:	2b10      	cmp	r3, #16
 800d490:	d103      	bne.n	800d49a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2210      	movs	r2, #16
 800d498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7fe fca4 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4a8:	e00b      	b.n	800d4c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7f4 f9a8 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 800d4b0:	e007      	b.n	800d4c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	699a      	ldr	r2, [r3, #24]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0208 	orr.w	r2, r2, #8
 800d4c0:	619a      	str	r2, [r3, #24]
}
 800d4c2:	bf00      	nop
 800d4c4:	3770      	adds	r7, #112	; 0x70
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	58000c00 	.word	0x58000c00

0800d4d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b09c      	sub	sp, #112	; 0x70
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e8:	2b22      	cmp	r3, #34	; 0x22
 800d4ea:	f040 80be 	bne.w	800d66a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4fc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d4fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d506:	4013      	ands	r3, r2
 800d508:	b29a      	uxth	r2, r3
 800d50a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d50c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d512:	1c9a      	adds	r2, r3, #2
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3b01      	subs	r3, #1
 800d522:	b29a      	uxth	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d530:	b29b      	uxth	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	f040 80a1 	bne.w	800d67a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d540:	e853 3f00 	ldrex	r3, [r3]
 800d544:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d54c:	667b      	str	r3, [r7, #100]	; 0x64
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	461a      	mov	r2, r3
 800d554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d556:	657b      	str	r3, [r7, #84]	; 0x54
 800d558:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d55e:	e841 2300 	strex	r3, r2, [r1]
 800d562:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1e6      	bne.n	800d538 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3308      	adds	r3, #8
 800d570:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d574:	e853 3f00 	ldrex	r3, [r3]
 800d578:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	f023 0301 	bic.w	r3, r3, #1
 800d580:	663b      	str	r3, [r7, #96]	; 0x60
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3308      	adds	r3, #8
 800d588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d58a:	643a      	str	r2, [r7, #64]	; 0x40
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d592:	e841 2300 	strex	r3, r2, [r1]
 800d596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1e5      	bne.n	800d56a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a33      	ldr	r2, [pc, #204]	; (800d684 <UART_RxISR_16BIT+0x1b4>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d01f      	beq.n	800d5fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d018      	beq.n	800d5fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	e853 3f00 	ldrex	r3, [r3]
 800d5d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f0:	e841 2300 	strex	r3, r2, [r1]
 800d5f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e6      	bne.n	800d5ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d600:	2b01      	cmp	r3, #1
 800d602:	d12e      	bne.n	800d662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	e853 3f00 	ldrex	r3, [r3]
 800d616:	60bb      	str	r3, [r7, #8]
   return(result);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f023 0310 	bic.w	r3, r3, #16
 800d61e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	461a      	mov	r2, r3
 800d626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d628:	61bb      	str	r3, [r7, #24]
 800d62a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62c:	6979      	ldr	r1, [r7, #20]
 800d62e:	69ba      	ldr	r2, [r7, #24]
 800d630:	e841 2300 	strex	r3, r2, [r1]
 800d634:	613b      	str	r3, [r7, #16]
   return(result);
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1e6      	bne.n	800d60a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	f003 0310 	and.w	r3, r3, #16
 800d646:	2b10      	cmp	r3, #16
 800d648:	d103      	bne.n	800d652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2210      	movs	r2, #16
 800d650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7fe fbc8 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d660:	e00b      	b.n	800d67a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f4 f8cc 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 800d668:	e007      	b.n	800d67a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	699a      	ldr	r2, [r3, #24]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f042 0208 	orr.w	r2, r2, #8
 800d678:	619a      	str	r2, [r3, #24]
}
 800d67a:	bf00      	nop
 800d67c:	3770      	adds	r7, #112	; 0x70
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	58000c00 	.word	0x58000c00

0800d688 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b0ac      	sub	sp, #176	; 0xb0
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d696:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6be:	2b22      	cmp	r3, #34	; 0x22
 800d6c0:	f040 8180 	bne.w	800d9c4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6ce:	e123      	b.n	800d918 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d6da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d6de:	b2d9      	uxtb	r1, r3
 800d6e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ea:	400a      	ands	r2, r1
 800d6ec:	b2d2      	uxtb	r2, r2
 800d6ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6f4:	1c5a      	adds	r2, r3, #1
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d700:	b29b      	uxth	r3, r3
 800d702:	3b01      	subs	r3, #1
 800d704:	b29a      	uxth	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	69db      	ldr	r3, [r3, #28]
 800d712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d71a:	f003 0307 	and.w	r3, r3, #7
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d053      	beq.n	800d7ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d011      	beq.n	800d752 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d72e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00b      	beq.n	800d752 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2201      	movs	r2, #1
 800d740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d748:	f043 0201 	orr.w	r2, r3, #1
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d011      	beq.n	800d782 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d75e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00b      	beq.n	800d782 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2202      	movs	r2, #2
 800d770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d778:	f043 0204 	orr.w	r2, r3, #4
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d011      	beq.n	800d7b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d78e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2204      	movs	r2, #4
 800d7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a8:	f043 0202 	orr.w	r2, r3, #2
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7fe fb0d 	bl	800bddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f040 80a0 	bne.w	800d918 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d7e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d7fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d800:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e4      	bne.n	800d7d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3308      	adds	r3, #8
 800d814:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d81e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d820:	4b6e      	ldr	r3, [pc, #440]	; (800d9dc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d822:	4013      	ands	r3, r2
 800d824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3308      	adds	r3, #8
 800d82e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d832:	66ba      	str	r2, [r7, #104]	; 0x68
 800d834:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d836:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d838:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d83a:	e841 2300 	strex	r3, r2, [r1]
 800d83e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1e3      	bne.n	800d80e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2220      	movs	r2, #32
 800d84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a60      	ldr	r2, [pc, #384]	; (800d9e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d021      	beq.n	800d8a8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d01a      	beq.n	800d8a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d87a:	e853 3f00 	ldrex	r3, [r3]
 800d87e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d894:	657b      	str	r3, [r7, #84]	; 0x54
 800d896:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d898:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d89a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d89c:	e841 2300 	strex	r3, r2, [r1]
 800d8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1e4      	bne.n	800d872 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d130      	bne.n	800d912 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	f023 0310 	bic.w	r3, r3, #16
 800d8ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8d8:	643b      	str	r3, [r7, #64]	; 0x40
 800d8da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8e0:	e841 2300 	strex	r3, r2, [r1]
 800d8e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1e4      	bne.n	800d8b6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	f003 0310 	and.w	r3, r3, #16
 800d8f6:	2b10      	cmp	r3, #16
 800d8f8:	d103      	bne.n	800d902 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2210      	movs	r2, #16
 800d900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7fe fa70 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
 800d910:	e002      	b.n	800d918 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7f3 ff74 	bl	8001800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d918:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d006      	beq.n	800d92e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d924:	f003 0320 	and.w	r3, r3, #32
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f47f aed1 	bne.w	800d6d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d934:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d938:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d049      	beq.n	800d9d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d946:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d242      	bcs.n	800d9d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3308      	adds	r3, #8
 800d954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	e853 3f00 	ldrex	r3, [r3]
 800d95c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3308      	adds	r3, #8
 800d96e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d972:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e3      	bne.n	800d94e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a16      	ldr	r2, [pc, #88]	; (800d9e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d98a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	e853 3f00 	ldrex	r3, [r3]
 800d998:	60bb      	str	r3, [r7, #8]
   return(result);
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f043 0320 	orr.w	r3, r3, #32
 800d9a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d9ae:	61bb      	str	r3, [r7, #24]
 800d9b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	e841 2300 	strex	r3, r2, [r1]
 800d9ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1e4      	bne.n	800d98c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9c2:	e007      	b.n	800d9d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	699a      	ldr	r2, [r3, #24]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f042 0208 	orr.w	r2, r2, #8
 800d9d2:	619a      	str	r2, [r3, #24]
}
 800d9d4:	bf00      	nop
 800d9d6:	37b0      	adds	r7, #176	; 0xb0
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	effffffe 	.word	0xeffffffe
 800d9e0:	58000c00 	.word	0x58000c00
 800d9e4:	0800d319 	.word	0x0800d319

0800d9e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b0ae      	sub	sp, #184	; 0xb8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da1e:	2b22      	cmp	r3, #34	; 0x22
 800da20:	f040 8184 	bne.w	800dd2c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da2e:	e127      	b.n	800dc80 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da36:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800da42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800da46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800da4a:	4013      	ands	r3, r2
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da58:	1c9a      	adds	r2, r3, #2
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da64:	b29b      	uxth	r3, r3
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800da7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da7e:	f003 0307 	and.w	r3, r3, #7
 800da82:	2b00      	cmp	r3, #0
 800da84:	d053      	beq.n	800db2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d011      	beq.n	800dab6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800da92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00b      	beq.n	800dab6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2201      	movs	r2, #1
 800daa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daac:	f043 0201 	orr.w	r2, r3, #1
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d011      	beq.n	800dae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00b      	beq.n	800dae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2202      	movs	r2, #2
 800dad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dadc:	f043 0204 	orr.w	r2, r3, #4
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800daea:	f003 0304 	and.w	r3, r3, #4
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d011      	beq.n	800db16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800daf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00b      	beq.n	800db16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2204      	movs	r2, #4
 800db04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db0c:	f043 0202 	orr.w	r2, r3, #2
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7fe f95b 	bl	800bddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db34:	b29b      	uxth	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	f040 80a2 	bne.w	800dc80 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db44:	e853 3f00 	ldrex	r3, [r3]
 800db48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	461a      	mov	r2, r3
 800db5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db62:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db6a:	e841 2300 	strex	r3, r2, [r1]
 800db6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1e2      	bne.n	800db3c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3308      	adds	r3, #8
 800db7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db80:	e853 3f00 	ldrex	r3, [r3]
 800db84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db88:	4b6e      	ldr	r3, [pc, #440]	; (800dd44 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800db8a:	4013      	ands	r3, r2
 800db8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800db9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dba2:	e841 2300 	strex	r3, r2, [r1]
 800dba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1e3      	bne.n	800db76 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2220      	movs	r2, #32
 800dbb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a60      	ldr	r2, [pc, #384]	; (800dd48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d021      	beq.n	800dc10 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d01a      	beq.n	800dc10 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe2:	e853 3f00 	ldrex	r3, [r3]
 800dbe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc04:	e841 2300 	strex	r3, r2, [r1]
 800dc08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1e4      	bne.n	800dbda <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d130      	bne.n	800dc7a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	e853 3f00 	ldrex	r3, [r3]
 800dc2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2e:	f023 0310 	bic.w	r3, r3, #16
 800dc32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc40:	647b      	str	r3, [r7, #68]	; 0x44
 800dc42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc48:	e841 2300 	strex	r3, r2, [r1]
 800dc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e4      	bne.n	800dc1e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	2b10      	cmp	r3, #16
 800dc60:	d103      	bne.n	800dc6a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2210      	movs	r2, #16
 800dc68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7fe f8bc 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
 800dc78:	e002      	b.n	800dc80 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7f3 fdc0 	bl	8001800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc80:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800dc88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f47f aecd 	bne.w	800da30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc9c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dca0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d049      	beq.n	800dd3c <UART_RxISR_16BIT_FIFOEN+0x354>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dcae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d242      	bcs.n	800dd3c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3308      	adds	r3, #8
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	e853 3f00 	ldrex	r3, [r3]
 800dcc4:	623b      	str	r3, [r7, #32]
   return(result);
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dcda:	633a      	str	r2, [r7, #48]	; 0x30
 800dcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e3      	bne.n	800dcb6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a16      	ldr	r2, [pc, #88]	; (800dd4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dcf2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f043 0320 	orr.w	r3, r3, #32
 800dd08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	461a      	mov	r2, r3
 800dd12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1a:	69b9      	ldr	r1, [r7, #24]
 800dd1c:	69fa      	ldr	r2, [r7, #28]
 800dd1e:	e841 2300 	strex	r3, r2, [r1]
 800dd22:	617b      	str	r3, [r7, #20]
   return(result);
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1e4      	bne.n	800dcf4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd2a:	e007      	b.n	800dd3c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	699a      	ldr	r2, [r3, #24]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f042 0208 	orr.w	r2, r2, #8
 800dd3a:	619a      	str	r2, [r3, #24]
}
 800dd3c:	bf00      	nop
 800dd3e:	37b8      	adds	r7, #184	; 0xb8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	effffffe 	.word	0xeffffffe
 800dd48:	58000c00 	.word	0x58000c00
 800dd4c:	0800d4d1 	.word	0x0800d4d1

0800dd50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd58:	bf00      	nop
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd6c:	bf00      	nop
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d101      	bne.n	800dda2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e027      	b.n	800ddf2 <HAL_UARTEx_DisableFifoMode+0x66>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2224      	movs	r2, #36	; 0x24
 800ddae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0201 	bic.w	r2, r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ddd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2220      	movs	r2, #32
 800dde4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de12:	2302      	movs	r3, #2
 800de14:	e02d      	b.n	800de72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2224      	movs	r2, #36	; 0x24
 800de22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f022 0201 	bic.w	r2, r2, #1
 800de3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	430a      	orrs	r2, r1
 800de50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f850 	bl	800def8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2220      	movs	r2, #32
 800de64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d101      	bne.n	800de92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de8e:	2302      	movs	r3, #2
 800de90:	e02d      	b.n	800deee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2224      	movs	r2, #36	; 0x24
 800de9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f022 0201 	bic.w	r2, r2, #1
 800deb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	683a      	ldr	r2, [r7, #0]
 800deca:	430a      	orrs	r2, r1
 800decc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f812 	bl	800def8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2220      	movs	r2, #32
 800dee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df04:	2b00      	cmp	r3, #0
 800df06:	d108      	bne.n	800df1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df18:	e031      	b.n	800df7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df1a:	2310      	movs	r3, #16
 800df1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df1e:	2310      	movs	r3, #16
 800df20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	0e5b      	lsrs	r3, r3, #25
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 0307 	and.w	r3, r3, #7
 800df30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	0f5b      	lsrs	r3, r3, #29
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	f003 0307 	and.w	r3, r3, #7
 800df40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	7b3a      	ldrb	r2, [r7, #12]
 800df46:	4911      	ldr	r1, [pc, #68]	; (800df8c <UARTEx_SetNbDataToProcess+0x94>)
 800df48:	5c8a      	ldrb	r2, [r1, r2]
 800df4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df4e:	7b3a      	ldrb	r2, [r7, #12]
 800df50:	490f      	ldr	r1, [pc, #60]	; (800df90 <UARTEx_SetNbDataToProcess+0x98>)
 800df52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df54:	fb93 f3f2 	sdiv	r3, r3, r2
 800df58:	b29a      	uxth	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	7b7a      	ldrb	r2, [r7, #13]
 800df64:	4909      	ldr	r1, [pc, #36]	; (800df8c <UARTEx_SetNbDataToProcess+0x94>)
 800df66:	5c8a      	ldrb	r2, [r1, r2]
 800df68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df6c:	7b7a      	ldrb	r2, [r7, #13]
 800df6e:	4908      	ldr	r1, [pc, #32]	; (800df90 <UARTEx_SetNbDataToProcess+0x98>)
 800df70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df72:	fb93 f3f2 	sdiv	r3, r3, r2
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df7e:	bf00      	nop
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	080118f8 	.word	0x080118f8
 800df90:	08011900 	.word	0x08011900

0800df94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d121      	bne.n	800dfea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b27      	ldr	r3, [pc, #156]	; (800e048 <FMC_SDRAM_Init+0xb4>)
 800dfac:	4013      	ands	r3, r2
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	6851      	ldr	r1, [r2, #4]
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	6892      	ldr	r2, [r2, #8]
 800dfb6:	4311      	orrs	r1, r2
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	68d2      	ldr	r2, [r2, #12]
 800dfbc:	4311      	orrs	r1, r2
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	6912      	ldr	r2, [r2, #16]
 800dfc2:	4311      	orrs	r1, r2
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	6952      	ldr	r2, [r2, #20]
 800dfc8:	4311      	orrs	r1, r2
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	6992      	ldr	r2, [r2, #24]
 800dfce:	4311      	orrs	r1, r2
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	69d2      	ldr	r2, [r2, #28]
 800dfd4:	4311      	orrs	r1, r2
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	6a12      	ldr	r2, [r2, #32]
 800dfda:	4311      	orrs	r1, r2
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dfe0:	430a      	orrs	r2, r1
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	e026      	b.n	800e038 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	69d9      	ldr	r1, [r3, #28]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	4319      	orrs	r1, r3
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e000:	430b      	orrs	r3, r1
 800e002:	431a      	orrs	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <FMC_SDRAM_Init+0xb4>)
 800e00e:	4013      	ands	r3, r2
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	6851      	ldr	r1, [r2, #4]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	6892      	ldr	r2, [r2, #8]
 800e018:	4311      	orrs	r1, r2
 800e01a:	683a      	ldr	r2, [r7, #0]
 800e01c:	68d2      	ldr	r2, [r2, #12]
 800e01e:	4311      	orrs	r1, r2
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	6912      	ldr	r2, [r2, #16]
 800e024:	4311      	orrs	r1, r2
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	6952      	ldr	r2, [r2, #20]
 800e02a:	4311      	orrs	r1, r2
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	6992      	ldr	r2, [r2, #24]
 800e030:	430a      	orrs	r2, r1
 800e032:	431a      	orrs	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	370c      	adds	r7, #12
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	ffff8000 	.word	0xffff8000

0800e04c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d128      	bne.n	800e0b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	1e59      	subs	r1, r3, #1
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	3b01      	subs	r3, #1
 800e072:	011b      	lsls	r3, r3, #4
 800e074:	4319      	orrs	r1, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	4319      	orrs	r1, r3
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	3b01      	subs	r3, #1
 800e086:	031b      	lsls	r3, r3, #12
 800e088:	4319      	orrs	r1, r3
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	3b01      	subs	r3, #1
 800e090:	041b      	lsls	r3, r3, #16
 800e092:	4319      	orrs	r1, r3
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	695b      	ldr	r3, [r3, #20]
 800e098:	3b01      	subs	r3, #1
 800e09a:	051b      	lsls	r3, r3, #20
 800e09c:	4319      	orrs	r1, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	699b      	ldr	r3, [r3, #24]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	061b      	lsls	r3, r3, #24
 800e0a6:	430b      	orrs	r3, r1
 800e0a8:	431a      	orrs	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	609a      	str	r2, [r3, #8]
 800e0ae:	e02d      	b.n	800e10c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	689a      	ldr	r2, [r3, #8]
 800e0b4:	4b19      	ldr	r3, [pc, #100]	; (800e11c <FMC_SDRAM_Timing_Init+0xd0>)
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	68d2      	ldr	r2, [r2, #12]
 800e0bc:	3a01      	subs	r2, #1
 800e0be:	0311      	lsls	r1, r2, #12
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	6952      	ldr	r2, [r2, #20]
 800e0c4:	3a01      	subs	r2, #1
 800e0c6:	0512      	lsls	r2, r2, #20
 800e0c8:	430a      	orrs	r2, r1
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	1e59      	subs	r1, r3, #1
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	011b      	lsls	r3, r3, #4
 800e0e6:	4319      	orrs	r1, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	021b      	lsls	r3, r3, #8
 800e0f0:	4319      	orrs	r1, r3
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	041b      	lsls	r3, r3, #16
 800e0fa:	4319      	orrs	r1, r3
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	3b01      	subs	r3, #1
 800e102:	061b      	lsls	r3, r3, #24
 800e104:	430b      	orrs	r3, r1
 800e106:	431a      	orrs	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	ff0f0fff 	.word	0xff0f0fff

0800e120 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	691a      	ldr	r2, [r3, #16]
 800e130:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <FMC_SDRAM_SendCommand+0x44>)
 800e132:	4013      	ands	r3, r2
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	6811      	ldr	r1, [r2, #0]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	6852      	ldr	r2, [r2, #4]
 800e13c:	4311      	orrs	r1, r2
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	6892      	ldr	r2, [r2, #8]
 800e142:	3a01      	subs	r2, #1
 800e144:	0152      	lsls	r2, r2, #5
 800e146:	4311      	orrs	r1, r2
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	68d2      	ldr	r2, [r2, #12]
 800e14c:	0252      	lsls	r2, r2, #9
 800e14e:	430a      	orrs	r2, r1
 800e150:	431a      	orrs	r2, r3
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	ffc00000 	.word	0xffc00000

0800e168 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	695a      	ldr	r2, [r3, #20]
 800e176:	4b07      	ldr	r3, [pc, #28]	; (800e194 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e178:	4013      	ands	r3, r2
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	0052      	lsls	r2, r2, #1
 800e17e:	431a      	orrs	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	ffffc001 	.word	0xffffc001

0800e198 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a22      	ldr	r2, [pc, #136]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1a6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	4a20      	ldr	r2, [pc, #128]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1ae:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	4a1e      	ldr	r2, [pc, #120]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1b6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	4a1c      	ldr	r2, [pc, #112]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1be:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	4a1a      	ldr	r2, [pc, #104]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1c6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	4a18      	ldr	r2, [pc, #96]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1ce:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	4a16      	ldr	r2, [pc, #88]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1d6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	69db      	ldr	r3, [r3, #28]
 800e1dc:	4a14      	ldr	r2, [pc, #80]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1de:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	4a12      	ldr	r2, [pc, #72]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1e6:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	4a10      	ldr	r2, [pc, #64]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1ee:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f4:	4a0e      	ldr	r2, [pc, #56]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e1f6:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 800e1f8:	4b0e      	ldr	r3, [pc, #56]	; (800e234 <UTIL_LCD_SetFuncDriver+0x9c>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800e1fe:	4b0d      	ldr	r3, [pc, #52]	; (800e234 <UTIL_LCD_SetFuncDriver+0x9c>)
 800e200:	2200      	movs	r2, #0
 800e202:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800e204:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e206:	69db      	ldr	r3, [r3, #28]
 800e208:	4a0b      	ldr	r2, [pc, #44]	; (800e238 <UTIL_LCD_SetFuncDriver+0xa0>)
 800e20a:	4611      	mov	r1, r2
 800e20c:	2000      	movs	r0, #0
 800e20e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e212:	6a1b      	ldr	r3, [r3, #32]
 800e214:	4a09      	ldr	r2, [pc, #36]	; (800e23c <UTIL_LCD_SetFuncDriver+0xa4>)
 800e216:	4611      	mov	r1, r2
 800e218:	2000      	movs	r0, #0
 800e21a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800e21c:	4b04      	ldr	r3, [pc, #16]	; (800e230 <UTIL_LCD_SetFuncDriver+0x98>)
 800e21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e220:	4a07      	ldr	r2, [pc, #28]	; (800e240 <UTIL_LCD_SetFuncDriver+0xa8>)
 800e222:	4611      	mov	r1, r2
 800e224:	2000      	movs	r0, #0
 800e226:	4798      	blx	r3
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	20001b9c 	.word	0x20001b9c
 800e234:	20001b5c 	.word	0x20001b5c
 800e238:	20001b70 	.word	0x20001b70
 800e23c:	20001b74 	.word	0x20001b74
 800e240:	20001b78 	.word	0x20001b78

0800e244 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800e24c:	4b06      	ldr	r3, [pc, #24]	; (800e268 <UTIL_LCD_SetTextColor+0x24>)
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4a05      	ldr	r2, [pc, #20]	; (800e268 <UTIL_LCD_SetTextColor+0x24>)
 800e252:	015b      	lsls	r3, r3, #5
 800e254:	4413      	add	r3, r2
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
}
 800e25a:	bf00      	nop
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	20001b5c 	.word	0x20001b5c

0800e26c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <UTIL_LCD_SetBackColor+0x24>)
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	4a05      	ldr	r2, [pc, #20]	; (800e290 <UTIL_LCD_SetBackColor+0x24>)
 800e27a:	015b      	lsls	r3, r3, #5
 800e27c:	4413      	add	r3, r2
 800e27e:	3304      	adds	r3, #4
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	601a      	str	r2, [r3, #0]
}
 800e284:	bf00      	nop
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	20001b5c 	.word	0x20001b5c

0800e294 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800e29c:	4b06      	ldr	r3, [pc, #24]	; (800e2b8 <UTIL_LCD_SetFont+0x24>)
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	4a05      	ldr	r2, [pc, #20]	; (800e2b8 <UTIL_LCD_SetFont+0x24>)
 800e2a2:	015b      	lsls	r3, r3, #5
 800e2a4:	4413      	add	r3, r2
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	601a      	str	r2, [r3, #0]
}
 800e2ac:	bf00      	nop
 800e2ae:	370c      	adds	r7, #12
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr
 800e2b8:	20001b5c 	.word	0x20001b5c

0800e2bc <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800e2bc:	b590      	push	{r4, r7, lr}
 800e2be:	b087      	sub	sp, #28
 800e2c0:	af02      	add	r7, sp, #8
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800e2ca:	4b08      	ldr	r3, [pc, #32]	; (800e2ec <UTIL_LCD_FillRGBRect+0x30>)
 800e2cc:	685c      	ldr	r4, [r3, #4]
 800e2ce:	4b08      	ldr	r3, [pc, #32]	; (800e2f0 <UTIL_LCD_FillRGBRect+0x34>)
 800e2d0:	6918      	ldr	r0, [r3, #16]
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	9301      	str	r3, [sp, #4]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	68f9      	ldr	r1, [r7, #12]
 800e2e0:	47a0      	blx	r4
}
 800e2e2:	bf00      	nop
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd90      	pop	{r4, r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20001b9c 	.word	0x20001b9c
 800e2f0:	20001b5c 	.word	0x20001b5c

0800e2f4 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af02      	add	r7, sp, #8
 800e2fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800e2fc:	4b07      	ldr	r3, [pc, #28]	; (800e31c <UTIL_LCD_Clear+0x28>)
 800e2fe:	695a      	ldr	r2, [r3, #20]
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <UTIL_LCD_Clear+0x28>)
 800e302:	6999      	ldr	r1, [r3, #24]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	2100      	movs	r1, #0
 800e30c:	2000      	movs	r0, #0
 800e30e:	f000 f901 	bl	800e514 <UTIL_LCD_FillRect>
}
 800e312:	bf00      	nop
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	20001b5c 	.word	0x20001b5c

0800e320 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	4613      	mov	r3, r2
 800e32c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e32e:	4b16      	ldr	r3, [pc, #88]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	4a15      	ldr	r2, [pc, #84]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e334:	015b      	lsls	r3, r3, #5
 800e336:	4413      	add	r3, r2
 800e338:	3308      	adds	r3, #8
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	79fb      	ldrb	r3, [r7, #7]
 800e340:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800e342:	4911      	ldr	r1, [pc, #68]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e344:	68c9      	ldr	r1, [r1, #12]
 800e346:	4810      	ldr	r0, [pc, #64]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e348:	0149      	lsls	r1, r1, #5
 800e34a:	4401      	add	r1, r0
 800e34c:	3108      	adds	r1, #8
 800e34e:	6809      	ldr	r1, [r1, #0]
 800e350:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e352:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800e356:	4b0c      	ldr	r3, [pc, #48]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	480b      	ldr	r0, [pc, #44]	; (800e388 <UTIL_LCD_DisplayChar+0x68>)
 800e35c:	015b      	lsls	r3, r3, #5
 800e35e:	4403      	add	r3, r0
 800e360:	3308      	adds	r3, #8
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	889b      	ldrh	r3, [r3, #4]
 800e366:	3307      	adds	r3, #7
 800e368:	2b00      	cmp	r3, #0
 800e36a:	da00      	bge.n	800e36e <UTIL_LCD_DisplayChar+0x4e>
 800e36c:	3307      	adds	r3, #7
 800e36e:	10db      	asrs	r3, r3, #3
 800e370:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800e374:	4413      	add	r3, r2
 800e376:	461a      	mov	r2, r3
 800e378:	68b9      	ldr	r1, [r7, #8]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f000 f904 	bl	800e588 <DrawChar>
}
 800e380:	bf00      	nop
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20001b5c 	.word	0x20001b5c

0800e38c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	; 0x28
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800e39a:	2301      	movs	r3, #1
 800e39c:	627b      	str	r3, [r7, #36]	; 0x24
 800e39e:	2300      	movs	r3, #0
 800e3a0:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	61fb      	str	r3, [r7, #28]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800e3ae:	e002      	b.n	800e3b6 <UTIL_LCD_DisplayStringAt+0x2a>
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	61fb      	str	r3, [r7, #28]
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	61ba      	str	r2, [r7, #24]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1f6      	bne.n	800e3b0 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800e3c2:	4b48      	ldr	r3, [pc, #288]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	4a47      	ldr	r2, [pc, #284]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e3c8:	68d2      	ldr	r2, [r2, #12]
 800e3ca:	4946      	ldr	r1, [pc, #280]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e3cc:	0152      	lsls	r2, r2, #5
 800e3ce:	440a      	add	r2, r1
 800e3d0:	3208      	adds	r2, #8
 800e3d2:	6812      	ldr	r2, [r2, #0]
 800e3d4:	8892      	ldrh	r2, [r2, #4]
 800e3d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3da:	617b      	str	r3, [r7, #20]

  switch (Mode)
 800e3dc:	78fb      	ldrb	r3, [r7, #3]
 800e3de:	2b03      	cmp	r3, #3
 800e3e0:	d018      	beq.n	800e414 <UTIL_LCD_DisplayStringAt+0x88>
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	dc2a      	bgt.n	800e43c <UTIL_LCD_DisplayStringAt+0xb0>
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d002      	beq.n	800e3f0 <UTIL_LCD_DisplayStringAt+0x64>
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d015      	beq.n	800e41a <UTIL_LCD_DisplayStringAt+0x8e>
 800e3ee:	e025      	b.n	800e43c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	1ad3      	subs	r3, r2, r3
 800e3f6:	4a3b      	ldr	r2, [pc, #236]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e3f8:	68d2      	ldr	r2, [r2, #12]
 800e3fa:	493a      	ldr	r1, [pc, #232]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e3fc:	0152      	lsls	r2, r2, #5
 800e3fe:	440a      	add	r2, r1
 800e400:	3208      	adds	r2, #8
 800e402:	6812      	ldr	r2, [r2, #0]
 800e404:	8892      	ldrh	r2, [r2, #4]
 800e406:	fb02 f303 	mul.w	r3, r2, r3
 800e40a:	085b      	lsrs	r3, r3, #1
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e412:	e016      	b.n	800e442 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e418:	e013      	b.n	800e442 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	4a30      	ldr	r2, [pc, #192]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e422:	68d2      	ldr	r2, [r2, #12]
 800e424:	492f      	ldr	r1, [pc, #188]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e426:	0152      	lsls	r2, r2, #5
 800e428:	440a      	add	r2, r1
 800e42a:	3208      	adds	r2, #8
 800e42c:	6812      	ldr	r2, [r2, #0]
 800e42e:	8892      	ldrh	r2, [r2, #4]
 800e430:	fb03 f202 	mul.w	r2, r3, r2
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e43a:	e002      	b.n	800e442 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e440:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <UTIL_LCD_DisplayStringAt+0xc4>
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e44e:	d31b      	bcc.n	800e488 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 800e450:	2301      	movs	r3, #1
 800e452:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800e454:	e018      	b.n	800e488 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	68b9      	ldr	r1, [r7, #8]
 800e45e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e460:	f7ff ff5e 	bl	800e320 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800e464:	4b1f      	ldr	r3, [pc, #124]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	4a1e      	ldr	r2, [pc, #120]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e46a:	015b      	lsls	r3, r3, #5
 800e46c:	4413      	add	r3, r2
 800e46e:	3308      	adds	r3, #8
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	889b      	ldrh	r3, [r3, #4]
 800e474:	461a      	mov	r2, r3
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	4413      	add	r3, r2
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3301      	adds	r3, #1
 800e480:	607b      	str	r3, [r7, #4]
    i++;
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	3301      	adds	r3, #1
 800e486:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bf14      	ite	ne
 800e490:	2301      	movne	r3, #1
 800e492:	2300      	moveq	r3, #0
 800e494:	b2da      	uxtb	r2, r3
 800e496:	4b13      	ldr	r3, [pc, #76]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e498:	6959      	ldr	r1, [r3, #20]
 800e49a:	4b12      	ldr	r3, [pc, #72]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	4811      	ldr	r0, [pc, #68]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e4a0:	015b      	lsls	r3, r3, #5
 800e4a2:	4403      	add	r3, r0
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	889b      	ldrh	r3, [r3, #4]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
 800e4ae:	fb00 f303 	mul.w	r3, r0, r3
 800e4b2:	1acb      	subs	r3, r1, r3
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	490b      	ldr	r1, [pc, #44]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e4b8:	68c9      	ldr	r1, [r1, #12]
 800e4ba:	480a      	ldr	r0, [pc, #40]	; (800e4e4 <UTIL_LCD_DisplayStringAt+0x158>)
 800e4bc:	0149      	lsls	r1, r1, #5
 800e4be:	4401      	add	r1, r0
 800e4c0:	3108      	adds	r1, #8
 800e4c2:	6809      	ldr	r1, [r1, #0]
 800e4c4:	8889      	ldrh	r1, [r1, #4]
 800e4c6:	428b      	cmp	r3, r1
 800e4c8:	bf2c      	ite	cs
 800e4ca:	2301      	movcs	r3, #1
 800e4cc:	2300      	movcc	r3, #0
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1be      	bne.n	800e456 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 800e4d8:	bf00      	nop
 800e4da:	bf00      	nop
 800e4dc:	3728      	adds	r7, #40	; 0x28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20001b5c 	.word	0x20001b5c

0800e4e8 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 800e4e8:	b590      	push	{r4, r7, lr}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <UTIL_LCD_DrawBitmap+0x24>)
 800e4f6:	681c      	ldr	r4, [r3, #0]
 800e4f8:	4b05      	ldr	r3, [pc, #20]	; (800e510 <UTIL_LCD_DrawBitmap+0x28>)
 800e4fa:	6918      	ldr	r0, [r3, #16]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	68f9      	ldr	r1, [r7, #12]
 800e502:	47a0      	blx	r4
}
 800e504:	bf00      	nop
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd90      	pop	{r4, r7, pc}
 800e50c:	20001b9c 	.word	0x20001b9c
 800e510:	20001b5c 	.word	0x20001b5c

0800e514 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800e514:	b590      	push	{r4, r7, lr}
 800e516:	b087      	sub	sp, #28
 800e518:	af02      	add	r7, sp, #8
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <UTIL_LCD_FillRect+0x6c>)
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	2b02      	cmp	r3, #2
 800e528:	d11a      	bne.n	800e560 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800e52a:	4b16      	ldr	r3, [pc, #88]	; (800e584 <UTIL_LCD_FillRect+0x70>)
 800e52c:	691c      	ldr	r4, [r3, #16]
 800e52e:	4b14      	ldr	r3, [pc, #80]	; (800e580 <UTIL_LCD_FillRect+0x6c>)
 800e530:	6918      	ldr	r0, [r3, #16]
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	08db      	lsrs	r3, r3, #3
 800e536:	f003 021f 	and.w	r2, r3, #31
 800e53a:	6a3b      	ldr	r3, [r7, #32]
 800e53c:	0a9b      	lsrs	r3, r3, #10
 800e53e:	015b      	lsls	r3, r3, #5
 800e540:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e544:	431a      	orrs	r2, r3
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	0cdb      	lsrs	r3, r3, #19
 800e54a:	02db      	lsls	r3, r3, #11
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	4313      	orrs	r3, r2
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	68f9      	ldr	r1, [r7, #12]
 800e55c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 800e55e:	e00b      	b.n	800e578 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800e560:	4b08      	ldr	r3, [pc, #32]	; (800e584 <UTIL_LCD_FillRect+0x70>)
 800e562:	691c      	ldr	r4, [r3, #16]
 800e564:	4b06      	ldr	r3, [pc, #24]	; (800e580 <UTIL_LCD_FillRect+0x6c>)
 800e566:	6918      	ldr	r0, [r3, #16]
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68ba      	ldr	r2, [r7, #8]
 800e574:	68f9      	ldr	r1, [r7, #12]
 800e576:	47a0      	blx	r4
}
 800e578:	bf00      	nop
 800e57a:	3714      	adds	r7, #20
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd90      	pop	{r4, r7, pc}
 800e580:	20001b5c 	.word	0x20001b5c
 800e584:	20001b9c 	.word	0x20001b9c

0800e588 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b0b2      	sub	sp, #200	; 0xc8
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 800e594:	2300      	movs	r3, #0
 800e596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e59a:	2300      	movs	r3, #0
 800e59c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 800e5a0:	4ba5      	ldr	r3, [pc, #660]	; (800e838 <DrawChar+0x2b0>)
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	4aa4      	ldr	r2, [pc, #656]	; (800e838 <DrawChar+0x2b0>)
 800e5a6:	015b      	lsls	r3, r3, #5
 800e5a8:	4413      	add	r3, r2
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	88db      	ldrh	r3, [r3, #6]
 800e5b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 800e5b4:	4ba0      	ldr	r3, [pc, #640]	; (800e838 <DrawChar+0x2b0>)
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	4a9f      	ldr	r2, [pc, #636]	; (800e838 <DrawChar+0x2b0>)
 800e5ba:	015b      	lsls	r3, r3, #5
 800e5bc:	4413      	add	r3, r2
 800e5be:	3308      	adds	r3, #8
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	889b      	ldrh	r3, [r3, #4]
 800e5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800e5c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5cc:	3307      	adds	r3, #7
 800e5ce:	f023 0207 	bic.w	r2, r3, #7
 800e5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e5e2:	e11c      	b.n	800e81e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800e5e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5e8:	3307      	adds	r3, #7
 800e5ea:	08db      	lsrs	r3, r3, #3
 800e5ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e5f0:	fb02 f303 	mul.w	r3, r2, r3
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 800e5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e600:	3307      	adds	r3, #7
 800e602:	08db      	lsrs	r3, r3, #3
 800e604:	2b01      	cmp	r3, #1
 800e606:	d002      	beq.n	800e60e <DrawChar+0x86>
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d006      	beq.n	800e61a <DrawChar+0x92>
 800e60c:	e011      	b.n	800e632 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800e60e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800e618:	e01d      	b.n	800e656 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800e61a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	021b      	lsls	r3, r3, #8
 800e622:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e626:	3201      	adds	r2, #1
 800e628:	7812      	ldrb	r2, [r2, #0]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800e630:	e011      	b.n	800e656 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800e632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	041a      	lsls	r2, r3, #16
 800e63a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e63e:	3301      	adds	r3, #1
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	021b      	lsls	r3, r3, #8
 800e644:	4313      	orrs	r3, r2
 800e646:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e64a:	3202      	adds	r2, #2
 800e64c:	7812      	ldrb	r2, [r2, #0]
 800e64e:	4313      	orrs	r3, r2
 800e650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800e654:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800e656:	4b78      	ldr	r3, [pc, #480]	; (800e838 <DrawChar+0x2b0>)
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	4a77      	ldr	r2, [pc, #476]	; (800e838 <DrawChar+0x2b0>)
 800e65c:	015b      	lsls	r3, r3, #5
 800e65e:	4413      	add	r3, r2
 800e660:	331c      	adds	r3, #28
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b02      	cmp	r3, #2
 800e666:	f040 808c 	bne.w	800e782 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800e66a:	2300      	movs	r3, #0
 800e66c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e670:	e074      	b.n	800e75c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800e672:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e67a:	1ad2      	subs	r2, r2, r3
 800e67c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e680:	4413      	add	r3, r2
 800e682:	3b01      	subs	r3, #1
 800e684:	2201      	movs	r2, #1
 800e686:	fa02 f303 	lsl.w	r3, r2, r3
 800e68a:	461a      	mov	r2, r3
 800e68c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e690:	4013      	ands	r3, r2
 800e692:	2b00      	cmp	r3, #0
 800e694:	d02d      	beq.n	800e6f2 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800e696:	4b68      	ldr	r3, [pc, #416]	; (800e838 <DrawChar+0x2b0>)
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	4a67      	ldr	r2, [pc, #412]	; (800e838 <DrawChar+0x2b0>)
 800e69c:	015b      	lsls	r3, r3, #5
 800e69e:	4413      	add	r3, r2
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	08db      	lsrs	r3, r3, #3
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	f003 031f 	and.w	r3, r3, #31
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	4b62      	ldr	r3, [pc, #392]	; (800e838 <DrawChar+0x2b0>)
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	4961      	ldr	r1, [pc, #388]	; (800e838 <DrawChar+0x2b0>)
 800e6b2:	015b      	lsls	r3, r3, #5
 800e6b4:	440b      	add	r3, r1
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	0a9b      	lsrs	r3, r3, #10
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	015b      	lsls	r3, r3, #5
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	4b5b      	ldr	r3, [pc, #364]	; (800e838 <DrawChar+0x2b0>)
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	495a      	ldr	r1, [pc, #360]	; (800e838 <DrawChar+0x2b0>)
 800e6d0:	015b      	lsls	r3, r3, #5
 800e6d2:	440b      	add	r3, r1
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	0cdb      	lsrs	r3, r3, #19
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	02db      	lsls	r3, r3, #11
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	33c0      	adds	r3, #192	; 0xc0
 800e6ea:	443b      	add	r3, r7
 800e6ec:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800e6f0:	e02f      	b.n	800e752 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800e6f2:	4b51      	ldr	r3, [pc, #324]	; (800e838 <DrawChar+0x2b0>)
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	4a50      	ldr	r2, [pc, #320]	; (800e838 <DrawChar+0x2b0>)
 800e6f8:	015b      	lsls	r3, r3, #5
 800e6fa:	4413      	add	r3, r2
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	08db      	lsrs	r3, r3, #3
 800e702:	b29b      	uxth	r3, r3
 800e704:	f003 031f 	and.w	r3, r3, #31
 800e708:	b29a      	uxth	r2, r3
 800e70a:	4b4b      	ldr	r3, [pc, #300]	; (800e838 <DrawChar+0x2b0>)
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	494a      	ldr	r1, [pc, #296]	; (800e838 <DrawChar+0x2b0>)
 800e710:	015b      	lsls	r3, r3, #5
 800e712:	440b      	add	r3, r1
 800e714:	3304      	adds	r3, #4
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	0a9b      	lsrs	r3, r3, #10
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	015b      	lsls	r3, r3, #5
 800e71e:	b29b      	uxth	r3, r3
 800e720:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800e724:	b29b      	uxth	r3, r3
 800e726:	4313      	orrs	r3, r2
 800e728:	b29a      	uxth	r2, r3
 800e72a:	4b43      	ldr	r3, [pc, #268]	; (800e838 <DrawChar+0x2b0>)
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	4942      	ldr	r1, [pc, #264]	; (800e838 <DrawChar+0x2b0>)
 800e730:	015b      	lsls	r3, r3, #5
 800e732:	440b      	add	r3, r1
 800e734:	3304      	adds	r3, #4
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	0cdb      	lsrs	r3, r3, #19
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	02db      	lsls	r3, r3, #11
 800e73e:	b29b      	uxth	r3, r3
 800e740:	4313      	orrs	r3, r2
 800e742:	b29a      	uxth	r2, r3
 800e744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	33c0      	adds	r3, #192	; 0xc0
 800e74c:	443b      	add	r3, r7
 800e74e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800e752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e756:	3301      	adds	r3, #1
 800e758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e75c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e764:	429a      	cmp	r2, r3
 800e766:	d384      	bcc.n	800e672 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800e768:	68b9      	ldr	r1, [r7, #8]
 800e76a:	1c4b      	adds	r3, r1, #1
 800e76c:	60bb      	str	r3, [r7, #8]
 800e76e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800e772:	2301      	movs	r3, #1
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff fd9e 	bl	800e2bc <UTIL_LCD_FillRGBRect>
 800e780:	e048      	b.n	800e814 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800e782:	2300      	movs	r3, #0
 800e784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e788:	e032      	b.n	800e7f0 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800e78a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e798:	4413      	add	r3, r2
 800e79a:	3b01      	subs	r3, #1
 800e79c:	2201      	movs	r2, #1
 800e79e:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00d      	beq.n	800e7ca <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 800e7ae:	4b22      	ldr	r3, [pc, #136]	; (800e838 <DrawChar+0x2b0>)
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	4a21      	ldr	r2, [pc, #132]	; (800e838 <DrawChar+0x2b0>)
 800e7b4:	015b      	lsls	r3, r3, #5
 800e7b6:	4413      	add	r3, r2
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	33c0      	adds	r3, #192	; 0xc0
 800e7c2:	443b      	add	r3, r7
 800e7c4:	f843 2cac 	str.w	r2, [r3, #-172]
 800e7c8:	e00d      	b.n	800e7e6 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800e7ca:	4b1b      	ldr	r3, [pc, #108]	; (800e838 <DrawChar+0x2b0>)
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	4a1a      	ldr	r2, [pc, #104]	; (800e838 <DrawChar+0x2b0>)
 800e7d0:	015b      	lsls	r3, r3, #5
 800e7d2:	4413      	add	r3, r2
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	33c0      	adds	r3, #192	; 0xc0
 800e7e0:	443b      	add	r3, r7
 800e7e2:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 800e7e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e7f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e7f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d3c6      	bcc.n	800e78a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 800e7fc:	68b9      	ldr	r1, [r7, #8]
 800e7fe:	1c4b      	adds	r3, r1, #1
 800e800:	60bb      	str	r3, [r7, #8]
 800e802:	f107 0214 	add.w	r2, r7, #20
 800e806:	2301      	movs	r3, #1
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f7ff fd54 	bl	800e2bc <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 800e814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e818:	3301      	adds	r3, #1
 800e81a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e81e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e826:	429a      	cmp	r2, r3
 800e828:	f4ff aedc 	bcc.w	800e5e4 <DrawChar+0x5c>
    }
  }
}
 800e82c:	bf00      	nop
 800e82e:	bf00      	nop
 800e830:	37c0      	adds	r7, #192	; 0xc0
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20001b5c 	.word	0x20001b5c

0800e83c <sniprintf>:
 800e83c:	b40c      	push	{r2, r3}
 800e83e:	b530      	push	{r4, r5, lr}
 800e840:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <sniprintf+0x64>)
 800e842:	1e0c      	subs	r4, r1, #0
 800e844:	681d      	ldr	r5, [r3, #0]
 800e846:	b09d      	sub	sp, #116	; 0x74
 800e848:	da08      	bge.n	800e85c <sniprintf+0x20>
 800e84a:	238b      	movs	r3, #139	; 0x8b
 800e84c:	602b      	str	r3, [r5, #0]
 800e84e:	f04f 30ff 	mov.w	r0, #4294967295
 800e852:	b01d      	add	sp, #116	; 0x74
 800e854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e858:	b002      	add	sp, #8
 800e85a:	4770      	bx	lr
 800e85c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e860:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e864:	bf14      	ite	ne
 800e866:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e86a:	4623      	moveq	r3, r4
 800e86c:	9304      	str	r3, [sp, #16]
 800e86e:	9307      	str	r3, [sp, #28]
 800e870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e874:	9002      	str	r0, [sp, #8]
 800e876:	9006      	str	r0, [sp, #24]
 800e878:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e87c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e87e:	ab21      	add	r3, sp, #132	; 0x84
 800e880:	a902      	add	r1, sp, #8
 800e882:	4628      	mov	r0, r5
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	f000 f9d7 	bl	800ec38 <_svfiprintf_r>
 800e88a:	1c43      	adds	r3, r0, #1
 800e88c:	bfbc      	itt	lt
 800e88e:	238b      	movlt	r3, #139	; 0x8b
 800e890:	602b      	strlt	r3, [r5, #0]
 800e892:	2c00      	cmp	r4, #0
 800e894:	d0dd      	beq.n	800e852 <sniprintf+0x16>
 800e896:	9b02      	ldr	r3, [sp, #8]
 800e898:	2200      	movs	r2, #0
 800e89a:	701a      	strb	r2, [r3, #0]
 800e89c:	e7d9      	b.n	800e852 <sniprintf+0x16>
 800e89e:	bf00      	nop
 800e8a0:	200000c4 	.word	0x200000c4

0800e8a4 <siprintf>:
 800e8a4:	b40e      	push	{r1, r2, r3}
 800e8a6:	b500      	push	{lr}
 800e8a8:	b09c      	sub	sp, #112	; 0x70
 800e8aa:	ab1d      	add	r3, sp, #116	; 0x74
 800e8ac:	9002      	str	r0, [sp, #8]
 800e8ae:	9006      	str	r0, [sp, #24]
 800e8b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e8b4:	4809      	ldr	r0, [pc, #36]	; (800e8dc <siprintf+0x38>)
 800e8b6:	9107      	str	r1, [sp, #28]
 800e8b8:	9104      	str	r1, [sp, #16]
 800e8ba:	4909      	ldr	r1, [pc, #36]	; (800e8e0 <siprintf+0x3c>)
 800e8bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8c0:	9105      	str	r1, [sp, #20]
 800e8c2:	6800      	ldr	r0, [r0, #0]
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	a902      	add	r1, sp, #8
 800e8c8:	f000 f9b6 	bl	800ec38 <_svfiprintf_r>
 800e8cc:	9b02      	ldr	r3, [sp, #8]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	701a      	strb	r2, [r3, #0]
 800e8d2:	b01c      	add	sp, #112	; 0x70
 800e8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8d8:	b003      	add	sp, #12
 800e8da:	4770      	bx	lr
 800e8dc:	200000c4 	.word	0x200000c4
 800e8e0:	ffff0208 	.word	0xffff0208

0800e8e4 <memset>:
 800e8e4:	4402      	add	r2, r0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d100      	bne.n	800e8ee <memset+0xa>
 800e8ec:	4770      	bx	lr
 800e8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e8f2:	e7f9      	b.n	800e8e8 <memset+0x4>

0800e8f4 <strstr>:
 800e8f4:	780a      	ldrb	r2, [r1, #0]
 800e8f6:	b570      	push	{r4, r5, r6, lr}
 800e8f8:	b96a      	cbnz	r2, 800e916 <strstr+0x22>
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d109      	bne.n	800e914 <strstr+0x20>
 800e900:	460c      	mov	r4, r1
 800e902:	4605      	mov	r5, r0
 800e904:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d0f6      	beq.n	800e8fa <strstr+0x6>
 800e90c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e910:	429e      	cmp	r6, r3
 800e912:	d0f7      	beq.n	800e904 <strstr+0x10>
 800e914:	3001      	adds	r0, #1
 800e916:	7803      	ldrb	r3, [r0, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1ef      	bne.n	800e8fc <strstr+0x8>
 800e91c:	4618      	mov	r0, r3
 800e91e:	e7ec      	b.n	800e8fa <strstr+0x6>

0800e920 <__errno>:
 800e920:	4b01      	ldr	r3, [pc, #4]	; (800e928 <__errno+0x8>)
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	200000c4 	.word	0x200000c4

0800e92c <__libc_init_array>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4d0d      	ldr	r5, [pc, #52]	; (800e964 <__libc_init_array+0x38>)
 800e930:	4c0d      	ldr	r4, [pc, #52]	; (800e968 <__libc_init_array+0x3c>)
 800e932:	1b64      	subs	r4, r4, r5
 800e934:	10a4      	asrs	r4, r4, #2
 800e936:	2600      	movs	r6, #0
 800e938:	42a6      	cmp	r6, r4
 800e93a:	d109      	bne.n	800e950 <__libc_init_array+0x24>
 800e93c:	4d0b      	ldr	r5, [pc, #44]	; (800e96c <__libc_init_array+0x40>)
 800e93e:	4c0c      	ldr	r4, [pc, #48]	; (800e970 <__libc_init_array+0x44>)
 800e940:	f000 fc6a 	bl	800f218 <_init>
 800e944:	1b64      	subs	r4, r4, r5
 800e946:	10a4      	asrs	r4, r4, #2
 800e948:	2600      	movs	r6, #0
 800e94a:	42a6      	cmp	r6, r4
 800e94c:	d105      	bne.n	800e95a <__libc_init_array+0x2e>
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	f855 3b04 	ldr.w	r3, [r5], #4
 800e954:	4798      	blx	r3
 800e956:	3601      	adds	r6, #1
 800e958:	e7ee      	b.n	800e938 <__libc_init_array+0xc>
 800e95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e95e:	4798      	blx	r3
 800e960:	3601      	adds	r6, #1
 800e962:	e7f2      	b.n	800e94a <__libc_init_array+0x1e>
 800e964:	080133fc 	.word	0x080133fc
 800e968:	080133fc 	.word	0x080133fc
 800e96c:	080133fc 	.word	0x080133fc
 800e970:	08013400 	.word	0x08013400

0800e974 <__retarget_lock_acquire_recursive>:
 800e974:	4770      	bx	lr

0800e976 <__retarget_lock_release_recursive>:
 800e976:	4770      	bx	lr

0800e978 <memcpy>:
 800e978:	440a      	add	r2, r1
 800e97a:	4291      	cmp	r1, r2
 800e97c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e980:	d100      	bne.n	800e984 <memcpy+0xc>
 800e982:	4770      	bx	lr
 800e984:	b510      	push	{r4, lr}
 800e986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e98e:	4291      	cmp	r1, r2
 800e990:	d1f9      	bne.n	800e986 <memcpy+0xe>
 800e992:	bd10      	pop	{r4, pc}

0800e994 <_free_r>:
 800e994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e996:	2900      	cmp	r1, #0
 800e998:	d044      	beq.n	800ea24 <_free_r+0x90>
 800e99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99e:	9001      	str	r0, [sp, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e9a6:	bfb8      	it	lt
 800e9a8:	18e4      	addlt	r4, r4, r3
 800e9aa:	f000 f8df 	bl	800eb6c <__malloc_lock>
 800e9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ea28 <_free_r+0x94>)
 800e9b0:	9801      	ldr	r0, [sp, #4]
 800e9b2:	6813      	ldr	r3, [r2, #0]
 800e9b4:	b933      	cbnz	r3, 800e9c4 <_free_r+0x30>
 800e9b6:	6063      	str	r3, [r4, #4]
 800e9b8:	6014      	str	r4, [r2, #0]
 800e9ba:	b003      	add	sp, #12
 800e9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9c0:	f000 b8da 	b.w	800eb78 <__malloc_unlock>
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	d908      	bls.n	800e9da <_free_r+0x46>
 800e9c8:	6825      	ldr	r5, [r4, #0]
 800e9ca:	1961      	adds	r1, r4, r5
 800e9cc:	428b      	cmp	r3, r1
 800e9ce:	bf01      	itttt	eq
 800e9d0:	6819      	ldreq	r1, [r3, #0]
 800e9d2:	685b      	ldreq	r3, [r3, #4]
 800e9d4:	1949      	addeq	r1, r1, r5
 800e9d6:	6021      	streq	r1, [r4, #0]
 800e9d8:	e7ed      	b.n	800e9b6 <_free_r+0x22>
 800e9da:	461a      	mov	r2, r3
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	b10b      	cbz	r3, 800e9e4 <_free_r+0x50>
 800e9e0:	42a3      	cmp	r3, r4
 800e9e2:	d9fa      	bls.n	800e9da <_free_r+0x46>
 800e9e4:	6811      	ldr	r1, [r2, #0]
 800e9e6:	1855      	adds	r5, r2, r1
 800e9e8:	42a5      	cmp	r5, r4
 800e9ea:	d10b      	bne.n	800ea04 <_free_r+0x70>
 800e9ec:	6824      	ldr	r4, [r4, #0]
 800e9ee:	4421      	add	r1, r4
 800e9f0:	1854      	adds	r4, r2, r1
 800e9f2:	42a3      	cmp	r3, r4
 800e9f4:	6011      	str	r1, [r2, #0]
 800e9f6:	d1e0      	bne.n	800e9ba <_free_r+0x26>
 800e9f8:	681c      	ldr	r4, [r3, #0]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	6053      	str	r3, [r2, #4]
 800e9fe:	440c      	add	r4, r1
 800ea00:	6014      	str	r4, [r2, #0]
 800ea02:	e7da      	b.n	800e9ba <_free_r+0x26>
 800ea04:	d902      	bls.n	800ea0c <_free_r+0x78>
 800ea06:	230c      	movs	r3, #12
 800ea08:	6003      	str	r3, [r0, #0]
 800ea0a:	e7d6      	b.n	800e9ba <_free_r+0x26>
 800ea0c:	6825      	ldr	r5, [r4, #0]
 800ea0e:	1961      	adds	r1, r4, r5
 800ea10:	428b      	cmp	r3, r1
 800ea12:	bf04      	itt	eq
 800ea14:	6819      	ldreq	r1, [r3, #0]
 800ea16:	685b      	ldreq	r3, [r3, #4]
 800ea18:	6063      	str	r3, [r4, #4]
 800ea1a:	bf04      	itt	eq
 800ea1c:	1949      	addeq	r1, r1, r5
 800ea1e:	6021      	streq	r1, [r4, #0]
 800ea20:	6054      	str	r4, [r2, #4]
 800ea22:	e7ca      	b.n	800e9ba <_free_r+0x26>
 800ea24:	b003      	add	sp, #12
 800ea26:	bd30      	pop	{r4, r5, pc}
 800ea28:	20001d08 	.word	0x20001d08

0800ea2c <sbrk_aligned>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	4e0e      	ldr	r6, [pc, #56]	; (800ea68 <sbrk_aligned+0x3c>)
 800ea30:	460c      	mov	r4, r1
 800ea32:	6831      	ldr	r1, [r6, #0]
 800ea34:	4605      	mov	r5, r0
 800ea36:	b911      	cbnz	r1, 800ea3e <sbrk_aligned+0x12>
 800ea38:	f000 fba6 	bl	800f188 <_sbrk_r>
 800ea3c:	6030      	str	r0, [r6, #0]
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4628      	mov	r0, r5
 800ea42:	f000 fba1 	bl	800f188 <_sbrk_r>
 800ea46:	1c43      	adds	r3, r0, #1
 800ea48:	d00a      	beq.n	800ea60 <sbrk_aligned+0x34>
 800ea4a:	1cc4      	adds	r4, r0, #3
 800ea4c:	f024 0403 	bic.w	r4, r4, #3
 800ea50:	42a0      	cmp	r0, r4
 800ea52:	d007      	beq.n	800ea64 <sbrk_aligned+0x38>
 800ea54:	1a21      	subs	r1, r4, r0
 800ea56:	4628      	mov	r0, r5
 800ea58:	f000 fb96 	bl	800f188 <_sbrk_r>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d101      	bne.n	800ea64 <sbrk_aligned+0x38>
 800ea60:	f04f 34ff 	mov.w	r4, #4294967295
 800ea64:	4620      	mov	r0, r4
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	20001d0c 	.word	0x20001d0c

0800ea6c <_malloc_r>:
 800ea6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea70:	1ccd      	adds	r5, r1, #3
 800ea72:	f025 0503 	bic.w	r5, r5, #3
 800ea76:	3508      	adds	r5, #8
 800ea78:	2d0c      	cmp	r5, #12
 800ea7a:	bf38      	it	cc
 800ea7c:	250c      	movcc	r5, #12
 800ea7e:	2d00      	cmp	r5, #0
 800ea80:	4607      	mov	r7, r0
 800ea82:	db01      	blt.n	800ea88 <_malloc_r+0x1c>
 800ea84:	42a9      	cmp	r1, r5
 800ea86:	d905      	bls.n	800ea94 <_malloc_r+0x28>
 800ea88:	230c      	movs	r3, #12
 800ea8a:	603b      	str	r3, [r7, #0]
 800ea8c:	2600      	movs	r6, #0
 800ea8e:	4630      	mov	r0, r6
 800ea90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eb68 <_malloc_r+0xfc>
 800ea98:	f000 f868 	bl	800eb6c <__malloc_lock>
 800ea9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eaa0:	461c      	mov	r4, r3
 800eaa2:	bb5c      	cbnz	r4, 800eafc <_malloc_r+0x90>
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	f7ff ffc0 	bl	800ea2c <sbrk_aligned>
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	4604      	mov	r4, r0
 800eab0:	d155      	bne.n	800eb5e <_malloc_r+0xf2>
 800eab2:	f8d8 4000 	ldr.w	r4, [r8]
 800eab6:	4626      	mov	r6, r4
 800eab8:	2e00      	cmp	r6, #0
 800eaba:	d145      	bne.n	800eb48 <_malloc_r+0xdc>
 800eabc:	2c00      	cmp	r4, #0
 800eabe:	d048      	beq.n	800eb52 <_malloc_r+0xe6>
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	4631      	mov	r1, r6
 800eac4:	4638      	mov	r0, r7
 800eac6:	eb04 0903 	add.w	r9, r4, r3
 800eaca:	f000 fb5d 	bl	800f188 <_sbrk_r>
 800eace:	4581      	cmp	r9, r0
 800ead0:	d13f      	bne.n	800eb52 <_malloc_r+0xe6>
 800ead2:	6821      	ldr	r1, [r4, #0]
 800ead4:	1a6d      	subs	r5, r5, r1
 800ead6:	4629      	mov	r1, r5
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff ffa7 	bl	800ea2c <sbrk_aligned>
 800eade:	3001      	adds	r0, #1
 800eae0:	d037      	beq.n	800eb52 <_malloc_r+0xe6>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	442b      	add	r3, r5
 800eae6:	6023      	str	r3, [r4, #0]
 800eae8:	f8d8 3000 	ldr.w	r3, [r8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d038      	beq.n	800eb62 <_malloc_r+0xf6>
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	42a2      	cmp	r2, r4
 800eaf4:	d12b      	bne.n	800eb4e <_malloc_r+0xe2>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	605a      	str	r2, [r3, #4]
 800eafa:	e00f      	b.n	800eb1c <_malloc_r+0xb0>
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	1b52      	subs	r2, r2, r5
 800eb00:	d41f      	bmi.n	800eb42 <_malloc_r+0xd6>
 800eb02:	2a0b      	cmp	r2, #11
 800eb04:	d917      	bls.n	800eb36 <_malloc_r+0xca>
 800eb06:	1961      	adds	r1, r4, r5
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	6025      	str	r5, [r4, #0]
 800eb0c:	bf18      	it	ne
 800eb0e:	6059      	strne	r1, [r3, #4]
 800eb10:	6863      	ldr	r3, [r4, #4]
 800eb12:	bf08      	it	eq
 800eb14:	f8c8 1000 	streq.w	r1, [r8]
 800eb18:	5162      	str	r2, [r4, r5]
 800eb1a:	604b      	str	r3, [r1, #4]
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	f104 060b 	add.w	r6, r4, #11
 800eb22:	f000 f829 	bl	800eb78 <__malloc_unlock>
 800eb26:	f026 0607 	bic.w	r6, r6, #7
 800eb2a:	1d23      	adds	r3, r4, #4
 800eb2c:	1af2      	subs	r2, r6, r3
 800eb2e:	d0ae      	beq.n	800ea8e <_malloc_r+0x22>
 800eb30:	1b9b      	subs	r3, r3, r6
 800eb32:	50a3      	str	r3, [r4, r2]
 800eb34:	e7ab      	b.n	800ea8e <_malloc_r+0x22>
 800eb36:	42a3      	cmp	r3, r4
 800eb38:	6862      	ldr	r2, [r4, #4]
 800eb3a:	d1dd      	bne.n	800eaf8 <_malloc_r+0x8c>
 800eb3c:	f8c8 2000 	str.w	r2, [r8]
 800eb40:	e7ec      	b.n	800eb1c <_malloc_r+0xb0>
 800eb42:	4623      	mov	r3, r4
 800eb44:	6864      	ldr	r4, [r4, #4]
 800eb46:	e7ac      	b.n	800eaa2 <_malloc_r+0x36>
 800eb48:	4634      	mov	r4, r6
 800eb4a:	6876      	ldr	r6, [r6, #4]
 800eb4c:	e7b4      	b.n	800eab8 <_malloc_r+0x4c>
 800eb4e:	4613      	mov	r3, r2
 800eb50:	e7cc      	b.n	800eaec <_malloc_r+0x80>
 800eb52:	230c      	movs	r3, #12
 800eb54:	603b      	str	r3, [r7, #0]
 800eb56:	4638      	mov	r0, r7
 800eb58:	f000 f80e 	bl	800eb78 <__malloc_unlock>
 800eb5c:	e797      	b.n	800ea8e <_malloc_r+0x22>
 800eb5e:	6025      	str	r5, [r4, #0]
 800eb60:	e7dc      	b.n	800eb1c <_malloc_r+0xb0>
 800eb62:	605b      	str	r3, [r3, #4]
 800eb64:	deff      	udf	#255	; 0xff
 800eb66:	bf00      	nop
 800eb68:	20001d08 	.word	0x20001d08

0800eb6c <__malloc_lock>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	; (800eb74 <__malloc_lock+0x8>)
 800eb6e:	f7ff bf01 	b.w	800e974 <__retarget_lock_acquire_recursive>
 800eb72:	bf00      	nop
 800eb74:	20001d04 	.word	0x20001d04

0800eb78 <__malloc_unlock>:
 800eb78:	4801      	ldr	r0, [pc, #4]	; (800eb80 <__malloc_unlock+0x8>)
 800eb7a:	f7ff befc 	b.w	800e976 <__retarget_lock_release_recursive>
 800eb7e:	bf00      	nop
 800eb80:	20001d04 	.word	0x20001d04

0800eb84 <__ssputs_r>:
 800eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb88:	688e      	ldr	r6, [r1, #8]
 800eb8a:	461f      	mov	r7, r3
 800eb8c:	42be      	cmp	r6, r7
 800eb8e:	680b      	ldr	r3, [r1, #0]
 800eb90:	4682      	mov	sl, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	4690      	mov	r8, r2
 800eb96:	d82c      	bhi.n	800ebf2 <__ssputs_r+0x6e>
 800eb98:	898a      	ldrh	r2, [r1, #12]
 800eb9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb9e:	d026      	beq.n	800ebee <__ssputs_r+0x6a>
 800eba0:	6965      	ldr	r5, [r4, #20]
 800eba2:	6909      	ldr	r1, [r1, #16]
 800eba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eba8:	eba3 0901 	sub.w	r9, r3, r1
 800ebac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebb0:	1c7b      	adds	r3, r7, #1
 800ebb2:	444b      	add	r3, r9
 800ebb4:	106d      	asrs	r5, r5, #1
 800ebb6:	429d      	cmp	r5, r3
 800ebb8:	bf38      	it	cc
 800ebba:	461d      	movcc	r5, r3
 800ebbc:	0553      	lsls	r3, r2, #21
 800ebbe:	d527      	bpl.n	800ec10 <__ssputs_r+0x8c>
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7ff ff53 	bl	800ea6c <_malloc_r>
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	b360      	cbz	r0, 800ec24 <__ssputs_r+0xa0>
 800ebca:	6921      	ldr	r1, [r4, #16]
 800ebcc:	464a      	mov	r2, r9
 800ebce:	f7ff fed3 	bl	800e978 <memcpy>
 800ebd2:	89a3      	ldrh	r3, [r4, #12]
 800ebd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebdc:	81a3      	strh	r3, [r4, #12]
 800ebde:	6126      	str	r6, [r4, #16]
 800ebe0:	6165      	str	r5, [r4, #20]
 800ebe2:	444e      	add	r6, r9
 800ebe4:	eba5 0509 	sub.w	r5, r5, r9
 800ebe8:	6026      	str	r6, [r4, #0]
 800ebea:	60a5      	str	r5, [r4, #8]
 800ebec:	463e      	mov	r6, r7
 800ebee:	42be      	cmp	r6, r7
 800ebf0:	d900      	bls.n	800ebf4 <__ssputs_r+0x70>
 800ebf2:	463e      	mov	r6, r7
 800ebf4:	6820      	ldr	r0, [r4, #0]
 800ebf6:	4632      	mov	r2, r6
 800ebf8:	4641      	mov	r1, r8
 800ebfa:	f000 faab 	bl	800f154 <memmove>
 800ebfe:	68a3      	ldr	r3, [r4, #8]
 800ec00:	1b9b      	subs	r3, r3, r6
 800ec02:	60a3      	str	r3, [r4, #8]
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	4433      	add	r3, r6
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec10:	462a      	mov	r2, r5
 800ec12:	f000 fac9 	bl	800f1a8 <_realloc_r>
 800ec16:	4606      	mov	r6, r0
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d1e0      	bne.n	800ebde <__ssputs_r+0x5a>
 800ec1c:	6921      	ldr	r1, [r4, #16]
 800ec1e:	4650      	mov	r0, sl
 800ec20:	f7ff feb8 	bl	800e994 <_free_r>
 800ec24:	230c      	movs	r3, #12
 800ec26:	f8ca 3000 	str.w	r3, [sl]
 800ec2a:	89a3      	ldrh	r3, [r4, #12]
 800ec2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec30:	81a3      	strh	r3, [r4, #12]
 800ec32:	f04f 30ff 	mov.w	r0, #4294967295
 800ec36:	e7e9      	b.n	800ec0c <__ssputs_r+0x88>

0800ec38 <_svfiprintf_r>:
 800ec38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	4698      	mov	r8, r3
 800ec3e:	898b      	ldrh	r3, [r1, #12]
 800ec40:	061b      	lsls	r3, r3, #24
 800ec42:	b09d      	sub	sp, #116	; 0x74
 800ec44:	4607      	mov	r7, r0
 800ec46:	460d      	mov	r5, r1
 800ec48:	4614      	mov	r4, r2
 800ec4a:	d50e      	bpl.n	800ec6a <_svfiprintf_r+0x32>
 800ec4c:	690b      	ldr	r3, [r1, #16]
 800ec4e:	b963      	cbnz	r3, 800ec6a <_svfiprintf_r+0x32>
 800ec50:	2140      	movs	r1, #64	; 0x40
 800ec52:	f7ff ff0b 	bl	800ea6c <_malloc_r>
 800ec56:	6028      	str	r0, [r5, #0]
 800ec58:	6128      	str	r0, [r5, #16]
 800ec5a:	b920      	cbnz	r0, 800ec66 <_svfiprintf_r+0x2e>
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	603b      	str	r3, [r7, #0]
 800ec60:	f04f 30ff 	mov.w	r0, #4294967295
 800ec64:	e0d0      	b.n	800ee08 <_svfiprintf_r+0x1d0>
 800ec66:	2340      	movs	r3, #64	; 0x40
 800ec68:	616b      	str	r3, [r5, #20]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec6e:	2320      	movs	r3, #32
 800ec70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec78:	2330      	movs	r3, #48	; 0x30
 800ec7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ee20 <_svfiprintf_r+0x1e8>
 800ec7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec82:	f04f 0901 	mov.w	r9, #1
 800ec86:	4623      	mov	r3, r4
 800ec88:	469a      	mov	sl, r3
 800ec8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec8e:	b10a      	cbz	r2, 800ec94 <_svfiprintf_r+0x5c>
 800ec90:	2a25      	cmp	r2, #37	; 0x25
 800ec92:	d1f9      	bne.n	800ec88 <_svfiprintf_r+0x50>
 800ec94:	ebba 0b04 	subs.w	fp, sl, r4
 800ec98:	d00b      	beq.n	800ecb2 <_svfiprintf_r+0x7a>
 800ec9a:	465b      	mov	r3, fp
 800ec9c:	4622      	mov	r2, r4
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff ff6f 	bl	800eb84 <__ssputs_r>
 800eca6:	3001      	adds	r0, #1
 800eca8:	f000 80a9 	beq.w	800edfe <_svfiprintf_r+0x1c6>
 800ecac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecae:	445a      	add	r2, fp
 800ecb0:	9209      	str	r2, [sp, #36]	; 0x24
 800ecb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 80a1 	beq.w	800edfe <_svfiprintf_r+0x1c6>
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecc6:	f10a 0a01 	add.w	sl, sl, #1
 800ecca:	9304      	str	r3, [sp, #16]
 800eccc:	9307      	str	r3, [sp, #28]
 800ecce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecd2:	931a      	str	r3, [sp, #104]	; 0x68
 800ecd4:	4654      	mov	r4, sl
 800ecd6:	2205      	movs	r2, #5
 800ecd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecdc:	4850      	ldr	r0, [pc, #320]	; (800ee20 <_svfiprintf_r+0x1e8>)
 800ecde:	f7f1 fb17 	bl	8000310 <memchr>
 800ece2:	9a04      	ldr	r2, [sp, #16]
 800ece4:	b9d8      	cbnz	r0, 800ed1e <_svfiprintf_r+0xe6>
 800ece6:	06d0      	lsls	r0, r2, #27
 800ece8:	bf44      	itt	mi
 800ecea:	2320      	movmi	r3, #32
 800ecec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecf0:	0711      	lsls	r1, r2, #28
 800ecf2:	bf44      	itt	mi
 800ecf4:	232b      	movmi	r3, #43	; 0x2b
 800ecf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ed00:	d015      	beq.n	800ed2e <_svfiprintf_r+0xf6>
 800ed02:	9a07      	ldr	r2, [sp, #28]
 800ed04:	4654      	mov	r4, sl
 800ed06:	2000      	movs	r0, #0
 800ed08:	f04f 0c0a 	mov.w	ip, #10
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed12:	3b30      	subs	r3, #48	; 0x30
 800ed14:	2b09      	cmp	r3, #9
 800ed16:	d94d      	bls.n	800edb4 <_svfiprintf_r+0x17c>
 800ed18:	b1b0      	cbz	r0, 800ed48 <_svfiprintf_r+0x110>
 800ed1a:	9207      	str	r2, [sp, #28]
 800ed1c:	e014      	b.n	800ed48 <_svfiprintf_r+0x110>
 800ed1e:	eba0 0308 	sub.w	r3, r0, r8
 800ed22:	fa09 f303 	lsl.w	r3, r9, r3
 800ed26:	4313      	orrs	r3, r2
 800ed28:	9304      	str	r3, [sp, #16]
 800ed2a:	46a2      	mov	sl, r4
 800ed2c:	e7d2      	b.n	800ecd4 <_svfiprintf_r+0x9c>
 800ed2e:	9b03      	ldr	r3, [sp, #12]
 800ed30:	1d19      	adds	r1, r3, #4
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	9103      	str	r1, [sp, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	bfbb      	ittet	lt
 800ed3a:	425b      	neglt	r3, r3
 800ed3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ed40:	9307      	strge	r3, [sp, #28]
 800ed42:	9307      	strlt	r3, [sp, #28]
 800ed44:	bfb8      	it	lt
 800ed46:	9204      	strlt	r2, [sp, #16]
 800ed48:	7823      	ldrb	r3, [r4, #0]
 800ed4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ed4c:	d10c      	bne.n	800ed68 <_svfiprintf_r+0x130>
 800ed4e:	7863      	ldrb	r3, [r4, #1]
 800ed50:	2b2a      	cmp	r3, #42	; 0x2a
 800ed52:	d134      	bne.n	800edbe <_svfiprintf_r+0x186>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	9203      	str	r2, [sp, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bfb8      	it	lt
 800ed60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed64:	3402      	adds	r4, #2
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ee30 <_svfiprintf_r+0x1f8>
 800ed6c:	7821      	ldrb	r1, [r4, #0]
 800ed6e:	2203      	movs	r2, #3
 800ed70:	4650      	mov	r0, sl
 800ed72:	f7f1 facd 	bl	8000310 <memchr>
 800ed76:	b138      	cbz	r0, 800ed88 <_svfiprintf_r+0x150>
 800ed78:	9b04      	ldr	r3, [sp, #16]
 800ed7a:	eba0 000a 	sub.w	r0, r0, sl
 800ed7e:	2240      	movs	r2, #64	; 0x40
 800ed80:	4082      	lsls	r2, r0
 800ed82:	4313      	orrs	r3, r2
 800ed84:	3401      	adds	r4, #1
 800ed86:	9304      	str	r3, [sp, #16]
 800ed88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed8c:	4825      	ldr	r0, [pc, #148]	; (800ee24 <_svfiprintf_r+0x1ec>)
 800ed8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed92:	2206      	movs	r2, #6
 800ed94:	f7f1 fabc 	bl	8000310 <memchr>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d038      	beq.n	800ee0e <_svfiprintf_r+0x1d6>
 800ed9c:	4b22      	ldr	r3, [pc, #136]	; (800ee28 <_svfiprintf_r+0x1f0>)
 800ed9e:	bb1b      	cbnz	r3, 800ede8 <_svfiprintf_r+0x1b0>
 800eda0:	9b03      	ldr	r3, [sp, #12]
 800eda2:	3307      	adds	r3, #7
 800eda4:	f023 0307 	bic.w	r3, r3, #7
 800eda8:	3308      	adds	r3, #8
 800edaa:	9303      	str	r3, [sp, #12]
 800edac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edae:	4433      	add	r3, r6
 800edb0:	9309      	str	r3, [sp, #36]	; 0x24
 800edb2:	e768      	b.n	800ec86 <_svfiprintf_r+0x4e>
 800edb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800edb8:	460c      	mov	r4, r1
 800edba:	2001      	movs	r0, #1
 800edbc:	e7a6      	b.n	800ed0c <_svfiprintf_r+0xd4>
 800edbe:	2300      	movs	r3, #0
 800edc0:	3401      	adds	r4, #1
 800edc2:	9305      	str	r3, [sp, #20]
 800edc4:	4619      	mov	r1, r3
 800edc6:	f04f 0c0a 	mov.w	ip, #10
 800edca:	4620      	mov	r0, r4
 800edcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edd0:	3a30      	subs	r2, #48	; 0x30
 800edd2:	2a09      	cmp	r2, #9
 800edd4:	d903      	bls.n	800edde <_svfiprintf_r+0x1a6>
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d0c6      	beq.n	800ed68 <_svfiprintf_r+0x130>
 800edda:	9105      	str	r1, [sp, #20]
 800eddc:	e7c4      	b.n	800ed68 <_svfiprintf_r+0x130>
 800edde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ede2:	4604      	mov	r4, r0
 800ede4:	2301      	movs	r3, #1
 800ede6:	e7f0      	b.n	800edca <_svfiprintf_r+0x192>
 800ede8:	ab03      	add	r3, sp, #12
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	462a      	mov	r2, r5
 800edee:	4b0f      	ldr	r3, [pc, #60]	; (800ee2c <_svfiprintf_r+0x1f4>)
 800edf0:	a904      	add	r1, sp, #16
 800edf2:	4638      	mov	r0, r7
 800edf4:	f3af 8000 	nop.w
 800edf8:	1c42      	adds	r2, r0, #1
 800edfa:	4606      	mov	r6, r0
 800edfc:	d1d6      	bne.n	800edac <_svfiprintf_r+0x174>
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	065b      	lsls	r3, r3, #25
 800ee02:	f53f af2d 	bmi.w	800ec60 <_svfiprintf_r+0x28>
 800ee06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee08:	b01d      	add	sp, #116	; 0x74
 800ee0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0e:	ab03      	add	r3, sp, #12
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	462a      	mov	r2, r5
 800ee14:	4b05      	ldr	r3, [pc, #20]	; (800ee2c <_svfiprintf_r+0x1f4>)
 800ee16:	a904      	add	r1, sp, #16
 800ee18:	4638      	mov	r0, r7
 800ee1a:	f000 f879 	bl	800ef10 <_printf_i>
 800ee1e:	e7eb      	b.n	800edf8 <_svfiprintf_r+0x1c0>
 800ee20:	080133c0 	.word	0x080133c0
 800ee24:	080133ca 	.word	0x080133ca
 800ee28:	00000000 	.word	0x00000000
 800ee2c:	0800eb85 	.word	0x0800eb85
 800ee30:	080133c6 	.word	0x080133c6

0800ee34 <_printf_common>:
 800ee34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee38:	4616      	mov	r6, r2
 800ee3a:	4699      	mov	r9, r3
 800ee3c:	688a      	ldr	r2, [r1, #8]
 800ee3e:	690b      	ldr	r3, [r1, #16]
 800ee40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee44:	4293      	cmp	r3, r2
 800ee46:	bfb8      	it	lt
 800ee48:	4613      	movlt	r3, r2
 800ee4a:	6033      	str	r3, [r6, #0]
 800ee4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee50:	4607      	mov	r7, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	b10a      	cbz	r2, 800ee5a <_printf_common+0x26>
 800ee56:	3301      	adds	r3, #1
 800ee58:	6033      	str	r3, [r6, #0]
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	0699      	lsls	r1, r3, #26
 800ee5e:	bf42      	ittt	mi
 800ee60:	6833      	ldrmi	r3, [r6, #0]
 800ee62:	3302      	addmi	r3, #2
 800ee64:	6033      	strmi	r3, [r6, #0]
 800ee66:	6825      	ldr	r5, [r4, #0]
 800ee68:	f015 0506 	ands.w	r5, r5, #6
 800ee6c:	d106      	bne.n	800ee7c <_printf_common+0x48>
 800ee6e:	f104 0a19 	add.w	sl, r4, #25
 800ee72:	68e3      	ldr	r3, [r4, #12]
 800ee74:	6832      	ldr	r2, [r6, #0]
 800ee76:	1a9b      	subs	r3, r3, r2
 800ee78:	42ab      	cmp	r3, r5
 800ee7a:	dc26      	bgt.n	800eeca <_printf_common+0x96>
 800ee7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee80:	1e13      	subs	r3, r2, #0
 800ee82:	6822      	ldr	r2, [r4, #0]
 800ee84:	bf18      	it	ne
 800ee86:	2301      	movne	r3, #1
 800ee88:	0692      	lsls	r2, r2, #26
 800ee8a:	d42b      	bmi.n	800eee4 <_printf_common+0xb0>
 800ee8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee90:	4649      	mov	r1, r9
 800ee92:	4638      	mov	r0, r7
 800ee94:	47c0      	blx	r8
 800ee96:	3001      	adds	r0, #1
 800ee98:	d01e      	beq.n	800eed8 <_printf_common+0xa4>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	6922      	ldr	r2, [r4, #16]
 800ee9e:	f003 0306 	and.w	r3, r3, #6
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	bf02      	ittt	eq
 800eea6:	68e5      	ldreq	r5, [r4, #12]
 800eea8:	6833      	ldreq	r3, [r6, #0]
 800eeaa:	1aed      	subeq	r5, r5, r3
 800eeac:	68a3      	ldr	r3, [r4, #8]
 800eeae:	bf0c      	ite	eq
 800eeb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eeb4:	2500      	movne	r5, #0
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	bfc4      	itt	gt
 800eeba:	1a9b      	subgt	r3, r3, r2
 800eebc:	18ed      	addgt	r5, r5, r3
 800eebe:	2600      	movs	r6, #0
 800eec0:	341a      	adds	r4, #26
 800eec2:	42b5      	cmp	r5, r6
 800eec4:	d11a      	bne.n	800eefc <_printf_common+0xc8>
 800eec6:	2000      	movs	r0, #0
 800eec8:	e008      	b.n	800eedc <_printf_common+0xa8>
 800eeca:	2301      	movs	r3, #1
 800eecc:	4652      	mov	r2, sl
 800eece:	4649      	mov	r1, r9
 800eed0:	4638      	mov	r0, r7
 800eed2:	47c0      	blx	r8
 800eed4:	3001      	adds	r0, #1
 800eed6:	d103      	bne.n	800eee0 <_printf_common+0xac>
 800eed8:	f04f 30ff 	mov.w	r0, #4294967295
 800eedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee0:	3501      	adds	r5, #1
 800eee2:	e7c6      	b.n	800ee72 <_printf_common+0x3e>
 800eee4:	18e1      	adds	r1, r4, r3
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	2030      	movs	r0, #48	; 0x30
 800eeea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eeee:	4422      	add	r2, r4
 800eef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eef8:	3302      	adds	r3, #2
 800eefa:	e7c7      	b.n	800ee8c <_printf_common+0x58>
 800eefc:	2301      	movs	r3, #1
 800eefe:	4622      	mov	r2, r4
 800ef00:	4649      	mov	r1, r9
 800ef02:	4638      	mov	r0, r7
 800ef04:	47c0      	blx	r8
 800ef06:	3001      	adds	r0, #1
 800ef08:	d0e6      	beq.n	800eed8 <_printf_common+0xa4>
 800ef0a:	3601      	adds	r6, #1
 800ef0c:	e7d9      	b.n	800eec2 <_printf_common+0x8e>
	...

0800ef10 <_printf_i>:
 800ef10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	7e0f      	ldrb	r7, [r1, #24]
 800ef16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef18:	2f78      	cmp	r7, #120	; 0x78
 800ef1a:	4691      	mov	r9, r2
 800ef1c:	4680      	mov	r8, r0
 800ef1e:	460c      	mov	r4, r1
 800ef20:	469a      	mov	sl, r3
 800ef22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef26:	d807      	bhi.n	800ef38 <_printf_i+0x28>
 800ef28:	2f62      	cmp	r7, #98	; 0x62
 800ef2a:	d80a      	bhi.n	800ef42 <_printf_i+0x32>
 800ef2c:	2f00      	cmp	r7, #0
 800ef2e:	f000 80d4 	beq.w	800f0da <_printf_i+0x1ca>
 800ef32:	2f58      	cmp	r7, #88	; 0x58
 800ef34:	f000 80c0 	beq.w	800f0b8 <_printf_i+0x1a8>
 800ef38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef40:	e03a      	b.n	800efb8 <_printf_i+0xa8>
 800ef42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef46:	2b15      	cmp	r3, #21
 800ef48:	d8f6      	bhi.n	800ef38 <_printf_i+0x28>
 800ef4a:	a101      	add	r1, pc, #4	; (adr r1, 800ef50 <_printf_i+0x40>)
 800ef4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef50:	0800efa9 	.word	0x0800efa9
 800ef54:	0800efbd 	.word	0x0800efbd
 800ef58:	0800ef39 	.word	0x0800ef39
 800ef5c:	0800ef39 	.word	0x0800ef39
 800ef60:	0800ef39 	.word	0x0800ef39
 800ef64:	0800ef39 	.word	0x0800ef39
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800ef39 	.word	0x0800ef39
 800ef70:	0800ef39 	.word	0x0800ef39
 800ef74:	0800ef39 	.word	0x0800ef39
 800ef78:	0800ef39 	.word	0x0800ef39
 800ef7c:	0800f0c1 	.word	0x0800f0c1
 800ef80:	0800efe9 	.word	0x0800efe9
 800ef84:	0800f07b 	.word	0x0800f07b
 800ef88:	0800ef39 	.word	0x0800ef39
 800ef8c:	0800ef39 	.word	0x0800ef39
 800ef90:	0800f0e3 	.word	0x0800f0e3
 800ef94:	0800ef39 	.word	0x0800ef39
 800ef98:	0800efe9 	.word	0x0800efe9
 800ef9c:	0800ef39 	.word	0x0800ef39
 800efa0:	0800ef39 	.word	0x0800ef39
 800efa4:	0800f083 	.word	0x0800f083
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	1d1a      	adds	r2, r3, #4
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	602a      	str	r2, [r5, #0]
 800efb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efb8:	2301      	movs	r3, #1
 800efba:	e09f      	b.n	800f0fc <_printf_i+0x1ec>
 800efbc:	6820      	ldr	r0, [r4, #0]
 800efbe:	682b      	ldr	r3, [r5, #0]
 800efc0:	0607      	lsls	r7, r0, #24
 800efc2:	f103 0104 	add.w	r1, r3, #4
 800efc6:	6029      	str	r1, [r5, #0]
 800efc8:	d501      	bpl.n	800efce <_printf_i+0xbe>
 800efca:	681e      	ldr	r6, [r3, #0]
 800efcc:	e003      	b.n	800efd6 <_printf_i+0xc6>
 800efce:	0646      	lsls	r6, r0, #25
 800efd0:	d5fb      	bpl.n	800efca <_printf_i+0xba>
 800efd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800efd6:	2e00      	cmp	r6, #0
 800efd8:	da03      	bge.n	800efe2 <_printf_i+0xd2>
 800efda:	232d      	movs	r3, #45	; 0x2d
 800efdc:	4276      	negs	r6, r6
 800efde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efe2:	485a      	ldr	r0, [pc, #360]	; (800f14c <_printf_i+0x23c>)
 800efe4:	230a      	movs	r3, #10
 800efe6:	e012      	b.n	800f00e <_printf_i+0xfe>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	6820      	ldr	r0, [r4, #0]
 800efec:	1d19      	adds	r1, r3, #4
 800efee:	6029      	str	r1, [r5, #0]
 800eff0:	0605      	lsls	r5, r0, #24
 800eff2:	d501      	bpl.n	800eff8 <_printf_i+0xe8>
 800eff4:	681e      	ldr	r6, [r3, #0]
 800eff6:	e002      	b.n	800effe <_printf_i+0xee>
 800eff8:	0641      	lsls	r1, r0, #25
 800effa:	d5fb      	bpl.n	800eff4 <_printf_i+0xe4>
 800effc:	881e      	ldrh	r6, [r3, #0]
 800effe:	4853      	ldr	r0, [pc, #332]	; (800f14c <_printf_i+0x23c>)
 800f000:	2f6f      	cmp	r7, #111	; 0x6f
 800f002:	bf0c      	ite	eq
 800f004:	2308      	moveq	r3, #8
 800f006:	230a      	movne	r3, #10
 800f008:	2100      	movs	r1, #0
 800f00a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f00e:	6865      	ldr	r5, [r4, #4]
 800f010:	60a5      	str	r5, [r4, #8]
 800f012:	2d00      	cmp	r5, #0
 800f014:	bfa2      	ittt	ge
 800f016:	6821      	ldrge	r1, [r4, #0]
 800f018:	f021 0104 	bicge.w	r1, r1, #4
 800f01c:	6021      	strge	r1, [r4, #0]
 800f01e:	b90e      	cbnz	r6, 800f024 <_printf_i+0x114>
 800f020:	2d00      	cmp	r5, #0
 800f022:	d04b      	beq.n	800f0bc <_printf_i+0x1ac>
 800f024:	4615      	mov	r5, r2
 800f026:	fbb6 f1f3 	udiv	r1, r6, r3
 800f02a:	fb03 6711 	mls	r7, r3, r1, r6
 800f02e:	5dc7      	ldrb	r7, [r0, r7]
 800f030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f034:	4637      	mov	r7, r6
 800f036:	42bb      	cmp	r3, r7
 800f038:	460e      	mov	r6, r1
 800f03a:	d9f4      	bls.n	800f026 <_printf_i+0x116>
 800f03c:	2b08      	cmp	r3, #8
 800f03e:	d10b      	bne.n	800f058 <_printf_i+0x148>
 800f040:	6823      	ldr	r3, [r4, #0]
 800f042:	07de      	lsls	r6, r3, #31
 800f044:	d508      	bpl.n	800f058 <_printf_i+0x148>
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	6861      	ldr	r1, [r4, #4]
 800f04a:	4299      	cmp	r1, r3
 800f04c:	bfde      	ittt	le
 800f04e:	2330      	movle	r3, #48	; 0x30
 800f050:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f054:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f058:	1b52      	subs	r2, r2, r5
 800f05a:	6122      	str	r2, [r4, #16]
 800f05c:	f8cd a000 	str.w	sl, [sp]
 800f060:	464b      	mov	r3, r9
 800f062:	aa03      	add	r2, sp, #12
 800f064:	4621      	mov	r1, r4
 800f066:	4640      	mov	r0, r8
 800f068:	f7ff fee4 	bl	800ee34 <_printf_common>
 800f06c:	3001      	adds	r0, #1
 800f06e:	d14a      	bne.n	800f106 <_printf_i+0x1f6>
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	b004      	add	sp, #16
 800f076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f043 0320 	orr.w	r3, r3, #32
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	4833      	ldr	r0, [pc, #204]	; (800f150 <_printf_i+0x240>)
 800f084:	2778      	movs	r7, #120	; 0x78
 800f086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	6829      	ldr	r1, [r5, #0]
 800f08e:	061f      	lsls	r7, r3, #24
 800f090:	f851 6b04 	ldr.w	r6, [r1], #4
 800f094:	d402      	bmi.n	800f09c <_printf_i+0x18c>
 800f096:	065f      	lsls	r7, r3, #25
 800f098:	bf48      	it	mi
 800f09a:	b2b6      	uxthmi	r6, r6
 800f09c:	07df      	lsls	r7, r3, #31
 800f09e:	bf48      	it	mi
 800f0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800f0a4:	6029      	str	r1, [r5, #0]
 800f0a6:	bf48      	it	mi
 800f0a8:	6023      	strmi	r3, [r4, #0]
 800f0aa:	b91e      	cbnz	r6, 800f0b4 <_printf_i+0x1a4>
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	f023 0320 	bic.w	r3, r3, #32
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	e7a7      	b.n	800f008 <_printf_i+0xf8>
 800f0b8:	4824      	ldr	r0, [pc, #144]	; (800f14c <_printf_i+0x23c>)
 800f0ba:	e7e4      	b.n	800f086 <_printf_i+0x176>
 800f0bc:	4615      	mov	r5, r2
 800f0be:	e7bd      	b.n	800f03c <_printf_i+0x12c>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	6826      	ldr	r6, [r4, #0]
 800f0c4:	6961      	ldr	r1, [r4, #20]
 800f0c6:	1d18      	adds	r0, r3, #4
 800f0c8:	6028      	str	r0, [r5, #0]
 800f0ca:	0635      	lsls	r5, r6, #24
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	d501      	bpl.n	800f0d4 <_printf_i+0x1c4>
 800f0d0:	6019      	str	r1, [r3, #0]
 800f0d2:	e002      	b.n	800f0da <_printf_i+0x1ca>
 800f0d4:	0670      	lsls	r0, r6, #25
 800f0d6:	d5fb      	bpl.n	800f0d0 <_printf_i+0x1c0>
 800f0d8:	8019      	strh	r1, [r3, #0]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	4615      	mov	r5, r2
 800f0e0:	e7bc      	b.n	800f05c <_printf_i+0x14c>
 800f0e2:	682b      	ldr	r3, [r5, #0]
 800f0e4:	1d1a      	adds	r2, r3, #4
 800f0e6:	602a      	str	r2, [r5, #0]
 800f0e8:	681d      	ldr	r5, [r3, #0]
 800f0ea:	6862      	ldr	r2, [r4, #4]
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f7f1 f90e 	bl	8000310 <memchr>
 800f0f4:	b108      	cbz	r0, 800f0fa <_printf_i+0x1ea>
 800f0f6:	1b40      	subs	r0, r0, r5
 800f0f8:	6060      	str	r0, [r4, #4]
 800f0fa:	6863      	ldr	r3, [r4, #4]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	2300      	movs	r3, #0
 800f100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f104:	e7aa      	b.n	800f05c <_printf_i+0x14c>
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	462a      	mov	r2, r5
 800f10a:	4649      	mov	r1, r9
 800f10c:	4640      	mov	r0, r8
 800f10e:	47d0      	blx	sl
 800f110:	3001      	adds	r0, #1
 800f112:	d0ad      	beq.n	800f070 <_printf_i+0x160>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	079b      	lsls	r3, r3, #30
 800f118:	d413      	bmi.n	800f142 <_printf_i+0x232>
 800f11a:	68e0      	ldr	r0, [r4, #12]
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	4298      	cmp	r0, r3
 800f120:	bfb8      	it	lt
 800f122:	4618      	movlt	r0, r3
 800f124:	e7a6      	b.n	800f074 <_printf_i+0x164>
 800f126:	2301      	movs	r3, #1
 800f128:	4632      	mov	r2, r6
 800f12a:	4649      	mov	r1, r9
 800f12c:	4640      	mov	r0, r8
 800f12e:	47d0      	blx	sl
 800f130:	3001      	adds	r0, #1
 800f132:	d09d      	beq.n	800f070 <_printf_i+0x160>
 800f134:	3501      	adds	r5, #1
 800f136:	68e3      	ldr	r3, [r4, #12]
 800f138:	9903      	ldr	r1, [sp, #12]
 800f13a:	1a5b      	subs	r3, r3, r1
 800f13c:	42ab      	cmp	r3, r5
 800f13e:	dcf2      	bgt.n	800f126 <_printf_i+0x216>
 800f140:	e7eb      	b.n	800f11a <_printf_i+0x20a>
 800f142:	2500      	movs	r5, #0
 800f144:	f104 0619 	add.w	r6, r4, #25
 800f148:	e7f5      	b.n	800f136 <_printf_i+0x226>
 800f14a:	bf00      	nop
 800f14c:	080133d1 	.word	0x080133d1
 800f150:	080133e2 	.word	0x080133e2

0800f154 <memmove>:
 800f154:	4288      	cmp	r0, r1
 800f156:	b510      	push	{r4, lr}
 800f158:	eb01 0402 	add.w	r4, r1, r2
 800f15c:	d902      	bls.n	800f164 <memmove+0x10>
 800f15e:	4284      	cmp	r4, r0
 800f160:	4623      	mov	r3, r4
 800f162:	d807      	bhi.n	800f174 <memmove+0x20>
 800f164:	1e43      	subs	r3, r0, #1
 800f166:	42a1      	cmp	r1, r4
 800f168:	d008      	beq.n	800f17c <memmove+0x28>
 800f16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f172:	e7f8      	b.n	800f166 <memmove+0x12>
 800f174:	4402      	add	r2, r0
 800f176:	4601      	mov	r1, r0
 800f178:	428a      	cmp	r2, r1
 800f17a:	d100      	bne.n	800f17e <memmove+0x2a>
 800f17c:	bd10      	pop	{r4, pc}
 800f17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f186:	e7f7      	b.n	800f178 <memmove+0x24>

0800f188 <_sbrk_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d06      	ldr	r5, [pc, #24]	; (800f1a4 <_sbrk_r+0x1c>)
 800f18c:	2300      	movs	r3, #0
 800f18e:	4604      	mov	r4, r0
 800f190:	4608      	mov	r0, r1
 800f192:	602b      	str	r3, [r5, #0]
 800f194:	f7f2 feb6 	bl	8001f04 <_sbrk>
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	d102      	bne.n	800f1a2 <_sbrk_r+0x1a>
 800f19c:	682b      	ldr	r3, [r5, #0]
 800f19e:	b103      	cbz	r3, 800f1a2 <_sbrk_r+0x1a>
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	20001d00 	.word	0x20001d00

0800f1a8 <_realloc_r>:
 800f1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ac:	4680      	mov	r8, r0
 800f1ae:	4614      	mov	r4, r2
 800f1b0:	460e      	mov	r6, r1
 800f1b2:	b921      	cbnz	r1, 800f1be <_realloc_r+0x16>
 800f1b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	f7ff bc57 	b.w	800ea6c <_malloc_r>
 800f1be:	b92a      	cbnz	r2, 800f1cc <_realloc_r+0x24>
 800f1c0:	f7ff fbe8 	bl	800e994 <_free_r>
 800f1c4:	4625      	mov	r5, r4
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	f000 f81b 	bl	800f206 <_malloc_usable_size_r>
 800f1d0:	4284      	cmp	r4, r0
 800f1d2:	4607      	mov	r7, r0
 800f1d4:	d802      	bhi.n	800f1dc <_realloc_r+0x34>
 800f1d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1da:	d812      	bhi.n	800f202 <_realloc_r+0x5a>
 800f1dc:	4621      	mov	r1, r4
 800f1de:	4640      	mov	r0, r8
 800f1e0:	f7ff fc44 	bl	800ea6c <_malloc_r>
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d0ed      	beq.n	800f1c6 <_realloc_r+0x1e>
 800f1ea:	42bc      	cmp	r4, r7
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	bf28      	it	cs
 800f1f2:	463a      	movcs	r2, r7
 800f1f4:	f7ff fbc0 	bl	800e978 <memcpy>
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	f7ff fbca 	bl	800e994 <_free_r>
 800f200:	e7e1      	b.n	800f1c6 <_realloc_r+0x1e>
 800f202:	4635      	mov	r5, r6
 800f204:	e7df      	b.n	800f1c6 <_realloc_r+0x1e>

0800f206 <_malloc_usable_size_r>:
 800f206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f20a:	1f18      	subs	r0, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	bfbc      	itt	lt
 800f210:	580b      	ldrlt	r3, [r1, r0]
 800f212:	18c0      	addlt	r0, r0, r3
 800f214:	4770      	bx	lr
	...

0800f218 <_init>:
 800f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21a:	bf00      	nop
 800f21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f21e:	bc08      	pop	{r3}
 800f220:	469e      	mov	lr, r3
 800f222:	4770      	bx	lr

0800f224 <_fini>:
 800f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f226:	bf00      	nop
 800f228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22a:	bc08      	pop	{r3}
 800f22c:	469e      	mov	lr, r3
 800f22e:	4770      	bx	lr
