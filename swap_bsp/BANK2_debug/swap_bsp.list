
swap_bsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008364  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  20000000  0800a35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c80  200000c8  0800a424  000200c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001d48  0800a424  00021d48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031b08  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007091  00000000  00000000  00051c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00012ec3  00000000  00000000  00058cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a2  00000000  00000000  0006d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414e5  00000000  00000000  0006ebc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034c9f  00000000  00000000  000b00a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194c0e  00000000  00000000  000e4d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004df0  00000000  00000000  00279954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006b  00000000  00000000  0027e744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000c8 	.word	0x200000c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080085ec 	.word	0x080085ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000cc 	.word	0x200000cc
 80002dc:	080085ec 	.word	0x080085ec

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80006ae:	7a03      	ldrb	r3, [r0, #8]
{
 80006b0:	4604      	mov	r4, r0
	if (options->MQTTVersion == 3)
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d036      	beq.n	8000724 <MQTTSerialize_connectLength+0x78>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf14      	ite	ne
 80006ba:	2500      	movne	r5, #0
 80006bc:	250a      	moveq	r5, #10

	len += MQTTstrlen(options->clientID)+2;
 80006be:	f104 030c 	add.w	r3, r4, #12
 80006c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006c6:	f000 f9e9 	bl	8000a9c <MQTTstrlen>
	if (options->willFlag)
 80006ca:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 80006cc:	3002      	adds	r0, #2
 80006ce:	4405      	add	r5, r0
	if (options->willFlag)
 80006d0:	b17b      	cbz	r3, 80006f2 <MQTTSerialize_connectLength+0x46>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80006d2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80006d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006da:	f000 f9df 	bl	8000a9c <MQTTstrlen>
 80006de:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80006e2:	4606      	mov	r6, r0
 80006e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006e8:	f000 f9d8 	bl	8000a9c <MQTTstrlen>
 80006ec:	4430      	add	r0, r6
 80006ee:	3004      	adds	r0, #4
 80006f0:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 80006f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006f4:	b90b      	cbnz	r3, 80006fa <MQTTSerialize_connectLength+0x4e>
 80006f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006f8:	b13b      	cbz	r3, 800070a <MQTTSerialize_connectLength+0x5e>
		len += MQTTstrlen(options->username)+2;
 80006fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80006fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000702:	f000 f9cb 	bl	8000a9c <MQTTstrlen>
 8000706:	3002      	adds	r0, #2
 8000708:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 800070a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800070c:	b90b      	cbnz	r3, 8000712 <MQTTSerialize_connectLength+0x66>
 800070e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000710:	b133      	cbz	r3, 8000720 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->password)+2;
 8000712:	344c      	adds	r4, #76	; 0x4c
 8000714:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000718:	f000 f9c0 	bl	8000a9c <MQTTstrlen>
 800071c:	3002      	adds	r0, #2
 800071e:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
 8000720:	4628      	mov	r0, r5
 8000722:	bd70      	pop	{r4, r5, r6, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000724:	250c      	movs	r5, #12
 8000726:	e7ca      	b.n	80006be <MQTTSerialize_connectLength+0x12>

08000728 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800072c:	4688      	mov	r8, r1
	unsigned char *ptr = buf;
 800072e:	9001      	str	r0, [sp, #4]
{
 8000730:	4606      	mov	r6, r0
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000732:	4610      	mov	r0, r2
{
 8000734:	4614      	mov	r4, r2
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000736:	f7ff ffb9 	bl	80006ac <MQTTSerialize_connectLength>
 800073a:	4607      	mov	r7, r0
 800073c:	f000 f91a 	bl	8000974 <MQTTPacket_len>
 8000740:	4540      	cmp	r0, r8
	MQTTConnectFlags flags = {0};
 8000742:	f04f 0500 	mov.w	r5, #0
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000746:	dc78      	bgt.n	800083a <MQTTSerialize_connect+0x112>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
 8000748:	2110      	movs	r1, #16
 800074a:	a801      	add	r0, sp, #4
 800074c:	f000 f93d 	bl	80009ca <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000750:	4639      	mov	r1, r7
 8000752:	9801      	ldr	r0, [sp, #4]
 8000754:	f000 f8d4 	bl	8000900 <MQTTPacket_encode>
 8000758:	9b01      	ldr	r3, [sp, #4]

	if (options->MQTTVersion == 4)
 800075a:	7a27      	ldrb	r7, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800075c:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 800075e:	2f04      	cmp	r7, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000760:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 8000762:	d164      	bne.n	800082e <MQTTSerialize_connect+0x106>
	{
		writeCString(&ptr, "MQTT");
 8000764:	4936      	ldr	r1, [pc, #216]	; (8000840 <MQTTSerialize_connect+0x118>)
 8000766:	a801      	add	r0, sp, #4
 8000768:	f000 f94a 	bl	8000a00 <writeCString>
		writeChar(&ptr, (char) 4);
 800076c:	4639      	mov	r1, r7
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
		writeChar(&ptr, (char) 3);
 800076e:	a801      	add	r0, sp, #4
 8000770:	f000 f92b 	bl	80009ca <writeChar>
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000774:	7ee2      	ldrb	r2, [r4, #27]
	flags.bits.cleansession = options->cleansession;
 8000776:	7ea3      	ldrb	r3, [r4, #26]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000778:	3a00      	subs	r2, #0
	flags.bits.cleansession = options->cleansession;
 800077a:	ea4f 0343 	mov.w	r3, r3, lsl #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800077e:	bf18      	it	ne
 8000780:	2201      	movne	r2, #1
	flags.bits.cleansession = options->cleansession;
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800078a:	f363 0507 	bfi	r5, r3, #0, #8
	if (flags.bits.will)
 800078e:	0769      	lsls	r1, r5, #29
 8000790:	d50f      	bpl.n	80007b2 <MQTTSerialize_connect+0x8a>
	{
		flags.bits.willQoS = options->will.qos;
 8000792:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000796:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800079a:	015b      	lsls	r3, r3, #5
 800079c:	00d2      	lsls	r2, r2, #3
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	f002 0218 	and.w	r2, r2, #24
 80007a6:	4313      	orrs	r3, r2
 80007a8:	f025 0238 	bic.w	r2, r5, #56	; 0x38
 80007ac:	4313      	orrs	r3, r2
 80007ae:	f363 0507 	bfi	r5, r3, #0, #8
		flags.bits.willRetain = options->will.retained;
	}

	if (options->username.cstring || options->username.lenstring.data)
 80007b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007b4:	b90b      	cbnz	r3, 80007ba <MQTTSerialize_connect+0x92>
 80007b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007b8:	b10b      	cbz	r3, 80007be <MQTTSerialize_connect+0x96>
		flags.bits.username = 1;
 80007ba:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 80007be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007c0:	b90b      	cbnz	r3, 80007c6 <MQTTSerialize_connect+0x9e>
 80007c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007c4:	b10b      	cbz	r3, 80007ca <MQTTSerialize_connect+0xa2>
		flags.bits.password = 1;
 80007c6:	f045 0540 	orr.w	r5, r5, #64	; 0x40

	writeChar(&ptr, flags.all);
 80007ca:	b2ed      	uxtb	r5, r5
 80007cc:	a801      	add	r0, sp, #4
 80007ce:	4629      	mov	r1, r5
 80007d0:	f000 f8fb 	bl	80009ca <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007d4:	8b21      	ldrh	r1, [r4, #24]
 80007d6:	a801      	add	r0, sp, #4
 80007d8:	f000 f8fd 	bl	80009d6 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007dc:	f104 030c 	add.w	r3, r4, #12
 80007e0:	a801      	add	r0, sp, #4
 80007e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e4:	f000 f920 	bl	8000a28 <writeMQTTString>
	if (options->willFlag)
 80007e8:	7ee3      	ldrb	r3, [r4, #27]
 80007ea:	b15b      	cbz	r3, 8000804 <MQTTSerialize_connect+0xdc>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80007ec:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80007f0:	a801      	add	r0, sp, #4
 80007f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f4:	f000 f918 	bl	8000a28 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80007f8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80007fc:	a801      	add	r0, sp, #4
 80007fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000800:	f000 f912 	bl	8000a28 <writeMQTTString>
	}
	if (flags.bits.username)
 8000804:	062a      	lsls	r2, r5, #24
 8000806:	d505      	bpl.n	8000814 <MQTTSerialize_connect+0xec>
		writeMQTTString(&ptr, options->username);
 8000808:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800080c:	a801      	add	r0, sp, #4
 800080e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000810:	f000 f90a 	bl	8000a28 <writeMQTTString>
	if (flags.bits.password)
 8000814:	066b      	lsls	r3, r5, #25
 8000816:	d505      	bpl.n	8000824 <MQTTSerialize_connect+0xfc>
		writeMQTTString(&ptr, options->password);
 8000818:	344c      	adds	r4, #76	; 0x4c
 800081a:	a801      	add	r0, sp, #4
 800081c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000820:	f000 f902 	bl	8000a28 <writeMQTTString>

	rc = ptr - buf;
 8000824:	9801      	ldr	r0, [sp, #4]
 8000826:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
 8000828:	b002      	add	sp, #8
 800082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		writeCString(&ptr, "MQIsdp");
 800082e:	4905      	ldr	r1, [pc, #20]	; (8000844 <MQTTSerialize_connect+0x11c>)
 8000830:	a801      	add	r0, sp, #4
 8000832:	f000 f8e5 	bl	8000a00 <writeCString>
		writeChar(&ptr, (char) 3);
 8000836:	2103      	movs	r1, #3
 8000838:	e799      	b.n	800076e <MQTTSerialize_connect+0x46>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800083a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800083e:	e7f3      	b.n	8000828 <MQTTSerialize_connect+0x100>
 8000840:	0800865c 	.word	0x0800865c
 8000844:	08008661 	.word	0x08008661

08000848 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 800084c:	2500      	movs	r5, #0
{
 800084e:	461f      	mov	r7, r3
	unsigned char* curdata = buf;
 8000850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8000852:	4681      	mov	r9, r0

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000854:	4668      	mov	r0, sp
{
 8000856:	460e      	mov	r6, r1
	unsigned char* curdata = buf;
 8000858:	9300      	str	r3, [sp, #0]
{
 800085a:	4690      	mov	r8, r2
	int mylen = 0;
 800085c:	9501      	str	r5, [sp, #4]
	header.byte = readChar(&curdata);
 800085e:	f000 f8ae 	bl	80009be <readChar>
	if (header.bits.type != PUBLISH)
 8000862:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	header.byte = readChar(&curdata);
 8000866:	462c      	mov	r4, r5
	if (header.bits.type != PUBLISH)
 8000868:	2b30      	cmp	r3, #48	; 0x30
	header.byte = readChar(&curdata);
 800086a:	f360 0407 	bfi	r4, r0, #0, #8
	if (header.bits.type != PUBLISH)
 800086e:	d12c      	bne.n	80008ca <MQTTDeserialize_publish+0x82>
		goto exit;
	*dup = header.bits.dup;
 8000870:	f3c4 03c0 	ubfx	r3, r4, #3, #1
	*qos = header.bits.qos;
	*retained = header.bits.retain;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000874:	a901      	add	r1, sp, #4
 8000876:	9800      	ldr	r0, [sp, #0]
	*dup = header.bits.dup;
 8000878:	f889 3000 	strb.w	r3, [r9]
	*qos = header.bits.qos;
 800087c:	f3c4 0341 	ubfx	r3, r4, #1, #2
	*retained = header.bits.retain;
 8000880:	f3c4 0400 	ubfx	r4, r4, #0, #1
	*qos = header.bits.qos;
 8000884:	6033      	str	r3, [r6, #0]
	*retained = header.bits.retain;
 8000886:	f888 4000 	strb.w	r4, [r8]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 800088a:	f000 f885 	bl	8000998 <MQTTPacket_decodeBuf>
 800088e:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 8000890:	9b01      	ldr	r3, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000892:	4605      	mov	r5, r0
 8000894:	4404      	add	r4, r0

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000896:	4669      	mov	r1, sp
 8000898:	980a      	ldr	r0, [sp, #40]	; 0x28
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 800089a:	9400      	str	r4, [sp, #0]
	enddata = curdata + mylen;
 800089c:	441c      	add	r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800089e:	4622      	mov	r2, r4
 80008a0:	f000 f8e3 	bl	8000a6a <readMQTTLenString>
 80008a4:	b188      	cbz	r0, 80008ca <MQTTDeserialize_publish+0x82>
		enddata - curdata < 0)
 80008a6:	9b00      	ldr	r3, [sp, #0]
 80008a8:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0d      	blt.n	80008ca <MQTTDeserialize_publish+0x82>
		goto exit;

	if (*qos > 0)
 80008ae:	6833      	ldr	r3, [r6, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dd03      	ble.n	80008bc <MQTTDeserialize_publish+0x74>
		*packetid = readInt(&curdata);
 80008b4:	4668      	mov	r0, sp
 80008b6:	f000 f879 	bl	80009ac <readInt>
 80008ba:	8038      	strh	r0, [r7, #0]

	*payloadlen = enddata - curdata;
 80008bc:	9b00      	ldr	r3, [sp, #0]
	*payload = curdata;
	rc = 1;
 80008be:	2501      	movs	r5, #1
	*payloadlen = enddata - curdata;
 80008c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80008c2:	1ae4      	subs	r4, r4, r3
 80008c4:	6014      	str	r4, [r2, #0]
	*payload = curdata;
 80008c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80008c8:	6013      	str	r3, [r2, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 80008ca:	4628      	mov	r0, r5
 80008cc:	b003      	add	sp, #12
 80008ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080008d4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80008d4:	b530      	push	{r4, r5, lr}
 80008d6:	4d09      	ldr	r5, [pc, #36]	; (80008fc <bufchar+0x28>)
	int i;

	for (i = 0; i < count; ++i)
 80008d8:	2400      	movs	r4, #0
 80008da:	682b      	ldr	r3, [r5, #0]
 80008dc:	4622      	mov	r2, r4
 80008de:	428a      	cmp	r2, r1
 80008e0:	db06      	blt.n	80008f0 <bufchar+0x1c>
 80008e2:	2900      	cmp	r1, #0
 80008e4:	bfa8      	it	ge
 80008e6:	185b      	addge	r3, r3, r1
 80008e8:	b104      	cbz	r4, 80008ec <bufchar+0x18>
 80008ea:	602b      	str	r3, [r5, #0]
		*c = *bufptr++;
	return count;
}
 80008ec:	4608      	mov	r0, r1
 80008ee:	bd30      	pop	{r4, r5, pc}
		*c = *bufptr++;
 80008f0:	5c9c      	ldrb	r4, [r3, r2]
	for (i = 0; i < count; ++i)
 80008f2:	3201      	adds	r2, #1
		*c = *bufptr++;
 80008f4:	7004      	strb	r4, [r0, #0]
	for (i = 0; i < count; ++i)
 80008f6:	2401      	movs	r4, #1
 80008f8:	e7f1      	b.n	80008de <bufchar+0xa>
 80008fa:	bf00      	nop
 80008fc:	200000e4 	.word	0x200000e4

08000900 <MQTTPacket_encode>:
{
 8000900:	b530      	push	{r4, r5, lr}
 8000902:	f1c0 0202 	rsb	r2, r0, #2
 8000906:	1e45      	subs	r5, r0, #1
		char d = length % 128;
 8000908:	4248      	negs	r0, r1
 800090a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800090e:	460c      	mov	r4, r1
 8000910:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000914:	bf58      	it	pl
 8000916:	4243      	negpl	r3, r0
		length /= 128;
 8000918:	2900      	cmp	r1, #0
 800091a:	eb02 0005 	add.w	r0, r2, r5
		char d = length % 128;
 800091e:	b2db      	uxtb	r3, r3
		length /= 128;
 8000920:	bfb8      	it	lt
 8000922:	317f      	addlt	r1, #127	; 0x7f
		if (length > 0)
 8000924:	2c7f      	cmp	r4, #127	; 0x7f
		length /= 128;
 8000926:	ea4f 11e1 	mov.w	r1, r1, asr #7
			d |= 0x80;
 800092a:	bfc8      	it	gt
 800092c:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
	} while (length > 0);
 8000930:	2c7f      	cmp	r4, #127	; 0x7f
		buf[rc++] = d;
 8000932:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while (length > 0);
 8000936:	dce7      	bgt.n	8000908 <MQTTPacket_encode+0x8>
}
 8000938:	bd30      	pop	{r4, r5, pc}

0800093a <MQTTPacket_decode>:
{
 800093a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*value = 0;
 800093c:	2400      	movs	r4, #0
{
 800093e:	4607      	mov	r7, r0
 8000940:	460d      	mov	r5, r1
	int multiplier = 1;
 8000942:	2601      	movs	r6, #1
	*value = 0;
 8000944:	600c      	str	r4, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000946:	3401      	adds	r4, #1
 8000948:	2c05      	cmp	r4, #5
 800094a:	d010      	beq.n	800096e <MQTTPacket_decode+0x34>
		rc = (*getcharfn)(&c, 1);
 800094c:	2101      	movs	r1, #1
 800094e:	f10d 0007 	add.w	r0, sp, #7
 8000952:	47b8      	blx	r7
		if (rc != 1)
 8000954:	2801      	cmp	r0, #1
 8000956:	d10a      	bne.n	800096e <MQTTPacket_decode+0x34>
		*value += (c & 127) * multiplier;
 8000958:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8000962:	fb06 3301 	mla	r3, r6, r1, r3
		multiplier *= 128;
 8000966:	01f6      	lsls	r6, r6, #7
		*value += (c & 127) * multiplier;
 8000968:	602b      	str	r3, [r5, #0]
	} while ((c & 128) != 0);
 800096a:	0613      	lsls	r3, r2, #24
 800096c:	d4eb      	bmi.n	8000946 <MQTTPacket_decode+0xc>
}
 800096e:	4620      	mov	r0, r4
 8000970:	b003      	add	sp, #12
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000974 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 8000974:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 8000976:	2b7f      	cmp	r3, #127	; 0x7f
 8000978:	dc01      	bgt.n	800097e <MQTTPacket_len+0xa>
		rem_len += 1;
 800097a:	3002      	adds	r0, #2
 800097c:	4770      	bx	lr
	else if (rem_len < 16384)
 800097e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000982:	da01      	bge.n	8000988 <MQTTPacket_len+0x14>
		rem_len += 2;
 8000984:	3003      	adds	r0, #3
 8000986:	4770      	bx	lr
	else if (rem_len < 2097151)
 8000988:	4a02      	ldr	r2, [pc, #8]	; (8000994 <MQTTPacket_len+0x20>)
 800098a:	4293      	cmp	r3, r2
		rem_len += 3;
 800098c:	bfd4      	ite	le
 800098e:	3004      	addle	r0, #4
		rem_len += 4;
 8000990:	3005      	addgt	r0, #5
}
 8000992:	4770      	bx	lr
 8000994:	001ffffe 	.word	0x001ffffe

08000998 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
	bufptr = buf;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <MQTTPacket_decodeBuf+0xc>)
 800099a:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <MQTTPacket_decodeBuf+0x10>)
 800099e:	f7ff bfcc 	b.w	800093a <MQTTPacket_decode>
 80009a2:	bf00      	nop
 80009a4:	200000e4 	.word	0x200000e4
 80009a8:	080008d5 	.word	0x080008d5

080009ac <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 80009ac:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 80009ae:	7819      	ldrb	r1, [r3, #0]
	*pptr += 2;
 80009b0:	3302      	adds	r3, #2
	int len = 256*(*ptr) + (*(ptr+1));
 80009b2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
	*pptr += 2;
 80009b6:	6003      	str	r3, [r0, #0]
	return len;
}
 80009b8:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 80009bc:	4770      	bx	lr

080009be <readChar>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
	char c = **pptr;
 80009be:	6802      	ldr	r2, [r0, #0]
{
 80009c0:	4603      	mov	r3, r0
	char c = **pptr;
 80009c2:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 80009c6:	601a      	str	r2, [r3, #0]
	return c;
}
 80009c8:	4770      	bx	lr

080009ca <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 80009ca:	6803      	ldr	r3, [r0, #0]
 80009cc:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 80009ce:	6803      	ldr	r3, [r0, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	6003      	str	r3, [r0, #0]
}
 80009d4:	4770      	bx	lr

080009d6 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 80009d6:	2900      	cmp	r1, #0
 80009d8:	460b      	mov	r3, r1
 80009da:	6802      	ldr	r2, [r0, #0]
 80009dc:	bfb8      	it	lt
 80009de:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 80009e2:	121b      	asrs	r3, r3, #8
 80009e4:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80009e6:	6802      	ldr	r2, [r0, #0]
 80009e8:	1c53      	adds	r3, r2, #1
 80009ea:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 80009ec:	424b      	negs	r3, r1
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	bf58      	it	pl
 80009f4:	4259      	negpl	r1, r3
 80009f6:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	6003      	str	r3, [r0, #0]
}
 80009fe:	4770      	bx	lr

08000a00 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4604      	mov	r4, r0
	int len = strlen(string);
 8000a04:	4608      	mov	r0, r1
{
 8000a06:	460e      	mov	r6, r1
	int len = strlen(string);
 8000a08:	f7ff fc74 	bl	80002f4 <strlen>
 8000a0c:	4605      	mov	r5, r0
	writeInt(pptr, len);
 8000a0e:	4601      	mov	r1, r0
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff ffe0 	bl	80009d6 <writeInt>
	memcpy(*pptr, string, len);
 8000a16:	462a      	mov	r2, r5
 8000a18:	4631      	mov	r1, r6
 8000a1a:	6820      	ldr	r0, [r4, #0]
 8000a1c:	f007 f996 	bl	8007d4c <memcpy>
	*pptr += len;
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	442b      	add	r3, r5
 8000a24:	6023      	str	r3, [r4, #0]
}
 8000a26:	bd70      	pop	{r4, r5, r6, pc}

08000a28 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000a28:	b530      	push	{r4, r5, lr}
 8000a2a:	b085      	sub	sp, #20
	if (mqttstring.lenstring.len > 0)
 8000a2c:	2a00      	cmp	r2, #0
{
 8000a2e:	4604      	mov	r4, r0
 8000a30:	ad04      	add	r5, sp, #16
 8000a32:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8000a36:	4615      	mov	r5, r2
	if (mqttstring.lenstring.len > 0)
 8000a38:	dd0c      	ble.n	8000a54 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	f7ff ffcb 	bl	80009d6 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000a40:	462a      	mov	r2, r5
 8000a42:	9903      	ldr	r1, [sp, #12]
 8000a44:	6800      	ldr	r0, [r0, #0]
 8000a46:	f007 f981 	bl	8007d4c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	442b      	add	r3, r5
 8000a4e:	6023      	str	r3, [r4, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000a50:	b005      	add	sp, #20
 8000a52:	bd30      	pop	{r4, r5, pc}
	else if (mqttstring.cstring)
 8000a54:	b121      	cbz	r1, 8000a60 <writeMQTTString+0x38>
}
 8000a56:	b005      	add	sp, #20
 8000a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 8000a5c:	f7ff bfd0 	b.w	8000a00 <writeCString>
}
 8000a60:	b005      	add	sp, #20
 8000a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 8000a66:	f7ff bfb6 	b.w	80009d6 <writeInt>

08000a6a <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000a6a:	680b      	ldr	r3, [r1, #0]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b01      	cmp	r3, #1
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	4605      	mov	r5, r0
 8000a74:	460c      	mov	r4, r1
 8000a76:	4616      	mov	r6, r2
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000a78:	dc03      	bgt.n	8000a82 <readMQTTLenString+0x18>
	int rc = 0;
 8000a7a:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000a82:	4608      	mov	r0, r1
 8000a84:	f7ff ff92 	bl	80009ac <readInt>
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000a88:	6822      	ldr	r2, [r4, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000a8e:	4413      	add	r3, r2
 8000a90:	42b3      	cmp	r3, r6
 8000a92:	d8f2      	bhi.n	8000a7a <readMQTTLenString+0x10>
			mqttstring->lenstring.data = (char*)*pptr;
 8000a94:	60aa      	str	r2, [r5, #8]
			rc = 1;
 8000a96:	2001      	movs	r0, #1
			*pptr += mqttstring->lenstring.len;
 8000a98:	6023      	str	r3, [r4, #0]
			rc = 1;
 8000a9a:	e7ef      	b.n	8000a7c <readMQTTLenString+0x12>

08000a9c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	ab04      	add	r3, sp, #16
 8000aa0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	int rc = 0;

	if (mqttstring.cstring)
 8000aa4:	b110      	cbz	r0, 8000aac <MQTTstrlen+0x10>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 8000aa6:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 8000aa8:	f7ff bc24 	b.w	80002f4 <strlen>
}
 8000aac:	9802      	ldr	r0, [sp, #8]
 8000aae:	b004      	add	sp, #16
 8000ab0:	4770      	bx	lr

08000ab2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000ab2:	b530      	push	{r4, r5, lr}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	4605      	mov	r5, r0
 8000ab8:	ac01      	add	r4, sp, #4
 8000aba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000abe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ac2:	f7ff ffeb 	bl	8000a9c <MQTTstrlen>
 8000ac6:	9a08      	ldr	r2, [sp, #32]
 8000ac8:	1c83      	adds	r3, r0, #2
	if (qos > 0)
 8000aca:	2d00      	cmp	r5, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000acc:	eb03 0002 	add.w	r0, r3, r2
		len += 2; /* packetid */
 8000ad0:	bfc8      	it	gt
 8000ad2:	3002      	addgt	r0, #2
	return len;
}
 8000ad4:	b005      	add	sp, #20
 8000ad6:	bd30      	pop	{r4, r5, pc}

08000ad8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000adc:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8000ae0:	461e      	mov	r6, r3
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000ae2:	ad0e      	add	r5, sp, #56	; 0x38
{
 8000ae4:	468a      	mov	sl, r1
	unsigned char *ptr = buf;
 8000ae6:	9003      	str	r0, [sp, #12]
{
 8000ae8:	4607      	mov	r7, r0
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000aea:	f8cd 8000 	str.w	r8, [sp]
{
 8000aee:	4614      	mov	r4, r2
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000af0:	4630      	mov	r0, r6
 8000af2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000af6:	f7ff ffdc 	bl	8000ab2 <MQTTSerialize_publishLength>
 8000afa:	4681      	mov	r9, r0
 8000afc:	f7ff ff3a 	bl	8000974 <MQTTPacket_len>
 8000b00:	4550      	cmp	r0, sl
 8000b02:	dc2e      	bgt.n	8000b62 <MQTTSerialize_publish+0x8a>
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
	header.bits.qos = qos;
	header.bits.retain = retained;
 8000b04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000b08:	f006 0303 	and.w	r3, r6, #3
 8000b0c:	00e1      	lsls	r1, r4, #3
	writeChar(&ptr, header.byte); /* write header */
 8000b0e:	a803      	add	r0, sp, #12
	header.bits.retain = retained;
 8000b10:	f002 0201 	and.w	r2, r2, #1
 8000b14:	f001 0108 	and.w	r1, r1, #8
 8000b18:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000b1c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	writeChar(&ptr, header.byte); /* write header */
 8000b20:	4311      	orrs	r1, r2
 8000b22:	f7ff ff52 	bl	80009ca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000b26:	4649      	mov	r1, r9
 8000b28:	9803      	ldr	r0, [sp, #12]
 8000b2a:	f7ff fee9 	bl	8000900 <MQTTPacket_encode>
 8000b2e:	9b03      	ldr	r3, [sp, #12]
 8000b30:	4418      	add	r0, r3

	writeMQTTString(&ptr, topicName);
 8000b32:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000b36:	9003      	str	r0, [sp, #12]
	writeMQTTString(&ptr, topicName);
 8000b38:	a803      	add	r0, sp, #12
 8000b3a:	f7ff ff75 	bl	8000a28 <writeMQTTString>

	if (qos > 0)
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	dd04      	ble.n	8000b4c <MQTTSerialize_publish+0x74>
		writeInt(&ptr, packetid);
 8000b42:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8000b46:	a803      	add	r0, sp, #12
 8000b48:	f7ff ff45 	bl	80009d6 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b50:	9803      	ldr	r0, [sp, #12]
 8000b52:	f007 f8fb 	bl	8007d4c <memcpy>
	ptr += payloadlen;
 8000b56:	9803      	ldr	r0, [sp, #12]
 8000b58:	4440      	add	r0, r8

	rc = ptr - buf;
 8000b5a:	1bc0      	subs	r0, r0, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8000b5c:	b004      	add	sp, #16
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000b62:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8000b66:	e7f9      	b.n	8000b5c <MQTTSerialize_publish+0x84>

08000b68 <clearRxBuffer>:
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
    rx_index = 0;
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <clearRxBuffer+0x10>)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000b6c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <clearRxBuffer+0x14>)
    rx_index = 0;
 8000b72:	8019      	strh	r1, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000b74:	f007 b88c 	b.w	8007c90 <memset>
 8000b78:	20000c54 	.word	0x20000c54
 8000b7c:	2000069f 	.word	0x2000069f

08000b80 <clearMqttBuffer>:
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
    mqtt_receive = 0;
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <clearMqttBuffer+0x14>)
    mqtt_index = 0;
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000b84:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <clearMqttBuffer+0x18>)
    mqtt_receive = 0;
 8000b8a:	7019      	strb	r1, [r3, #0]
    mqtt_index = 0;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <clearMqttBuffer+0x1c>)
 8000b8e:	8019      	strh	r1, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000b90:	f007 b87e 	b.w	8007c90 <memset>
 8000b94:	2000069e 	.word	0x2000069e
 8000b98:	200000e8 	.word	0x200000e8
 8000b9c:	2000069c 	.word	0x2000069c

08000ba0 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	460c      	mov	r4, r1
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000ba8:	f7ff fba4 	bl	80002f4 <strlen>
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8000bac:	4631      	mov	r1, r6
 8000bae:	b282      	uxth	r2, r0
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <SIM800_SendCommand+0x38>)
 8000bb2:	f005 fc7f 	bl	80064b4 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f002 f920 	bl	8002dfc <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <SIM800_SendCommand+0x3c>)
 8000bc0:	f007 f881 	bl	8007cc6 <strstr>
 8000bc4:	b118      	cbz	r0, 8000bce <SIM800_SendCommand+0x2e>
    {
        clearRxBuffer();
 8000bc6:	f7ff ffcf 	bl	8000b68 <clearRxBuffer>
        return 0;
 8000bca:	2000      	movs	r0, #0
    }
    clearRxBuffer();
    return 1;
}
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
    clearRxBuffer();
 8000bce:	f7ff ffcb 	bl	8000b68 <clearRxBuffer>
    return 1;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	e7fa      	b.n	8000bcc <SIM800_SendCommand+0x2c>
 8000bd6:	bf00      	nop
 8000bd8:	20000e10 	.word	0x20000e10
 8000bdc:	200000e8 	.word	0x200000e8

08000be0 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8000be0:	b530      	push	{r4, r5, lr}
    SIM800.mqttReceive.newEvent = 0;
 8000be2:	2500      	movs	r5, #0
{
 8000be4:	b0d7      	sub	sp, #348	; 0x15c
    SIM800.mqttReceive.newEvent = 0;
 8000be6:	4c20      	ldr	r4, [pc, #128]	; (8000c68 <MQTT_Connect+0x88>)
    SIM800.mqttServer.connect = 0;
    char str[128] = {0};
 8000be8:	227c      	movs	r2, #124	; 0x7c
 8000bea:	4629      	mov	r1, r5
 8000bec:	a817      	add	r0, sp, #92	; 0x5c
    SIM800.mqttReceive.newEvent = 0;
 8000bee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 8000bf2:	74a5      	strb	r5, [r4, #18]
    char str[128] = {0};
 8000bf4:	9516      	str	r5, [sp, #88]	; 0x58
 8000bf6:	f007 f84b 	bl	8007c90 <memset>
    unsigned char buf[128] = {0};
 8000bfa:	227c      	movs	r2, #124	; 0x7c
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	a837      	add	r0, sp, #220	; 0xdc
 8000c00:	9536      	str	r5, [sp, #216]	; 0xd8
 8000c02:	f007 f845 	bl	8007c90 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8000c06:	8a23      	ldrh	r3, [r4, #16]
 8000c08:	68e2      	ldr	r2, [r4, #12]
 8000c0a:	a816      	add	r0, sp, #88	; 0x58
 8000c0c:	4917      	ldr	r1, [pc, #92]	; (8000c6c <MQTT_Connect+0x8c>)
 8000c0e:	f007 f81f 	bl	8007c50 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000c12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c16:	4916      	ldr	r1, [pc, #88]	; (8000c70 <MQTT_Connect+0x90>)
 8000c18:	a816      	add	r0, sp, #88	; 0x58
 8000c1a:	f7ff ffc1 	bl	8000ba0 <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 8000c1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c22:	f002 f8eb 	bl	8002dfc <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 8000c26:	7ca3      	ldrb	r3, [r4, #18]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d11b      	bne.n	8000c64 <MQTT_Connect+0x84>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 8000c2c:	2258      	movs	r2, #88	; 0x58
 8000c2e:	4911      	ldr	r1, [pc, #68]	; (8000c74 <MQTT_Connect+0x94>)
 8000c30:	4668      	mov	r0, sp
 8000c32:	f007 f88b 	bl	8007d4c <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8000c36:	6963      	ldr	r3, [r4, #20]
        datas.password.cstring = SIM800.mqttClient.pass;
        datas.clientID.cstring = SIM800.mqttClient.clientID;
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
        datas.cleansession = 1;
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8000c38:	466a      	mov	r2, sp
 8000c3a:	2180      	movs	r1, #128	; 0x80
        datas.username.cstring = SIM800.mqttClient.username;
 8000c3c:	9310      	str	r3, [sp, #64]	; 0x40
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8000c3e:	a836      	add	r0, sp, #216	; 0xd8
        datas.password.cstring = SIM800.mqttClient.pass;
 8000c40:	69a3      	ldr	r3, [r4, #24]
 8000c42:	9313      	str	r3, [sp, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8000c44:	69e3      	ldr	r3, [r4, #28]
 8000c46:	9303      	str	r3, [sp, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 8000c48:	8c23      	ldrh	r3, [r4, #32]
 8000c4a:	f8ad 3018 	strh.w	r3, [sp, #24]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8000c4e:	f7ff fd6b 	bl	8000728 <MQTTSerialize_connect>
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000c52:	a936      	add	r1, sp, #216	; 0xd8
 8000c54:	b282      	uxth	r2, r0
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MQTT_Connect+0x98>)
 8000c58:	f005 fc2c 	bl	80064b4 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 8000c5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c60:	f002 f8cc 	bl	8002dfc <HAL_Delay>
#endif
    }
}
 8000c64:	b057      	add	sp, #348	; 0x15c
 8000c66:	bd30      	pop	{r4, r5, pc}
 8000c68:	20000c9c 	.word	0x20000c9c
 8000c6c:	08008668 	.word	0x08008668
 8000c70:	08008695 	.word	0x08008695
 8000c74:	08008604 	.word	0x08008604
 8000c78:	20000e10 	.word	0x20000e10

08000c7c <MQTT_Init>:
{
 8000c7c:	b530      	push	{r4, r5, lr}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
    SIM800.mqttServer.connect = 0;
 8000c80:	4d28      	ldr	r5, [pc, #160]	; (8000d24 <MQTT_Init+0xa8>)
 8000c82:	2100      	movs	r1, #0
    char str[32] = {0};
 8000c84:	221c      	movs	r2, #28
 8000c86:	a803      	add	r0, sp, #12
    SIM800.mqttServer.connect = 0;
 8000c88:	74a9      	strb	r1, [r5, #18]
    char str[32] = {0};
 8000c8a:	9102      	str	r1, [sp, #8]
 8000c8c:	f007 f800 	bl	8007c90 <memset>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	4925      	ldr	r1, [pc, #148]	; (8000d28 <MQTT_Init+0xac>)
 8000c94:	4825      	ldr	r0, [pc, #148]	; (8000d2c <MQTT_Init+0xb0>)
 8000c96:	f006 fbeb 	bl	8007470 <HAL_UART_Receive_IT>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8000c9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c9e:	4924      	ldr	r1, [pc, #144]	; (8000d30 <MQTT_Init+0xb4>)
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <MQTT_Init+0xb8>)
 8000ca2:	f7ff ff7d 	bl	8000ba0 <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8000ca6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000caa:	4921      	ldr	r1, [pc, #132]	; (8000d30 <MQTT_Init+0xb4>)
 8000cac:	4822      	ldr	r0, [pc, #136]	; (8000d38 <MQTT_Init+0xbc>)
 8000cae:	f7ff ff77 	bl	8000ba0 <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 8000cb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cb6:	4921      	ldr	r1, [pc, #132]	; (8000d3c <MQTT_Init+0xc0>)
 8000cb8:	4821      	ldr	r0, [pc, #132]	; (8000d40 <MQTT_Init+0xc4>)
 8000cba:	f7ff ff71 	bl	8000ba0 <SIM800_SendCommand>
 8000cbe:	4604      	mov	r4, r0
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8000cc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cc4:	491a      	ldr	r1, [pc, #104]	; (8000d30 <MQTT_Init+0xb4>)
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <MQTT_Init+0xc8>)
 8000cc8:	f7ff ff6a 	bl	8000ba0 <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8000ccc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8000cd0:	4404      	add	r4, r0
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8000cd2:	4917      	ldr	r1, [pc, #92]	; (8000d30 <MQTT_Init+0xb4>)
 8000cd4:	481c      	ldr	r0, [pc, #112]	; (8000d48 <MQTT_Init+0xcc>)
 8000cd6:	f7ff ff63 	bl	8000ba0 <SIM800_SendCommand>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8000cda:	68ab      	ldr	r3, [r5, #8]
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8000cdc:	4404      	add	r4, r0
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8000cde:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <MQTT_Init+0xd0>)
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	686b      	ldr	r3, [r5, #4]
 8000ce6:	a802      	add	r0, sp, #8
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	682b      	ldr	r3, [r5, #0]
 8000cec:	f006 ff7c 	bl	8007be8 <sniprintf>
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000cf0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cf4:	490e      	ldr	r1, [pc, #56]	; (8000d30 <MQTT_Init+0xb4>)
 8000cf6:	a802      	add	r0, sp, #8
 8000cf8:	f7ff ff52 	bl	8000ba0 <SIM800_SendCommand>
 8000cfc:	4404      	add	r4, r0
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8000cfe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d02:	490b      	ldr	r1, [pc, #44]	; (8000d30 <MQTT_Init+0xb4>)
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MQTT_Init+0xd4>)
 8000d06:	f7ff ff4b 	bl	8000ba0 <SIM800_SendCommand>
 8000d0a:	4404      	add	r4, r0
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 8000d0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d10:	4910      	ldr	r1, [pc, #64]	; (8000d54 <MQTT_Init+0xd8>)
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MQTT_Init+0xdc>)
 8000d14:	f7ff ff44 	bl	8000ba0 <SIM800_SendCommand>
    if (error == 0)
 8000d18:	b90c      	cbnz	r4, 8000d1e <MQTT_Init+0xa2>
        MQTT_Connect();
 8000d1a:	f7ff ff61 	bl	8000be0 <MQTT_Connect>
}
 8000d1e:	4620      	mov	r0, r4
 8000d20:	b00b      	add	sp, #44	; 0x2c
 8000d22:	bd30      	pop	{r4, r5, pc}
 8000d24:	20000c9c 	.word	0x20000c9c
 8000d28:	20000c53 	.word	0x20000c53
 8000d2c:	20000e10 	.word	0x20000e10
 8000d30:	08008695 	.word	0x08008695
 8000d34:	08008684 	.word	0x08008684
 8000d38:	08008689 	.word	0x08008689
 8000d3c:	08008690 	.word	0x08008690
 8000d40:	0800869a 	.word	0x0800869a
 8000d44:	080086a7 	.word	0x080086a7
 8000d48:	080086b4 	.word	0x080086b4
 8000d4c:	080086c3 	.word	0x080086c3
 8000d50:	080086dc 	.word	0x080086dc
 8000d54:	080086db 	.word	0x080086db
 8000d58:	080086e7 	.word	0x080086e7

08000d5c <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char buf[256] = {0};
 8000d5e:	2400      	movs	r4, #0
{
 8000d60:	b0cd      	sub	sp, #308	; 0x134
 8000d62:	460e      	mov	r6, r1
 8000d64:	4607      	mov	r7, r0
    unsigned char buf[256] = {0};
 8000d66:	4621      	mov	r1, r4
 8000d68:	22fc      	movs	r2, #252	; 0xfc
 8000d6a:	a80d      	add	r0, sp, #52	; 0x34

    MQTTString topicString = MQTTString_initializer;
 8000d6c:	ad09      	add	r5, sp, #36	; 0x24
    unsigned char buf[256] = {0};
 8000d6e:	940c      	str	r4, [sp, #48]	; 0x30
 8000d70:	f006 ff8e 	bl	8007c90 <memset>
    topicString.cstring = topic;

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 8000d74:	4630      	mov	r0, r6
    topicString.cstring = topic;
 8000d76:	9709      	str	r7, [sp, #36]	; 0x24
    MQTTString topicString = MQTTString_initializer;
 8000d78:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 8000d7c:	f7ff faba 	bl	80002f4 <strlen>
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 8000d80:	ab02      	add	r3, sp, #8
 8000d82:	e9cd 6005 	strd	r6, r0, [sp, #20]
 8000d86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d8e:	4623      	mov	r3, r4
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	a80c      	add	r0, sp, #48	; 0x30
 8000d96:	e9cd 4400 	strd	r4, r4, [sp]
 8000d9a:	f7ff fe9d 	bl	8000ad8 <MQTTSerialize_publish>
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000d9e:	a90c      	add	r1, sp, #48	; 0x30
 8000da0:	b282      	uxth	r2, r0
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MQTT_Pub+0x58>)
 8000da4:	f005 fb86 	bl	80064b4 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8000da8:	2064      	movs	r0, #100	; 0x64
 8000daa:	f002 f827 	bl	8002dfc <HAL_Delay>
#endif
}
 8000dae:	b04d      	add	sp, #308	; 0x134
 8000db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000e10 	.word	0x20000e10

08000db8 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 8000db8:	b530      	push	{r4, r5, lr}
    unsigned char buf[256] = {0};
 8000dba:	2400      	movs	r4, #0
{
 8000dbc:	b0c9      	sub	sp, #292	; 0x124
 8000dbe:	4605      	mov	r5, r0
    unsigned char buf[256] = {0};
 8000dc0:	22fc      	movs	r2, #252	; 0xfc
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	a809      	add	r0, sp, #36	; 0x24
 8000dc6:	9408      	str	r4, [sp, #32]
 8000dc8:	f006 ff62 	bl	8007c90 <memset>

    MQTTString topicString = MQTTString_initializer;
 8000dcc:	ab05      	add	r3, sp, #20
    topicString.cstring = topic;

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8000dce:	4622      	mov	r2, r4
 8000dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd4:	a808      	add	r0, sp, #32
    topicString.cstring = topic;
 8000dd6:	9505      	str	r5, [sp, #20]
    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8000dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	9300      	str	r3, [sp, #0]
    MQTTString topicString = MQTTString_initializer;
 8000de0:	e9cd 4406 	strd	r4, r4, [sp, #24]
    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8000de4:	f000 f8f5 	bl	8000fd2 <MQTTSerialize_subscribe>
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000de8:	a908      	add	r1, sp, #32
 8000dea:	b282      	uxth	r2, r0
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MQTT_Sub+0x44>)
 8000dee:	f005 fb61 	bl	80064b4 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f002 f802 	bl	8002dfc <HAL_Delay>
#endif
}
 8000df8:	b049      	add	sp, #292	; 0x124
 8000dfa:	bd30      	pop	{r4, r5, pc}
 8000dfc:	20000e10 	.word	0x20000e10

08000e00 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8000e02:	4c1a      	ldr	r4, [pc, #104]	; (8000e6c <MQTT_Receive+0x6c>)
{
 8000e04:	b08a      	sub	sp, #40	; 0x28
 8000e06:	4605      	mov	r5, r0
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8000e08:	2240      	movs	r2, #64	; 0x40
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8000e0a:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4620      	mov	r0, r4
 8000e12:	f006 ff3d 	bl	8007c90 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f006 ff38 	bl	8007c90 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8000e20:	2304      	movs	r3, #4
 8000e22:	f1a4 0248 	sub.w	r2, r4, #72	; 0x48
 8000e26:	f1a4 014c 	sub.w	r1, r4, #76	; 0x4c
 8000e2a:	f1a4 004f 	sub.w	r0, r4, #79	; 0x4f
 8000e2e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8000e32:	1f23      	subs	r3, r4, #4
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	ab06      	add	r3, sp, #24
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	ab07      	add	r3, sp, #28
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	f1a4 0346 	sub.w	r3, r4, #70	; 0x46
 8000e42:	f7ff fd01 	bl	8000848 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8000e46:	9d08      	ldr	r5, [sp, #32]
 8000e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	462a      	mov	r2, r5
 8000e4e:	f006 ff7d 	bl	8007d4c <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8000e52:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8000e56:	9906      	ldr	r1, [sp, #24]
 8000e58:	4630      	mov	r0, r6
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8000e5a:	6425      	str	r5, [r4, #64]	; 0x40
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8000e5c:	f006 ff76 	bl	8007d4c <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f804 3c50 	strb.w	r3, [r4, #-80]
}
 8000e66:	b00a      	add	sp, #40	; 0x28
 8000e68:	bd70      	pop	{r4, r5, r6, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000d10 	.word	0x20000d10

08000e70 <Sim800_RxCallBack>:
{
 8000e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    rx_buffer[rx_index++] = rx_data;
 8000e74:	4d3d      	ldr	r5, [pc, #244]	; (8000f6c <Sim800_RxCallBack+0xfc>)
 8000e76:	4f3e      	ldr	r7, [pc, #248]	; (8000f70 <Sim800_RxCallBack+0x100>)
 8000e78:	882b      	ldrh	r3, [r5, #0]
    if (SIM800.mqttServer.connect == 0)
 8000e7a:	4c3e      	ldr	r4, [pc, #248]	; (8000f74 <Sim800_RxCallBack+0x104>)
    rx_buffer[rx_index++] = rx_data;
 8000e7c:	1c5e      	adds	r6, r3, #1
 8000e7e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8000f80 <Sim800_RxCallBack+0x110>
 8000e82:	783a      	ldrb	r2, [r7, #0]
 8000e84:	b2b6      	uxth	r6, r6
    if (SIM800.mqttServer.connect == 0)
 8000e86:	f894 8012 	ldrb.w	r8, [r4, #18]
    rx_buffer[rx_index++] = rx_data;
 8000e8a:	f809 2003 	strb.w	r2, [r9, r3]
 8000e8e:	802e      	strh	r6, [r5, #0]
    if (SIM800.mqttServer.connect == 0)
 8000e90:	f1b8 0f00 	cmp.w	r8, #0
 8000e94:	d108      	bne.n	8000ea8 <Sim800_RxCallBack+0x38>
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e96:	4938      	ldr	r1, [pc, #224]	; (8000f78 <Sim800_RxCallBack+0x108>)
 8000e98:	4648      	mov	r0, r9
 8000e9a:	f006 ff14 	bl	8007cc6 <strstr>
 8000e9e:	b118      	cbz	r0, 8000ea8 <Sim800_RxCallBack+0x38>
 8000ea0:	2e02      	cmp	r6, #2
 8000ea2:	d126      	bne.n	8000ef2 <Sim800_RxCallBack+0x82>
            rx_index = 0;
 8000ea4:	f8a5 8000 	strh.w	r8, [r5]
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000ea8:	4934      	ldr	r1, [pc, #208]	; (8000f7c <Sim800_RxCallBack+0x10c>)
 8000eaa:	4835      	ldr	r0, [pc, #212]	; (8000f80 <Sim800_RxCallBack+0x110>)
 8000eac:	4e35      	ldr	r6, [pc, #212]	; (8000f84 <Sim800_RxCallBack+0x114>)
 8000eae:	f006 ff0a 	bl	8007cc6 <strstr>
 8000eb2:	b948      	cbnz	r0, 8000ec8 <Sim800_RxCallBack+0x58>
 8000eb4:	4934      	ldr	r1, [pc, #208]	; (8000f88 <Sim800_RxCallBack+0x118>)
 8000eb6:	4832      	ldr	r0, [pc, #200]	; (8000f80 <Sim800_RxCallBack+0x110>)
 8000eb8:	f006 ff05 	bl	8007cc6 <strstr>
 8000ebc:	b920      	cbnz	r0, 8000ec8 <Sim800_RxCallBack+0x58>
 8000ebe:	4933      	ldr	r1, [pc, #204]	; (8000f8c <Sim800_RxCallBack+0x11c>)
 8000ec0:	482f      	ldr	r0, [pc, #188]	; (8000f80 <Sim800_RxCallBack+0x110>)
 8000ec2:	f006 ff00 	bl	8007cc6 <strstr>
 8000ec6:	b368      	cbz	r0, 8000f24 <Sim800_RxCallBack+0xb4>
        SIM800.mqttServer.connect = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	74a3      	strb	r3, [r4, #18]
    if (mqtt_receive == 1)
 8000ecc:	7833      	ldrb	r3, [r6, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d02f      	beq.n	8000f32 <Sim800_RxCallBack+0xc2>
    if (rx_index >= sizeof(mqtt_buffer))
 8000ed2:	882a      	ldrh	r2, [r5, #0]
 8000ed4:	f240 53b3 	movw	r3, #1459	; 0x5b3
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d903      	bls.n	8000ee4 <Sim800_RxCallBack+0x74>
        clearRxBuffer();
 8000edc:	f7ff fe44 	bl	8000b68 <clearRxBuffer>
        clearMqttBuffer();
 8000ee0:	f7ff fe4e 	bl	8000b80 <clearMqttBuffer>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4922      	ldr	r1, [pc, #136]	; (8000f70 <Sim800_RxCallBack+0x100>)
 8000ee8:	4829      	ldr	r0, [pc, #164]	; (8000f90 <Sim800_RxCallBack+0x120>)
}
 8000eea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000eee:	f006 babf 	b.w	8007470 <HAL_UART_Receive_IT>
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000ef8:	4826      	ldr	r0, [pc, #152]	; (8000f94 <Sim800_RxCallBack+0x124>)
 8000efa:	f006 ff27 	bl	8007d4c <memcpy>
            clearRxBuffer();
 8000efe:	f7ff fe33 	bl	8000b68 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000f02:	4925      	ldr	r1, [pc, #148]	; (8000f98 <Sim800_RxCallBack+0x128>)
 8000f04:	4823      	ldr	r0, [pc, #140]	; (8000f94 <Sim800_RxCallBack+0x124>)
 8000f06:	f006 fede 	bl	8007cc6 <strstr>
 8000f0a:	b110      	cbz	r0, 8000f12 <Sim800_RxCallBack+0xa2>
                SIM800.mqttServer.connect = 0;
 8000f0c:	f884 8012 	strb.w	r8, [r4, #18]
 8000f10:	e7ca      	b.n	8000ea8 <Sim800_RxCallBack+0x38>
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000f12:	4922      	ldr	r1, [pc, #136]	; (8000f9c <Sim800_RxCallBack+0x12c>)
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <Sim800_RxCallBack+0x124>)
 8000f16:	f006 fed6 	bl	8007cc6 <strstr>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d0c4      	beq.n	8000ea8 <Sim800_RxCallBack+0x38>
                SIM800.mqttServer.connect = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	74a3      	strb	r3, [r4, #18]
 8000f22:	e7c1      	b.n	8000ea8 <Sim800_RxCallBack+0x38>
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000f24:	7ca3      	ldrb	r3, [r4, #18]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d1d0      	bne.n	8000ecc <Sim800_RxCallBack+0x5c>
 8000f2a:	783a      	ldrb	r2, [r7, #0]
 8000f2c:	2a30      	cmp	r2, #48	; 0x30
 8000f2e:	d1cd      	bne.n	8000ecc <Sim800_RxCallBack+0x5c>
        mqtt_receive = 1;
 8000f30:	7033      	strb	r3, [r6, #0]
        mqtt_buffer[mqtt_index++] = rx_data;
 8000f32:	4c1b      	ldr	r4, [pc, #108]	; (8000fa0 <Sim800_RxCallBack+0x130>)
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <Sim800_RxCallBack+0x124>)
 8000f36:	8822      	ldrh	r2, [r4, #0]
 8000f38:	7839      	ldrb	r1, [r7, #0]
 8000f3a:	1c53      	adds	r3, r2, #1
 8000f3c:	5481      	strb	r1, [r0, r2]
 8000f3e:	b29b      	uxth	r3, r3
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f40:	2b01      	cmp	r3, #1
        mqtt_buffer[mqtt_index++] = rx_data;
 8000f42:	8023      	strh	r3, [r4, #0]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f44:	d909      	bls.n	8000f5a <Sim800_RxCallBack+0xea>
 8000f46:	3b01      	subs	r3, #1
 8000f48:	7842      	ldrb	r2, [r0, #1]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	dd05      	ble.n	8000f5a <Sim800_RxCallBack+0xea>
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f4e:	f7ff ff57 	bl	8000e00 <MQTT_Receive>
            clearRxBuffer();
 8000f52:	f7ff fe09 	bl	8000b68 <clearRxBuffer>
            clearMqttBuffer();
 8000f56:	f7ff fe13 	bl	8000b80 <clearMqttBuffer>
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f5a:	8822      	ldrh	r2, [r4, #0]
 8000f5c:	f240 53b3 	movw	r3, #1459	; 0x5b3
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d9b6      	bls.n	8000ed2 <Sim800_RxCallBack+0x62>
            clearMqttBuffer();
 8000f64:	f7ff fe0c 	bl	8000b80 <clearMqttBuffer>
 8000f68:	e7b3      	b.n	8000ed2 <Sim800_RxCallBack+0x62>
 8000f6a:	bf00      	nop
 8000f6c:	20000c54 	.word	0x20000c54
 8000f70:	20000c53 	.word	0x20000c53
 8000f74:	20000c9c 	.word	0x20000c9c
 8000f78:	080086d9 	.word	0x080086d9
 8000f7c:	080086ff 	.word	0x080086ff
 8000f80:	2000069f 	.word	0x2000069f
 8000f84:	2000069e 	.word	0x2000069e
 8000f88:	08008708 	.word	0x08008708
 8000f8c:	08008710 	.word	0x08008710
 8000f90:	20000e10 	.word	0x20000e10
 8000f94:	200000e8 	.word	0x200000e8
 8000f98:	080086f2 	.word	0x080086f2
 8000f9c:	080086f5 	.word	0x080086f5
 8000fa0:	2000069c 	.word	0x2000069c

08000fa4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	4606      	mov	r6, r0
 8000faa:	460f      	mov	r7, r1
	int i;
	int len = 2; /* packetid */
 8000fac:	2502      	movs	r5, #2

	for (i = 0; i < count; ++i)
 8000fae:	2400      	movs	r4, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8000fb0:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < count; ++i)
 8000fb4:	42b4      	cmp	r4, r6
 8000fb6:	db02      	blt.n	8000fbe <MQTTSerialize_subscribeLength+0x1a>
	return len;
}
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8000fbe:	fb08 7304 	mla	r3, r8, r4, r7
	for (i = 0; i < count; ++i)
 8000fc2:	3401      	adds	r4, #1
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8000fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc8:	f7ff fd68 	bl	8000a9c <MQTTstrlen>
 8000fcc:	3003      	adds	r0, #3
 8000fce:	4405      	add	r5, r0
	for (i = 0; i < count; ++i)
 8000fd0:	e7f0      	b.n	8000fb4 <MQTTSerialize_subscribeLength+0x10>

08000fd2 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8000fd2:	e92d 4ef3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
 8000fd6:	e9dd 590a 	ldrd	r5, r9, [sp, #40]	; 0x28
 8000fda:	468b      	mov	fp, r1
	unsigned char *ptr = buf;
 8000fdc:	9001      	str	r0, [sp, #4]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8000fde:	4649      	mov	r1, r9
{
 8000fe0:	4606      	mov	r6, r0
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8000fe2:	4628      	mov	r0, r5
{
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	461f      	mov	r7, r3
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8000fe8:	f7ff ffdc 	bl	8000fa4 <MQTTSerialize_subscribeLength>
 8000fec:	4682      	mov	sl, r0
 8000fee:	f7ff fcc1 	bl	8000974 <MQTTPacket_len>
 8000ff2:	4558      	cmp	r0, fp
 8000ff4:	dc29      	bgt.n	800104a <MQTTSerialize_subscribe+0x78>
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
	header.bits.qos = 1;
 8000ff6:	00e4      	lsls	r4, r4, #3
	writeChar(&ptr, header.byte); /* write header */
 8000ff8:	a801      	add	r0, sp, #4
	header.bits.qos = 1;
 8000ffa:	f004 0408 	and.w	r4, r4, #8
	writeChar(&ptr, header.byte); /* write header */
 8000ffe:	f044 0182 	orr.w	r1, r4, #130	; 0x82

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

	writeInt(&ptr, packetid);

	for (i = 0; i < count; ++i)
 8001002:	2400      	movs	r4, #0
	writeChar(&ptr, header.byte); /* write header */
 8001004:	f7ff fce1 	bl	80009ca <writeChar>
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001008:	4651      	mov	r1, sl
 800100a:	9801      	ldr	r0, [sp, #4]
 800100c:	f7ff fc78 	bl	8000900 <MQTTPacket_encode>
 8001010:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 8001012:	4639      	mov	r1, r7
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001014:	270c      	movs	r7, #12
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001016:	4418      	add	r0, r3
 8001018:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
 800101a:	a801      	add	r0, sp, #4
 800101c:	f7ff fcdb 	bl	80009d6 <writeInt>
	for (i = 0; i < count; ++i)
 8001020:	42ac      	cmp	r4, r5
 8001022:	db04      	blt.n	800102e <MQTTSerialize_subscribe+0x5c>
		writeChar(&ptr, requestedQoSs[i]);
	}

	rc = ptr - buf;
 8001024:	9801      	ldr	r0, [sp, #4]
 8001026:	1b80      	subs	r0, r0, r6
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8001028:	b002      	add	sp, #8
 800102a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		writeMQTTString(&ptr, topicFilters[i]);
 800102e:	fb07 9304 	mla	r3, r7, r4, r9
 8001032:	a801      	add	r0, sp, #4
 8001034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001036:	f7ff fcf7 	bl	8000a28 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800103a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800103c:	a801      	add	r0, sp, #4
 800103e:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
	for (i = 0; i < count; ++i)
 8001042:	3401      	adds	r4, #1
		writeChar(&ptr, requestedQoSs[i]);
 8001044:	f7ff fcc1 	bl	80009ca <writeChar>
	for (i = 0; i < count; ++i)
 8001048:	e7ea      	b.n	8001020 <MQTTSerialize_subscribe+0x4e>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800104a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800104e:	e7eb      	b.n	8001028 <MQTTSerialize_subscribe+0x56>

08001050 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	2214      	movs	r2, #20
{
 8001054:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001058:	4f3b      	ldr	r7, [pc, #236]	; (8001148 <MX_GPIO_Init+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	eb0d 0002 	add.w	r0, sp, r2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800105e:	4d3b      	ldr	r5, [pc, #236]	; (800114c <MX_GPIO_Init+0xfc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f006 fe16 	bl	8007c90 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <MX_GPIO_Init+0x100>)
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001066:	4638      	mov	r0, r7
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2400      	movs	r4, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	f042 0208 	orr.w	r2, r2, #8
 8001078:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800107c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001080:	f002 0208 	and.w	r2, r2, #8
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800108c:	f042 0204 	orr.w	r2, r2, #4
 8001090:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001094:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001098:	f002 0204 	and.w	r2, r2, #4
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010b4:	9202      	str	r2, [sp, #8]
 80010b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010c8:	f002 0220 	and.w	r2, r2, #32
 80010cc:	9203      	str	r2, [sp, #12]
 80010ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80010ea:	f002 fef9 	bl	8003ee0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80010ee:	4628      	mov	r0, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	f002 fef4 	bl	8003ee0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001100:	a905      	add	r1, sp, #20
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f002 fd5f 	bl	8003bcc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001112:	a905      	add	r1, sp, #20
 8001114:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800111e:	f002 fd55 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001122:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001124:	a905      	add	r1, sp, #20
 8001126:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001130:	f002 fd4c 	bl	8003bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001134:	4622      	mov	r2, r4
 8001136:	4621      	mov	r1, r4
 8001138:	2028      	movs	r0, #40	; 0x28
 800113a:	f001 fe89 	bl	8002e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113e:	2028      	movs	r0, #40	; 0x28
 8001140:	f001 feb8 	bl	8002eb4 <HAL_NVIC_EnableIRQ>

}
 8001144:	b00b      	add	sp, #44	; 0x2c
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	58021400 	.word	0x58021400
 800114c:	58020000 	.word	0x58020000
 8001150:	58024400 	.word	0x58024400
 8001154:	58020800 	.word	0x58020800

08001158 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == UART_SIM800) {
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_UART_RxCpltCallback+0xc>)
 800115a:	4283      	cmp	r3, r0
 800115c:	d101      	bne.n	8001162 <HAL_UART_RxCpltCallback+0xa>
		Sim800_RxCallBack();
 800115e:	f7ff be87 	b.w	8000e70 <Sim800_RxCallBack>
	}
}
 8001162:	4770      	bx	lr
 8001164:	20000e10 	.word	0x20000e10

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b530      	push	{r4, r5, lr}
 800116a:	b09d      	sub	sp, #116	; 0x74
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116c:	224c      	movs	r2, #76	; 0x4c
 800116e:	2100      	movs	r1, #0
 8001170:	a809      	add	r0, sp, #36	; 0x24
 8001172:	f006 fd8d 	bl	8007c90 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	a801      	add	r0, sp, #4
 800117c:	f006 fd88 	bl	8007c90 <memset>

	  /** Supply configuration update enable
	  */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001180:	2002      	movs	r0, #2
 8001182:	f003 fc13 	bl	80049ac <HAL_PWREx_ConfigSupply>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xac>)
 800118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <SystemClock_Config+0xb0>)
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	9a00      	ldr	r2, [sp, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	0494      	lsls	r4, r2, #18
 80011b4:	d5fc      	bpl.n	80011b0 <SystemClock_Config+0x48>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ba:	2101      	movs	r1, #1
	  RCC_OscInitStruct.PLL.PLLN = 64;
	  RCC_OscInitStruct.PLL.PLLP = 2;
	  RCC_OscInitStruct.PLL.PLLQ = 2;
	  RCC_OscInitStruct.PLL.PLLR = 2;
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011bc:	200c      	movs	r0, #12
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2402      	movs	r4, #2
	  RCC_OscInitStruct.PLL.PLLN = 64;
 80011c0:	2540      	movs	r5, #64	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = 2;
 80011c2:	9414      	str	r4, [sp, #80]	; 0x50
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c4:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	a809      	add	r0, sp, #36	; 0x24
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011d0:	931b      	str	r3, [sp, #108]	; 0x6c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d6:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80011da:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f003 fc09 	bl	80049f4 <HAL_RCC_OscConfig>
 80011e2:	b108      	cbz	r0, 80011e8 <SystemClock_Config+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <SystemClock_Config+0x7e>
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2303      	movs	r3, #3
 80011ea:	223f      	movs	r2, #63	; 0x3f
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	9003      	str	r0, [sp, #12]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ee:	4621      	mov	r1, r4
 80011f0:	a801      	add	r0, sp, #4
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011f2:	9506      	str	r5, [sp, #24]
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011f8:	2308      	movs	r3, #8
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011fa:	e9cd 3504 	strd	r3, r5, [sp, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001202:	e9cd 3507 	strd	r3, r5, [sp, #28]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001206:	f003 ff43 	bl	8005090 <HAL_RCC_ClockConfig>
 800120a:	b108      	cbz	r0, 8001210 <SystemClock_Config+0xa8>
 800120c:	b672      	cpsid	i
  while (1)
 800120e:	e7fe      	b.n	800120e <SystemClock_Config+0xa6>
}
 8001210:	b01d      	add	sp, #116	; 0x74
 8001212:	bd30      	pop	{r4, r5, pc}
 8001214:	58000400 	.word	0x58000400
 8001218:	58024800 	.word	0x58024800

0800121c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800121c:	4bb7      	ldr	r3, [pc, #732]	; (80014fc <main+0x2e0>)
{
 800121e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8001228:	d111      	bne.n	800124e <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800122a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800122e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001232:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800123a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001244:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800124a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800124e:	4aab      	ldr	r2, [pc, #684]	; (80014fc <main+0x2e0>)
 8001250:	6953      	ldr	r3, [r2, #20]
 8001252:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001256:	d123      	bne.n	80012a0 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001258:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800125c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001260:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001264:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001268:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800126c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001270:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001272:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001276:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001278:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800127c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800127e:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001282:	d2f9      	bcs.n	8001278 <main+0x5c>
    } while(sets-- != 0U);
 8001284:	3b20      	subs	r3, #32
 8001286:	f113 0f20 	cmn.w	r3, #32
 800128a:	d1f2      	bne.n	8001272 <main+0x56>
 800128c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001290:	6953      	ldr	r3, [r2, #20]
 8001292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001296:	6153      	str	r3, [r2, #20]
 8001298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800129c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80012a0:	f001 fd6c 	bl	8002d7c <HAL_Init>
  	SIM800.sim.apn = "weborange";
 80012a4:	4c96      	ldr	r4, [pc, #600]	; (8001500 <main+0x2e4>)
  SystemClock_Config();
 80012a6:	f7ff ff5f 	bl	8001168 <SystemClock_Config>
  	ts_status = BSP_TS_Init(0, &hTS);
 80012aa:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800157c <main+0x360>
  MX_GPIO_Init();
 80012ae:	f7ff fecf 	bl	8001050 <MX_GPIO_Init>
  	uint8_t sub = 0;
 80012b2:	2500      	movs	r5, #0
  MX_USART2_UART_Init();
 80012b4:	f000 fa56 	bl	8001764 <MX_USART2_UART_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80012b8:	2101      	movs	r1, #1
 80012ba:	2000      	movs	r0, #0
	  ts_status = BSP_TS_GetState(0, &TS_State);
 80012bc:	f8df 826c 	ldr.w	r8, [pc, #620]	; 800152c <main+0x310>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80012c0:	f001 fae8 	bl	8002894 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80012c4:	488f      	ldr	r0, [pc, #572]	; (8001504 <main+0x2e8>)
 80012c6:	f006 f9ff 	bl	80076c8 <UTIL_LCD_SetFuncDriver>
  	UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 80012ca:	488f      	ldr	r0, [pc, #572]	; (8001508 <main+0x2ec>)
 80012cc:	f006 fa3c 	bl	8007748 <UTIL_LCD_SetFont>
  	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_LIGHTBLUE);
 80012d0:	488e      	ldr	r0, [pc, #568]	; (800150c <main+0x2f0>)
 80012d2:	f006 fa31 	bl	8007738 <UTIL_LCD_SetBackColor>
  	UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 80012d6:	488d      	ldr	r0, [pc, #564]	; (800150c <main+0x2f0>)
 80012d8:	f006 fc14 	bl	8007b04 <UTIL_LCD_Clear>
  	BSP_LCD_GetXSize(0, &x_size);
 80012dc:	4669      	mov	r1, sp
 80012de:	2000      	movs	r0, #0
	  			x1 = TS_State.TouchX;
 80012e0:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8001580 <main+0x364>
  	BSP_LCD_GetXSize(0, &x_size);
 80012e4:	f000 ff0c 	bl	8002100 <BSP_LCD_GetXSize>
  	BSP_LCD_GetYSize(0, &y_size);
 80012e8:	a901      	add	r1, sp, #4
 80012ea:	2000      	movs	r0, #0
	  			  				strncpy(newf, rec, 12);
 80012ec:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800156c <main+0x350>
  	BSP_LCD_GetYSize(0, &y_size);
 80012f0:	f000 ff10 	bl	8002114 <BSP_LCD_GetYSize>
  	UTIL_LCD_DisplayStringAt(0, 100, (uint8_t *)"              ", CENTER_MODE);
 80012f4:	2301      	movs	r3, #1
 80012f6:	4a86      	ldr	r2, [pc, #536]	; (8001510 <main+0x2f4>)
 80012f8:	2164      	movs	r1, #100	; 0x64
 80012fa:	2000      	movs	r0, #0
 80012fc:	f006 fb0c 	bl	8007918 <UTIL_LCD_DisplayStringAt>
  	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001300:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001304:	f006 fa10 	bl	8007728 <UTIL_LCD_SetTextColor>
  	UTIL_LCD_DisplayStringAt(0, 100, (uint8_t *)"Firmware 3 ", CENTER_MODE);
 8001308:	4a82      	ldr	r2, [pc, #520]	; (8001514 <main+0x2f8>)
 800130a:	2301      	movs	r3, #1
 800130c:	2164      	movs	r1, #100	; 0x64
 800130e:	2000      	movs	r0, #0
 8001310:	f006 fb02 	bl	8007918 <UTIL_LCD_DisplayStringAt>
  	hTS.Width = x_size;
 8001314:	4980      	ldr	r1, [pc, #512]	; (8001518 <main+0x2fc>)
 8001316:	9b00      	ldr	r3, [sp, #0]
  	ts_status = BSP_TS_Init(0, &hTS);
 8001318:	2000      	movs	r0, #0
  	hTS.Width = x_size;
 800131a:	600b      	str	r3, [r1, #0]
  	hTS.Height = y_size;
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	604b      	str	r3, [r1, #4]
  	hTS.Orientation = TS_SWAP_NONE;
 8001320:	2301      	movs	r3, #1
  	hTS.Accuracy = 1;
 8001322:	e9c1 3302 	strd	r3, r3, [r1, #8]
  	ts_status = BSP_TS_Init(0, &hTS);
 8001326:	f001 fbed 	bl	8002b04 <BSP_TS_Init>
  	SIM800.sim.apn = "weborange";
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <main+0x300>)
  	SIM800.mqttServer.host = "test.mosquitto.org";
 800132c:	4a7c      	ldr	r2, [pc, #496]	; (8001520 <main+0x304>)
  	SIM800.sim.apn = "weborange";
 800132e:	6023      	str	r3, [r4, #0]
  	SIM800.sim.apn_user = "";
 8001330:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <main+0x308>)
  	SIM800.mqttServer.host = "test.mosquitto.org";
 8001332:	60e2      	str	r2, [r4, #12]
  	SIM800.mqttServer.port = 1883;
 8001334:	f240 725b 	movw	r2, #1883	; 0x75b
  	ts_status = BSP_TS_Init(0, &hTS);
 8001338:	f8c9 0000 	str.w	r0, [r9]
  	SIM800.mqttServer.port = 1883;
 800133c:	8222      	strh	r2, [r4, #16]
  	SIM800.sim.apn_pass = "";
 800133e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  	SIM800.mqttClient.pass = "";
 8001342:	e9c4 3305 	strd	r3, r3, [r4, #20]
  	SIM800.mqttClient.clientID = "TestSub";
 8001346:	4b78      	ldr	r3, [pc, #480]	; (8001528 <main+0x30c>)
 8001348:	61e3      	str	r3, [r4, #28]
  	SIM800.mqttClient.keepAliveInterval = 120;
 800134a:	2378      	movs	r3, #120	; 0x78
 800134c:	8423      	strh	r3, [r4, #32]
  	MQTT_Init();
 800134e:	f7ff fc95 	bl	8000c7c <MQTT_Init>
	  ts_status = BSP_TS_GetState(0, &TS_State);
 8001352:	4976      	ldr	r1, [pc, #472]	; (800152c <main+0x310>)
 8001354:	2000      	movs	r0, #0
 8001356:	f001 fc89 	bl	8002c6c <BSP_TS_GetState>
	  		if(TS_State.TouchDetected)
 800135a:	f8d8 3000 	ldr.w	r3, [r8]
	  ts_status = BSP_TS_GetState(0, &TS_State);
 800135e:	f8c9 0000 	str.w	r0, [r9]
	  		if(TS_State.TouchDetected)
 8001362:	b30b      	cbz	r3, 80013a8 <main+0x18c>
	  			x1 = TS_State.TouchX;
 8001364:	f8d8 2004 	ldr.w	r2, [r8, #4]
	  			y = TS_State.TouchY;
 8001368:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800136c:	4e70      	ldr	r6, [pc, #448]	; (8001530 <main+0x314>)
	  			sprintf(xTouchStr, "X: %3d",x1);
 800136e:	4971      	ldr	r1, [pc, #452]	; (8001534 <main+0x318>)
	  			x1 = TS_State.TouchX;
 8001370:	f8ab 2000 	strh.w	r2, [fp]
	  			sprintf(xTouchStr, "X: %3d",x1);
 8001374:	b292      	uxth	r2, r2
 8001376:	4870      	ldr	r0, [pc, #448]	; (8001538 <main+0x31c>)
	  			y = TS_State.TouchY;
 8001378:	8033      	strh	r3, [r6, #0]
	  			sprintf(xTouchStr, "X: %3d",x1);
 800137a:	f006 fc69 	bl	8007c50 <siprintf>
	  			sprintf(yTouchStr, "Y: %3d",y);
 800137e:	8832      	ldrh	r2, [r6, #0]
 8001380:	496e      	ldr	r1, [pc, #440]	; (800153c <main+0x320>)
 8001382:	486f      	ldr	r0, [pc, #444]	; (8001540 <main+0x324>)
 8001384:	f006 fc64 	bl	8007c50 <siprintf>
	  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001388:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800138c:	f006 f9cc 	bl	8007728 <UTIL_LCD_SetTextColor>
	  			UTIL_LCD_DisplayStringAt(0, 140, (uint8_t *)xTouchStr, CENTER_MODE);
 8001390:	2301      	movs	r3, #1
 8001392:	4a69      	ldr	r2, [pc, #420]	; (8001538 <main+0x31c>)
 8001394:	218c      	movs	r1, #140	; 0x8c
 8001396:	2000      	movs	r0, #0
 8001398:	f006 fabe 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			UTIL_LCD_DisplayStringAt(100, 140, (uint8_t *)yTouchStr, CENTER_MODE);
 800139c:	2301      	movs	r3, #1
 800139e:	4a68      	ldr	r2, [pc, #416]	; (8001540 <main+0x324>)
 80013a0:	218c      	movs	r1, #140	; 0x8c
 80013a2:	2064      	movs	r0, #100	; 0x64
 80013a4:	f006 fab8 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			  if (SIM800.mqttServer.connect == 0) {
 80013a8:	7ca6      	ldrb	r6, [r4, #18]
 80013aa:	b98e      	cbnz	r6, 80013d0 <main+0x1b4>
	  				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 80013ac:	4865      	ldr	r0, [pc, #404]	; (8001544 <main+0x328>)
	  			  			sub = 0;
 80013ae:	4635      	mov	r5, r6
	  				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 80013b0:	f006 f9ba 	bl	8007728 <UTIL_LCD_SetTextColor>
	  				   	UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"try to connect ", RIGHT_MODE);
 80013b4:	2302      	movs	r3, #2
 80013b6:	4a64      	ldr	r2, [pc, #400]	; (8001548 <main+0x32c>)
 80013b8:	2196      	movs	r1, #150	; 0x96
 80013ba:	4630      	mov	r0, r6
 80013bc:	f006 faac 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  					UTIL_LCD_FillCircle(200, 160, 14,UTIL_LCD_COLOR_RED);
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <main+0x328>)
 80013c2:	220e      	movs	r2, #14
 80013c4:	21a0      	movs	r1, #160	; 0xa0
 80013c6:	20c8      	movs	r0, #200	; 0xc8
 80013c8:	f006 fbaa 	bl	8007b20 <UTIL_LCD_FillCircle>
	  			  			MQTT_Init();
 80013cc:	f7ff fc56 	bl	8000c7c <MQTT_Init>
	  			  		if (SIM800.mqttServer.connect == 1)
 80013d0:	7ca7      	ldrb	r7, [r4, #18]
 80013d2:	2f01      	cmp	r7, #1
 80013d4:	f040 8090 	bne.w	80014f8 <main+0x2dc>
	  			  			if(sub == 0){
 80013d8:	b9ed      	cbnz	r5, 8001416 <main+0x1fa>
	  			  				MQTT_Sub("123456");
 80013da:	485c      	ldr	r0, [pc, #368]	; (800154c <main+0x330>)
 80013dc:	f7ff fcec 	bl	8000db8 <MQTT_Sub>
	  			  				MQTT_Pub("123456", "connected");
 80013e0:	495b      	ldr	r1, [pc, #364]	; (8001550 <main+0x334>)
 80013e2:	485a      	ldr	r0, [pc, #360]	; (800154c <main+0x330>)
 80013e4:	f7ff fcba 	bl	8000d5c <MQTT_Pub>
	  			  			UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"                        ", RIGHT_MODE);
 80013e8:	2302      	movs	r3, #2
 80013ea:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <main+0x338>)
 80013ec:	2196      	movs	r1, #150	; 0x96
 80013ee:	4628      	mov	r0, r5
 80013f0:	f006 fa92 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 80013f4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80013f8:	f006 f996 	bl	8007728 <UTIL_LCD_SetTextColor>
	  			  			UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"connected ", LEFT_MODE);
 80013fc:	2303      	movs	r3, #3
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <main+0x33c>)
 8001400:	2196      	movs	r1, #150	; 0x96
 8001402:	4628      	mov	r0, r5
 8001404:	f006 fa88 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			  			UTIL_LCD_FillCircle(200, 160, 14,UTIL_LCD_COLOR_GREEN);
 8001408:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 800140c:	220e      	movs	r2, #14
 800140e:	21a0      	movs	r1, #160	; 0xa0
 8001410:	20c8      	movs	r0, #200	; 0xc8
 8001412:	f006 fb85 	bl	8007b20 <UTIL_LCD_FillCircle>
	  			  			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001416:	2110      	movs	r1, #16
 8001418:	4850      	ldr	r0, [pc, #320]	; (800155c <main+0x340>)
 800141a:	f002 fd66 	bl	8003eea <HAL_GPIO_TogglePin>
	  			  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	484e      	ldr	r0, [pc, #312]	; (8001560 <main+0x344>)
 8001426:	f002 fd5b 	bl	8003ee0 <HAL_GPIO_WritePin>
	  			  			HAL_Delay(400);
 800142a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800142e:	f001 fce5 	bl	8002dfc <HAL_Delay>
	  			  			if(SIM800.mqttReceive.newEvent) {
 8001432:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001436:	b1bb      	cbz	r3, 8001468 <main+0x24c>
	  			  			memcpy(rec,SIM800.mqttReceive.payload,64);
 8001438:	4d4a      	ldr	r5, [pc, #296]	; (8001564 <main+0x348>)
 800143a:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <main+0x34c>)
 800143c:	f105 0640 	add.w	r6, r5, #64	; 0x40
 8001440:	462b      	mov	r3, r5
 8001442:	3208      	adds	r2, #8
 8001444:	cb03      	ldmia	r3!, {r0, r1}
 8001446:	42b3      	cmp	r3, r6
 8001448:	f842 0c08 	str.w	r0, [r2, #-8]
 800144c:	f842 1c04 	str.w	r1, [r2, #-4]
 8001450:	461d      	mov	r5, r3
 8001452:	d1f5      	bne.n	8001440 <main+0x224>
	  			  				strncpy(newf, rec, 12);
 8001454:	220c      	movs	r2, #12
 8001456:	4944      	ldr	r1, [pc, #272]	; (8001568 <main+0x34c>)
 8001458:	4844      	ldr	r0, [pc, #272]	; (800156c <main+0x350>)
 800145a:	f006 fc21 	bl	8007ca0 <strncpy>
	  			  				newf[12] = '\0';
 800145e:	2300      	movs	r3, #0
 8001460:	f88a 300c 	strb.w	r3, [sl, #12]
	  			  				SIM800.mqttReceive.newEvent = 0;
 8001464:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	  			  		if(strcmp(newf,"new firmware")==0)
 8001468:	4941      	ldr	r1, [pc, #260]	; (8001570 <main+0x354>)
 800146a:	4650      	mov	r0, sl
 800146c:	f7fe ff38 	bl	80002e0 <strcmp>
 8001470:	4606      	mov	r6, r0
 8001472:	2800      	cmp	r0, #0
 8001474:	d13e      	bne.n	80014f4 <main+0x2d8>
	  			  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001476:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 800147a:	4d3e      	ldr	r5, [pc, #248]	; (8001574 <main+0x358>)
	  			  			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800147c:	f006 f954 	bl	8007728 <UTIL_LCD_SetTextColor>
  		  					UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"              ", CENTER_MODE);
 8001480:	4630      	mov	r0, r6
 8001482:	2301      	movs	r3, #1
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <main+0x2f4>)
 8001486:	21c8      	movs	r1, #200	; 0xc8
 8001488:	f006 fa46 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			  			UTIL_LCD_DisplayStringAt(0, 200, (uint8_t *)"new firmware exist ", CENTER_MODE);
 800148c:	21c8      	movs	r1, #200	; 0xc8
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <main+0x35c>)
 8001490:	2301      	movs	r3, #1
 8001492:	4630      	mov	r0, r6
 8001494:	f006 fa40 	bl	8007918 <UTIL_LCD_DisplayStringAt>
	  			  			HAL_Delay(400);
 8001498:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800149c:	f001 fcae 	bl	8002dfc <HAL_Delay>
	  			  			HAL_FLASH_Unlock();
 80014a0:	f002 f8ee 	bl	8003680 <HAL_FLASH_Unlock>
	  			  			HAL_FLASH_OB_Unlock();
 80014a4:	f002 f912 	bl	80036cc <HAL_FLASH_OB_Unlock>
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 80014a8:	4628      	mov	r0, r5
 80014aa:	f002 fb29 	bl	8003b00 <HAL_FLASHEx_OBGetConfig>
	  			  			OBInit.Banks     = FLASH_BANK_1;
 80014ae:	2301      	movs	r3, #1
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 80014b0:	4628      	mov	r0, r5
	  			  			OBInit.Banks     = FLASH_BANK_1;
 80014b2:	61eb      	str	r3, [r5, #28]
	  			  			HAL_FLASHEx_OBGetConfig(&OBInit);
 80014b4:	f002 fb24 	bl	8003b00 <HAL_FLASHEx_OBGetConfig>
	  			  			if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 80014b8:	69ab      	ldr	r3, [r5, #24]
 80014ba:	2204      	movs	r2, #4
	  			  				HAL_FLASHEx_OBProgram(&OBInit);
 80014bc:	4628      	mov	r0, r5
	  			  			if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f44f 7380 	mov.w	r3, #256	; 0x100
	  			  				OBInit.OptionType = OPTIONBYTE_USER;
 80014c4:	602a      	str	r2, [r5, #0]
	  			  				OBInit.USERType   = OB_USER_SWAP_BANK;
 80014c6:	616b      	str	r3, [r5, #20]
	  			  				OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 80014c8:	bfaa      	itet	ge
 80014ca:	f04f 4300 	movge.w	r3, #2147483648	; 0x80000000
	  			  				OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 80014ce:	61ae      	strlt	r6, [r5, #24]
	  			  				OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 80014d0:	61ab      	strge	r3, [r5, #24]
	  			  				HAL_FLASHEx_OBProgram(&OBInit);
 80014d2:	f002 f9f7 	bl	80038c4 <HAL_FLASHEx_OBProgram>
	  			  				HAL_FLASH_OB_Launch();
 80014d6:	f002 f9d9 	bl	800388c <HAL_FLASH_OB_Launch>
	  			  				HAL_NVIC_SystemReset();
 80014da:	f001 fcf9 	bl	8002ed0 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014e2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <main+0x2e0>)
 80014e8:	f8c3 6250 	str.w	r6, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014f0:	f3bf 8f6f 	isb	sy
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014f4:	463d      	mov	r5, r7
 80014f6:	e72c      	b.n	8001352 <main+0x136>
 80014f8:	462f      	mov	r7, r5
 80014fa:	e7b5      	b.n	8001468 <main+0x24c>
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	20000c9c 	.word	0x20000c9c
 8001504:	080087d0 	.word	0x080087d0
 8001508:	20000070 	.word	0x20000070
 800150c:	ff8080ff 	.word	0xff8080ff
 8001510:	08008782 	.word	0x08008782
 8001514:	08008718 	.word	0x08008718
 8001518:	20000d60 	.word	0x20000d60
 800151c:	08008724 	.word	0x08008724
 8001520:	0800872e 	.word	0x0800872e
 8001524:	080086db 	.word	0x080086db
 8001528:	08008741 	.word	0x08008741
 800152c:	20000d54 	.word	0x20000d54
 8001530:	20000e00 	.word	0x20000e00
 8001534:	08008749 	.word	0x08008749
 8001538:	20000df6 	.word	0x20000df6
 800153c:	08008750 	.word	0x08008750
 8001540:	20000e02 	.word	0x20000e02
 8001544:	ffff0000 	.word	0xffff0000
 8001548:	08008757 	.word	0x08008757
 800154c:	08008767 	.word	0x08008767
 8001550:	0800876e 	.word	0x0800876e
 8001554:	08008778 	.word	0x08008778
 8001558:	08008791 	.word	0x08008791
 800155c:	58020000 	.word	0x58020000
 8001560:	58021400 	.word	0x58021400
 8001564:	20000ccc 	.word	0x20000ccc
 8001568:	20000db0 	.word	0x20000db0
 800156c:	20000d70 	.word	0x20000d70
 8001570:	0800879c 	.word	0x0800879c
 8001574:	20000c58 	.word	0x20000c58
 8001578:	080087a9 	.word	0x080087a9
 800157c:	20000df0 	.word	0x20000df0
 8001580:	20000df4 	.word	0x20000df4

08001584 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_13) {
 8001584:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8001588:	b538      	push	{r3, r4, r5, lr}
  if(GPIO_Pin == GPIO_PIN_13) {
 800158a:	d13c      	bne.n	8001606 <HAL_GPIO_EXTI_Callback+0x82>
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 800158c:	4c1f      	ldr	r4, [pc, #124]	; (800160c <HAL_GPIO_EXTI_Callback+0x88>)
	  HAL_FLASH_Unlock();
 800158e:	f002 f877 	bl	8003680 <HAL_FLASH_Unlock>
	   HAL_FLASH_OB_Unlock();
 8001592:	f002 f89b 	bl	80036cc <HAL_FLASH_OB_Unlock>
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 8001596:	4620      	mov	r0, r4
 8001598:	f002 fab2 	bl	8003b00 <HAL_FLASHEx_OBGetConfig>
	  OBInit.Banks     = FLASH_BANK_1;
 800159c:	2301      	movs	r3, #1
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 800159e:	4620      	mov	r0, r4
	  OBInit.Banks     = FLASH_BANK_1;
 80015a0:	61e3      	str	r3, [r4, #28]
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 80015a2:	f002 faad 	bl	8003b00 <HAL_FLASHEx_OBGetConfig>
	 if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 80015a6:	69a3      	ldr	r3, [r4, #24]
 80015a8:	2204      	movs	r2, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
	  	          OBInit.OptionType = OPTIONBYTE_USER;
 80015b0:	6022      	str	r2, [r4, #0]
	  	          OBInit.USERType   = OB_USER_SWAP_BANK;
 80015b2:	6163      	str	r3, [r4, #20]
	 if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 80015b4:	db16      	blt.n	80015e4 <HAL_GPIO_EXTI_Callback+0x60>
	  	          OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 80015b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 80015ba:	4620      	mov	r0, r4
	  	          OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 80015bc:	61a3      	str	r3, [r4, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 80015be:	f002 f981 	bl	80038c4 <HAL_FLASHEx_OBProgram>
	  	          HAL_FLASH_OB_Launch();
 80015c2:	f002 f963 	bl	800388c <HAL_FLASH_OB_Launch>
	  	          HAL_NVIC_SystemReset();
 80015c6:	f001 fc83 	bl	8002ed0 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015ce:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015de:	f3bf 8f6f 	isb	sy
}
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
	  	          OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 80015e4:	2500      	movs	r5, #0
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 80015e6:	4620      	mov	r0, r4
	  	          OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 80015e8:	61a5      	str	r5, [r4, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 80015ea:	f002 f96b 	bl	80038c4 <HAL_FLASHEx_OBProgram>
	  	          HAL_FLASH_OB_Launch();
 80015ee:	f002 f94d 	bl	800388c <HAL_FLASH_OB_Launch>
	  	          HAL_NVIC_SystemReset();
 80015f2:	f001 fc6d 	bl	8002ed0 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 80015f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015fa:	f3bf 8f6f 	isb	sy
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001600:	f8c3 5250 	str.w	r5, [r3, #592]	; 0x250
 8001604:	e7e9      	b.n	80015da <HAL_GPIO_EXTI_Callback+0x56>
      __NOP();
 8001606:	bf00      	nop
}
 8001608:	e7eb      	b.n	80015e2 <HAL_GPIO_EXTI_Callback+0x5e>
 800160a:	bf00      	nop
 800160c:	20000c58 	.word	0x20000c58
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
  while (1)
 8001616:	e7fe      	b.n	8001616 <Error_Handler+0x2>

08001618 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_MspInit+0x20>)
{
 800161a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001620:	f042 0202 	orr.w	r2, r2, #2
 8001624:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	b002      	add	sp, #8
 8001636:	4770      	bx	lr
 8001638:	58024400 	.word	0x58024400

0800163c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler>

0800163e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler>

08001640 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler>

08001642 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler>

08001644 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler>

08001646 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f001 bbc4 	b.w	8002dd8 <HAL_IncTick>

08001650 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001650:	4801      	ldr	r0, [pc, #4]	; (8001658 <USART2_IRQHandler+0x8>)
 8001652:	f004 bf93 	b.w	800657c <HAL_UART_IRQHandler>
 8001656:	bf00      	nop
 8001658:	20000e10 	.word	0x20000e10

0800165c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800165c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001660:	f002 bc4c 	b.w	8003efc <HAL_GPIO_EXTI_IRQHandler>

08001664 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <_sbrk+0x30>)
{
 8001666:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001668:	6811      	ldr	r1, [r2, #0]
{
 800166a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800166c:	b909      	cbnz	r1, 8001672 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800166e:	490a      	ldr	r1, [pc, #40]	; (8001698 <_sbrk+0x34>)
 8001670:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	6810      	ldr	r0, [r2, #0]
 8001674:	4909      	ldr	r1, [pc, #36]	; (800169c <_sbrk+0x38>)
 8001676:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <_sbrk+0x3c>)
 8001678:	4403      	add	r3, r0
 800167a:	1b09      	subs	r1, r1, r4
 800167c:	428b      	cmp	r3, r1
 800167e:	d906      	bls.n	800168e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001680:	f006 fb38 	bl	8007cf4 <__errno>
 8001684:	230c      	movs	r3, #12
 8001686:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001688:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800168c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800168e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001690:	e7fc      	b.n	800168c <_sbrk+0x28>
 8001692:	bf00      	nop
 8001694:	20000e0c 	.word	0x20000e0c
 8001698:	20001d48 	.word	0x20001d48
 800169c:	20020000 	.word	0x20020000
 80016a0:	00000400 	.word	0x00000400

080016a4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <SystemInit+0x98>)
 80016a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <SystemInit+0x9c>)
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d805      	bhi.n	80016ca <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f023 030f 	bic.w	r3, r3, #15
 80016c4:	f043 0307 	orr.w	r3, r3, #7
 80016c8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <SystemInit+0xa0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <SystemInit+0xa4>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016de:	4918      	ldr	r1, [pc, #96]	; (8001740 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 80016e0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e2:	680a      	ldr	r2, [r1, #0]
 80016e4:	0712      	lsls	r2, r2, #28
 80016e6:	d505      	bpl.n	80016f4 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e8:	680a      	ldr	r2, [r1, #0]
 80016ea:	f022 020f 	bic.w	r2, r2, #15
 80016ee:	f042 0207 	orr.w	r2, r2, #7
 80016f2:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016f4:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016f6:	4915      	ldr	r1, [pc, #84]	; (800174c <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 80016f8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80016fa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80016fc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80016fe:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <SystemInit+0xac>)
 8001702:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001704:	4913      	ldr	r1, [pc, #76]	; (8001754 <SystemInit+0xb0>)
 8001706:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800170a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800170e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001710:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001718:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800171a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <SystemInit+0xb4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001728:	d203      	bcs.n	8001732 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <SystemInit+0xb8>)
 800172c:	2201      	movs	r2, #1
 800172e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <SystemInit+0xbc>)
 8001734:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	52002000 	.word	0x52002000
 8001744:	58024400 	.word	0x58024400
 8001748:	eaf6ed7f 	.word	0xeaf6ed7f
 800174c:	02020200 	.word	0x02020200
 8001750:	01ff0000 	.word	0x01ff0000
 8001754:	01010280 	.word	0x01010280
 8001758:	5c001000 	.word	0x5c001000
 800175c:	51008000 	.word	0x51008000
 8001760:	52004000 	.word	0x52004000

08001764 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001764:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
  huart2.Init.BaudRate = 115200;
 8001768:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800176c:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_USART2_UART_Init+0x60>)
 800176e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001776:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001780:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001784:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001788:	f005 fdb9 	bl	80072fe <HAL_UART_Init>
 800178c:	b108      	cbz	r0, 8001792 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800178e:	f7ff ff41 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	480a      	ldr	r0, [pc, #40]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 8001796:	f005 fecd 	bl	8007534 <HAL_UARTEx_SetTxFifoThreshold>
 800179a:	b108      	cbz	r0, 80017a0 <MX_USART2_UART_Init+0x3c>
  {
    Error_Handler();
 800179c:	f7ff ff3a 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 80017a4:	f005 fee6 	bl	8007574 <HAL_UARTEx_SetRxFifoThreshold>
 80017a8:	b108      	cbz	r0, 80017ae <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80017aa:	f7ff ff33 	bl	8001614 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 80017b0:	f005 fea5 	bl	80074fe <HAL_UARTEx_DisableFifoMode>
 80017b4:	b118      	cbz	r0, 80017be <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017ba:	f7ff bf2b 	b.w	8001614 <Error_Handler>
}
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	20000e10 	.word	0x20000e10
 80017c4:	40004400 	.word	0x40004400

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	b0b8      	sub	sp, #224	; 0xe0
 80017cc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	2214      	movs	r2, #20
 80017d0:	2100      	movs	r1, #0
 80017d2:	a803      	add	r0, sp, #12
 80017d4:	f006 fa5c 	bl	8007c90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	22c0      	movs	r2, #192	; 0xc0
 80017da:	2100      	movs	r1, #0
 80017dc:	a808      	add	r0, sp, #32
 80017de:	f006 fa57 	bl	8007c90 <memset>
  if(uartHandle->Instance==USART2)
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_UART_MspInit+0x98>)
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d137      	bne.n	800185a <HAL_UART_MspInit+0x92>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ea:	2202      	movs	r2, #2
 80017ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ee:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f4:	f003 fea8 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80017f8:	b108      	cbz	r0, 80017fe <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 80017fa:	f7ff ff0b 	bl	8001614 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_UART_MspInit+0x9c>)
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	a903      	add	r1, sp, #12
 8001804:	4818      	ldr	r0, [pc, #96]	; (8001868 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001806:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800180a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800180e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001812:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001816:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001822:	f042 0208 	orr.w	r2, r2, #8
 8001826:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001844:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	f002 f9c1 	bl	8003bcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800184a:	2026      	movs	r0, #38	; 0x26
 800184c:	4622      	mov	r2, r4
 800184e:	2105      	movs	r1, #5
 8001850:	f001 fafe 	bl	8002e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001854:	2026      	movs	r0, #38	; 0x26
 8001856:	f001 fb2d 	bl	8002eb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800185a:	b038      	add	sp, #224	; 0xe0
 800185c:	bd10      	pop	{r4, pc}
 800185e:	bf00      	nop
 8001860:	40004400 	.word	0x40004400
 8001864:	58024400 	.word	0x58024400
 8001868:	58020c00 	.word	0x58020c00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001870:	f7ff ff18 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	; (80018b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f006 fa31 	bl	8007d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fcbd 	bl	800121c <main>
  bx  lr
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80018b0:	0800a35c 	.word	0x0800a35c
  ldr r2, =_sbss
 80018b4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80018b8:	20001d48 	.word	0x20001d48

080018bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC3_IRQHandler>

080018be <EXC7200_GetCapabilities>:
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
 80018be:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 80018c0:	2000      	movs	r0, #0
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
 80018c2:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = EXC7200_MAX_X_LENGTH;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 80018c8:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = EXC7200_MAX_Y_LENGTH;
 80018ca:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return EXC7200_OK;
}
 80018ce:	4770      	bx	lr

080018d0 <EXC7200_GestureConfig>:
  */
int32_t EXC7200_GestureConfig(EXC7200_Object_t *pObj, EXC7200_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return EXC7200_ERROR;  
}
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	4770      	bx	lr

080018d6 <EXC7200_EnableIT>:
  */
int32_t EXC7200_EnableIT(EXC7200_Object_t *pObj)
{
  /* Feature not supported */
  return EXC7200_ERROR;
}
 80018d6:	f04f 30ff 	mov.w	r0, #4294967295
 80018da:	4770      	bx	lr

080018dc <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80018dc:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80018de:	6904      	ldr	r4, [r0, #16]
 80018e0:	8900      	ldrh	r0, [r0, #8]
 80018e2:	46a4      	mov	ip, r4
}
 80018e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80018e8:	4760      	bx	ip

080018ea <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80018ea:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80018ec:	68c4      	ldr	r4, [r0, #12]
 80018ee:	8900      	ldrh	r0, [r0, #8]
 80018f0:	46a4      	mov	ip, r4
}
 80018f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80018f6:	4760      	bx	ip

080018f8 <EXC7200_ReadID>:
{
 80018f8:	b513      	push	{r0, r1, r4, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 80018fa:	2301      	movs	r3, #1
{
 80018fc:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 80018fe:	f10d 0207 	add.w	r2, sp, #7
 8001902:	2109      	movs	r1, #9
 8001904:	3018      	adds	r0, #24
 8001906:	f000 f887 	bl	8001a18 <exc7200_read_reg>
 800190a:	b920      	cbnz	r0, 8001916 <EXC7200_ReadID+0x1e>
    *Id = EXC7200_ID; 
 800190c:	f44f 43e4 	mov.w	r3, #29184	; 0x7200
 8001910:	6023      	str	r3, [r4, #0]
}
 8001912:	b002      	add	sp, #8
 8001914:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_ERROR;
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800191a:	e7fa      	b.n	8001912 <EXC7200_ReadID+0x1a>

0800191c <EXC7200_Init>:
{
 800191c:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800191e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001922:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001924:	b933      	cbnz	r3, 8001934 <EXC7200_Init+0x18>
    if(pObj->IO.Init() != EXC7200_OK)
 8001926:	6803      	ldr	r3, [r0, #0]
 8001928:	4798      	blx	r3
 800192a:	b928      	cbnz	r0, 8001938 <EXC7200_Init+0x1c>
      pObj->IsInitialized = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001932:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 8001934:	2000      	movs	r0, #0
 8001936:	e7fc      	b.n	8001932 <EXC7200_Init+0x16>
      ret = EXC7200_ERROR;
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800193c:	e7f9      	b.n	8001932 <EXC7200_Init+0x16>

0800193e <EXC7200_DeInit>:
{
 800193e:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 1U)
 8001940:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001944:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 8001946:	2b01      	cmp	r3, #1
 8001948:	d105      	bne.n	8001956 <EXC7200_DeInit+0x18>
    if(pObj->IO.DeInit() != EXC7200_OK)
 800194a:	6843      	ldr	r3, [r0, #4]
 800194c:	4798      	blx	r3
 800194e:	b920      	cbnz	r0, 800195a <EXC7200_DeInit+0x1c>
      pObj->IsInitialized = 0;
 8001950:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001954:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 8001956:	2000      	movs	r0, #0
 8001958:	e7fc      	b.n	8001954 <EXC7200_DeInit+0x16>
      ret = EXC7200_ERROR;
 800195a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800195e:	e7f9      	b.n	8001954 <EXC7200_DeInit+0x16>

08001960 <EXC7200_DisableIT>:
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	4770      	bx	lr

08001966 <EXC7200_GetMultiTouchState>:
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	4770      	bx	lr

0800196c <EXC7200_GetGesture>:
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	4770      	bx	lr

08001972 <EXC7200_ITStatus>:
 8001972:	f04f 30ff 	mov.w	r0, #4294967295
 8001976:	4770      	bx	lr

08001978 <EXC7200_ClearIT>:
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	4770      	bx	lr

0800197e <EXC7200_GetState>:
{
 800197e:	b530      	push	{r4, r5, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 8001980:	f100 0518 	add.w	r5, r0, #24
{
 8001984:	b085      	sub	sp, #20
 8001986:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 8001988:	230a      	movs	r3, #10
 800198a:	aa01      	add	r2, sp, #4
 800198c:	2109      	movs	r1, #9
 800198e:	4628      	mov	r0, r5
 8001990:	f000 f842 	bl	8001a18 <exc7200_read_reg>
 8001994:	bb08      	cbnz	r0, 80019da <EXC7200_GetState+0x5c>
    if(pData[1] == 0x83U)
 8001996:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800199a:	f1a3 0283 	sub.w	r2, r3, #131	; 0x83
 800199e:	4253      	negs	r3, r2
 80019a0:	4153      	adcs	r3, r2
  State->TouchDetected = (uint32_t)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 80019a2:	6023      	str	r3, [r4, #0]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80019a4:	2109      	movs	r1, #9
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80019a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80019aa:	4628      	mov	r0, r5
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80019ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80019b6:	f89d 2009 	ldrb.w	r2, [sp, #9]
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	6063      	str	r3, [r4, #4]
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80019be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80019c8:	aa01      	add	r2, sp, #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	60a3      	str	r3, [r4, #8]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80019ce:	230a      	movs	r3, #10
 80019d0:	f000 f822 	bl	8001a18 <exc7200_read_reg>
}
 80019d4:	2000      	movs	r0, #0
 80019d6:	b005      	add	sp, #20
 80019d8:	bd30      	pop	{r4, r5, pc}
    ret = EXC7200_ERROR;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e7e0      	b.n	80019a2 <EXC7200_GetState+0x24>

080019e0 <EXC7200_RegisterBusIO>:
  if (pObj == NULL)
 80019e0:	b190      	cbz	r0, 8001a08 <EXC7200_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80019e2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80019e4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80019e6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80019e8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80019ea:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80019ec:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80019ee:	68ca      	ldr	r2, [r1, #12]
 80019f0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80019f2:	690a      	ldr	r2, [r1, #16]
 80019f4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80019f6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80019f8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80019fa:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <EXC7200_RegisterBusIO+0x30>)
 80019fe:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <EXC7200_RegisterBusIO+0x34>)
 8001a02:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8001a04:	b103      	cbz	r3, 8001a08 <EXC7200_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8001a06:	4718      	bx	r3
}
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	080018dd 	.word	0x080018dd
 8001a14:	080018eb 	.word	0x080018eb

08001a18 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001a18:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001a1a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001a1e:	46a4      	mov	ip, r4
}
 8001a20:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001a24:	4760      	bx	ip
	...

08001a28 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8001a28:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8001a2e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8001a32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001a34:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001a36:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8001a38:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	f004 fc27 	bl	8006290 <HAL_SDRAM_SendCommand>
 8001a42:	3800      	subs	r0, #0
 8001a44:	bf18      	it	ne
 8001a46:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8001a48:	4240      	negs	r0, r0
 8001a4a:	bd08      	pop	{r3, pc}
 8001a4c:	20000ea4 	.word	0x20000ea4

08001a50 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8001a50:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 8001a52:	2202      	movs	r2, #2
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8001a56:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a66:	4619      	mov	r1, r3
 8001a68:	f004 fc12 	bl	8006290 <HAL_SDRAM_SendCommand>
 8001a6c:	3800      	subs	r0, #0
 8001a6e:	bf18      	it	ne
 8001a70:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8001a72:	4240      	negs	r0, r0
 8001a74:	bd08      	pop	{r3, pc}
 8001a76:	bf00      	nop
 8001a78:	20000ea4 	.word	0x20000ea4

08001a7c <IS42S32800G_ModeRegConfig>:
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001a7c:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8001a80:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001a82:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8001a84:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8001a86:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <IS42S32800G_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8001a88:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8001a8a:	698a      	ldr	r2, [r1, #24]
 8001a8c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001a8e:	69ca      	ldr	r2, [r1, #28]
 8001a90:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8001a92:	2204      	movs	r2, #4
 8001a94:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001a96:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001a98:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8001a9a:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8001a9c:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8001a9e:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa6:	f004 fbf3 	bl	8006290 <HAL_SDRAM_SendCommand>
 8001aaa:	3800      	subs	r0, #0
 8001aac:	bf18      	it	ne
 8001aae:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	bd10      	pop	{r4, pc}
 8001ab4:	20000ea4 	.word	0x20000ea4

08001ab8 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8001ab8:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8001abc:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8001ac0:	2108      	movs	r1, #8
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8001ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001acc:	4619      	mov	r1, r3
 8001ace:	f004 fbdf 	bl	8006290 <HAL_SDRAM_SendCommand>
 8001ad2:	3800      	subs	r0, #0
 8001ad4:	bf18      	it	ne
 8001ad6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8001ad8:	4240      	negs	r0, r0
 8001ada:	bd08      	pop	{r3, pc}
 8001adc:	20000ea4 	.word	0x20000ea4

08001ae0 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8001ae0:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001ae2:	f004 fbf4 	bl	80062ce <HAL_SDRAM_ProgramRefreshRate>
 8001ae6:	3800      	subs	r0, #0
 8001ae8:	bf18      	it	ne
 8001aea:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8001aec:	4240      	negs	r0, r0
 8001aee:	bd08      	pop	{r3, pc}

08001af0 <IS42S32800G_Init>:
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8001af4:	6809      	ldr	r1, [r1, #0]
{
 8001af6:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8001af8:	f7ff ff96 	bl	8001a28 <IS42S32800G_ClockEnable>
 8001afc:	b110      	cbz	r0, 8001b04 <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001b04:	f001 f974 	bl	8002df0 <HAL_GetTick>
 8001b08:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001b0a:	f001 f971 	bl	8002df0 <HAL_GetTick>
 8001b0e:	4286      	cmp	r6, r0
 8001b10:	d0fb      	beq.n	8001b0a <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8001b12:	6821      	ldr	r1, [r4, #0]
 8001b14:	4628      	mov	r0, r5
 8001b16:	f7ff ff9b 	bl	8001a50 <IS42S32800G_Precharge>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1ef      	bne.n	8001afe <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8001b1e:	4628      	mov	r0, r5
 8001b20:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001b24:	f7ff ffc8 	bl	8001ab8 <IS42S32800G_RefreshMode>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d1e8      	bne.n	8001afe <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f7ff ffa4 	bl	8001a7c <IS42S32800G_ModeRegConfig>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d1e2      	bne.n	8001afe <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8001b38:	68a1      	ldr	r1, [r4, #8]
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f7ff ffd0 	bl	8001ae0 <IS42S32800G_RefreshRate>
 8001b40:	3800      	subs	r0, #0
 8001b42:	bf18      	it	ne
 8001b44:	2001      	movne	r0, #1
 8001b46:	4240      	negs	r0, r0
  return ret;
 8001b48:	e7db      	b.n	8001b02 <IS42S32800G_Init+0x12>

08001b4a <TS3510_GetCapabilities>:
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
 8001b4a:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 8001b4c:	2000      	movs	r0, #0
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
 8001b4e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = TS3510_MAX_X_LENGTH;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 8001b54:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = TS3510_MAX_Y_LENGTH;
 8001b56:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return TS3510_OK;
}
 8001b5a:	4770      	bx	lr

08001b5c <TS3510_GestureConfig>:
  */
int32_t TS3510_GestureConfig(TS3510_Object_t *pObj, TS3510_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return TS3510_ERROR;  
}
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	4770      	bx	lr

08001b62 <TS3510_EnableIT>:
  */
int32_t TS3510_EnableIT(TS3510_Object_t *pObj)
{
  /* Feature not supported */
  return TS3510_ERROR;
}
 8001b62:	f04f 30ff 	mov.w	r0, #4294967295
 8001b66:	4770      	bx	lr

08001b68 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b68:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b6a:	6904      	ldr	r4, [r0, #16]
 8001b6c:	8900      	ldrh	r0, [r0, #8]
 8001b6e:	46a4      	mov	ip, r4
}
 8001b70:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b74:	4760      	bx	ip

08001b76 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b76:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b78:	68c4      	ldr	r4, [r0, #12]
 8001b7a:	8900      	ldrh	r0, [r0, #8]
 8001b7c:	46a4      	mov	ip, r4
}
 8001b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b82:	4760      	bx	ip

08001b84 <TS3510_ReadID>:
{
 8001b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001b86:	f640 0381 	movw	r3, #2177	; 0x881
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8001b8a:	f100 0418 	add.w	r4, r0, #24
{
 8001b8e:	460d      	mov	r5, r1
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8001b90:	aa01      	add	r2, sp, #4
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001b92:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8001b96:	218a      	movs	r1, #138	; 0x8a
 8001b98:	2302      	movs	r3, #2
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f000 f8bf 	bl	8001d1e <ts3510_write_reg>
 8001ba0:	b118      	cbz	r0, 8001baa <TS3510_ReadID+0x26>
    ret = TS3510_ERROR;
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ba6:	b003      	add	sp, #12
 8001ba8:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 8001baa:	2301      	movs	r3, #1
 8001bac:	f10d 0203 	add.w	r2, sp, #3
 8001bb0:	218a      	movs	r1, #138	; 0x8a
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f000 f8ac 	bl	8001d10 <ts3510_read_reg>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d1f2      	bne.n	8001ba2 <TS3510_ReadID+0x1e>
    *Id = TS3510_ID;
 8001bbc:	f243 5310 	movw	r3, #13584	; 0x3510
 8001bc0:	602b      	str	r3, [r5, #0]
  return ret;     
 8001bc2:	e7f0      	b.n	8001ba6 <TS3510_ReadID+0x22>

08001bc4 <TS3510_GetState>:
{
 8001bc4:	b530      	push	{r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001bc6:	f640 0381 	movw	r3, #2177	; 0x881
{
 8001bca:	b087      	sub	sp, #28
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001bcc:	f100 0518 	add.w	r5, r0, #24
{
 8001bd0:	460c      	mov	r4, r1
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001bd6:	aa02      	add	r2, sp, #8
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001bd8:	f8ad 3008 	strh.w	r3, [sp, #8]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2302      	movs	r3, #2
 8001be0:	4628      	mov	r0, r5
 8001be2:	f000 f89c 	bl	8001d1e <ts3510_write_reg>
 8001be6:	b178      	cbz	r0, 8001c08 <TS3510_GetState+0x44>
    ret = TS3510_ERROR;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
  if(State->TouchDetected == 1U)
 8001bec:	2b01      	cmp	r3, #1
  State->TouchDetected = (uint32_t)TS3510_DetectTouch(pObj);
 8001bee:	6023      	str	r3, [r4, #0]
  if(State->TouchDetected == 1U)
 8001bf0:	d13e      	bne.n	8001c70 <TS3510_GetState+0xac>
    if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	aa01      	add	r2, sp, #4
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f000 f890 	bl	8001d1e <ts3510_write_reg>
 8001bfe:	b1d0      	cbz	r0, 8001c36 <TS3510_GetState+0x72>
      ret = TS3510_ERROR;
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c04:	b007      	add	sp, #28
 8001c06:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8001c08:	230b      	movs	r3, #11
 8001c0a:	aa03      	add	r2, sp, #12
 8001c0c:	218a      	movs	r1, #138	; 0x8a
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f000 f87e 	bl	8001d10 <ts3510_read_reg>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d1e7      	bne.n	8001be8 <TS3510_GetState+0x24>
    if((pData[1] == 0xFF) && (pData[2] == 0xFF) && (pData[3] == 0xFF) && (pData[4] == 0xFF))
 8001c18:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001c1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001c20:	4013      	ands	r3, r2
 8001c22:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001c26:	4013      	ands	r3, r2
 8001c28:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	3bff      	subs	r3, #255	; 0xff
 8001c30:	bf18      	it	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	e7da      	b.n	8001bec <TS3510_GetState+0x28>
    else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8001c36:	230b      	movs	r3, #11
 8001c38:	aa03      	add	r2, sp, #12
 8001c3a:	218a      	movs	r1, #138	; 0x8a
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f867 	bl	8001d10 <ts3510_read_reg>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d1dc      	bne.n	8001c00 <TS3510_GetState+0x3c>
      State->TouchX = (((pData[1] << 8) | pData[2]) << 12) / 640;
 8001c46:	f8bd 300d 	ldrh.w	r3, [sp, #13]
 8001c4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c4e:	ba5b      	rev16	r3, r3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	031b      	lsls	r3, r3, #12
 8001c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c58:	6063      	str	r3, [r4, #4]
      State->TouchY = (((pData[3] << 8) | pData[4]) << 12) / 480;
 8001c5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c5e:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 8001c62:	ba5b      	rev16	r3, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	031b      	lsls	r3, r3, #12
 8001c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c6c:	60a3      	str	r3, [r4, #8]
 8001c6e:	e7c9      	b.n	8001c04 <TS3510_GetState+0x40>
  int32_t ret = TS3510_OK;
 8001c70:	2000      	movs	r0, #0
  return ret;
 8001c72:	e7c7      	b.n	8001c04 <TS3510_GetState+0x40>

08001c74 <TS3510_Init>:
{
 8001c74:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8001c76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001c7a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001c7c:	b933      	cbnz	r3, 8001c8c <TS3510_Init+0x18>
    if(pObj->IO.Init() != TS3510_OK)
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	4798      	blx	r3
 8001c82:	b928      	cbnz	r0, 8001c90 <TS3510_Init+0x1c>
      pObj->IsInitialized = 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001c8a:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e7fc      	b.n	8001c8a <TS3510_Init+0x16>
      ret = TS3510_ERROR;
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001c94:	e7f9      	b.n	8001c8a <TS3510_Init+0x16>

08001c96 <TS3510_DeInit>:
{
 8001c96:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 1U)
 8001c98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001c9c:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <TS3510_DeInit+0x18>
    if(pObj->IO.DeInit() != TS3510_OK)
 8001ca2:	6843      	ldr	r3, [r0, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	b920      	cbnz	r0, 8001cb2 <TS3510_DeInit+0x1c>
      pObj->IsInitialized = 0;
 8001ca8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001cac:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7fc      	b.n	8001cac <TS3510_DeInit+0x16>
      ret = TS3510_ERROR;
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001cb6:	e7f9      	b.n	8001cac <TS3510_DeInit+0x16>

08001cb8 <TS3510_DisableIT>:
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	4770      	bx	lr

08001cbe <TS3510_GetMultiTouchState>:
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	4770      	bx	lr

08001cc4 <TS3510_GetGesture>:
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	4770      	bx	lr

08001cca <TS3510_ITStatus>:
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	4770      	bx	lr

08001cd0 <TS3510_ClearIT>:
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	4770      	bx	lr
	...

08001cd8 <TS3510_RegisterBusIO>:
  if (pObj == NULL)
 8001cd8:	b190      	cbz	r0, 8001d00 <TS3510_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8001cda:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001cdc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001cde:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8001ce0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8001ce2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8001ce4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ce6:	68ca      	ldr	r2, [r1, #12]
 8001ce8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001cea:	690a      	ldr	r2, [r1, #16]
 8001cec:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001cee:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8001cf0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8001cf2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <TS3510_RegisterBusIO+0x30>)
 8001cf6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <TS3510_RegisterBusIO+0x34>)
 8001cfa:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8001cfc:	b103      	cbz	r3, 8001d00 <TS3510_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8001cfe:	4718      	bx	r3
}
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	08001b69 	.word	0x08001b69
 8001d0c:	08001b77 	.word	0x08001b77

08001d10 <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001d10:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001d12:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001d16:	46a4      	mov	ip, r4
}
 8001d18:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001d1c:	4760      	bx	ip

08001d1e <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001d1e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001d20:	6804      	ldr	r4, [r0, #0]
 8001d22:	6880      	ldr	r0, [r0, #8]
 8001d24:	46a4      	mov	ip, r4
}
 8001d26:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001d2a:	4760      	bx	ip

08001d2c <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c1InitCounter--;
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <BSP_I2C1_DeInit+0x40>)
{
 8001d2e:	b508      	push	{r3, lr}

  if (--I2c1InitCounter == 0U)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	3b02      	subs	r3, #2
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	b10b      	cbz	r3, 8001d3c <BSP_I2C1_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8001d38:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8001d3a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8001d3c:	2140      	movs	r1, #64	; 0x40
 8001d3e:	480c      	ldr	r0, [pc, #48]	; (8001d70 <BSP_I2C1_DeInit+0x44>)
 8001d40:	f002 f82e 	bl	8003da0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <BSP_I2C1_DeInit+0x44>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	f002 f82a 	bl	8003da0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <BSP_I2C1_DeInit+0x4c>)
  BUS_I2C1_CLK_DISABLE();
 8001d50:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001d5c:	f002 fa58 	bl	8004210 <HAL_I2C_DeInit>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d0e9      	beq.n	8001d38 <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8001d64:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001d68:	e7e7      	b.n	8001d3a <BSP_I2C1_DeInit+0xe>
 8001d6a:	bf00      	nop
 8001d6c:	20000eb4 	.word	0x20000eb4
 8001d70:	58020400 	.word	0x58020400
 8001d74:	58024400 	.word	0x58024400
 8001d78:	200018bc 	.word	0x200018bc

08001d7c <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2201      	movs	r2, #1
{
 8001d80:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8001d82:	6041      	str	r1, [r0, #4]
{
 8001d84:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d86:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d88:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8001d8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d90:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001d94:	f002 f9ea 	bl	800416c <HAL_I2C_Init>
 8001d98:	4601      	mov	r1, r0
 8001d9a:	b108      	cbz	r0, 8001da0 <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
}
 8001d9e:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001da0:	4620      	mov	r0, r4
 8001da2:	f002 fc0c 	bl	80045be <HAL_I2CEx_ConfigAnalogFilter>
 8001da6:	4601      	mov	r1, r0
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d1f7      	bne.n	8001d9c <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001dac:	4620      	mov	r0, r4
 8001dae:	f002 fc2c 	bl	800460a <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8001db2:	3800      	subs	r0, #0
 8001db4:	bf18      	it	ne
 8001db6:	2001      	movne	r0, #1
 8001db8:	e7f1      	b.n	8001d9e <MX_I2C1_Init+0x22>
	...

08001dbc <BSP_I2C1_Init>:
  hbus_i2c1.Instance = BUS_I2C1;
 8001dbc:	4ba3      	ldr	r3, [pc, #652]	; (800204c <BSP_I2C1_Init+0x290>)
 8001dbe:	48a4      	ldr	r0, [pc, #656]	; (8002050 <BSP_I2C1_Init+0x294>)
{
 8001dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c1.Instance = BUS_I2C1;
 8001dc4:	6003      	str	r3, [r0, #0]
{
 8001dc6:	b093      	sub	sp, #76	; 0x4c
  if (I2c1InitCounter == 0U)
 8001dc8:	4ba2      	ldr	r3, [pc, #648]	; (8002054 <BSP_I2C1_Init+0x298>)
 8001dca:	681c      	ldr	r4, [r3, #0]
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	f040 80cd 	bne.w	8001f6c <BSP_I2C1_Init+0x1b0>
    I2c1InitCounter++;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8001dd6:	f002 fbed 	bl	80045b4 <HAL_I2C_GetState>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	f040 80c6 	bne.w	8001f6c <BSP_I2C1_Init+0x1b0>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001de0:	4d9d      	ldr	r5, [pc, #628]	; (8002058 <BSP_I2C1_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001de2:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8001de6:	2702      	movs	r7, #2
 8001de8:	2604      	movs	r6, #4
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001dea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8001dee:	a90d      	add	r1, sp, #52	; 0x34
 8001df0:	489a      	ldr	r0, [pc, #616]	; (800205c <BSP_I2C1_Init+0x2a0>)
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001dfa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	930a      	str	r3, [sp, #40]	; 0x28
 8001e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8001e06:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001e12:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001e16:	940f      	str	r4, [sp, #60]	; 0x3c
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001e20:	2340      	movs	r3, #64	; 0x40
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8001e22:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001e26:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8001e2a:	f001 fecf 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 8001e2e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001e30:	a90d      	add	r1, sp, #52	; 0x34
 8001e32:	488a      	ldr	r0, [pc, #552]	; (800205c <BSP_I2C1_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 8001e34:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8001e36:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	e9cd 470f 	strd	r4, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001e3e:	f001 fec5 	bl	8003bcc <HAL_GPIO_Init>
  BUS_I2C1_CLK_ENABLE();
 8001e42:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8001e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 8001e4e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	930c      	str	r3, [sp, #48]	; 0x30
 8001e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C1_FORCE_RESET();
 8001e5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e62:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  BUS_I2C1_RELEASE_RESET();
 8001e66:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e6e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001e72:	f003 fa55 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d072      	beq.n	8001f60 <BSP_I2C1_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001e7a:	4b79      	ldr	r3, [pc, #484]	; (8002060 <BSP_I2C1_Init+0x2a4>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001e7c:	f640 16f6 	movw	r6, #2550	; 0x9f6
 8001e80:	4622      	mov	r2, r4
 8001e82:	46a1      	mov	r9, r4
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001e84:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001e88:	f04f 0a10 	mov.w	sl, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001e8c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8002068 <BSP_I2C1_Init+0x2ac>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001e90:	fbb3 f0f0 	udiv	r0, r3, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001e94:	f06f 031d 	mvn.w	r3, #29
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001e98:	eb00 0540 	add.w	r5, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001e9c:	eba6 0680 	sub.w	r6, r6, r0, lsl #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ea0:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001ea2:	1b5b      	subs	r3, r3, r5
 8001ea4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8001ea8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eac:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001eae:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <BSP_I2C1_Init+0x2a8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
{
 8001eb2:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001eb4:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8001eb8:	f240 3579 	movw	r5, #889	; 0x379
 8001ebc:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001ec0:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8001ec4:	45a8      	cmp	r8, r5
 8001ec6:	d95e      	bls.n	8001f86 <BSP_I2C1_Init+0x1ca>
 8001ec8:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001eca:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8001ecc:	9d00      	ldr	r5, [sp, #0]
 8001ece:	42bd      	cmp	r5, r7
 8001ed0:	d853      	bhi.n	8001f7a <BSP_I2C1_Init+0x1be>
 8001ed2:	42be      	cmp	r6, r7
 8001ed4:	d351      	bcc.n	8001f7a <BSP_I2C1_Init+0x1be>
            if(presc != prev_presc)
 8001ed6:	4592      	cmp	sl, r2
 8001ed8:	d04f      	beq.n	8001f7a <BSP_I2C1_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001eda:	2514      	movs	r5, #20
 8001edc:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8001ee0:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001ee2:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001ee4:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001ee8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001eea:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001eee:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001ef2:	d93f      	bls.n	8001f74 <BSP_I2C1_Init+0x1b8>
 8001ef4:	4a5b      	ldr	r2, [pc, #364]	; (8002064 <BSP_I2C1_Init+0x2a8>)
 8001ef6:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001ef8:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <BSP_I2C1_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001efa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001efe:	495a      	ldr	r1, [pc, #360]	; (8002068 <BSP_I2C1_Init+0x2ac>)
 8001f00:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f02:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001f04:	9203      	str	r2, [sp, #12]
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f0a:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001f0c:	0043      	lsls	r3, r0, #1
 8001f0e:	9201      	str	r2, [sp, #4]
 8001f10:	f103 0532 	add.w	r5, r3, #50	; 0x32
 8001f14:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 8001f18:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8001f1c:	f10b 0b0c 	add.w	fp, fp, #12
 8001f20:	9509      	str	r5, [sp, #36]	; 0x24
 8001f22:	3b0a      	subs	r3, #10
 8001f24:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f26:	9b05      	ldr	r3, [sp, #20]
 8001f28:	429f      	cmp	r7, r3
 8001f2a:	d138      	bne.n	8001f9e <BSP_I2C1_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8001f2c:	9b01      	ldr	r3, [sp, #4]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d816      	bhi.n	8001f60 <BSP_I2C1_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f32:	2114      	movs	r1, #20
 8001f34:	9a01      	ldr	r2, [sp, #4]
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <BSP_I2C1_Init+0x2ac>)
 8001f38:	434a      	muls	r2, r1
 8001f3a:	1899      	adds	r1, r3, r2
 8001f3c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001f3e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f40:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001f44:	684b      	ldr	r3, [r1, #4]
 8001f46:	051b      	lsls	r3, r3, #20
 8001f48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f4c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001f4e:	688b      	ldr	r3, [r1, #8]
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f56:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001f58:	68cb      	ldr	r3, [r1, #12]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f5e:	431c      	orrs	r4, r3
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001f60:	4621      	mov	r1, r4
 8001f62:	483b      	ldr	r0, [pc, #236]	; (8002050 <BSP_I2C1_Init+0x294>)
 8001f64:	f7ff ff0a 	bl	8001d7c <MX_I2C1_Init>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d16c      	bne.n	8002046 <BSP_I2C1_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 8001f6c:	2000      	movs	r0, #0
}
 8001f6e:	b013      	add	sp, #76	; 0x4c
 8001f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f74:	4692      	mov	sl, r2
 8001f76:	f04f 0901 	mov.w	r9, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001f7a:	f10e 0e01 	add.w	lr, lr, #1
 8001f7e:	440f      	add	r7, r1
 8001f80:	f1be 0f10 	cmp.w	lr, #16
 8001f84:	d1a2      	bne.n	8001ecc <BSP_I2C1_Init+0x110>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001f86:	f1bc 0f10 	cmp.w	ip, #16
 8001f8a:	4488      	add	r8, r1
 8001f8c:	d194      	bne.n	8001eb8 <BSP_I2C1_Init+0xfc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001f8e:	3201      	adds	r2, #1
 8001f90:	4401      	add	r1, r0
 8001f92:	2a10      	cmp	r2, #16
 8001f94:	d18d      	bne.n	8001eb2 <BSP_I2C1_Init+0xf6>
 8001f96:	f1b9 0f00 	cmp.w	r9, #0
 8001f9a:	d1ab      	bne.n	8001ef4 <BSP_I2C1_Init+0x138>
 8001f9c:	e7ac      	b.n	8001ef8 <BSP_I2C1_Init+0x13c>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001f9e:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001fa0:	f04f 0c00 	mov.w	ip, #0
 8001fa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001fa6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001faa:	9e02      	ldr	r6, [sp, #8]
 8001fac:	441d      	add	r5, r3
 8001fae:	441e      	add	r6, r3
 8001fb0:	9504      	str	r5, [sp, #16]
 8001fb2:	ebab 0503 	sub.w	r5, fp, r3
 8001fb6:	9608      	str	r6, [sp, #32]
 8001fb8:	006d      	lsls	r5, r5, #1
 8001fba:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001fbc:	9d04      	ldr	r5, [sp, #16]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001fbe:	f241 225c 	movw	r2, #4700	; 0x125c
 8001fc2:	f8cd c018 	str.w	ip, [sp, #24]
 8001fc6:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001fca:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001fce:	4295      	cmp	r5, r2
 8001fd0:	d92e      	bls.n	8002030 <BSP_I2C1_Init+0x274>
 8001fd2:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8001fd6:	d22b      	bcs.n	8002030 <BSP_I2C1_Init+0x274>
 8001fd8:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001fda:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001fde:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001fe2:	442e      	add	r6, r5
 8001fe4:	f8dd 9000 	ldr.w	r9, [sp]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001fe8:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8001fec:	f241 0247 	movw	r2, #4167	; 0x1047
 8001ff0:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001ff4:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001ff8:	4592      	cmp	sl, r2
 8001ffa:	d812      	bhi.n	8002022 <BSP_I2C1_Init+0x266>
 8001ffc:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8002000:	d30f      	bcc.n	8002022 <BSP_I2C1_Init+0x266>
 8002002:	4540      	cmp	r0, r8
 8002004:	d20d      	bcs.n	8002022 <BSP_I2C1_Init+0x266>
              error = -error;
 8002006:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800200a:	bf28      	it	cs
 800200c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800200e:	9a03      	ldr	r2, [sp, #12]
 8002010:	4592      	cmp	sl, r2
 8002012:	d206      	bcs.n	8002022 <BSP_I2C1_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8002014:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8002016:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 800201a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800201c:	9a07      	ldr	r2, [sp, #28]
 800201e:	9701      	str	r7, [sp, #4]
 8002020:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002022:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8002026:	441e      	add	r6, r3
 8002028:	eba9 0903 	sub.w	r9, r9, r3
 800202c:	4498      	add	r8, r3
 800202e:	d1db      	bne.n	8001fe8 <BSP_I2C1_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002030:	9a00      	ldr	r2, [sp, #0]
 8002032:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8002036:	441d      	add	r5, r3
 8002038:	eba2 0203 	sub.w	r2, r2, r3
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	d1be      	bne.n	8001fbe <BSP_I2C1_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002040:	3701      	adds	r7, #1
 8002042:	3114      	adds	r1, #20
 8002044:	e76f      	b.n	8001f26 <BSP_I2C1_Init+0x16a>
          ret = BSP_ERROR_BUS_FAILURE;
 8002046:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800204a:	e790      	b.n	8001f6e <BSP_I2C1_Init+0x1b2>
 800204c:	40005400 	.word	0x40005400
 8002050:	200018bc 	.word	0x200018bc
 8002054:	20000eb4 	.word	0x20000eb4
 8002058:	58024400 	.word	0x58024400
 800205c:	58020400 	.word	0x58020400
 8002060:	3b9aca00 	.word	0x3b9aca00
 8002064:	200018b8 	.word	0x200018b8
 8002068:	20000eb8 	.word	0x20000eb8

0800206c <BSP_I2C1_WriteReg>:
{
 800206c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800206e:	f242 7410 	movw	r4, #10000	; 0x2710
 8002072:	9200      	str	r2, [sp, #0]
 8002074:	460a      	mov	r2, r1
 8002076:	4601      	mov	r1, r0
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <BSP_I2C1_WriteReg+0x30>)
 800207a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800207e:	2301      	movs	r3, #1
 8002080:	f002 f8e0 	bl	8004244 <HAL_I2C_Mem_Write>
 8002084:	b140      	cbz	r0, 8002098 <BSP_I2C1_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <BSP_I2C1_WriteReg+0x30>)
 8002088:	f002 fa97 	bl	80045ba <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800208c:	2804      	cmp	r0, #4
 800208e:	bf0c      	ite	eq
 8002090:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8002094:	f06f 0003 	mvnne.w	r0, #3
}
 8002098:	b004      	add	sp, #16
 800209a:	bd10      	pop	{r4, pc}
 800209c:	200018bc 	.word	0x200018bc

080020a0 <BSP_I2C1_ReadReg>:
{
 80020a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80020a2:	f242 7410 	movw	r4, #10000	; 0x2710
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	460a      	mov	r2, r1
 80020aa:	4601      	mov	r1, r0
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <BSP_I2C1_ReadReg+0x30>)
 80020ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	f002 f9a0 	bl	80043f8 <HAL_I2C_Mem_Read>
 80020b8:	b140      	cbz	r0, 80020cc <BSP_I2C1_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <BSP_I2C1_ReadReg+0x30>)
 80020bc:	f002 fa7d 	bl	80045ba <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020c0:	2804      	cmp	r0, #4
 80020c2:	bf0c      	ite	eq
 80020c4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80020c8:	f06f 0003 	mvnne.w	r0, #3
}
 80020cc:	b004      	add	sp, #16
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	200018bc 	.word	0x200018bc

080020d4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80020d4:	f000 be8c 	b.w	8002df0 <HAL_GetTick>

080020d8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80020d8:	b918      	cbnz	r0, 80020e2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80020da:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <BSP_LCD_GetPixelFormat+0x10>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80020e2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80020e6:	4770      	bx	lr
 80020e8:	20001910 	.word	0x20001910

080020ec <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80020ec:	b910      	cbnz	r0, 80020f4 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <BSP_LCD_SetActiveLayer+0x10>)
 80020f0:	6099      	str	r1, [r3, #8]
 80020f2:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80020f4:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20001910 	.word	0x20001910

08002100 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8002100:	b918      	cbnz	r0, 800210a <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <BSP_LCD_GetXSize+0x10>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800210a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800210e:	4770      	bx	lr
 8002110:	20001910 	.word	0x20001910

08002114 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8002114:	b918      	cbnz	r0, 800211e <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002116:	4b03      	ldr	r3, [pc, #12]	; (8002124 <BSP_LCD_GetYSize+0x10>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800211e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8002122:	4770      	bx	lr
 8002124:	20001910 	.word	0x20001910

08002128 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800212a:	2418      	movs	r4, #24
 800212c:	4e0b      	ldr	r6, [pc, #44]	; (800215c <BSP_LCD_ReadPixel+0x34>)
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800212e:	2734      	movs	r7, #52	; 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002130:	4360      	muls	r0, r4
 8002132:	1834      	adds	r4, r6, r0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002134:	5830      	ldr	r0, [r6, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002136:	68a5      	ldr	r5, [r4, #8]
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002138:	fb00 1202 	mla	r2, r0, r2, r1
 800213c:	4c08      	ldr	r4, [pc, #32]	; (8002160 <BSP_LCD_ReadPixel+0x38>)
 800213e:	fb07 4405 	mla	r4, r7, r5, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002142:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002144:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002146:	b921      	cbnz	r1, 8002152 <BSP_LCD_ReadPixel+0x2a>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002148:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 800214c:	2000      	movs	r0, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002152:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8002156:	b292      	uxth	r2, r2
 8002158:	e7f8      	b.n	800214c <BSP_LCD_ReadPixel+0x24>
 800215a:	bf00      	nop
 800215c:	20001910 	.word	0x20001910
 8002160:	20001994 	.word	0x20001994

08002164 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002164:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002166:	2418      	movs	r4, #24
 8002168:	4e0a      	ldr	r6, [pc, #40]	; (8002194 <BSP_LCD_WritePixel+0x30>)
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800216a:	2734      	movs	r7, #52	; 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800216c:	4360      	muls	r0, r4
 800216e:	1834      	adds	r4, r6, r0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002170:	5830      	ldr	r0, [r6, r0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002172:	68a5      	ldr	r5, [r4, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002174:	fb00 1202 	mla	r2, r0, r2, r1
 8002178:	4c07      	ldr	r4, [pc, #28]	; (8002198 <BSP_LCD_WritePixel+0x34>)
 800217a:	fb07 4405 	mla	r4, r7, r5, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800217e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002180:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002182:	b919      	cbnz	r1, 800218c <BSP_LCD_WritePixel+0x28>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002184:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8002188:	2000      	movs	r0, #0
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800218c:	b29b      	uxth	r3, r3
 800218e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8002192:	e7f9      	b.n	8002188 <BSP_LCD_WritePixel+0x24>
 8002194:	20001910 	.word	0x20001910
 8002198:	20001994 	.word	0x20001994

0800219c <BSP_LCD_FillRGBRect>:
{
 800219c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	461d      	mov	r5, r3
 80021a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021a4:	4681      	mov	r9, r0
 80021a6:	460f      	mov	r7, r1
 80021a8:	eb03 0802 	add.w	r8, r3, r2
 80021ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021ae:	4614      	mov	r4, r2
      pData += PixelFormatFactor;
 80021b0:	f8df b030 	ldr.w	fp, [pc, #48]	; 80021e4 <BSP_LCD_FillRGBRect+0x48>
 80021b4:	eb03 0a01 	add.w	sl, r3, r1
  for(i = 0; i < Height; i++)
 80021b8:	4544      	cmp	r4, r8
 80021ba:	d00f      	beq.n	80021dc <BSP_LCD_FillRGBRect+0x40>
 80021bc:	463e      	mov	r6, r7
 80021be:	e009      	b.n	80021d4 <BSP_LCD_FillRGBRect+0x38>
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	4631      	mov	r1, r6
 80021c4:	4622      	mov	r2, r4
 80021c6:	4648      	mov	r0, r9
 80021c8:	f7ff ffcc 	bl	8002164 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 80021cc:	f8db 3000 	ldr.w	r3, [fp]
 80021d0:	3601      	adds	r6, #1
 80021d2:	441d      	add	r5, r3
    for(j = 0; j < Width; j++)
 80021d4:	4556      	cmp	r6, sl
 80021d6:	d1f3      	bne.n	80021c0 <BSP_LCD_FillRGBRect+0x24>
  for(i = 0; i < Height; i++)
 80021d8:	3401      	adds	r4, #1
 80021da:	e7ed      	b.n	80021b8 <BSP_LCD_FillRGBRect+0x1c>
}
 80021dc:	2000      	movs	r0, #0
 80021de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	bf00      	nop
 80021e4:	20001928 	.word	0x20001928

080021e8 <BSP_LCD_DrawBitmap>:
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80021ec:	7b1c      	ldrb	r4, [r3, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 80021ee:	f04f 0c18 	mov.w	ip, #24
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80021f2:	7add      	ldrb	r5, [r3, #11]
{
 80021f4:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80021f6:	0424      	lsls	r4, r4, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80021f8:	7d1e      	ldrb	r6, [r3, #20]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80021fa:	7ddf      	ldrb	r7, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 80021fc:	fb0c fc00 	mul.w	ip, ip, r0
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002200:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8002204:	7a9d      	ldrb	r5, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002206:	0436      	lsls	r6, r6, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002208:	f8df b114 	ldr.w	fp, [pc, #276]	; 8002320 <BSP_LCD_DrawBitmap+0x138>
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800220c:	442c      	add	r4, r5
 800220e:	7b5d      	ldrb	r5, [r3, #13]
 8002210:	eb04 6905 	add.w	r9, r4, r5, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002214:	7cdd      	ldrb	r5, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002216:	f8db 4000 	ldr.w	r4, [fp]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800221a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800221e:	7c9d      	ldrb	r5, [r3, #18]
 8002220:	442e      	add	r6, r5
 8002222:	7d5d      	ldrb	r5, [r3, #21]
 8002224:	eb06 6605 	add.w	r6, r6, r5, lsl #24
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002228:	7e1d      	ldrb	r5, [r3, #24]
 800222a:	042d      	lsls	r5, r5, #16
 800222c:	eb05 2507 	add.w	r5, r5, r7, lsl #8
 8002230:	7d9f      	ldrb	r7, [r3, #22]
 8002232:	443d      	add	r5, r7
 8002234:	7e5f      	ldrb	r7, [r3, #25]
 8002236:	eb05 6a07 	add.w	sl, r5, r7, lsl #24
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800223a:	7f5f      	ldrb	r7, [r3, #29]
 800223c:	7f1d      	ldrb	r5, [r3, #28]
 800223e:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002242:	4f33      	ldr	r7, [pc, #204]	; (8002310 <BSP_LCD_DrawBitmap+0x128>)
 8002244:	eb07 0e0c 	add.w	lr, r7, ip
 8002248:	f857 c00c 	ldr.w	ip, [r7, ip]
 800224c:	fb0c 1202 	mla	r2, ip, r2, r1
 8002250:	f8de c008 	ldr.w	ip, [lr, #8]
 8002254:	492f      	ldr	r1, [pc, #188]	; (8002314 <BSP_LCD_DrawBitmap+0x12c>)
 8002256:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800225a:	fb0e 110c 	mla	r1, lr, ip, r1
 800225e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8002260:	fb04 1802 	mla	r8, r4, r2, r1
  if ((bit_pixel/8U) == 4U)
 8002264:	f1a5 0220 	sub.w	r2, r5, #32
 8002268:	2a07      	cmp	r2, #7
 800226a:	d91a      	bls.n	80022a2 <BSP_LCD_DrawBitmap+0xba>
  else if ((bit_pixel/8U) == 2U)
 800226c:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8002270:	2a08      	cmp	r2, #8
 8002272:	bf34      	ite	cc
 8002274:	2202      	movcc	r2, #2
 8002276:	2201      	movcs	r2, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002278:	08ed      	lsrs	r5, r5, #3
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800227a:	9202      	str	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800227c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002280:	4375      	muls	r5, r6
 8002282:	fb05 9402 	mla	r4, r5, r2, r9
  for(index=0; index < height; index++)
 8002286:	f04f 0900 	mov.w	r9, #0
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800228a:	441c      	add	r4, r3
    pbmp -= width*(bit_pixel/8U);
 800228c:	426b      	negs	r3, r5
 800228e:	9303      	str	r3, [sp, #12]
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002290:	2318      	movs	r3, #24
 8002292:	fb03 7700 	mla	r7, r3, r0, r7
  for(index=0; index < height; index++)
 8002296:	45d1      	cmp	r9, sl
 8002298:	d105      	bne.n	80022a6 <BSP_LCD_DrawBitmap+0xbe>
}
 800229a:	2000      	movs	r0, #0
 800229c:	b005      	add	sp, #20
 800229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7e8      	b.n	8002278 <BSP_LCD_DrawBitmap+0x90>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80022a6:	68fb      	ldr	r3, [r7, #12]
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80022a8:	4d1b      	ldr	r5, [pc, #108]	; (8002318 <BSP_LCD_DrawBitmap+0x130>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80022aa:	1e9a      	subs	r2, r3, #2
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80022ac:	4628      	mov	r0, r5
  switch(Lcd_Ctx[Instance].PixelFormat)
 80022ae:	4253      	negs	r3, r2
 80022b0:	4153      	adcs	r3, r2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80022b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  switch(Lcd_Ctx[Instance].PixelFormat)
 80022b6:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80022b8:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80022bc:	22ff      	movs	r2, #255	; 0xff
  hlcd_dma2d.Init.OutputOffset = 0;
 80022be:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80022c0:	652a      	str	r2, [r5, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80022c2:	9a02      	ldr	r2, [sp, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80022c4:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80022c6:	64eb      	str	r3, [r5, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80022c8:	e9c5 3211 	strd	r3, r2, [r5, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <BSP_LCD_DrawBitmap+0x134>)
 80022ce:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80022d0:	f001 f8a2 	bl	8003418 <HAL_DMA2D_Init>
 80022d4:	b988      	cbnz	r0, 80022fa <BSP_LCD_DrawBitmap+0x112>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80022d6:	2101      	movs	r1, #1
 80022d8:	4628      	mov	r0, r5
 80022da:	f001 f971 	bl	80035c0 <HAL_DMA2D_ConfigLayer>
 80022de:	b960      	cbnz	r0, 80022fa <BSP_LCD_DrawBitmap+0x112>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80022e0:	2301      	movs	r3, #1
 80022e2:	4642      	mov	r2, r8
 80022e4:	4621      	mov	r1, r4
 80022e6:	4628      	mov	r0, r5
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4633      	mov	r3, r6
 80022ec:	f001 f8d1 	bl	8003492 <HAL_DMA2D_Start>
 80022f0:	b918      	cbnz	r0, 80022fa <BSP_LCD_DrawBitmap+0x112>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80022f2:	2119      	movs	r1, #25
 80022f4:	4628      	mov	r0, r5
 80022f6:	f001 f8e6 	bl	80034c6 <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 80022fa:	683b      	ldr	r3, [r7, #0]
  for(index=0; index < height; index++)
 80022fc:	f109 0901 	add.w	r9, r9, #1
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8002300:	f8db 2000 	ldr.w	r2, [fp]
 8002304:	fb02 8803 	mla	r8, r2, r3, r8
    pbmp -= width*(bit_pixel/8U);
 8002308:	9b03      	ldr	r3, [sp, #12]
 800230a:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 800230c:	e7c3      	b.n	8002296 <BSP_LCD_DrawBitmap+0xae>
 800230e:	bf00      	nop
 8002310:	20001910 	.word	0x20001910
 8002314:	20001994 	.word	0x20001994
 8002318:	2000192c 	.word	0x2000192c
 800231c:	52001000 	.word	0x52001000
 8002320:	20001928 	.word	0x20001928

08002324 <LL_FillBuffer.constprop.0>:
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8002324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002328:	460c      	mov	r4, r1
 800232a:	461e      	mov	r6, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
 800232c:	2118      	movs	r1, #24
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <LL_FillBuffer.constprop.0+0xa4>)
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8002330:	4615      	mov	r5, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 8002332:	fb01 3000 	mla	r0, r1, r0, r3
 8002336:	68c3      	ldr	r3, [r0, #12]
 8002338:	2b02      	cmp	r3, #2
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 800233a:	e9dd 2708 	ldrd	r2, r7, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800233e:	d13e      	bne.n	80023be <LL_FillBuffer.constprop.0+0x9a>
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002340:	f3c7 1045 	ubfx	r0, r7, #5, #6
 8002344:	f240 1e03 	movw	lr, #259	; 0x103
 8002348:	f3c7 21c4 	ubfx	r1, r7, #11, #5
 800234c:	f240 2c0f 	movw	ip, #527	; 0x20f
 8002350:	fb0e f000 	mul.w	r0, lr, r0
 8002354:	f007 071f 	and.w	r7, r7, #31
 8002358:	fb0c f101 	mul.w	r1, ip, r1
 800235c:	3021      	adds	r0, #33	; 0x21
 800235e:	fb0c f707 	mul.w	r7, ip, r7
 8002362:	3117      	adds	r1, #23
 8002364:	0980      	lsrs	r0, r0, #6
 8002366:	3717      	adds	r7, #23
 8002368:	0989      	lsrs	r1, r1, #6
 800236a:	0200      	lsls	r0, r0, #8
 800236c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002370:	ea40 1097 	orr.w	r0, r0, r7, lsr #6
 8002374:	f040 477f 	orr.w	r7, r0, #4278190080	; 0xff000000
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002378:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80023d0 <LL_FillBuffer.constprop.0+0xac>
 800237c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002380:	e9c8 1301 	strd	r1, r3, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <LL_FillBuffer.constprop.0+0xa8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002386:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002388:	f8c8 200c 	str.w	r2, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
 800238c:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002390:	f001 f842 	bl	8003418 <HAL_DMA2D_Init>
 8002394:	b9a8      	cbnz	r0, 80023c2 <LL_FillBuffer.constprop.0+0x9e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002396:	2101      	movs	r1, #1
 8002398:	4640      	mov	r0, r8
 800239a:	f001 f911 	bl	80035c0 <HAL_DMA2D_ConfigLayer>
 800239e:	b980      	cbnz	r0, 80023c2 <LL_FillBuffer.constprop.0+0x9e>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80023a0:	462b      	mov	r3, r5
 80023a2:	4622      	mov	r2, r4
 80023a4:	4639      	mov	r1, r7
 80023a6:	4640      	mov	r0, r8
 80023a8:	9600      	str	r6, [sp, #0]
 80023aa:	f001 f872 	bl	8003492 <HAL_DMA2D_Start>
 80023ae:	b940      	cbnz	r0, 80023c2 <LL_FillBuffer.constprop.0+0x9e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80023b0:	2119      	movs	r1, #25
 80023b2:	4640      	mov	r0, r8
}
 80023b4:	b002      	add	sp, #8
 80023b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80023ba:	f001 b884 	b.w	80034c6 <HAL_DMA2D_PollForTransfer>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80023be:	2300      	movs	r3, #0
 80023c0:	e7da      	b.n	8002378 <LL_FillBuffer.constprop.0+0x54>
}
 80023c2:	b002      	add	sp, #8
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c8:	20001910 	.word	0x20001910
 80023cc:	52001000 	.word	0x52001000
 80023d0:	2000192c 	.word	0x2000192c

080023d4 <BSP_LCD_FillRect>:
{
 80023d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023d6:	461c      	mov	r4, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80023d8:	2318      	movs	r3, #24
 80023da:	4d0d      	ldr	r5, [pc, #52]	; (8002410 <BSP_LCD_FillRect+0x3c>)
 80023dc:	4343      	muls	r3, r0
 80023de:	18ef      	adds	r7, r5, r3
 80023e0:	58eb      	ldr	r3, [r5, r3]
 80023e2:	fb02 1103 	mla	r1, r2, r3, r1
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <BSP_LCD_FillRect+0x40>)
 80023e8:	68bd      	ldr	r5, [r7, #8]
 80023ea:	2734      	movs	r7, #52	; 0x34
 80023ec:	6816      	ldr	r6, [r2, #0]
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80023ee:	1b1b      	subs	r3, r3, r4
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <BSP_LCD_FillRect+0x44>)
 80023f2:	fb07 2205 	mla	r2, r7, r5, r2
 80023f6:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80023f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	4622      	mov	r2, r4
 8002400:	9b08      	ldr	r3, [sp, #32]
 8002402:	fb06 5101 	mla	r1, r6, r1, r5
 8002406:	f7ff ff8d 	bl	8002324 <LL_FillBuffer.constprop.0>
}
 800240a:	2000      	movs	r0, #0
 800240c:	b003      	add	sp, #12
 800240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002410:	20001910 	.word	0x20001910
 8002414:	20001928 	.word	0x20001928
 8002418:	20001994 	.word	0x20001994

0800241c <BSP_LCD_DrawVLine>:
{
 800241c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800241e:	2418      	movs	r4, #24
 8002420:	4d0c      	ldr	r5, [pc, #48]	; (8002454 <BSP_LCD_DrawVLine+0x38>)
 8002422:	4344      	muls	r4, r0
 8002424:	192f      	adds	r7, r5, r4
 8002426:	592c      	ldr	r4, [r5, r4]
 8002428:	fb02 1104 	mla	r1, r2, r4, r1
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <BSP_LCD_DrawVLine+0x3c>)
 800242e:	68bd      	ldr	r5, [r7, #8]
 8002430:	2734      	movs	r7, #52	; 0x34
 8002432:	6816      	ldr	r6, [r2, #0]
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002434:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <BSP_LCD_DrawVLine+0x40>)
 8002438:	fb07 2205 	mla	r2, r7, r5, r2
 800243c:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800243e:	9a08      	ldr	r2, [sp, #32]
 8002440:	fb06 5101 	mla	r1, r6, r1, r5
 8002444:	9201      	str	r2, [sp, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	9400      	str	r4, [sp, #0]
 800244a:	f7ff ff6b 	bl	8002324 <LL_FillBuffer.constprop.0>
}
 800244e:	2000      	movs	r0, #0
 8002450:	b003      	add	sp, #12
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	20001910 	.word	0x20001910
 8002458:	20001928 	.word	0x20001928
 800245c:	20001994 	.word	0x20001994

08002460 <BSP_LCD_DrawHLine>:
{
 8002460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002462:	4616      	mov	r6, r2
 8002464:	461a      	mov	r2, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002466:	2318      	movs	r3, #24
 8002468:	4c0c      	ldr	r4, [pc, #48]	; (800249c <BSP_LCD_DrawHLine+0x3c>)
 800246a:	4343      	muls	r3, r0
 800246c:	18e5      	adds	r5, r4, r3
 800246e:	58e3      	ldr	r3, [r4, r3]
 8002470:	fb03 1106 	mla	r1, r3, r6, r1
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <BSP_LCD_DrawHLine+0x40>)
 8002476:	68ac      	ldr	r4, [r5, #8]
 8002478:	2534      	movs	r5, #52	; 0x34
 800247a:	681e      	ldr	r6, [r3, #0]
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <BSP_LCD_DrawHLine+0x44>)
 800247e:	fb05 3304 	mla	r3, r5, r4, r3
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002482:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002484:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002486:	9b06      	ldr	r3, [sp, #24]
 8002488:	fb06 5101 	mla	r1, r6, r1, r5
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2301      	movs	r3, #1
 8002490:	9400      	str	r4, [sp, #0]
 8002492:	f7ff ff47 	bl	8002324 <LL_FillBuffer.constprop.0>
}
 8002496:	4620      	mov	r0, r4
 8002498:	b002      	add	sp, #8
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	20001910 	.word	0x20001910
 80024a0:	20001928 	.word	0x20001928
 80024a4:	20001994 	.word	0x20001994

080024a8 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <BSP_LCD_Reset+0x60>)
 80024aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80024ae:	f042 0201 	orr.w	r2, r2, #1
{
 80024b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 80024b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80024b8:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024be:	2504      	movs	r5, #4
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024c0:	4c12      	ldr	r4, [pc, #72]	; (800250c <BSP_LCD_Reset+0x64>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024c2:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 80024c4:	f003 0301 	and.w	r3, r3, #1
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2700      	movs	r7, #0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024ca:	eb0d 0105 	add.w	r1, sp, r5
 80024ce:	4620      	mov	r0, r4
  LCD_RESET_GPIO_CLK_ENABLE();
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024d6:	e9cd 5601 	strd	r5, r6, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024de:	f001 fb75 	bl	8003bcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80024e2:	463a      	mov	r2, r7
 80024e4:	4629      	mov	r1, r5
 80024e6:	4620      	mov	r0, r4
 80024e8:	f001 fcfa 	bl	8003ee0 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80024ec:	2014      	movs	r0, #20
 80024ee:	f000 fc85 	bl	8002dfc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80024f2:	4632      	mov	r2, r6
 80024f4:	4629      	mov	r1, r5
 80024f6:	4620      	mov	r0, r4
 80024f8:	f001 fcf2 	bl	8003ee0 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80024fc:	200a      	movs	r0, #10
 80024fe:	f000 fc7d 	bl	8002dfc <HAL_Delay>
}
 8002502:	b007      	add	sp, #28
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002506:	bf00      	nop
 8002508:	58024400 	.word	0x58024400
 800250c:	58020000 	.word	0x58020000

08002510 <MX_LTDC_Init>:
  hltdc->Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 8002510:	2200      	movs	r2, #0
 8002512:	4911      	ldr	r1, [pc, #68]	; (8002558 <MX_LTDC_Init+0x48>)
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 8002514:	f04f 0c1d 	mov.w	ip, #29
  hltdc->Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8002518:	6102      	str	r2, [r0, #16]
  hltdc->Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 800251a:	e9c0 1200 	strd	r1, r2, [r0]
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 800251e:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 8002522:	2202      	movs	r2, #2
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8002524:	218f      	movs	r1, #143	; 0x8f
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 8002526:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 800252a:	2222      	movs	r2, #34	; 0x22
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 800252c:	f240 3c0f 	movw	ip, #783	; 0x30f
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8002530:	e9c0 1207 	strd	r1, r2, [r0, #28]
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8002534:	f240 2202 	movw	r2, #514	; 0x202
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 8002538:	f240 311f 	movw	r1, #799	; 0x31f
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 800253c:	e9c0 c209 	strd	ip, r2, [r0, #36]	; 0x24
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 8002540:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8002544:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254c:	8682      	strh	r2, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0xFF;
 800254e:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
  return HAL_LTDC_Init(hltdc);
 8002552:	f002 b903 	b.w	800475c <HAL_LTDC_Init>
 8002556:	bf00      	nop
 8002558:	50001000 	.word	0x50001000

0800255c <MX_LTDC_ConfigLayer>:
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800255e:	6915      	ldr	r5, [r2, #16]
{
 8002560:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.WindowX0 = Config->X0;
 8002562:	6817      	ldr	r7, [r2, #0]
  pLayerCfg.Alpha0 = 0;
 8002564:	f04f 0cff 	mov.w	ip, #255	; 0xff
  pLayerCfg.WindowY0 = Config->Y0;
 8002568:	6896      	ldr	r6, [r2, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800256a:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
  pLayerCfg.WindowX1 = Config->X1;
 800256e:	6854      	ldr	r4, [r2, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 8002570:	68d3      	ldr	r3, [r2, #12]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002572:	9505      	str	r5, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 8002574:	2500      	movs	r5, #0
  pLayerCfg.FBStartAdress = Config->Address;
 8002576:	6952      	ldr	r2, [r2, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002578:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800257a:	1be4      	subs	r4, r4, r7
  pLayerCfg.WindowY1 = Config->Y1;
 800257c:	9304      	str	r3, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800257e:	1b9b      	subs	r3, r3, r6
  pLayerCfg.FBStartAdress = Config->Address;
 8002580:	920a      	str	r2, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002582:	460a      	mov	r2, r1
 8002584:	a901      	add	r1, sp, #4
  pLayerCfg.WindowX0 = Config->X0;
 8002586:	9701      	str	r7, [sp, #4]
  pLayerCfg.WindowY0 = Config->Y0;
 8002588:	9603      	str	r6, [sp, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800258a:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800258c:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800258e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8002592:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.Alpha0 = 0;
 8002596:	e9cd c506 	strd	ip, r5, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800259a:	f04f 0c07 	mov.w	ip, #7
 800259e:	e9cd ec08 	strd	lr, ip, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80025a2:	f002 f947 	bl	8004834 <HAL_LTDC_ConfigLayer>
}
 80025a6:	b00f      	add	sp, #60	; 0x3c
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025aa <MX_LTDC_ClockConfig>:
{
 80025aa:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80025ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
{
 80025b0:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80025b2:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80025b4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80025b6:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 80025ba:	2205      	movs	r2, #5
 80025bc:	23a0      	movs	r3, #160	; 0xa0
 80025be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80025c2:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80025c4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 32;
 80025c8:	2320      	movs	r3, #32
 80025ca:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 80025cc:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80025ce:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80025d2:	f002 ffb9 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
}
 80025d6:	b031      	add	sp, #196	; 0xc4
 80025d8:	f85d fb04 	ldr.w	pc, [sp], #4

080025dc <BSP_LCD_InitEx>:
{
 80025dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80025e0:	2901      	cmp	r1, #1
{
 80025e2:	b0ab      	sub	sp, #172	; 0xac
 80025e4:	4605      	mov	r5, r0
 80025e6:	461e      	mov	r6, r3
 80025e8:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80025ec:	f200 8134 	bhi.w	8002858 <BSP_LCD_InitEx+0x27c>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	f040 8131 	bne.w	8002858 <BSP_LCD_InitEx+0x27c>
    switch(PixelFormat)
 80025f6:	2a02      	cmp	r2, #2
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80025f8:	4c99      	ldr	r4, [pc, #612]	; (8002860 <BSP_LCD_InitEx+0x284>)
 80025fa:	4b9a      	ldr	r3, [pc, #616]	; (8002864 <BSP_LCD_InitEx+0x288>)
    BSP_LCD_Reset(Instance);
 80025fc:	f04f 0000 	mov.w	r0, #0
      PixelFormatFactor = 2U;
 8002600:	bf0c      	ite	eq
 8002602:	4611      	moveq	r1, r2
 8002604:	2104      	movne	r1, #4
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002606:	4f98      	ldr	r7, [pc, #608]	; (8002868 <BSP_LCD_InitEx+0x28c>)
      PixelFormatFactor = 2U;
 8002608:	bf08      	it	eq
 800260a:	4615      	moveq	r5, r2
 800260c:	6019      	str	r1, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800260e:	f04f 0b80 	mov.w	fp, #128	; 0x80
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002612:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002614:	f04f 0a01 	mov.w	sl, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002618:	f04f 0802 	mov.w	r8, #2
    Lcd_Ctx[Instance].YSize  = Height;
 800261c:	e9c7 6900 	strd	r6, r9, [r7]
    BSP_LCD_Reset(Instance);
 8002620:	f7ff ff42 	bl	80024a8 <BSP_LCD_Reset>
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8002624:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 8002628:	eb0d 010b 	add.w	r1, sp, fp
 800262c:	488f      	ldr	r0, [pc, #572]	; (800286c <BSP_LCD_InitEx+0x290>)
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002636:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800263a:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	9308      	str	r3, [sp, #32]
 8002644:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002646:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 800264a:	f001 fabf 	bl	8003bcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 800264e:	4652      	mov	r2, sl
 8002650:	4659      	mov	r1, fp
 8002652:	4886      	ldr	r0, [pc, #536]	; (800286c <BSP_LCD_InitEx+0x290>)
 8002654:	f001 fc44 	bl	8003ee0 <HAL_GPIO_WritePin>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002658:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800265c:	f04f 0b40 	mov.w	fp, #64	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002660:	a920      	add	r1, sp, #128	; 0x80
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002662:	ea43 030a 	orr.w	r3, r3, sl
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002666:	4882      	ldr	r0, [pc, #520]	; (8002870 <BSP_LCD_InitEx+0x294>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002668:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800266c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002670:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002674:	ea03 030a 	and.w	r3, r3, sl
 8002678:	9309      	str	r3, [sp, #36]	; 0x24
 800267a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800267c:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002680:	f001 faa4 	bl	8003bcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002684:	4652      	mov	r2, sl
 8002686:	4659      	mov	r1, fp
 8002688:	4879      	ldr	r0, [pc, #484]	; (8002870 <BSP_LCD_InitEx+0x294>)
 800268a:	f001 fc29 	bl	8003ee0 <HAL_GPIO_WritePin>
    hlcd_ltdc.Instance = LTDC;
 800268e:	4a79      	ldr	r2, [pc, #484]	; (8002874 <BSP_LCD_InitEx+0x298>)
 8002690:	4b79      	ldr	r3, [pc, #484]	; (8002878 <BSP_LCD_InitEx+0x29c>)
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002692:	a920      	add	r1, sp, #128	; 0x80
    hlcd_dma2d.Instance = DMA2D;
 8002694:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8002884 <BSP_LCD_InitEx+0x2a8>
    hlcd_ltdc.Instance = LTDC;
 8002698:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800269a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    hlcd_dma2d.Instance = DMA2D;
 800269e:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8002888 <BSP_LCD_InitEx+0x2ac>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026a2:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80026a6:	4875      	ldr	r0, [pc, #468]	; (800287c <BSP_LCD_InitEx+0x2a0>)
    hlcd_dma2d.Instance = DMA2D;
 80026a8:	f8cb a000 	str.w	sl, [fp]
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026ac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80026b0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	9304      	str	r3, [sp, #16]
 80026ba:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80026c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	9305      	str	r3, [sp, #20]
 80026d2:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026dc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80026e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	9306      	str	r3, [sp, #24]
 80026ea:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80026ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80026f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	9307      	str	r3, [sp, #28]
 8002702:	9b07      	ldr	r3, [sp, #28]
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002704:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002708:	e9cd 3820 	strd	r3, r8, [sp, #128]	; 0x80
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800270e:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002712:	f04f 080e 	mov.w	r8, #14
 8002716:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800271a:	f001 fa57 	bl	8003bcc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800271e:	f64f 73ff 	movw	r3, #65535	; 0xffff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002722:	a920      	add	r1, sp, #128	; 0x80
 8002724:	4856      	ldr	r0, [pc, #344]	; (8002880 <BSP_LCD_InitEx+0x2a4>)
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002726:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002728:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800272c:	f001 fa4e 	bl	8003bcc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002730:	23ff      	movs	r3, #255	; 0xff
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002732:	a920      	add	r1, sp, #128	; 0x80
 8002734:	484d      	ldr	r0, [pc, #308]	; (800286c <BSP_LCD_InitEx+0x290>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002736:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002738:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800273c:	f001 fa46 	bl	8003bcc <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002740:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800274c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002750:	f023 0308 	bic.w	r3, r3, #8
 8002754:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
 8002758:	f8db 3000 	ldr.w	r3, [fp]
 800275c:	4553      	cmp	r3, sl
 800275e:	d113      	bne.n	8002788 <BSP_LCD_InitEx+0x1ac>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002760:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800276c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	9b03      	ldr	r3, [sp, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002778:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002780:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002782:	f023 0310 	bic.w	r3, r3, #16
 8002786:	67e3      	str	r3, [r4, #124]	; 0x7c
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8002788:	2308      	movs	r3, #8
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 800278a:	f8df a100 	ldr.w	sl, [pc, #256]	; 800288c <BSP_LCD_InitEx+0x2b0>
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 800278e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8002890 <BSP_LCD_InitEx+0x2b4>
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8002792:	a910      	add	r1, sp, #64	; 0x40
 8002794:	a820      	add	r0, sp, #128	; 0x80
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 8002796:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 800279a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 800279e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 80027a2:	f7ff f91d 	bl	80019e0 <EXC7200_RegisterBusIO>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	db13      	blt.n	80027d2 <BSP_LCD_InitEx+0x1f6>
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 80027aa:	a902      	add	r1, sp, #8
 80027ac:	a820      	add	r0, sp, #128	; 0x80
 80027ae:	f7ff f8a3 	bl	80018f8 <EXC7200_ReadID>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	db0d      	blt.n	80027d2 <BSP_LCD_InitEx+0x1f6>
        if(exc7200_id != EXC7200_ID)
 80027b6:	9b02      	ldr	r3, [sp, #8]
 80027b8:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 80027bc:	d11b      	bne.n	80027f6 <BSP_LCD_InitEx+0x21a>
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80027be:	482e      	ldr	r0, [pc, #184]	; (8002878 <BSP_LCD_InitEx+0x29c>)
 80027c0:	f7ff fef3 	bl	80025aa <MX_LTDC_ClockConfig>
 80027c4:	b340      	cbz	r0, 8002818 <BSP_LCD_InitEx+0x23c>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80027c6:	f06f 0403 	mvn.w	r4, #3
}
 80027ca:	4620      	mov	r0, r4
 80027cc:	b02b      	add	sp, #172	; 0xac
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80027d2:	f06f 0404 	mvn.w	r4, #4
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 80027d6:	2380      	movs	r3, #128	; 0x80
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80027d8:	a90a      	add	r1, sp, #40	; 0x28
 80027da:	a816      	add	r0, sp, #88	; 0x58
        io_comp_ctx.Init    = BSP_I2C1_Init;
 80027dc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 80027e0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 80027e4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80027e8:	f7ff fa76 	bl	8001cd8 <TS3510_RegisterBusIO>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	da05      	bge.n	80027fc <BSP_LCD_InitEx+0x220>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80027f0:	f06f 0404 	mvn.w	r4, #4
 80027f4:	e7e9      	b.n	80027ca <BSP_LCD_InitEx+0x1ee>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80027f6:	f06f 0406 	mvn.w	r4, #6
 80027fa:	e7ec      	b.n	80027d6 <BSP_LCD_InitEx+0x1fa>
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 80027fc:	a901      	add	r1, sp, #4
 80027fe:	a816      	add	r0, sp, #88	; 0x58
 8002800:	f7ff f9c0 	bl	8001b84 <TS3510_ReadID>
 8002804:	2800      	cmp	r0, #0
 8002806:	dbf3      	blt.n	80027f0 <BSP_LCD_InitEx+0x214>
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002808:	9a01      	ldr	r2, [sp, #4]
 800280a:	f243 5310 	movw	r3, #13584	; 0x3510
 800280e:	429a      	cmp	r2, r3
 8002810:	bf18      	it	ne
 8002812:	f06f 0406 	mvnne.w	r4, #6
 8002816:	e7d8      	b.n	80027ca <BSP_LCD_InitEx+0x1ee>
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002818:	464a      	mov	r2, r9
 800281a:	4631      	mov	r1, r6
 800281c:	4816      	ldr	r0, [pc, #88]	; (8002878 <BSP_LCD_InitEx+0x29c>)
 800281e:	f7ff fe77 	bl	8002510 <MX_LTDC_Init>
 8002822:	2800      	cmp	r0, #0
 8002824:	d1cf      	bne.n	80027c6 <BSP_LCD_InitEx+0x1ea>
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002826:	f000 f86d 	bl	8002904 <BSP_SDRAM_Init>
 800282a:	4604      	mov	r4, r0
 800282c:	2800      	cmp	r0, #0
 800282e:	d1ca      	bne.n	80027c6 <BSP_LCD_InitEx+0x1ea>
            config.Address     = LCD_FB_START_ADDRESS;
 8002830:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002834:	4601      	mov	r1, r0
 8002836:	aa16      	add	r2, sp, #88	; 0x58
            config.PixelFormat = ltdc_pixel_format;
 8002838:	951a      	str	r5, [sp, #104]	; 0x68
            config.Address     = LCD_FB_START_ADDRESS;
 800283a:	931b      	str	r3, [sp, #108]	; 0x6c
            config.X1          = Width;
 800283c:	e9cd 0616 	strd	r0, r6, [sp, #88]	; 0x58
            config.Y1          = Height;
 8002840:	e9cd 0918 	strd	r0, r9, [sp, #96]	; 0x60
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <BSP_LCD_InitEx+0x29c>)
 8002846:	f7ff fe89 	bl	800255c <MX_LTDC_ConfigLayer>
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 800284a:	2301      	movs	r3, #1
              ret = BSP_ERROR_PERIPH_FAILURE;
 800284c:	2800      	cmp	r0, #0
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 800284e:	617b      	str	r3, [r7, #20]
              ret = BSP_ERROR_PERIPH_FAILURE;
 8002850:	bf18      	it	ne
 8002852:	f06f 0403 	mvnne.w	r4, #3
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002856:	e7b8      	b.n	80027ca <BSP_LCD_InitEx+0x1ee>
    ret = BSP_ERROR_WRONG_PARAM;
 8002858:	f06f 0401 	mvn.w	r4, #1
 800285c:	e7b5      	b.n	80027ca <BSP_LCD_InitEx+0x1ee>
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	20001928 	.word	0x20001928
 8002868:	20001910 	.word	0x20001910
 800286c:	58022800 	.word	0x58022800
 8002870:	58020000 	.word	0x58020000
 8002874:	50001000 	.word	0x50001000
 8002878:	20001994 	.word	0x20001994
 800287c:	58022000 	.word	0x58022000
 8002880:	58022400 	.word	0x58022400
 8002884:	2000192c 	.word	0x2000192c
 8002888:	52001000 	.word	0x52001000
 800288c:	08001dbd 	.word	0x08001dbd
 8002890:	080020a1 	.word	0x080020a1

08002894 <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002894:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
{
 8002898:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800289a:	2200      	movs	r2, #0
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80028a2:	f7ff fe9b 	bl	80025dc <BSP_LCD_InitEx>
}
 80028a6:	b003      	add	sp, #12
 80028a8:	f85d fb04 	ldr.w	pc, [sp], #4

080028ac <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80028ac:	2201      	movs	r2, #1
 80028ae:	4914      	ldr	r1, [pc, #80]	; (8002900 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 80028b0:	2302      	movs	r3, #2
{
 80028b2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80028b4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80028b8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80028ba:	2104      	movs	r1, #4
 80028bc:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80028be:	2440      	movs	r4, #64	; 0x40
{
 80028c0:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80028c2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80028c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80028ca:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80028cc:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80028d6:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80028da:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80028de:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80028e2:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 80028e4:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80028e8:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 80028ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80028ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80028f2:	f003 fca5 	bl	8006240 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 80028f6:	3800      	subs	r0, #0
 80028f8:	bf18      	it	ne
 80028fa:	2001      	movne	r0, #1
 80028fc:	b008      	add	sp, #32
 80028fe:	bd10      	pop	{r4, pc}
 8002900:	52004140 	.word	0x52004140

08002904 <BSP_SDRAM_Init>:
{
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 8002906:	4605      	mov	r5, r0
{
 8002908:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >= SDRAM_INSTANCES_NBR)
 800290a:	2800      	cmp	r0, #0
 800290c:	f040 80dd 	bne.w	8002aca <BSP_SDRAM_Init+0x1c6>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002910:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <BSP_SDRAM_Init+0x1d4>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002912:	2703      	movs	r7, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002914:	a909      	add	r1, sp, #36	; 0x24
 8002916:	4871      	ldr	r0, [pc, #452]	; (8002adc <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002918:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800291c:	4c70      	ldr	r4, [pc, #448]	; (8002ae0 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800291e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002922:	4e70      	ldr	r6, [pc, #448]	; (8002ae4 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002924:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002928:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800292c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002930:	9201      	str	r2, [sp, #4]
 8002932:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8002934:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002940:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002944:	f002 0201 	and.w	r2, r2, #1
 8002948:	9202      	str	r2, [sp, #8]
 800294a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800294c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002950:	f042 0208 	orr.w	r2, r2, #8
 8002954:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800295c:	f002 0208 	and.w	r2, r2, #8
 8002960:	9203      	str	r2, [sp, #12]
 8002962:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002968:	f042 0210 	orr.w	r2, r2, #16
 800296c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002974:	f002 0210 	and.w	r2, r2, #16
 8002978:	9204      	str	r2, [sp, #16]
 800297a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800297c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800298c:	f002 0220 	and.w	r2, r2, #32
 8002990:	9205      	str	r2, [sp, #20]
 8002992:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029a4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80029a8:	9206      	str	r2, [sp, #24]
 80029aa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029c0:	9207      	str	r2, [sp, #28]
 80029c2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029d0:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	9308      	str	r3, [sp, #32]
 80029dc:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029de:	2301      	movs	r3, #1
 80029e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80029e4:	230c      	movs	r3, #12
 80029e6:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80029ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80029f0:	f001 f8ec 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80029f4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029f8:	a909      	add	r1, sp, #36	; 0x24
 80029fa:	483b      	ldr	r0, [pc, #236]	; (8002ae8 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80029fc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029fe:	f001 f8e5 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a02:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a06:	a909      	add	r1, sp, #36	; 0x24
 8002a08:	4838      	ldr	r0, [pc, #224]	; (8002aec <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a0a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a0c:	f001 f8de 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8002a10:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a14:	a909      	add	r1, sp, #36	; 0x24
 8002a16:	4836      	ldr	r0, [pc, #216]	; (8002af0 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8002a18:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a1a:	f001 f8d7 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002a22:	a909      	add	r1, sp, #36	; 0x24
 8002a24:	4833      	ldr	r0, [pc, #204]	; (8002af4 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a26:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002a28:	f001 f8d0 	bl	8003bcc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a2c:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a30:	a909      	add	r1, sp, #36	; 0x24
 8002a32:	4831      	ldr	r0, [pc, #196]	; (8002af8 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a36:	f001 f8c9 	bl	8003bcc <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002a3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002a42:	f240 2002 	movw	r0, #514	; 0x202
 8002a46:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002a4a:	6334      	str	r4, [r6, #48]	; 0x30
 8002a4c:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002a4e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002a52:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002a56:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002a58:	2220      	movs	r2, #32

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8002a5a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8002a5c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8002a5e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002a62:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002a6c:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002a6e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8002a70:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8002a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
 8002a78:	f001 ff78 	bl	800496c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f001 ff06 	bl	800488e <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8002a82:	462a      	mov	r2, r5
 8002a84:	210f      	movs	r1, #15
 8002a86:	207a      	movs	r0, #122	; 0x7a
 8002a88:	f000 f9e2 	bl	8002e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8002a8c:	207a      	movs	r0, #122	; 0x7a
 8002a8e:	f000 fa11 	bl	8002eb4 <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 8002a92:	4630      	mov	r0, r6
 8002a94:	f7ff ff0a 	bl	80028ac <MX_SDRAM_BANK2_Init>
 8002a98:	b9d0      	cbnz	r0, 8002ad0 <BSP_SDRAM_Init+0x1cc>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a9a:	4919      	ldr	r1, [pc, #100]	; (8002b00 <BSP_SDRAM_Init+0x1fc>)
 8002a9c:	2308      	movs	r3, #8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 8002a9e:	e9c1 3700 	strd	r3, r7, [r1]
        pRegMode.RefreshRate     = REFRESH_COUNT;
 8002aa2:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 8002aa6:	6108      	str	r0, [r1, #16]
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 8002aa8:	e9c1 3002 	strd	r3, r0, [r1, #8]
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 8002aac:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 8002aae:	e9c1 3005 	strd	r3, r0, [r1, #20]
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8002ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8002ab6:	4630      	mov	r0, r6
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8002ab8:	61cb      	str	r3, [r1, #28]
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8002aba:	f7ff f819 	bl	8001af0 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	bf18      	it	ne
 8002ac2:	f06f 0004 	mvnne.w	r0, #4
}
 8002ac6:	b00f      	add	sp, #60	; 0x3c
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8002aca:	f06f 0001 	mvn.w	r0, #1
 8002ace:	e7fa      	b.n	8002ac6 <BSP_SDRAM_Init+0x1c2>
        ret = BSP_ERROR_NO_INIT;
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002ad4:	e7f7      	b.n	8002ac6 <BSP_SDRAM_Init+0x1c2>
 8002ad6:	bf00      	nop
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020c00 	.word	0x58020c00
 8002ae0:	20001a70 	.word	0x20001a70
 8002ae4:	20001a3c 	.word	0x20001a3c
 8002ae8:	58021000 	.word	0x58021000
 8002aec:	58021400 	.word	0x58021400
 8002af0:	58021800 	.word	0x58021800
 8002af4:	58021c00 	.word	0x58021c00
 8002af8:	58022000 	.word	0x58022000
 8002afc:	52000040 	.word	0x52000040
 8002b00:	20001adc 	.word	0x20001adc

08002b04 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8002b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b08:	460c      	mov	r4, r1
 8002b0a:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	f040 8092 	bne.w	8002c36 <BSP_TS_Init+0x132>
 8002b12:	680b      	ldr	r3, [r1, #0]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8002b1a:	f080 808c 	bcs.w	8002c36 <BSP_TS_Init+0x132>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8002b1e:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8002b20:	1e51      	subs	r1, r2, #1
 8002b22:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8002b26:	f080 8086 	bcs.w	8002c36 <BSP_TS_Init+0x132>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	bf28      	it	cs
 8002b2e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8002b30:	68e2      	ldr	r2, [r4, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d87f      	bhi.n	8002c36 <BSP_TS_Init+0x132>
  EXC7200_IO_t              IOCtx;
  static EXC7200_Object_t   EXC7200Obj;
  uint32_t exc7200_id       = 0U;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8002b36:	2308      	movs	r3, #8
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002b38:	4d40      	ldr	r5, [pc, #256]	; (8002c3c <BSP_TS_Init+0x138>)
  IOCtx.Init        = BSP_I2C1_Init;
 8002b3a:	4e41      	ldr	r6, [pc, #260]	; (8002c40 <BSP_TS_Init+0x13c>)
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8002b3c:	4f41      	ldr	r7, [pc, #260]	; (8002c44 <BSP_TS_Init+0x140>)
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002b3e:	eb0d 0103 	add.w	r1, sp, r3
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8002b42:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002c60 <BSP_TS_Init+0x15c>
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002b46:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002c64 <BSP_TS_Init+0x160>
  IOCtx.GetTick     = BSP_GetTick;
 8002b4a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8002c68 <BSP_TS_Init+0x164>
  uint32_t exc7200_id       = 0U;
 8002b4e:	9001      	str	r0, [sp, #4]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002b50:	4628      	mov	r0, r5
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8002b52:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C1_Init;
 8002b56:	9602      	str	r6, [sp, #8]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8002b58:	9703      	str	r7, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8002b5a:	f8cd 8018 	str.w	r8, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002b5e:	f8cd 9014 	str.w	r9, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8002b62:	f8cd a01c 	str.w	sl, [sp, #28]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002b66:	f7fe ff3b 	bl	80019e0 <EXC7200_RegisterBusIO>
 8002b6a:	b1b0      	cbz	r0, 8002b9a <BSP_TS_Init+0x96>
static int32_t TS3510_Probe(uint32_t Instance)
{
  int32_t ret              = BSP_ERROR_NONE;
  TS3510_IO_t              IOCtx;
  static TS3510_Object_t   TS3510Obj;
  uint32_t ts3510_id       = 0U;
 8002b6c:	2300      	movs	r3, #0
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002b6e:	4d36      	ldr	r5, [pc, #216]	; (8002c48 <BSP_TS_Init+0x144>)
 8002b70:	a902      	add	r1, sp, #8
  IOCtx.GetTick     = BSP_GetTick;
 8002b72:	f8cd a01c 	str.w	sl, [sp, #28]
  uint32_t ts3510_id       = 0U;
 8002b76:	9301      	str	r3, [sp, #4]
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002b78:	2380      	movs	r3, #128	; 0x80
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002b7a:	4628      	mov	r0, r5
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002b7c:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8002b80:	e9cd 6702 	strd	r6, r7, [sp, #8]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002b84:	e9cd 9805 	strd	r9, r8, [sp, #20]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002b88:	f7ff f8a6 	bl	8001cd8 <TS3510_RegisterBusIO>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d039      	beq.n	8002c04 <BSP_TS_Init+0x100>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b90:	f06f 0006 	mvn.w	r0, #6
}
 8002b94:	b008      	add	sp, #32
 8002b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(EXC7200_ReadID(&EXC7200Obj, &exc7200_id) != EXC7200_OK)
 8002b9a:	a901      	add	r1, sp, #4
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f7fe feab 	bl	80018f8 <EXC7200_ReadID>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d1e2      	bne.n	8002b6c <BSP_TS_Init+0x68>
  else if(exc7200_id != EXC7200_ID)
 8002ba6:	9b01      	ldr	r3, [sp, #4]
 8002ba8:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 8002bac:	d1de      	bne.n	8002b6c <BSP_TS_Init+0x68>
    Ts_CompObj[Instance] = &EXC7200Obj;
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <BSP_TS_Init+0x148>)
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 8002bb0:	4628      	mov	r0, r5
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 8002bb2:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <BSP_TS_Init+0x14c>)
    Ts_CompObj[Instance] = &EXC7200Obj;
 8002bb4:	601d      	str	r5, [r3, #0]
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <BSP_TS_Init+0x150>)
 8002bb8:	6013      	str	r3, [r2, #0]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4798      	blx	r3
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d1d4      	bne.n	8002b6c <BSP_TS_Init+0x68>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8002bc2:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002bc4:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8002bc6:	4d24      	ldr	r5, [pc, #144]	; (8002c58 <BSP_TS_Init+0x154>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <BSP_TS_Init+0x148>)
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8002bca:	602b      	str	r3, [r5, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8002bcc:	6863      	ldr	r3, [r4, #4]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002bce:	6810      	ldr	r0, [r2, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8002bd0:	606b      	str	r3, [r5, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	60ab      	str	r3, [r5, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8002bd6:	68e3      	ldr	r3, [r4, #12]
 8002bd8:	60eb      	str	r3, [r5, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <BSP_TS_Init+0x14c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4798      	blx	r3
 8002be2:	2800      	cmp	r0, #0
 8002be4:	db24      	blt.n	8002c30 <BSP_TS_Init+0x12c>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8002be6:	9b03      	ldr	r3, [sp, #12]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8002be8:	2000      	movs	r0, #0
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8002bea:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8002bec:	612b      	str	r3, [r5, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8002bee:	9b04      	ldr	r3, [sp, #16]
 8002bf0:	616b      	str	r3, [r5, #20]
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	441a      	add	r2, r3
 8002bf6:	3201      	adds	r2, #1
 8002bf8:	61aa      	str	r2, [r5, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8002bfa:	6862      	ldr	r2, [r4, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61eb      	str	r3, [r5, #28]
 8002c02:	e7c7      	b.n	8002b94 <BSP_TS_Init+0x90>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(TS3510_ReadID(&TS3510Obj, &ts3510_id) != TS3510_OK)
 8002c04:	a901      	add	r1, sp, #4
 8002c06:	4628      	mov	r0, r5
 8002c08:	f7fe ffbc 	bl	8001b84 <TS3510_ReadID>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1bf      	bne.n	8002b90 <BSP_TS_Init+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ts3510_id != TS3510_ID)
 8002c10:	9a01      	ldr	r2, [sp, #4]
 8002c12:	f243 5310 	movw	r3, #13584	; 0x3510
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d1ba      	bne.n	8002b90 <BSP_TS_Init+0x8c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &TS3510Obj;
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <BSP_TS_Init+0x148>)
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8002c1c:	4628      	mov	r0, r5
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <BSP_TS_Init+0x14c>)
    Ts_CompObj[Instance] = &TS3510Obj;
 8002c20:	601d      	str	r5, [r3, #0]
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <BSP_TS_Init+0x158>)
 8002c24:	6013      	str	r3, [r2, #0]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4798      	blx	r3
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d0c9      	beq.n	8002bc2 <BSP_TS_Init+0xbe>
 8002c2e:	e7af      	b.n	8002b90 <BSP_TS_Init+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c30:	f06f 0004 	mvn.w	r0, #4
 8002c34:	e7ae      	b.n	8002b94 <BSP_TS_Init+0x90>
    ret = BSP_ERROR_WRONG_PARAM;
 8002c36:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002c3a:	e7ab      	b.n	8002b94 <BSP_TS_Init+0x90>
 8002c3c:	20001afc 	.word	0x20001afc
 8002c40:	08001dbd 	.word	0x08001dbd
 8002c44:	08001d2d 	.word	0x08001d2d
 8002c48:	20001b24 	.word	0x20001b24
 8002c4c:	20001b4c 	.word	0x20001b4c
 8002c50:	20001b70 	.word	0x20001b70
 8002c54:	20000008 	.word	0x20000008
 8002c58:	20001b50 	.word	0x20001b50
 8002c5c:	20000038 	.word	0x20000038
 8002c60:	080020a1 	.word	0x080020a1
 8002c64:	0800206d 	.word	0x0800206d
 8002c68:	080020d5 	.word	0x080020d5

08002c6c <BSP_TS_GetState>:
{
 8002c6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c70:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d153      	bne.n	8002d1e <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <BSP_TS_GetState+0xb8>)
 8002c78:	a901      	add	r1, sp, #4
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <BSP_TS_GetState+0xbc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6810      	ldr	r0, [r2, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	4798      	blx	r3
 8002c84:	2800      	cmp	r0, #0
 8002c86:	db47      	blt.n	8002d18 <BSP_TS_GetState+0xac>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8002c88:	4928      	ldr	r1, [pc, #160]	; (8002d2c <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
 8002c8a:	9801      	ldr	r0, [sp, #4]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8002c8c:	e9d1 6506 	ldrd	r6, r5, [r1, #24]
    else if(state.TouchDetected != 0U)
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d03d      	beq.n	8002d10 <BSP_TS_GetState+0xa4>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8002c94:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8002c98:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8002c9c:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 8002ca0:	e9dd c702 	ldrd	ip, r7, [sp, #8]
        x_oriented = state.TouchY;
 8002ca4:	bf19      	ittee	ne
 8002ca6:	463b      	movne	r3, r7
        y_oriented = state.TouchX;
 8002ca8:	4662      	movne	r2, ip
      y_oriented = state.TouchY;
 8002caa:	463a      	moveq	r2, r7
      x_oriented = state.TouchX;
 8002cac:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8002cae:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8002cb2:	bf1c      	itt	ne
 8002cb4:	f108 33ff 	addne.w	r3, r8, #4294967295
 8002cb8:	eba3 030c 	subne.w	r3, r3, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8002cbc:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8002cc0:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8002cc4:	bf18      	it	ne
 8002cc6:	ebac 0207 	subne.w	r2, ip, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002cca:	680f      	ldr	r7, [r1, #0]
 8002ccc:	437b      	muls	r3, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002cce:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8002cd0:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002cd2:	437a      	muls	r2, r7
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002cd4:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002cd6:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002cda:	fbb2 f2fc 	udiv	r2, r2, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8002cde:	42b3      	cmp	r3, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002ce0:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002ce2:	60a2      	str	r2, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8002ce4:	bf8c      	ite	hi
 8002ce6:	eba3 0c06 	subhi.w	ip, r3, r6
 8002cea:	eba6 0c03 	subls.w	ip, r6, r3
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8002cee:	42aa      	cmp	r2, r5
 8002cf0:	bf8c      	ite	hi
 8002cf2:	1b50      	subhi	r0, r2, r5
 8002cf4:	1aa8      	subls	r0, r5, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002cf6:	4567      	cmp	r7, ip
 8002cf8:	d301      	bcc.n	8002cfe <BSP_TS_GetState+0x92>
 8002cfa:	4287      	cmp	r7, r0
 8002cfc:	d205      	bcs.n	8002d0a <BSP_TS_GetState+0x9e>
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8002cfe:	e9c1 3206 	strd	r3, r2, [r1, #24]
  int32_t ret = BSP_ERROR_NONE;
 8002d02:	2000      	movs	r0, #0
}
 8002d04:	b004      	add	sp, #16
 8002d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8002d0a:	e9c4 6501 	strd	r6, r5, [r4, #4]
 8002d0e:	e7f8      	b.n	8002d02 <BSP_TS_GetState+0x96>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8002d10:	e9c4 0600 	strd	r0, r6, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8002d14:	60a5      	str	r5, [r4, #8]
 8002d16:	e7f5      	b.n	8002d04 <BSP_TS_GetState+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d18:	f06f 0004 	mvn.w	r0, #4
 8002d1c:	e7f2      	b.n	8002d04 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 8002d1e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002d22:	e7ef      	b.n	8002d04 <BSP_TS_GetState+0x98>
 8002d24:	20001b70 	.word	0x20001b70
 8002d28:	20001b4c 	.word	0x20001b4c
 8002d2c:	20001b50 	.word	0x20001b50

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_InitTick+0x40>)
{
 8002d34:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	b90a      	cbnz	r2, 8002d3e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_InitTick+0x44>)
 8002d48:	6810      	ldr	r0, [r2, #0]
 8002d4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d4e:	f000 f8d1 	bl	8002ef4 <HAL_SYSTICK_Config>
 8002d52:	4604      	mov	r4, r0
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d58:	2d0f      	cmp	r5, #15
 8002d5a:	d8ee      	bhi.n	8002d3a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f000 f874 	bl	8002e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_InitTick+0x48>)
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8002d6e:	e7e5      	b.n	8002d3c <HAL_InitTick+0xc>
 8002d70:	20000068 	.word	0x20000068
 8002d74:	20000000 	.word	0x20000000
 8002d78:	2000006c 	.word	0x2000006c

08002d7c <HAL_Init>:
{
 8002d7c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f000 f854 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d84:	f002 f8e2 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8002d88:	490f      	ldr	r1, [pc, #60]	; (8002dc8 <HAL_Init+0x4c>)
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_Init+0x50>)
 8002d8c:	698b      	ldr	r3, [r1, #24]
 8002d8e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d9a:	698b      	ldr	r3, [r1, #24]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_Init+0x54>)
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa20 f303 	lsr.w	r3, r0, r3
 8002dac:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_Init+0x58>)
 8002db0:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7ff ffbc 	bl	8002d30 <HAL_InitTick>
 8002db8:	4604      	mov	r4, r0
 8002dba:	b918      	cbnz	r0, 8002dc4 <HAL_Init+0x48>
  HAL_MspInit();
 8002dbc:	f7fe fc2c 	bl	8001618 <HAL_MspInit>
}
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dc4:	2401      	movs	r4, #1
 8002dc6:	e7fb      	b.n	8002dc0 <HAL_Init+0x44>
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	080087bd 	.word	0x080087bd
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002dd8:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <HAL_IncTick+0x10>)
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_IncTick+0x14>)
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	440b      	add	r3, r1
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001b74 	.word	0x20001b74
 8002dec:	20000068 	.word	0x20000068

08002df0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002df0:	4b01      	ldr	r3, [pc, #4]	; (8002df8 <HAL_GetTick+0x8>)
 8002df2:	6818      	ldr	r0, [r3, #0]
}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20001b74 	.word	0x20001b74

08002dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fff6 	bl	8002df0 <HAL_GetTick>
 8002e04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002e08:	bf1e      	ittt	ne
 8002e0a:	4b04      	ldrne	r3, [pc, #16]	; (8002e1c <HAL_Delay+0x20>)
 8002e0c:	781b      	ldrbne	r3, [r3, #0]
 8002e0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e10:	f7ff ffee 	bl	8002df0 <HAL_GetTick>
 8002e14:	1b43      	subs	r3, r0, r5
 8002e16:	42a3      	cmp	r3, r4
 8002e18:	d3fa      	bcc.n	8002e10 <HAL_Delay+0x14>
  {
  }
}
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000068 	.word	0x20000068

08002e20 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002e20:	4b01      	ldr	r3, [pc, #4]	; (8002e28 <HAL_GetREVID+0x8>)
 8002e22:	6818      	ldr	r0, [r3, #0]
}
 8002e24:	0c00      	lsrs	r0, r0, #16
 8002e26:	4770      	bx	lr
 8002e28:	5c001000 	.word	0x5c001000

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4907      	ldr	r1, [pc, #28]	; (8002e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e2e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3a:	0412      	lsls	r2, r2, #16
 8002e3c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002e48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b530      	push	{r4, r5, lr}
 8002e54:	68dc      	ldr	r4, [r3, #12]
 8002e56:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	bf28      	it	cs
 8002e64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6c:	bf8c      	ite	hi
 8002e6e:	3c03      	subhi	r4, #3
 8002e70:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e72:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002e76:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	fa03 f304 	lsl.w	r3, r3, r4
 8002e88:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002e90:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002e92:	db06      	blt.n	8002ea2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002e98:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002e9c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ea0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	f000 000f 	and.w	r0, r0, #15
 8002ea6:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_NVIC_SetPriority+0x60>)
 8002ea8:	5413      	strb	r3, [r2, r0]
 8002eaa:	e7f9      	b.n	8002ea0 <HAL_NVIC_SetPriority+0x50>
 8002eac:	e000ed00 	.word	0xe000ed00
 8002eb0:	e000ed14 	.word	0xe000ed14

08002eb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	db07      	blt.n	8002ec8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb8:	2301      	movs	r3, #1
 8002eba:	0941      	lsrs	r1, r0, #5
 8002ebc:	f000 001f 	and.w	r0, r0, #31
 8002ec0:	4a02      	ldr	r2, [pc, #8]	; (8002ecc <HAL_NVIC_EnableIRQ+0x18>)
 8002ec2:	4083      	lsls	r3, r0
 8002ec4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ed4:	4905      	ldr	r1, [pc, #20]	; (8002eec <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ed8:	68ca      	ldr	r2, [r1, #12]
 8002eda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
 8002ee2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002ee6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002ee8:	e7fd      	b.n	8002ee6 <HAL_NVIC_SystemReset+0x16>
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00
 8002ef0:	05fa0004 	.word	0x05fa0004

08002ef4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	3801      	subs	r0, #1
 8002ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002efa:	d20b      	bcs.n	8002f14 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <HAL_SYSTICK_Config+0x24>)
 8002f02:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f04:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f06:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f10:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002f14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff ff66 	bl	8002df0 <HAL_GetTick>
 8002f24:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f26:	b145      	cbz	r5, 8002f3a <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f28:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d006      	beq.n	8002f3e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	656b      	str	r3, [r5, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f34:	2300      	movs	r3, #0
 8002f36:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e153      	b.n	80031e6 <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f3e:	682c      	ldr	r4, [r5, #0]
 8002f40:	4ea9      	ldr	r6, [pc, #676]	; (80031e8 <HAL_DMA_Abort+0x2cc>)
 8002f42:	42b4      	cmp	r4, r6
 8002f44:	d04a      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f46:	4ba9      	ldr	r3, [pc, #676]	; (80031ec <HAL_DMA_Abort+0x2d0>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d047      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d044      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f52:	3318      	adds	r3, #24
 8002f54:	429c      	cmp	r4, r3
 8002f56:	d041      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f58:	3318      	adds	r3, #24
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d03e      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f5e:	3318      	adds	r3, #24
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d03b      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f64:	3318      	adds	r3, #24
 8002f66:	429c      	cmp	r4, r3
 8002f68:	d038      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d035      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d031      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f78:	3318      	adds	r3, #24
 8002f7a:	429c      	cmp	r4, r3
 8002f7c:	d02e      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f7e:	3318      	adds	r3, #24
 8002f80:	429c      	cmp	r4, r3
 8002f82:	d02b      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f84:	3318      	adds	r3, #24
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d028      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d025      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f90:	3318      	adds	r3, #24
 8002f92:	429c      	cmp	r4, r3
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f96:	3318      	adds	r3, #24
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	d01f      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	429c      	cmp	r4, r3
 8002fa0:	d01c      	beq.n	8002fdc <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	f023 030e 	bic.w	r3, r3, #14
 8002fa8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002faa:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_DMA_Abort+0x2d4>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d01f      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	429c      	cmp	r4, r3
 8002fb4:	d01c      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	d019      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d016      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	d013      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fc8:	3314      	adds	r3, #20
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d010      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fce:	3314      	adds	r3, #20
 8002fd0:	429c      	cmp	r4, r3
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d112      	bne.n	8003000 <HAL_DMA_Abort+0xe4>
 8002fda:	e009      	b.n	8002ff0 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fdc:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fde:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fe0:	f023 031e 	bic.w	r3, r3, #30
 8002fe4:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fe6:	6963      	ldr	r3, [r4, #20]
 8002fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fec:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fee:	d176      	bne.n	80030de <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ff0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	f040 80ab 	bne.w	8003156 <HAL_DMA_Abort+0x23a>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	07db      	lsls	r3, r3, #31
 800300c:	f100 80cd 	bmi.w	80031aa <HAL_DMA_Abort+0x28e>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003010:	682b      	ldr	r3, [r5, #0]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003012:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003014:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	6da8      	ldr	r0, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003018:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800301c:	f000 80d1 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003020:	4972      	ldr	r1, [pc, #456]	; (80031ec <HAL_DMA_Abort+0x2d0>)
 8003022:	428b      	cmp	r3, r1
 8003024:	f000 80cd 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003028:	3118      	adds	r1, #24
 800302a:	428b      	cmp	r3, r1
 800302c:	f000 80c9 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003030:	3118      	adds	r1, #24
 8003032:	428b      	cmp	r3, r1
 8003034:	f000 80c5 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003038:	3118      	adds	r1, #24
 800303a:	428b      	cmp	r3, r1
 800303c:	f000 80c1 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003040:	3118      	adds	r1, #24
 8003042:	428b      	cmp	r3, r1
 8003044:	f000 80bd 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003048:	3118      	adds	r1, #24
 800304a:	428b      	cmp	r3, r1
 800304c:	f000 80b9 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003050:	3118      	adds	r1, #24
 8003052:	428b      	cmp	r3, r1
 8003054:	f000 80b5 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003058:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800305c:	428b      	cmp	r3, r1
 800305e:	f000 80b0 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003062:	3118      	adds	r1, #24
 8003064:	428b      	cmp	r3, r1
 8003066:	f000 80ac 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 800306a:	3118      	adds	r1, #24
 800306c:	428b      	cmp	r3, r1
 800306e:	f000 80a8 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003072:	3118      	adds	r1, #24
 8003074:	428b      	cmp	r3, r1
 8003076:	f000 80a4 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 800307a:	3118      	adds	r1, #24
 800307c:	428b      	cmp	r3, r1
 800307e:	f000 80a0 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003082:	3118      	adds	r1, #24
 8003084:	428b      	cmp	r3, r1
 8003086:	f000 809c 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 800308a:	3118      	adds	r1, #24
 800308c:	428b      	cmp	r3, r1
 800308e:	f000 8098 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
 8003092:	3118      	adds	r1, #24
 8003094:	428b      	cmp	r3, r1
 8003096:	f000 8094 	beq.w	80031c2 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	6042      	str	r2, [r0, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030a2:	4a53      	ldr	r2, [pc, #332]	; (80031f0 <HAL_DMA_Abort+0x2d4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f000 8092 	beq.w	80031ce <HAL_DMA_Abort+0x2b2>
 80030aa:	3214      	adds	r2, #20
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f000 808e 	beq.w	80031ce <HAL_DMA_Abort+0x2b2>
 80030b2:	3214      	adds	r2, #20
 80030b4:	4293      	cmp	r3, r2
 80030b6:	f000 808a 	beq.w	80031ce <HAL_DMA_Abort+0x2b2>
 80030ba:	3214      	adds	r2, #20
 80030bc:	4293      	cmp	r3, r2
 80030be:	f000 8086 	beq.w	80031ce <HAL_DMA_Abort+0x2b2>
 80030c2:	3214      	adds	r2, #20
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f000 8082 	beq.w	80031ce <HAL_DMA_Abort+0x2b2>
 80030ca:	3214      	adds	r2, #20
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d07e      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 80030d0:	3214      	adds	r2, #20
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d07b      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 80030d6:	3214      	adds	r2, #20
 80030d8:	4293      	cmp	r3, r2
 80030da:	d17e      	bne.n	80031da <HAL_DMA_Abort+0x2be>
 80030dc:	e077      	b.n	80031ce <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030de:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_DMA_Abort+0x2d0>)
 80030e0:	429c      	cmp	r4, r3
 80030e2:	d085      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 80030e4:	3318      	adds	r3, #24
 80030e6:	429c      	cmp	r4, r3
 80030e8:	d082      	beq.n	8002ff0 <HAL_DMA_Abort+0xd4>
 80030ea:	3318      	adds	r3, #24
 80030ec:	429c      	cmp	r4, r3
 80030ee:	f43f af7f 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 80030f2:	3318      	adds	r3, #24
 80030f4:	429c      	cmp	r4, r3
 80030f6:	f43f af7b 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 80030fa:	3318      	adds	r3, #24
 80030fc:	429c      	cmp	r4, r3
 80030fe:	f43f af77 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003102:	3318      	adds	r3, #24
 8003104:	429c      	cmp	r4, r3
 8003106:	f43f af73 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 800310a:	3318      	adds	r3, #24
 800310c:	429c      	cmp	r4, r3
 800310e:	f43f af6f 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003112:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003116:	429c      	cmp	r4, r3
 8003118:	f43f af6a 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 800311c:	3318      	adds	r3, #24
 800311e:	429c      	cmp	r4, r3
 8003120:	f43f af66 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003124:	3318      	adds	r3, #24
 8003126:	429c      	cmp	r4, r3
 8003128:	f43f af62 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 800312c:	3318      	adds	r3, #24
 800312e:	429c      	cmp	r4, r3
 8003130:	f43f af5e 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003134:	3318      	adds	r3, #24
 8003136:	429c      	cmp	r4, r3
 8003138:	f43f af5a 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 800313c:	3318      	adds	r3, #24
 800313e:	429c      	cmp	r4, r3
 8003140:	f43f af56 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003144:	3318      	adds	r3, #24
 8003146:	429c      	cmp	r4, r3
 8003148:	f43f af52 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 800314c:	3318      	adds	r3, #24
 800314e:	429c      	cmp	r4, r3
 8003150:	f43f af4e 	beq.w	8002ff0 <HAL_DMA_Abort+0xd4>
 8003154:	e729      	b.n	8002faa <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_DMA_Abort+0x2d0>)
 8003158:	429c      	cmp	r4, r3
 800315a:	f43f af51 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 800315e:	3318      	adds	r3, #24
 8003160:	429c      	cmp	r4, r3
 8003162:	f43f af4d 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 8003166:	3318      	adds	r3, #24
 8003168:	429c      	cmp	r4, r3
 800316a:	f43f af49 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 800316e:	3318      	adds	r3, #24
 8003170:	429c      	cmp	r4, r3
 8003172:	f43f af45 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 8003176:	3318      	adds	r3, #24
 8003178:	429c      	cmp	r4, r3
 800317a:	f43f af41 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 800317e:	3318      	adds	r3, #24
 8003180:	429c      	cmp	r4, r3
 8003182:	f43f af3d 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 8003186:	3318      	adds	r3, #24
 8003188:	429c      	cmp	r4, r3
 800318a:	f43f af39 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 800318e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003192:	429c      	cmp	r4, r3
 8003194:	f43f af34 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 8003198:	3318      	adds	r3, #24
 800319a:	429c      	cmp	r4, r3
 800319c:	f43f af30 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 80031a0:	3318      	adds	r3, #24
 80031a2:	429c      	cmp	r4, r3
 80031a4:	f43f af2c 	beq.w	8003000 <HAL_DMA_Abort+0xe4>
 80031a8:	e72a      	b.n	8003000 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031aa:	f7ff fe21 	bl	8002df0 <HAL_GetTick>
 80031ae:	1bc0      	subs	r0, r0, r7
 80031b0:	2805      	cmp	r0, #5
 80031b2:	f67f af29 	bls.w	8003008 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b6:	2320      	movs	r3, #32
 80031b8:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80031ba:	2303      	movs	r3, #3
 80031bc:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 80031c0:	e6b8      	b.n	8002f34 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031c2:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031c4:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031cc:	d112      	bne.n	80031f4 <HAL_DMA_Abort+0x2d8>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ce:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 80031d2:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13b      	bne.n	8003252 <HAL_DMA_Abort+0x336>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031dc:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80031de:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80031e2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  }

  return HAL_OK;
}
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e8:	40020010 	.word	0x40020010
 80031ec:	40020028 	.word	0x40020028
 80031f0:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_DMA_Abort+0x348>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d0e9      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 80031fa:	3218      	adds	r2, #24
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d0e6      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003200:	3218      	adds	r2, #24
 8003202:	4293      	cmp	r3, r2
 8003204:	d0e3      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003206:	3218      	adds	r2, #24
 8003208:	4293      	cmp	r3, r2
 800320a:	d0e0      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 800320c:	3218      	adds	r2, #24
 800320e:	4293      	cmp	r3, r2
 8003210:	d0dd      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003212:	3218      	adds	r2, #24
 8003214:	4293      	cmp	r3, r2
 8003216:	d0da      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003218:	3218      	adds	r2, #24
 800321a:	4293      	cmp	r3, r2
 800321c:	d0d7      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 800321e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003222:	4293      	cmp	r3, r2
 8003224:	d0d3      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003226:	3218      	adds	r2, #24
 8003228:	4293      	cmp	r3, r2
 800322a:	d0d0      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 800322c:	3218      	adds	r2, #24
 800322e:	4293      	cmp	r3, r2
 8003230:	d0cd      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003232:	3218      	adds	r2, #24
 8003234:	4293      	cmp	r3, r2
 8003236:	d0ca      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003238:	3218      	adds	r2, #24
 800323a:	4293      	cmp	r3, r2
 800323c:	d0c7      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 800323e:	3218      	adds	r2, #24
 8003240:	4293      	cmp	r3, r2
 8003242:	d0c4      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003244:	3218      	adds	r2, #24
 8003246:	4293      	cmp	r3, r2
 8003248:	d0c1      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 800324a:	3218      	adds	r2, #24
 800324c:	4293      	cmp	r3, r2
 800324e:	d0be      	beq.n	80031ce <HAL_DMA_Abort+0x2b2>
 8003250:	e727      	b.n	80030a2 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	e7bb      	b.n	80031da <HAL_DMA_Abort+0x2be>
 8003262:	bf00      	nop
 8003264:	40020028 	.word	0x40020028

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003268:	b510      	push	{r4, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800326a:	b128      	cbz	r0, 8003278 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800326c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003270:	2b02      	cmp	r3, #2
 8003272:	d003      	beq.n	800327c <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003278:	2001      	movs	r0, #1
 800327a:	e05d      	b.n	8003338 <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800327c:	6803      	ldr	r3, [r0, #0]
 800327e:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_DMA_Abort_IT+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d051      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 8003284:	3218      	adds	r2, #24
 8003286:	4293      	cmp	r3, r2
 8003288:	d04e      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 800328a:	3218      	adds	r2, #24
 800328c:	4293      	cmp	r3, r2
 800328e:	d04b      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 8003290:	3218      	adds	r2, #24
 8003292:	4293      	cmp	r3, r2
 8003294:	d048      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 8003296:	3218      	adds	r2, #24
 8003298:	4293      	cmp	r3, r2
 800329a:	d045      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 800329c:	3218      	adds	r2, #24
 800329e:	4293      	cmp	r3, r2
 80032a0:	d042      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032a2:	3218      	adds	r2, #24
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03f      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032a8:	3218      	adds	r2, #24
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d03c      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032ae:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d038      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032b6:	3218      	adds	r2, #24
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d035      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032bc:	3218      	adds	r2, #24
 80032be:	4293      	cmp	r3, r2
 80032c0:	d032      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032c2:	3218      	adds	r2, #24
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02f      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032c8:	3218      	adds	r2, #24
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02c      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032ce:	3218      	adds	r2, #24
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d029      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032d4:	3218      	adds	r2, #24
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d026      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
 80032da:	3218      	adds	r2, #24
 80032dc:	4293      	cmp	r3, r2
 80032de:	d023      	beq.n	8003328 <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f022 020e 	bic.w	r2, r2, #14
 80032e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_DMA_Abort_IT+0x118>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d121      	bne.n	800333a <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032f6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003300:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	2301      	movs	r3, #1
 800330a:	4093      	lsls	r3, r2
 800330c:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330e:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8003312:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003314:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003316:	b32b      	cbz	r3, 8003364 <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331e:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003320:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e01d      	b.n	8003364 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003328:	2204      	movs	r2, #4
 800332a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8003336:	2000      	movs	r0, #0
}
 8003338:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <HAL_DMA_Abort_IT+0x11c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d0da      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 8003340:	3214      	adds	r2, #20
 8003342:	4293      	cmp	r3, r2
 8003344:	d0d7      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 8003346:	3214      	adds	r2, #20
 8003348:	4293      	cmp	r3, r2
 800334a:	d0d4      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 800334c:	3214      	adds	r2, #20
 800334e:	4293      	cmp	r3, r2
 8003350:	d0d1      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 8003352:	3214      	adds	r2, #20
 8003354:	4293      	cmp	r3, r2
 8003356:	d0ce      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 8003358:	3214      	adds	r2, #20
 800335a:	4293      	cmp	r3, r2
 800335c:	d0cb      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
 800335e:	3214      	adds	r2, #20
 8003360:	4293      	cmp	r3, r2
 8003362:	d0c8      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8003364:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8003366:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003368:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800336c:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800336e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8003372:	b10b      	cbz	r3, 8003378 <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
 8003374:	4798      	blx	r3
 8003376:	e7de      	b.n	8003336 <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
 8003378:	4618      	mov	r0, r3
 800337a:	e7dd      	b.n	8003338 <HAL_DMA_Abort_IT+0xd0>
 800337c:	40020010 	.word	0x40020010
 8003380:	58025408 	.word	0x58025408
 8003384:	5802541c 	.word	0x5802541c

08003388 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003388:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800338a:	6804      	ldr	r4, [r0, #0]
 800338c:	9d04      	ldr	r5, [sp, #16]
 800338e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003390:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003394:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8003398:	4333      	orrs	r3, r6
 800339a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800339c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800339e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80033a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a4:	d130      	bne.n	8003408 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80033a6:	6885      	ldr	r5, [r0, #8]
 80033a8:	b11d      	cbz	r5, 80033b2 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80033aa:	2d01      	cmp	r5, #1
 80033ac:	d103      	bne.n	80033b6 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80033ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80033b2:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033b6:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80033b8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80033bc:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80033c0:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033c2:	d107      	bne.n	80033d4 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80033c4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 80033c6:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80033c8:	02c9      	lsls	r1, r1, #11
 80033ca:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 80033ce:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80033d2:	e7ee      	b.n	80033b2 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033d4:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80033d6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033da:	d10a      	bne.n	80033f2 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 80033dc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80033de:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80033e0:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 80033e2:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80033e4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 80033e8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80033ec:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80033f0:	e7df      	b.n	80033b2 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 80033f2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80033f4:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033f6:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80033f8:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033fa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80033fe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003402:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003406:	e7d4      	b.n	80033b2 <DMA2D_SetConfig+0x2a>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8003408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800340c:	d101      	bne.n	8003412 <DMA2D_SetConfig+0x8a>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800340e:	6161      	str	r1, [r4, #20]
 8003410:	e7d0      	b.n	80033b4 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003412:	60e1      	str	r1, [r4, #12]
}
 8003414:	e7ce      	b.n	80033b4 <DMA2D_SetConfig+0x2c>

08003416 <HAL_DMA2D_MspInit>:
}
 8003416:	4770      	bx	lr

08003418 <HAL_DMA2D_Init>:
{
 8003418:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 800341a:	4604      	mov	r4, r0
 800341c:	2800      	cmp	r0, #0
 800341e:	d036      	beq.n	800348e <HAL_DMA2D_Init+0x76>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003420:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8003424:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003428:	b91b      	cbnz	r3, 8003432 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 800342a:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800342e:	f7ff fff2 	bl	8003416 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003432:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003434:	69e0      	ldr	r0, [r4, #28]
 8003436:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003438:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003440:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8003448:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003452:	68a2      	ldr	r2, [r4, #8]
 8003454:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8003458:	4302      	orrs	r2, r0
 800345a:	f021 0101 	bic.w	r1, r1, #1
 800345e:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003460:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003462:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003466:	0c12      	lsrs	r2, r2, #16
 8003468:	0412      	lsls	r2, r2, #16
 800346a:	430a      	orrs	r2, r1
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800346e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003470:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8003474:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8003478:	0552      	lsls	r2, r2, #21
 800347a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800347e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003480:	430a      	orrs	r2, r1
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003484:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003486:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003488:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800348c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800348e:	2001      	movs	r0, #1
 8003490:	e7fc      	b.n	800348c <HAL_DMA2D_Init+0x74>

08003492 <HAL_DMA2D_Start>:
{
 8003492:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8003494:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8003498:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800349a:	2d01      	cmp	r5, #1
 800349c:	f04f 0502 	mov.w	r5, #2
 80034a0:	d00f      	beq.n	80034c2 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034a2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 80034a6:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80034a8:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80034aa:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80034ae:	9500      	str	r5, [sp, #0]
 80034b0:	f7ff ff6a 	bl	8003388 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80034b4:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80034b6:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	4333      	orrs	r3, r6
 80034bc:	6013      	str	r3, [r2, #0]
}
 80034be:	b002      	add	sp, #8
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80034c2:	4628      	mov	r0, r5
 80034c4:	e7fb      	b.n	80034be <HAL_DMA2D_Start+0x2c>

080034c6 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80034c6:	2300      	movs	r3, #0
{
 80034c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80034ca:	9301      	str	r3, [sp, #4]
{
 80034cc:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80034ce:	6803      	ldr	r3, [r0, #0]
{
 80034d0:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	07db      	lsls	r3, r3, #31
 80034d6:	d418      	bmi.n	800350a <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80034dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034de:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80034e0:	069e      	lsls	r6, r3, #26
 80034e2:	d506      	bpl.n	80034f2 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80034e4:	f7ff fc84 	bl	8002df0 <HAL_GetTick>
 80034e8:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	06d2      	lsls	r2, r2, #27
 80034f0:	d53e      	bpl.n	8003570 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	2212      	movs	r2, #18
  return HAL_OK;
 80034f6:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034f8:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8003500:	2300      	movs	r3, #0
 8003502:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 8003506:	b002      	add	sp, #8
 8003508:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800350a:	f7ff fc71 	bl	8002df0 <HAL_GetTick>
 800350e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	0792      	lsls	r2, r2, #30
 8003516:	d4df      	bmi.n	80034d8 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800351c:	9a01      	ldr	r2, [sp, #4]
 800351e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003522:	d014      	beq.n	800354e <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003524:	9a01      	ldr	r2, [sp, #4]
 8003526:	0695      	lsls	r5, r2, #26
 8003528:	d503      	bpl.n	8003532 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800352a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800352c:	f042 0202 	orr.w	r2, r2, #2
 8003530:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003532:	9a01      	ldr	r2, [sp, #4]
 8003534:	07d0      	lsls	r0, r2, #31
 8003536:	d503      	bpl.n	8003540 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003538:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003540:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003542:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003544:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003548:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        return HAL_ERROR;
 800354c:	e7d8      	b.n	8003500 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 800354e:	1c69      	adds	r1, r5, #1
 8003550:	d0df      	beq.n	8003512 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7ff fc4d 	bl	8002df0 <HAL_GetTick>
 8003556:	1b80      	subs	r0, r0, r6
 8003558:	42a8      	cmp	r0, r5
 800355a:	d801      	bhi.n	8003560 <HAL_DMA2D_PollForTransfer+0x9a>
 800355c:	2d00      	cmp	r5, #0
 800355e:	d1d7      	bne.n	8003510 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003560:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003562:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003564:	f043 0320 	orr.w	r3, r3, #32
 8003568:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800356a:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800356e:	e7c7      	b.n	8003500 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003574:	9a01      	ldr	r2, [sp, #4]
 8003576:	f012 0f29 	tst.w	r2, #41	; 0x29
 800357a:	d016      	beq.n	80035aa <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800357c:	9a01      	ldr	r2, [sp, #4]
 800357e:	0716      	lsls	r6, r2, #28
 8003580:	d503      	bpl.n	800358a <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003584:	f042 0204 	orr.w	r2, r2, #4
 8003588:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800358a:	9a01      	ldr	r2, [sp, #4]
 800358c:	0695      	lsls	r5, r2, #26
 800358e:	d503      	bpl.n	8003598 <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003590:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003592:	f042 0202 	orr.w	r2, r2, #2
 8003596:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003598:	9a01      	ldr	r2, [sp, #4]
 800359a:	07d0      	lsls	r0, r2, #31
 800359c:	d503      	bpl.n	80035a6 <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800359e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80035a6:	2229      	movs	r2, #41	; 0x29
 80035a8:	e7cb      	b.n	8003542 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 80035aa:	1c69      	adds	r1, r5, #1
 80035ac:	d09e      	beq.n	80034ec <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7ff fc1f 	bl	8002df0 <HAL_GetTick>
 80035b2:	1b80      	subs	r0, r0, r6
 80035b4:	42a8      	cmp	r0, r5
 80035b6:	d8d3      	bhi.n	8003560 <HAL_DMA2D_PollForTransfer+0x9a>
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	d196      	bne.n	80034ea <HAL_DMA2D_PollForTransfer+0x24>
 80035bc:	e7d0      	b.n	8003560 <HAL_DMA2D_PollForTransfer+0x9a>
	...

080035c0 <HAL_DMA2D_ConfigLayer>:
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80035c2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f04f 0302 	mov.w	r3, #2
 80035cc:	d032      	beq.n	8003634 <HAL_DMA2D_ConfigLayer+0x74>
 80035ce:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035d0:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 80035d4:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035d8:	221c      	movs	r2, #28
 80035da:	fb02 0201 	mla	r2, r2, r1, r0
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80035de:	6b93      	ldr	r3, [r2, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035e0:	e9d2 450b 	ldrd	r4, r5, [r2, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80035e4:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80035ea:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80035ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035ee:	4323      	orrs	r3, r4
 80035f0:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035f4:	f1a4 0509 	sub.w	r5, r4, #9
 80035f8:	2d01      	cmp	r5, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80035fa:	bf96      	itet	ls
 80035fc:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003600:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003604:	4313      	orrls	r3, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003606:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003608:	b9b1      	cbnz	r1, 8003638 <HAL_DMA2D_ConfigLayer+0x78>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800360a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800360c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800360e:	4919      	ldr	r1, [pc, #100]	; (8003674 <HAL_DMA2D_ConfigLayer+0xb4>)
 8003610:	ea01 0104 	and.w	r1, r1, r4
 8003614:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003618:	6a83      	ldr	r3, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800361a:	6251      	str	r1, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800361c:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800361e:	d803      	bhi.n	8003628 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003620:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003622:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003626:	6293      	str	r3, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003628:	2301      	movs	r3, #1
 800362a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800362e:	2300      	movs	r3, #0
 8003630:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  __HAL_LOCK(hdma2d);
 8003634:	4618      	mov	r0, r3
}
 8003636:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003638:	2c0b      	cmp	r4, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800363a:	bf05      	ittet	eq
 800363c:	241c      	moveq	r4, #28
      regMask  |= DMA2D_FGPFCCR_CSS;
 800363e:	4e0e      	ldreq	r6, [pc, #56]	; (8003678 <HAL_DMA2D_ConfigLayer+0xb8>)
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003640:	4e0e      	ldrne	r6, [pc, #56]	; (800367c <HAL_DMA2D_ConfigLayer+0xbc>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003642:	fb04 0401 	mlaeq	r4, r4, r1, r0
 8003646:	bf04      	itt	eq
 8003648:	6c24      	ldreq	r4, [r4, #64]	; 0x40
 800364a:	ea43 4384 	orreq.w	r3, r3, r4, lsl #18
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800364e:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003650:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003652:	ea24 0406 	bic.w	r4, r4, r6
 8003656:	ea43 0304 	orr.w	r3, r3, r4
 800365a:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800365c:	f04f 031c 	mov.w	r3, #28
 8003660:	fb03 0101 	mla	r1, r3, r1, r0
 8003664:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003666:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003668:	d8de      	bhi.n	8003628 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800366a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800366c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e7d9      	b.n	8003628 <HAL_DMA2D_ConfigLayer+0x68>
 8003674:	00ccfff0 	.word	0x00ccfff0
 8003678:	ff3f000f 	.word	0xff3f000f
 800367c:	ff33000f 	.word	0xff33000f

08003680 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_FLASH_Unlock+0x44>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	07d2      	lsls	r2, r2, #31
 8003686:	d406      	bmi.n	8003696 <HAL_FLASH_Unlock+0x16>
      return HAL_ERROR;
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_FLASH_Unlock+0x44>)
 800368a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800368e:	f010 0001 	ands.w	r0, r0, #1
 8003692:	d10a      	bne.n	80036aa <HAL_FLASH_Unlock+0x2a>
 8003694:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8003696:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <HAL_FLASH_Unlock+0x48>)
 8003698:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800369a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800369e:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	07db      	lsls	r3, r3, #31
 80036a4:	d5f0      	bpl.n	8003688 <HAL_FLASH_Unlock+0x8>
      return HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 80036a8:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_FLASH_Unlock+0x48>)
 80036ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 80036b0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80036b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80036b8:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80036bc:	f000 0001 	and.w	r0, r0, #1
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	52002000 	.word	0x52002000
 80036c8:	45670123 	.word	0x45670123

080036cc <HAL_FLASH_OB_Unlock>:
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_FLASH_OB_Unlock+0x1c>)
 80036ce:	6998      	ldr	r0, [r3, #24]
 80036d0:	f010 0001 	ands.w	r0, r0, #1
 80036d4:	d007      	beq.n	80036e6 <HAL_FLASH_OB_Unlock+0x1a>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 80036d6:	4a05      	ldr	r2, [pc, #20]	; (80036ec <HAL_FLASH_OB_Unlock+0x20>)
 80036d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 80036da:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 80036de:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80036e0:	6998      	ldr	r0, [r3, #24]
 80036e2:	f000 0001 	and.w	r0, r0, #1
      return HAL_ERROR;
    }
  }

  return HAL_OK;
}
 80036e6:	4770      	bx	lr
 80036e8:	52002000 	.word	0x52002000
 80036ec:	08192a3b 	.word	0x08192a3b

080036f0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	4605      	mov	r5, r0
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
  uint32_t errorflag = 0;
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7ff fb7a 	bl	8002df0 <HAL_GetTick>
#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80036fc:	4f27      	ldr	r7, [pc, #156]	; (800379c <FLASH_WaitForLastOperation+0xac>)
 80036fe:	2c02      	cmp	r4, #2
  uint32_t tickstart = HAL_GetTick();
 8003700:	4606      	mov	r6, r0
  if (Bank == FLASH_BANK_2)
 8003702:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80037a0 <FLASH_WaitForLastOperation+0xb0>
    bsyflag = FLASH_FLAG_QW_BANK2;
 8003706:	bf18      	it	ne
 8003708:	2704      	movne	r7, #4
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800370a:	2f04      	cmp	r7, #4
 800370c:	d124      	bne.n	8003758 <FLASH_WaitForLastOperation+0x68>
 800370e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003712:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003716:	b9a3      	cbnz	r3, 8003742 <FLASH_WaitForLastOperation+0x52>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8003718:	2c01      	cmp	r4, #1
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <FLASH_WaitForLastOperation+0xb0>)
 800371c:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <FLASH_WaitForLastOperation+0xb4>)
 800371e:	d11e      	bne.n	800375e <FLASH_WaitForLastOperation+0x6e>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	4013      	ands	r3, r2
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8003724:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003728:	d022      	beq.n	8003770 <FLASH_WaitForLastOperation+0x80>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800372a:	481f      	ldr	r0, [pc, #124]	; (80037a8 <FLASH_WaitForLastOperation+0xb8>)

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800372c:	2b00      	cmp	r3, #0
    pFlash.ErrorCode |= errorflag;
 800372e:	6981      	ldr	r1, [r0, #24]
 8003730:	ea41 0103 	orr.w	r1, r1, r3
 8003734:	6181      	str	r1, [r0, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8003736:	491a      	ldr	r1, [pc, #104]	; (80037a0 <FLASH_WaitForLastOperation+0xb0>)
 8003738:	db17      	blt.n	800376a <FLASH_WaitForLastOperation+0x7a>
 800373a:	614b      	str	r3, [r1, #20]

    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 800373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003742:	1c6b      	adds	r3, r5, #1
 8003744:	d0e1      	beq.n	800370a <FLASH_WaitForLastOperation+0x1a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7ff fb53 	bl	8002df0 <HAL_GetTick>
 800374a:	1b80      	subs	r0, r0, r6
 800374c:	42a8      	cmp	r0, r5
 800374e:	d801      	bhi.n	8003754 <FLASH_WaitForLastOperation+0x64>
 8003750:	2d00      	cmp	r5, #0
 8003752:	d1da      	bne.n	800370a <FLASH_WaitForLastOperation+0x1a>
        return HAL_TIMEOUT;
 8003754:	2003      	movs	r0, #3
 8003756:	e7f2      	b.n	800373e <FLASH_WaitForLastOperation+0x4e>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003758:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
 800375c:	e7d9      	b.n	8003712 <FLASH_WaitForLastOperation+0x22>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800375e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003762:	4013      	ands	r3, r2
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003768:	e7dc      	b.n	8003724 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800376a:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
 800376e:	e7e5      	b.n	800373c <FLASH_WaitForLastOperation+0x4c>
  if(Bank == FLASH_BANK_1)
 8003770:	2c01      	cmp	r4, #1
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <FLASH_WaitForLastOperation+0xb0>)
 8003774:	d108      	bne.n	8003788 <FLASH_WaitForLastOperation+0x98>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8003776:	6918      	ldr	r0, [r3, #16]
 8003778:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800377c:	d0df      	beq.n	800373e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800377e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003782:	6159      	str	r1, [r3, #20]
  return HAL_OK;
 8003784:	4610      	mov	r0, r2
 8003786:	e7da      	b.n	800373e <FLASH_WaitForLastOperation+0x4e>
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8003788:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 800378c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8003790:	d0d5      	beq.n	800373e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8003792:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003796:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
 800379a:	e7f3      	b.n	8003784 <FLASH_WaitForLastOperation+0x94>
 800379c:	80000004 	.word	0x80000004
 80037a0:	52002000 	.word	0x52002000
 80037a4:	17ee0000 	.word	0x17ee0000
 80037a8:	20001b78 	.word	0x20001b78

080037ac <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4604      	mov	r4, r0
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 80037b0:	4d10      	ldr	r5, [pc, #64]	; (80037f4 <FLASH_OB_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 80037b2:	f7ff fb1d 	bl	8002df0 <HAL_GetTick>
 80037b6:	4606      	mov	r6, r0
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 80037b8:	69eb      	ldr	r3, [r5, #28]
 80037ba:	07db      	lsls	r3, r3, #31
 80037bc:	d40e      	bmi.n	80037dc <FLASH_OB_WaitForLastOperation+0x30>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 80037be:	69e8      	ldr	r0, [r5, #28]
 80037c0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80037c4:	d009      	beq.n	80037da <FLASH_OB_WaitForLastOperation+0x2e>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <FLASH_OB_WaitForLastOperation+0x4c>)

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80037c8:	2001      	movs	r0, #1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80037ca:	6993      	ldr	r3, [r2, #24]
 80037cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037d0:	6193      	str	r3, [r2, #24]
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80037d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037d8:	626b      	str	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
  }

  /* If there is no error flag set */
  return HAL_OK;
}
 80037da:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80037dc:	1c62      	adds	r2, r4, #1
 80037de:	d0eb      	beq.n	80037b8 <FLASH_OB_WaitForLastOperation+0xc>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037e0:	f7ff fb06 	bl	8002df0 <HAL_GetTick>
 80037e4:	1b80      	subs	r0, r0, r6
 80037e6:	42a0      	cmp	r0, r4
 80037e8:	d801      	bhi.n	80037ee <FLASH_OB_WaitForLastOperation+0x42>
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	d1e4      	bne.n	80037b8 <FLASH_OB_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
 80037f0:	e7f3      	b.n	80037da <FLASH_OB_WaitForLastOperation+0x2e>
 80037f2:	bf00      	nop
 80037f4:	52002000 	.word	0x52002000
 80037f8:	20001b78 	.word	0x20001b78

080037fc <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80037fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003800:	460c      	mov	r4, r1
 8003802:	4605      	mov	r5, r0
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff faf4 	bl	8002df0 <HAL_GetTick>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8003808:	4f1d      	ldr	r7, [pc, #116]	; (8003880 <FLASH_CRC_WaitForLastOperation+0x84>)
 800380a:	2c01      	cmp	r4, #1
  uint32_t tickstart = HAL_GetTick();
 800380c:	4606      	mov	r6, r0
  if(Bank == FLASH_BANK_1)
 800380e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8003884 <FLASH_CRC_WaitForLastOperation+0x88>
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8003812:	bf08      	it	eq
 8003814:	2708      	moveq	r7, #8
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003816:	2f08      	cmp	r7, #8
 8003818:	d120      	bne.n	800385c <FLASH_CRC_WaitForLastOperation+0x60>
 800381a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800381e:	071b      	lsls	r3, r3, #28
 8003820:	d411      	bmi.n	8003846 <FLASH_CRC_WaitForLastOperation+0x4a>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8003822:	2c01      	cmp	r4, #1
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <FLASH_CRC_WaitForLastOperation+0x88>)
 8003826:	d11c      	bne.n	8003862 <FLASH_CRC_WaitForLastOperation+0x66>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8003828:	6918      	ldr	r0, [r3, #16]
 800382a:	f010 5080 	ands.w	r0, r0, #268435456	; 0x10000000
 800382e:	d008      	beq.n	8003842 <FLASH_CRC_WaitForLastOperation+0x46>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8003830:	4915      	ldr	r1, [pc, #84]	; (8003888 <FLASH_CRC_WaitForLastOperation+0x8c>)
 8003832:	698a      	ldr	r2, [r1, #24]
 8003834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003838:	618a      	str	r2, [r1, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 800383a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383e:	615a      	str	r2, [r3, #20]
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);

      return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
}
 8003842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003846:	1c6a      	adds	r2, r5, #1
 8003848:	d0e5      	beq.n	8003816 <FLASH_CRC_WaitForLastOperation+0x1a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7ff fad1 	bl	8002df0 <HAL_GetTick>
 800384e:	1b80      	subs	r0, r0, r6
 8003850:	42a8      	cmp	r0, r5
 8003852:	d801      	bhi.n	8003858 <FLASH_CRC_WaitForLastOperation+0x5c>
 8003854:	2d00      	cmp	r5, #0
 8003856:	d1de      	bne.n	8003816 <FLASH_CRC_WaitForLastOperation+0x1a>
        return HAL_TIMEOUT;
 8003858:	2003      	movs	r0, #3
 800385a:	e7f2      	b.n	8003842 <FLASH_CRC_WaitForLastOperation+0x46>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800385c:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
 8003860:	e7dd      	b.n	800381e <FLASH_CRC_WaitForLastOperation+0x22>
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8003862:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8003866:	f010 5080 	ands.w	r0, r0, #268435456	; 0x10000000
 800386a:	d0ea      	beq.n	8003842 <FLASH_CRC_WaitForLastOperation+0x46>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 800386c:	4906      	ldr	r1, [pc, #24]	; (8003888 <FLASH_CRC_WaitForLastOperation+0x8c>)
 800386e:	698a      	ldr	r2, [r1, #24]
 8003870:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000
 8003874:	618a      	str	r2, [r1, #24]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 8003876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800387e:	e7df      	b.n	8003840 <FLASH_CRC_WaitForLastOperation+0x44>
 8003880:	80000008 	.word	0x80000008
 8003884:	52002000 	.word	0x52002000
 8003888:	20001b78 	.word	0x20001b78

0800388c <HAL_FLASH_OB_Launch>:
{
 800388c:	b508      	push	{r3, lr}
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800388e:	2101      	movs	r1, #1
 8003890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003894:	f7ff ffb2 	bl	80037fc <FLASH_CRC_WaitForLastOperation>
 8003898:	b980      	cbnz	r0, 80038bc <HAL_FLASH_OB_Launch+0x30>
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800389a:	2102      	movs	r1, #2
 800389c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038a0:	f7ff ffac 	bl	80037fc <FLASH_CRC_WaitForLastOperation>
 80038a4:	b950      	cbnz	r0, 80038bc <HAL_FLASH_OB_Launch+0x30>
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 80038a6:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <HAL_FLASH_OB_Launch+0x34>)
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038a8:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 80038ac:	6993      	ldr	r3, [r2, #24]
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	6193      	str	r3, [r2, #24]
}
 80038b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038b8:	f7ff bf78 	b.w	80037ac <FLASH_OB_WaitForLastOperation>
}
 80038bc:	2001      	movs	r0, #1
 80038be:	bd08      	pop	{r3, pc}
 80038c0:	52002000 	.word	0x52002000

080038c4 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038c6:	4e8c      	ldr	r6, [pc, #560]	; (8003af8 <HAL_FLASHEx_OBProgram+0x234>)
{
 80038c8:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80038ca:	7d33      	ldrb	r3, [r6, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f000 8111 	beq.w	8003af4 <HAL_FLASHEx_OBProgram+0x230>
 80038d2:	2101      	movs	r1, #1

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80038d6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80038da:	7531      	strb	r1, [r6, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038dc:	61b3      	str	r3, [r6, #24]
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80038de:	f7ff ff07 	bl	80036f0 <FLASH_WaitForLastOperation>
 80038e2:	b118      	cbz	r0, 80038ec <HAL_FLASHEx_OBProgram+0x28>
  {
    status = HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038e6:	2300      	movs	r3, #0
 80038e8:	7533      	strb	r3, [r6, #20]

  return status;
}
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80038ec:	2102      	movs	r1, #2
 80038ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f2:	f7ff fefd 	bl	80036f0 <FLASH_WaitForLastOperation>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d1f4      	bne.n	80038e4 <HAL_FLASHEx_OBProgram+0x20>
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80038fa:	6827      	ldr	r7, [r4, #0]
 80038fc:	07f9      	lsls	r1, r7, #31
 80038fe:	d51a      	bpl.n	8003936 <HAL_FLASHEx_OBProgram+0x72>
      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8003900:	6865      	ldr	r5, [r4, #4]
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 8003902:	69e2      	ldr	r2, [r4, #28]
      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8003904:	2d01      	cmp	r5, #1
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 8003906:	68a3      	ldr	r3, [r4, #8]
{
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003908:	f002 0101 	and.w	r1, r2, #1
 800390c:	f002 0202 	and.w	r2, r2, #2
      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8003910:	f040 80dd 	bne.w	8003ace <HAL_FLASHEx_OBProgram+0x20a>
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003914:	b131      	cbz	r1, 8003924 <HAL_FLASHEx_OBProgram+0x60>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8003916:	4d79      	ldr	r5, [pc, #484]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003918:	fa5f fc83 	uxtb.w	ip, r3
 800391c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800391e:	ea21 010c 	bic.w	r1, r1, ip
 8003922:	63e9      	str	r1, [r5, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003924:	b13a      	cbz	r2, 8003936 <HAL_FLASHEx_OBProgram+0x72>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8003926:	4975      	ldr	r1, [pc, #468]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 800392e:	ea22 0303 	bic.w	r3, r2, r3
 8003932:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8003936:	07ba      	lsls	r2, r7, #30
 8003938:	d506      	bpl.n	8003948 <HAL_FLASHEx_OBProgram+0x84>
{
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 800393a:	4a70      	ldr	r2, [pc, #448]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 800393c:	68e1      	ldr	r1, [r4, #12]
 800393e:	6a13      	ldr	r3, [r2, #32]
 8003940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003944:	430b      	orrs	r3, r1
 8003946:	6213      	str	r3, [r2, #32]
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003948:	077b      	lsls	r3, r7, #29
 800394a:	d554      	bpl.n	80039f6 <HAL_FLASHEx_OBProgram+0x132>
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 800394c:	e9d4 5105 	ldrd	r5, r1, [r4, #20]
  uint32_t optr_reg_mask = 0;

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8003950:	f015 0301 	ands.w	r3, r5, #1
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8003954:	bf1a      	itte	ne
 8003956:	f001 0310 	andne.w	r3, r1, #16
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 800395a:	2210      	movne	r2, #16
  uint32_t optr_reg_mask = 0;
 800395c:	461a      	moveq	r2, r3
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 800395e:	f015 0f02 	tst.w	r5, #2
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 8003962:	bf1e      	ittt	ne
 8003964:	f001 0c40 	andne.w	ip, r1, #64	; 0x40
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 8003968:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 800396c:	ea43 030c 	orrne.w	r3, r3, ip
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8003970:	f015 0f04 	tst.w	r5, #4
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 8003974:	bf1e      	ittt	ne
 8003976:	f001 0c80 	andne.w	ip, r1, #128	; 0x80
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 800397a:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 800397e:	ea43 030c 	orrne.w	r3, r3, ip
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8003982:	f015 0f08 	tst.w	r5, #8
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 8003986:	bf1e      	ittt	ne
 8003988:	f401 3c00 	andne.w	ip, r1, #131072	; 0x20000
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 800398c:	f442 3200 	orrne.w	r2, r2, #131072	; 0x20000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 8003990:	ea43 030c 	orrne.w	r3, r3, ip
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8003994:	f015 0f10 	tst.w	r5, #16
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 8003998:	bf1e      	ittt	ne
 800399a:	f401 2c80 	andne.w	ip, r1, #262144	; 0x40000
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 800399e:	f442 2280 	orrne.w	r2, r2, #262144	; 0x40000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 80039a2:	ea43 030c 	orrne.w	r3, r3, ip
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 80039a6:	f015 0f20 	tst.w	r5, #32
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80039aa:	bf1e      	ittt	ne
 80039ac:	f401 1cc0 	andne.w	ip, r1, #1572864	; 0x180000
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 80039b0:	f442 12c0 	orrne.w	r2, r2, #1572864	; 0x180000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80039b4:	ea43 030c 	orrne.w	r3, r3, ip
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 80039b8:	f015 0f40 	tst.w	r5, #64	; 0x40
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80039bc:	bf1e      	ittt	ne
 80039be:	f401 1c00 	andne.w	ip, r1, #2097152	; 0x200000
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 80039c2:	f442 1200 	orrne.w	r2, r2, #2097152	; 0x200000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80039c6:	ea43 030c 	orrne.w	r3, r3, ip
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 80039ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 80039ce:	bf1e      	ittt	ne
 80039d0:	f001 4c00 	andne.w	ip, r1, #2147483648	; 0x80000000
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 80039d4:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 80039d8:	ea43 030c 	orrne.w	r3, r3, ip
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 80039dc:	062d      	lsls	r5, r5, #24
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 80039de:	4d47      	ldr	r5, [pc, #284]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 80039e0:	bf42      	ittt	mi
 80039e2:	f001 5100 	andmi.w	r1, r1, #536870912	; 0x20000000
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 80039e6:	f042 5200 	orrmi.w	r2, r2, #536870912	; 0x20000000
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 80039ea:	430b      	orrmi	r3, r1
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 80039ec:	6a29      	ldr	r1, [r5, #32]
 80039ee:	ea21 0202 	bic.w	r2, r1, r2
 80039f2:	4313      	orrs	r3, r2
 80039f4:	622b      	str	r3, [r5, #32]
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80039f6:	073b      	lsls	r3, r7, #28
 80039f8:	d523      	bpl.n	8003a42 <HAL_FLASHEx_OBProgram+0x17e>
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 80039fa:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80039fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003a00:	f01e 0f01 	tst.w	lr, #1
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 8003a04:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003a08:	d00c      	beq.n	8003a24 <HAL_FLASHEx_OBProgram+0x160>
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8003a0a:	020b      	lsls	r3, r1, #8
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8003a0c:	f105 4c78 	add.w	ip, r5, #4160749568	; 0xf8000000
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	ea42 2c1c 	orr.w	ip, r2, ip, lsr #8
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	ea43 030c 	orr.w	r3, r3, ip
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8003a1c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003afc <HAL_FLASHEx_OBProgram+0x238>
 8003a20:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003a24:	f01e 0f02 	tst.w	lr, #2
 8003a28:	d00b      	beq.n	8003a42 <HAL_FLASHEx_OBProgram+0x17e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8003a2a:	f1a1 6101 	sub.w	r1, r1, #135266304	; 0x8100000
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8003a2e:	f1a5 6501 	sub.w	r5, r5, #135266304	; 0x8100000
 8003a32:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8003a34:	0a09      	lsrs	r1, r1, #8
 8003a36:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
 8003a3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8003a3e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8003a42:	06fd      	lsls	r5, r7, #27
 8003a44:	d506      	bpl.n	8003a54 <HAL_FLASHEx_OBProgram+0x190>
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 8003a46:	4a2d      	ldr	r2, [pc, #180]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003a48:	6921      	ldr	r1, [r4, #16]
 8003a4a:	6a13      	ldr	r3, [r2, #32]
 8003a4c:	f023 030c 	bic.w	r3, r3, #12
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6213      	str	r3, [r2, #32]
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 8003a54:	0679      	lsls	r1, r7, #25
 8003a56:	d513      	bpl.n	8003a80 <HAL_FLASHEx_OBProgram+0x1bc>
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 8003a58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003a5a:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 8003a5e:	07ca      	lsls	r2, r1, #31
 8003a60:	d506      	bpl.n	8003a70 <HAL_FLASHEx_OBProgram+0x1ac>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 8003a62:	4d26      	ldr	r5, [pc, #152]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003a64:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003a66:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 8003a70:	078b      	lsls	r3, r1, #30
 8003a72:	d505      	bpl.n	8003a80 <HAL_FLASHEx_OBProgram+0x1bc>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003a76:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	ea43 030c 	orr.w	r3, r3, ip
 8003a7e:	6453      	str	r3, [r2, #68]	; 0x44
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 8003a80:	06bd      	lsls	r5, r7, #26
 8003a82:	f57f af30 	bpl.w	80038e6 <HAL_FLASHEx_OBProgram+0x22>
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 8003a86:	69e5      	ldr	r5, [r4, #28]
 8003a88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a8a:	e9d4 370e 	ldrd	r3, r7, [r4, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003a8e:	07ec      	lsls	r4, r5, #31
 8003a90:	d50b      	bpl.n	8003aaa <HAL_FLASHEx_OBProgram+0x1e6>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8003a92:	f107 4478 	add.w	r4, r7, #4160749568	; 0xf8000000
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8003a96:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8003a9a:	ea41 2114 	orr.w	r1, r1, r4, lsr #8
 8003a9e:	0214      	lsls	r4, r2, #8
 8003aa0:	0c24      	lsrs	r4, r4, #16
 8003aa2:	0424      	lsls	r4, r4, #16
 8003aa4:	4321      	orrs	r1, r4
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8003aa6:	4c15      	ldr	r4, [pc, #84]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003aa8:	6361      	str	r1, [r4, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003aaa:	07a9      	lsls	r1, r5, #30
 8003aac:	f57f af1b 	bpl.w	80038e6 <HAL_FLASHEx_OBProgram+0x22>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8003ab0:	f1a7 6101 	sub.w	r1, r7, #135266304	; 0x8100000
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8003ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8003ab8:	f1a2 6201 	sub.w	r2, r2, #135266304	; 0x8100000
 8003abc:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8003ac0:	0a12      	lsrs	r2, r2, #8
 8003ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003ac8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003acc:	e70b      	b.n	80038e6 <HAL_FLASHEx_OBProgram+0x22>
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003ace:	b131      	cbz	r1, 8003ade <HAL_FLASHEx_OBProgram+0x21a>
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8003ad0:	4d0a      	ldr	r5, [pc, #40]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003ad2:	b2d9      	uxtb	r1, r3
 8003ad4:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8003ad8:	ea41 010c 	orr.w	r1, r1, ip
 8003adc:	63e9      	str	r1, [r5, #60]	; 0x3c
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	f43f af29 	beq.w	8003936 <HAL_FLASHEx_OBProgram+0x72>
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8003ae4:	4a05      	ldr	r2, [pc, #20]	; (8003afc <HAL_FLASHEx_OBProgram+0x238>)
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f8d2 113c 	ldr.w	r1, [r2, #316]	; 0x13c
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8003af2:	e720      	b.n	8003936 <HAL_FLASHEx_OBProgram+0x72>
  __HAL_LOCK(&pFlash);
 8003af4:	2002      	movs	r0, #2
 8003af6:	e6f8      	b.n	80038ea <HAL_FLASHEx_OBProgram+0x26>
 8003af8:	20001b78 	.word	0x20001b78
 8003afc:	52002000 	.word	0x52002000

08003b00 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8003b00:	2316      	movs	r3, #22
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 8003b02:	4a30      	ldr	r2, [pc, #192]	; (8003bc4 <HAL_FLASHEx_OBGetConfig+0xc4>)
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8003b04:	6003      	str	r3, [r0, #0]
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 8003b06:	69d3      	ldr	r3, [r2, #28]
 8003b08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8003b0c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
{
 8003b10:	b530      	push	{r4, r5, lr}
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8003b12:	d004      	beq.n	8003b1e <HAL_FLASHEx_OBGetConfig+0x1e>
    return (OB_RDP_LEVEL_1);
 8003b14:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 8003b18:	bf18      	it	ne
 8003b1a:	f44f 43aa 	movne.w	r3, #21760	; 0x5500
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003b1e:	60c3      	str	r3, [r0, #12]
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 8003b20:	69d3      	ldr	r3, [r2, #28]
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8003b22:	69c4      	ldr	r4, [r0, #28]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8003b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b28:	f023 030c 	bic.w	r3, r3, #12
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003b2c:	6183      	str	r3, [r0, #24]
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 8003b2e:	69d3      	ldr	r3, [r2, #28]
 8003b30:	f003 030c 	and.w	r3, r3, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8003b34:	6103      	str	r3, [r0, #16]
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8003b36:	1e63      	subs	r3, r4, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d82c      	bhi.n	8003b96 <HAL_FLASHEx_OBGetConfig+0x96>
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8003b3c:	233f      	movs	r3, #63	; 0x3f
  if(Bank == FLASH_BANK_1)
 8003b3e:	2c01      	cmp	r4, #1
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8003b40:	6003      	str	r3, [r0, #0]
  if(Bank == FLASH_BANK_1)
 8003b42:	d134      	bne.n	8003bae <HAL_FLASHEx_OBGetConfig+0xae>
    regvalue = FLASH->WPSN_CUR1;
 8003b44:	6b93      	ldr	r3, [r2, #56]	; 0x38
  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	6083      	str	r3, [r0, #8]
  if(*WRPSector == 0U)
 8003b4c:	3b00      	subs	r3, #0
 8003b4e:	bf18      	it	ne
 8003b50:	2301      	movne	r3, #1
  if(Bank == FLASH_BANK_1)
 8003b52:	2c01      	cmp	r4, #1
 8003b54:	6043      	str	r3, [r0, #4]
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_FLASHEx_OBGetConfig+0xc4>)
 8003b58:	d12c      	bne.n	8003bb4 <HAL_FLASHEx_OBGetConfig+0xb4>
    regvalue = FLASH->PRAR_CUR1;
 8003b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bankBase = FLASH_BANK1_BASE;
 8003b5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8003b60:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
{
  uint32_t regvalue = 0;
  uint32_t bankBase = 0;

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 8003b64:	2c01      	cmp	r4, #1
  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8003b66:	6203      	str	r3, [r0, #32]
  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <HAL_FLASHEx_OBGetConfig+0xc8>)
 8003b6a:	ea03 2502 	and.w	r5, r3, r2, lsl #8
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8003b6e:	ea03 2212 	and.w	r2, r3, r2, lsr #8
  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8003b72:	440d      	add	r5, r1
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8003b74:	440a      	add	r2, r1
  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8003b76:	6245      	str	r5, [r0, #36]	; 0x24
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8003b78:	6282      	str	r2, [r0, #40]	; 0x28
  if(Bank == FLASH_BANK_1)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_FLASHEx_OBGetConfig+0xc4>)
 8003b7c:	d11f      	bne.n	8003bbe <HAL_FLASHEx_OBGetConfig+0xbe>
  {
    regvalue = FLASH->SCAR_CUR1;
 8003b7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8003b80:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8003b84:	6384      	str	r4, [r0, #56]	; 0x38
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 8003b86:	ea03 2402 	and.w	r4, r3, r2, lsl #8
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8003b8a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 8003b8e:	440c      	add	r4, r1
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8003b90:	440b      	add	r3, r1
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 8003b92:	63c4      	str	r4, [r0, #60]	; 0x3c
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8003b94:	6403      	str	r3, [r0, #64]	; 0x40
  regvalue = FLASH->BOOT_CUR;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_FLASHEx_OBGetConfig+0xc4>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8003b9a:	041a      	lsls	r2, r3, #16
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8003b9c:	0c1b      	lsrs	r3, r3, #16
  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8003b9e:	6302      	str	r2, [r0, #48]	; 0x30
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	6343      	str	r3, [r0, #52]	; 0x34
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003baa:	6003      	str	r3, [r0, #0]
}
 8003bac:	bd30      	pop	{r4, r5, pc}
    regvalue = FLASH->WPSN_CUR2;
 8003bae:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
 8003bb2:	e7c8      	b.n	8003b46 <HAL_FLASHEx_OBGetConfig+0x46>
    regvalue = FLASH->PRAR_CUR2;
 8003bb4:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
    bankBase = FLASH_BANK2_BASE;
 8003bb8:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8003bbc:	e7d0      	b.n	8003b60 <HAL_FLASHEx_OBGetConfig+0x60>
    regvalue = FLASH->SCAR_CUR2;
 8003bbe:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    bankBase = FLASH_BANK2_BASE;
 8003bc2:	e7dd      	b.n	8003b80 <HAL_FLASHEx_OBGetConfig+0x80>
 8003bc4:	52002000 	.word	0x52002000
 8003bc8:	000fff00 	.word	0x000fff00

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003bd0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8003d9c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bda:	680a      	ldr	r2, [r1, #0]
 8003bdc:	fa32 f503 	lsrs.w	r5, r2, r3
 8003be0:	d102      	bne.n	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003be2:	b003      	add	sp, #12
 8003be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003be8:	f04f 0e01 	mov.w	lr, #1
 8003bec:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8003bf0:	ea1e 0202 	ands.w	r2, lr, r2
 8003bf4:	f000 80bc 	beq.w	8003d70 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf8:	684e      	ldr	r6, [r1, #4]
 8003bfa:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bfe:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c02:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c06:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c0a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c0c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c10:	2f01      	cmp	r7, #1
 8003c12:	d834      	bhi.n	8003c7e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8003c14:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c16:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1a:	68cf      	ldr	r7, [r1, #12]
 8003c1c:	fa07 f708 	lsl.w	r7, r7, r8
 8003c20:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003c24:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003c26:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c28:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003c30:	409f      	lsls	r7, r3
 8003c32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003c36:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003c38:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c3c:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c40:	688f      	ldr	r7, [r1, #8]
 8003c42:	fa07 f708 	lsl.w	r7, r7, r8
 8003c46:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8003c4a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4c:	d119      	bne.n	8003c82 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8003c4e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c52:	f003 0b07 	and.w	fp, r3, #7
 8003c56:	f04f 0e0f 	mov.w	lr, #15
 8003c5a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003c5e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003c62:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c66:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003c6a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c6e:	690f      	ldr	r7, [r1, #16]
 8003c70:	fa07 f70b 	lsl.w	r7, r7, fp
 8003c74:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003c78:	f8ca 7020 	str.w	r7, [sl, #32]
 8003c7c:	e001      	b.n	8003c82 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7e:	2d03      	cmp	r5, #3
 8003c80:	d1da      	bne.n	8003c38 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8003c82:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c84:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c88:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c8c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c90:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8003c94:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c96:	d06b      	beq.n	8003d70 <HAL_GPIO_Init+0x1a4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c98:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8003c9c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ca0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca4:	f045 0502 	orr.w	r5, r5, #2
 8003ca8:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb0:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8003cb4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cb8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8003cbc:	f005 0502 	and.w	r5, r5, #2
 8003cc0:	9501      	str	r5, [sp, #4]
 8003cc2:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cc4:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc6:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cca:	fa05 f50c 	lsl.w	r5, r5, ip
 8003cce:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cd2:	4d31      	ldr	r5, [pc, #196]	; (8003d98 <HAL_GPIO_Init+0x1cc>)
 8003cd4:	42a8      	cmp	r0, r5
 8003cd6:	d04d      	beq.n	8003d74 <HAL_GPIO_Init+0x1a8>
 8003cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cdc:	42a8      	cmp	r0, r5
 8003cde:	d04b      	beq.n	8003d78 <HAL_GPIO_Init+0x1ac>
 8003ce0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ce4:	42a8      	cmp	r0, r5
 8003ce6:	d049      	beq.n	8003d7c <HAL_GPIO_Init+0x1b0>
 8003ce8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cec:	42a8      	cmp	r0, r5
 8003cee:	d047      	beq.n	8003d80 <HAL_GPIO_Init+0x1b4>
 8003cf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cf4:	42a8      	cmp	r0, r5
 8003cf6:	d045      	beq.n	8003d84 <HAL_GPIO_Init+0x1b8>
 8003cf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cfc:	42a8      	cmp	r0, r5
 8003cfe:	d043      	beq.n	8003d88 <HAL_GPIO_Init+0x1bc>
 8003d00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d04:	42a8      	cmp	r0, r5
 8003d06:	d041      	beq.n	8003d8c <HAL_GPIO_Init+0x1c0>
 8003d08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d0c:	42a8      	cmp	r0, r5
 8003d0e:	d03f      	beq.n	8003d90 <HAL_GPIO_Init+0x1c4>
 8003d10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d14:	42a8      	cmp	r0, r5
 8003d16:	d03d      	beq.n	8003d94 <HAL_GPIO_Init+0x1c8>
 8003d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d1c:	42a8      	cmp	r0, r5
 8003d1e:	bf0c      	ite	eq
 8003d20:	2509      	moveq	r5, #9
 8003d22:	250a      	movne	r5, #10
 8003d24:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d28:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d2c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d30:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8003d32:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8003d36:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003d38:	bf0c      	ite	eq
 8003d3a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d3c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d3e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8003d42:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003d44:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8003d46:	bf0c      	ite	eq
 8003d48:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d4a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8003d50:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003d52:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8003d56:	bf0c      	ite	eq
 8003d58:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d5a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d5c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003d5e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003d62:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8003d66:	bf54      	ite	pl
 8003d68:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003d6a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003d6c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8003d70:	3301      	adds	r3, #1
 8003d72:	e732      	b.n	8003bda <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d74:	2500      	movs	r5, #0
 8003d76:	e7d5      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d78:	2501      	movs	r5, #1
 8003d7a:	e7d3      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d7c:	2502      	movs	r5, #2
 8003d7e:	e7d1      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d80:	2503      	movs	r5, #3
 8003d82:	e7cf      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d84:	2504      	movs	r5, #4
 8003d86:	e7cd      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d88:	2505      	movs	r5, #5
 8003d8a:	e7cb      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d8c:	2506      	movs	r5, #6
 8003d8e:	e7c9      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d90:	2507      	movs	r5, #7
 8003d92:	e7c7      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d94:	2508      	movs	r5, #8
 8003d96:	e7c5      	b.n	8003d24 <HAL_GPIO_Init+0x158>
 8003d98:	58020000 	.word	0x58020000
 8003d9c:	58024400 	.word	0x58024400

08003da0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003da4:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003da6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8003ed0 <HAL_GPIO_DeInit+0x130>
 8003daa:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003ed4 <HAL_GPIO_DeInit+0x134>
 8003dae:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003ed8 <HAL_GPIO_DeInit+0x138>
 8003db2:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003edc <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 8003db6:	fa31 f302 	lsrs.w	r3, r1, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8003dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8003dc6:	ea1c 0601 	ands.w	r6, ip, r1
 8003dca:	d06b      	beq.n	8003ea4 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003dcc:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003dd0:	f002 0703 	and.w	r7, r2, #3
 8003dd4:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_GPIO_DeInit+0x12c>)
 8003dd8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003ddc:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003dde:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003de0:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003de4:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003de8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003dec:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003df0:	d05a      	beq.n	8003ea8 <HAL_GPIO_DeInit+0x108>
 8003df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df6:	4298      	cmp	r0, r3
 8003df8:	d058      	beq.n	8003eac <HAL_GPIO_DeInit+0x10c>
 8003dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dfe:	4298      	cmp	r0, r3
 8003e00:	d056      	beq.n	8003eb0 <HAL_GPIO_DeInit+0x110>
 8003e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e06:	4298      	cmp	r0, r3
 8003e08:	d054      	beq.n	8003eb4 <HAL_GPIO_DeInit+0x114>
 8003e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0e:	4298      	cmp	r0, r3
 8003e10:	d052      	beq.n	8003eb8 <HAL_GPIO_DeInit+0x118>
 8003e12:	4540      	cmp	r0, r8
 8003e14:	d052      	beq.n	8003ebc <HAL_GPIO_DeInit+0x11c>
 8003e16:	4548      	cmp	r0, r9
 8003e18:	d052      	beq.n	8003ec0 <HAL_GPIO_DeInit+0x120>
 8003e1a:	4550      	cmp	r0, sl
 8003e1c:	d052      	beq.n	8003ec4 <HAL_GPIO_DeInit+0x124>
 8003e1e:	4558      	cmp	r0, fp
 8003e20:	d052      	beq.n	8003ec8 <HAL_GPIO_DeInit+0x128>
 8003e22:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003e26:	4298      	cmp	r0, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2309      	moveq	r3, #9
 8003e2c:	230a      	movne	r3, #10
 8003e2e:	40bb      	lsls	r3, r7
 8003e30:	4573      	cmp	r3, lr
 8003e32:	d119      	bne.n	8003e68 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8003e3c:	ea27 0706 	bic.w	r7, r7, r6
 8003e40:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003e44:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8003e48:	ea27 0706 	bic.w	r7, r7, r6
 8003e4c:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8003e50:	685f      	ldr	r7, [r3, #4]
 8003e52:	ea27 0706 	bic.w	r7, r7, r6
 8003e56:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e58:	681f      	ldr	r7, [r3, #0]
 8003e5a:	ea27 0706 	bic.w	r7, r7, r6
 8003e5e:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e60:	68a3      	ldr	r3, [r4, #8]
 8003e62:	ea23 0305 	bic.w	r3, r3, r5
 8003e66:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003e68:	0055      	lsls	r5, r2, #1
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003e6e:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003e72:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003e74:	260f      	movs	r6, #15
 8003e76:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003e78:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003e7a:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003e7c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003e7e:	08d4      	lsrs	r4, r2, #3
 8003e80:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003e84:	6a25      	ldr	r5, [r4, #32]
 8003e86:	ea25 0506 	bic.w	r5, r5, r6
 8003e8a:	6225      	str	r5, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e8c:	68c4      	ldr	r4, [r0, #12]
 8003e8e:	ea24 0403 	bic.w	r4, r4, r3
 8003e92:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e94:	6844      	ldr	r4, [r0, #4]
 8003e96:	ea24 040c 	bic.w	r4, r4, ip
 8003e9a:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e9c:	6884      	ldr	r4, [r0, #8]
 8003e9e:	ea24 0303 	bic.w	r3, r4, r3
 8003ea2:	6083      	str	r3, [r0, #8]
    position++;
 8003ea4:	3201      	adds	r2, #1
 8003ea6:	e786      	b.n	8003db6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e7c0      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e7be      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e7bc      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e7ba      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e7b8      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	e7b6      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	e7b4      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003ec4:	2307      	movs	r3, #7
 8003ec6:	e7b2      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	e7b0      	b.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003ecc:	58020000 	.word	0x58020000
 8003ed0:	58021400 	.word	0x58021400
 8003ed4:	58021800 	.word	0x58021800
 8003ed8:	58021c00 	.word	0x58021c00
 8003edc:	58022000 	.word	0x58022000

08003ee0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee0:	b10a      	cbz	r2, 8003ee6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ee2:	6181      	str	r1, [r0, #24]
  }
}
 8003ee4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ee6:	0409      	lsls	r1, r1, #16
 8003ee8:	e7fb      	b.n	8003ee2 <HAL_GPIO_WritePin+0x2>

08003eea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eea:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eec:	ea01 0203 	and.w	r2, r1, r3
 8003ef0:	ea21 0103 	bic.w	r1, r1, r3
 8003ef4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003ef8:	6181      	str	r1, [r0, #24]
}
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f00:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003f04:	4201      	tst	r1, r0
{
 8003f06:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f0a:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f0e:	f7fd fb39 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003f12:	bd08      	pop	{r3, pc}

08003f14 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f14:	6803      	ldr	r3, [r0, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	0791      	lsls	r1, r2, #30
 8003f1a:	d501      	bpl.n	8003f20 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	07d2      	lsls	r2, r2, #31
 8003f24:	d403      	bmi.n	8003f2e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	619a      	str	r2, [r3, #24]
  }
}
 8003f2e:	4770      	bx	lr

08003f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f30:	b530      	push	{r4, r5, lr}
 8003f32:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f34:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f38:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f3c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f44:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f46:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f4e:	ea20 0002 	bic.w	r0, r0, r2
 8003f52:	4303      	orrs	r3, r0
 8003f54:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f56:	bd30      	pop	{r4, r5, pc}
 8003f58:	03ff63ff 	.word	0x03ff63ff

08003f5c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f5c:	6803      	ldr	r3, [r0, #0]
{
 8003f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f62:	699c      	ldr	r4, [r3, #24]
{
 8003f64:	4605      	mov	r5, r0
 8003f66:	460f      	mov	r7, r1
 8003f68:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f6a:	f014 0410 	ands.w	r4, r4, #16
 8003f6e:	d06f      	beq.n	8004050 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8003f70:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f76:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	0690      	lsls	r0, r2, #26
 8003f7e:	d461      	bmi.n	8004044 <I2C_IsErrorOccurred+0xe8>
 8003f80:	f1b8 0f00 	cmp.w	r8, #0
 8003f84:	d035      	beq.n	8003ff2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8003f86:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8003f8a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003f8c:	682e      	ldr	r6, [r5, #0]
 8003f8e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f90:	05d9      	lsls	r1, r3, #23
 8003f92:	d505      	bpl.n	8003fa0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f94:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003f98:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f9e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fa0:	055a      	lsls	r2, r3, #21
 8003fa2:	d505      	bpl.n	8003fb0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003fa8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fae:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fb0:	059b      	lsls	r3, r3, #22
 8003fb2:	d54f      	bpl.n	8004054 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fb8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fbc:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f7ff ffa8 	bl	8003f14 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003fc4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003fc6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003fc8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003fcc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003fd0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8003fda:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003fdc:	4323      	orrs	r3, r4
 8003fde:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003fec:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8003ff0:	e032      	b.n	8004058 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8003ff2:	1c7a      	adds	r2, r7, #1
 8003ff4:	d0c1      	beq.n	8003f7a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fe fefb 	bl	8002df0 <HAL_GetTick>
 8003ffa:	1b80      	subs	r0, r0, r6
 8003ffc:	42b8      	cmp	r0, r7
 8003ffe:	d801      	bhi.n	8004004 <I2C_IsErrorOccurred+0xa8>
 8004000:	2f00      	cmp	r7, #0
 8004002:	d1b9      	bne.n	8003f78 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004008:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800400c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800400e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004010:	0400      	lsls	r0, r0, #16
 8004012:	d50a      	bpl.n	800402a <I2C_IsErrorOccurred+0xce>
 8004014:	0449      	lsls	r1, r1, #17
 8004016:	d408      	bmi.n	800402a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8004018:	2a20      	cmp	r2, #32
 800401a:	d006      	beq.n	800402a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004022:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004024:	f7fe fee4 	bl	8002df0 <HAL_GetTick>
 8004028:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	069b      	lsls	r3, r3, #26
 8004030:	d4a2      	bmi.n	8003f78 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004032:	f7fe fedd 	bl	8002df0 <HAL_GetTick>
 8004036:	1b80      	subs	r0, r0, r6
 8004038:	2819      	cmp	r0, #25
 800403a:	d9f6      	bls.n	800402a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800403e:	f04f 0801 	mov.w	r8, #1
 8004042:	e799      	b.n	8003f78 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004044:	f1b8 0f00 	cmp.w	r8, #0
 8004048:	d19d      	bne.n	8003f86 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800404a:	2220      	movs	r2, #32
 800404c:	61da      	str	r2, [r3, #28]
 800404e:	e79a      	b.n	8003f86 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	4620      	mov	r0, r4
 8004052:	e79b      	b.n	8003f8c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004054:	2800      	cmp	r0, #0
 8004056:	d1b2      	bne.n	8003fbe <I2C_IsErrorOccurred+0x62>
}
 8004058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800405c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	079b      	lsls	r3, r3, #30
 800406a:	d501      	bpl.n	8004070 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800406c:	2000      	movs	r0, #0
}
 800406e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004070:	4632      	mov	r2, r6
 8004072:	4629      	mov	r1, r5
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff ff71 	bl	8003f5c <I2C_IsErrorOccurred>
 800407a:	b9c0      	cbnz	r0, 80040ae <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800407c:	1c6a      	adds	r2, r5, #1
 800407e:	d0f1      	beq.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004080:	f7fe feb6 	bl	8002df0 <HAL_GetTick>
 8004084:	1b80      	subs	r0, r0, r6
 8004086:	42a8      	cmp	r0, r5
 8004088:	d801      	bhi.n	800408e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800408a:	2d00      	cmp	r5, #0
 800408c:	d1ea      	bne.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f013 0302 	ands.w	r3, r3, #2
 8004096:	d1e5      	bne.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800409a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	f042 0220 	orr.w	r2, r2, #32
 80040a2:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	2220      	movs	r2, #32
 80040a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80040ae:	2001      	movs	r0, #1
 80040b0:	e7dd      	b.n	800406e <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080040b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80040b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	9f06      	ldr	r7, [sp, #24]
 80040b8:	4604      	mov	r4, r0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4616      	mov	r6, r2
 80040be:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	6993      	ldr	r3, [r2, #24]
 80040c4:	ea38 0303 	bics.w	r3, r8, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	42b3      	cmp	r3, r6
 80040d0:	d001      	beq.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80040d2:	2000      	movs	r0, #0
 80040d4:	e01e      	b.n	8004114 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	1c6b      	adds	r3, r5, #1
 80040d8:	d0f3      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7fe fe89 	bl	8002df0 <HAL_GetTick>
 80040de:	1bc0      	subs	r0, r0, r7
 80040e0:	42a8      	cmp	r0, r5
 80040e2:	d801      	bhi.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0x36>
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	d1eb      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	ea38 0303 	bics.w	r3, r8, r3
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	42b3      	cmp	r3, r6
 80040f8:	d1e2      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004104:	2320      	movs	r3, #32
 8004106:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410a:	2300      	movs	r3, #0
 800410c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004110:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004118 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4604      	mov	r4, r0
 800411c:	460d      	mov	r5, r1
 800411e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	069b      	lsls	r3, r3, #26
 8004126:	d501      	bpl.n	800412c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004128:	2000      	movs	r0, #0
}
 800412a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800412c:	4632      	mov	r2, r6
 800412e:	4629      	mov	r1, r5
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff ff13 	bl	8003f5c <I2C_IsErrorOccurred>
 8004136:	b9b0      	cbnz	r0, 8004166 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fe fe5a 	bl	8002df0 <HAL_GetTick>
 800413c:	1b80      	subs	r0, r0, r6
 800413e:	42a8      	cmp	r0, r5
 8004140:	d801      	bhi.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004142:	2d00      	cmp	r5, #0
 8004144:	d1ec      	bne.n	8004120 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f013 0320 	ands.w	r3, r3, #32
 800414e:	d1e7      	bne.n	8004120 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004152:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	f042 0220 	orr.w	r2, r2, #32
 800415a:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800415c:	2220      	movs	r2, #32
 800415e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8004166:	2001      	movs	r0, #1
 8004168:	e7df      	b.n	800412a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800416a <HAL_I2C_MspInit>:
}
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_Init>:
{
 800416c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800416e:	4604      	mov	r4, r0
 8004170:	2800      	cmp	r0, #0
 8004172:	d04a      	beq.n	800420a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004174:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004178:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800417c:	b91b      	cbnz	r3, 8004186 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800417e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004182:	f7ff fff2 	bl	800416a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004186:	2324      	movs	r3, #36	; 0x24
 8004188:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800419c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041aa:	2901      	cmp	r1, #1
 80041ac:	d124      	bne.n	80041f8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ca:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80041ce:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041d0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041d6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ea:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80041f6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041fc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041fe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004200:	d1d8      	bne.n	80041b4 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	e7d4      	b.n	80041b4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800420a:	2001      	movs	r0, #1
 800420c:	e7f3      	b.n	80041f6 <HAL_I2C_Init+0x8a>

0800420e <HAL_I2C_MspDeInit>:
 800420e:	4770      	bx	lr

08004210 <HAL_I2C_DeInit>:
{
 8004210:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004212:	4604      	mov	r4, r0
 8004214:	b198      	cbz	r0, 800423e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004216:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	2324      	movs	r3, #36	; 0x24
 800421a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004226:	f7ff fff2 	bl	800420e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422a:	2000      	movs	r0, #0
 800422c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800422e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004232:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800423c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800423e:	2001      	movs	r0, #1
 8004240:	e7fc      	b.n	800423c <HAL_I2C_DeInit+0x2c>
	...

08004244 <HAL_I2C_Mem_Write>:
{
 8004244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800424a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800424e:	4604      	mov	r4, r0
 8004250:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004252:	2b20      	cmp	r3, #32
{
 8004254:	4616      	mov	r6, r2
 8004256:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800425a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	f040 80c6 	bne.w	80043ee <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8004262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004264:	b113      	cbz	r3, 800426c <HAL_I2C_Mem_Write+0x28>
 8004266:	f1ba 0f00 	cmp.w	sl, #0
 800426a:	d106      	bne.n	800427a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800426c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004270:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
}
 8004274:	b003      	add	sp, #12
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800427a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800427e:	2b01      	cmp	r3, #1
 8004280:	f000 80b5 	beq.w	80043ee <HAL_I2C_Mem_Write+0x1aa>
 8004284:	f04f 0b01 	mov.w	fp, #1
 8004288:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800428c:	f7fe fdb0 	bl	8002df0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004290:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004292:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004294:	9000      	str	r0, [sp, #0]
 8004296:	465a      	mov	r2, fp
 8004298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ff08 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1e5      	bne.n	8004272 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042a8:	fa5f f289 	uxtb.w	r2, r9
 80042ac:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80042ae:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b4:	2340      	movs	r3, #64	; 0x40
 80042b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80042ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042be:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80042c0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80042c4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ce:	f7ff fe2f 	bl	8003f30 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d2:	462a      	mov	r2, r5
 80042d4:	4641      	mov	r1, r8
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff fec0 	bl	800405c <I2C_WaitOnTXISFlagUntilTimeout>
 80042dc:	bb18      	cbnz	r0, 8004326 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042de:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042e4:	d115      	bne.n	8004312 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042f0:	4643      	mov	r3, r8
 80042f2:	9500      	str	r5, [sp, #0]
 80042f4:	f7ff fedd 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 80042f8:	b9a8      	cbnz	r0, 8004326 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d815      	bhi.n	800432e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004302:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004308:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800430a:	b292      	uxth	r2, r2
 800430c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	e012      	b.n	8004338 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004312:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004314:	4641      	mov	r1, r8
 8004316:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	462a      	mov	r2, r5
 800431c:	f7ff fe9e 	bl	800405c <I2C_WaitOnTXISFlagUntilTimeout>
 8004320:	b908      	cbnz	r0, 8004326 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	e7df      	b.n	80042e6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800432c:	e7a1      	b.n	8004272 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800432e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004334:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004336:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004338:	4639      	mov	r1, r7
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff fdf8 	bl	8003f30 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	462a      	mov	r2, r5
 8004342:	4641      	mov	r1, r8
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff fe89 	bl	800405c <I2C_WaitOnTXISFlagUntilTimeout>
 800434a:	2800      	cmp	r0, #0
 800434c:	d191      	bne.n	8004272 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800434e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004356:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004358:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800435a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800435c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800435e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004360:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004362:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004364:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004366:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800436a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800436c:	b29b      	uxth	r3, r3
 800436e:	b1b3      	cbz	r3, 800439e <HAL_I2C_Mem_Write+0x15a>
 8004370:	b9aa      	cbnz	r2, 800439e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004372:	4643      	mov	r3, r8
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	4620      	mov	r0, r4
 8004378:	9500      	str	r5, [sp, #0]
 800437a:	f7ff fe9a 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 800437e:	2800      	cmp	r0, #0
 8004380:	f47f af77 	bne.w	8004272 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004384:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2bff      	cmp	r3, #255	; 0xff
 800438a:	d928      	bls.n	80043de <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800438c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800438e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004392:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004394:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004396:	4639      	mov	r1, r7
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff fdc9 	bl	8003f30 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800439e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1cc      	bne.n	8004340 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a6:	462a      	mov	r2, r5
 80043a8:	4641      	mov	r1, r8
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff feb4 	bl	8004118 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f47f af5e 	bne.w	8004272 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	2120      	movs	r1, #32
 80043ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80043c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80043c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80043d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80043dc:	e74a      	b.n	8004274 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80043de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80043e6:	b292      	uxth	r2, r2
 80043e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	e7d3      	b.n	8004396 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80043ee:	2002      	movs	r0, #2
 80043f0:	e740      	b.n	8004274 <HAL_I2C_Mem_Write+0x30>
 80043f2:	bf00      	nop
 80043f4:	80002000 	.word	0x80002000

080043f8 <HAL_I2C_Mem_Read>:
{
 80043f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004402:	4604      	mov	r4, r0
 8004404:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	2b20      	cmp	r3, #32
{
 8004408:	4616      	mov	r6, r2
 800440a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800440e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004412:	f040 80c9 	bne.w	80045a8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8004416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004418:	b113      	cbz	r3, 8004420 <HAL_I2C_Mem_Read+0x28>
 800441a:	f1ba 0f00 	cmp.w	sl, #0
 800441e:	d106      	bne.n	800442e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004424:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004426:	2001      	movs	r0, #1
}
 8004428:	b003      	add	sp, #12
 800442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800442e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004432:	2b01      	cmp	r3, #1
 8004434:	f000 80b8 	beq.w	80045a8 <HAL_I2C_Mem_Read+0x1b0>
 8004438:	f04f 0b01 	mov.w	fp, #1
 800443c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004440:	f7fe fcd6 	bl	8002df0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004444:	2319      	movs	r3, #25
 8004446:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004448:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800444a:	465a      	mov	r2, fp
 800444c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff fe2e 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2800      	cmp	r0, #0
 800445a:	d1e4      	bne.n	8004426 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800445c:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800445e:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004460:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004462:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800446c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446e:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004470:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004472:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004474:	4a4d      	ldr	r2, [pc, #308]	; (80045ac <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004476:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800447a:	9200      	str	r2, [sp, #0]
 800447c:	fa5f f289 	uxtb.w	r2, r9
 8004480:	f7ff fd56 	bl	8003f30 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004484:	462a      	mov	r2, r5
 8004486:	4641      	mov	r1, r8
 8004488:	4620      	mov	r0, r4
 800448a:	f7ff fde7 	bl	800405c <I2C_WaitOnTXISFlagUntilTimeout>
 800448e:	bb20      	cbnz	r0, 80044da <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004490:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004494:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004496:	d116      	bne.n	80044c6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004498:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	2200      	movs	r2, #0
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a2:	4643      	mov	r3, r8
 80044a4:	9500      	str	r5, [sp, #0]
 80044a6:	f7ff fe04 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 80044aa:	b9b0      	cbnz	r0, 80044da <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2bff      	cmp	r3, #255	; 0xff
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_I2C_Mem_Read+0x1b8>)
 80044b4:	d815      	bhi.n	80044e2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80044b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80044be:	b292      	uxth	r2, r2
 80044c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	e012      	b.n	80044ec <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044c6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c8:	4641      	mov	r1, r8
 80044ca:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	462a      	mov	r2, r5
 80044d0:	f7ff fdc4 	bl	800405c <I2C_WaitOnTXISFlagUntilTimeout>
 80044d4:	b908      	cbnz	r0, 80044da <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	e7de      	b.n	8004498 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80044e0:	e7a1      	b.n	8004426 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ec:	4639      	mov	r1, r7
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff fd1e 	bl	8003f30 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	4643      	mov	r3, r8
 80044f6:	2200      	movs	r2, #0
 80044f8:	2104      	movs	r1, #4
 80044fa:	4620      	mov	r0, r4
 80044fc:	9500      	str	r5, [sp, #0]
 80044fe:	f7ff fdd8 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 8004502:	2800      	cmp	r0, #0
 8004504:	d18f      	bne.n	8004426 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800450e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004510:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004512:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004514:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004516:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004518:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800451a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800451c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800451e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004520:	b29b      	uxth	r3, r3
 8004522:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004524:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	b1b3      	cbz	r3, 8004558 <HAL_I2C_Mem_Read+0x160>
 800452a:	b9aa      	cbnz	r2, 8004558 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800452c:	4643      	mov	r3, r8
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	4620      	mov	r0, r4
 8004532:	9500      	str	r5, [sp, #0]
 8004534:	f7ff fdbd 	bl	80040b2 <I2C_WaitOnFlagUntilTimeout>
 8004538:	2800      	cmp	r0, #0
 800453a:	f47f af74 	bne.w	8004426 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800453e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2bff      	cmp	r3, #255	; 0xff
 8004544:	d928      	bls.n	8004598 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004546:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800454c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800454e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004550:	4639      	mov	r1, r7
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff fcec 	bl	8003f30 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004558:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1c9      	bne.n	80044f4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	462a      	mov	r2, r5
 8004562:	4641      	mov	r1, r8
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff fdd7 	bl	8004118 <I2C_WaitOnSTOPFlagUntilTimeout>
 800456a:	2800      	cmp	r0, #0
 800456c:	f47f af5b 	bne.w	8004426 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	2120      	movs	r1, #32
 8004574:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800457c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004580:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800458e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004592:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004596:	e747      	b.n	8004428 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004598:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800459a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80045a0:	b292      	uxth	r2, r2
 80045a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	e7d3      	b.n	8004550 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80045a8:	2002      	movs	r0, #2
 80045aa:	e73d      	b.n	8004428 <HAL_I2C_Mem_Read+0x30>
 80045ac:	80002000 	.word	0x80002000
 80045b0:	80002400 	.word	0x80002400

080045b4 <HAL_I2C_GetState>:
  return hi2c->State;
 80045b4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80045b8:	4770      	bx	lr

080045ba <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80045ba:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80045bc:	4770      	bx	lr

080045be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045be:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	b2dc      	uxtb	r4, r3
 80045c8:	d11d      	bne.n	8004606 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d019      	beq.n	8004606 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d2:	2324      	movs	r3, #36	; 0x24
 80045d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d8:	6803      	ldr	r3, [r0, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4311      	orrs	r1, r2
 80045ee:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80045fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004602:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004604:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004606:	2002      	movs	r0, #2
 8004608:	e7fc      	b.n	8004604 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800460a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800460a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004610:	2b20      	cmp	r3, #32
 8004612:	b2dc      	uxtb	r4, r3
 8004614:	d11c      	bne.n	8004650 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004616:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800461a:	2b01      	cmp	r3, #1
 800461c:	d018      	beq.n	8004650 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461e:	2324      	movs	r3, #36	; 0x24
 8004620:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004624:	6803      	ldr	r3, [r0, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800462e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004630:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004634:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004638:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004642:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004648:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800464c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800464e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004650:	2002      	movs	r0, #2
 8004652:	e7fc      	b.n	800464e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004654 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004654:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004656:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004658:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800465c:	3284      	adds	r2, #132	; 0x84
 800465e:	1883      	adds	r3, r0, r2
{
 8004660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004664:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004666:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800466a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800466c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004670:	684c      	ldr	r4, [r1, #4]
 8004672:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004676:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800467a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800467e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004680:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004682:	68c5      	ldr	r5, [r0, #12]
 8004684:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8004688:	443d      	add	r5, r7
 800468a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800468e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004690:	68c6      	ldr	r6, [r0, #12]
 8004692:	68cd      	ldr	r5, [r1, #12]
 8004694:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004698:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800469a:	689d      	ldr	r5, [r3, #8]
 800469c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80046a0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046a2:	688d      	ldr	r5, [r1, #8]
 80046a4:	68c7      	ldr	r7, [r0, #12]
 80046a6:	3501      	adds	r5, #1
 80046a8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80046ac:	443d      	add	r5, r7
 80046ae:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046b2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046b4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046b6:	691d      	ldr	r5, [r3, #16]
 80046b8:	f025 0507 	bic.w	r5, r5, #7
 80046bc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046be:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046c0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80046c2:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80046c6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046ca:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046ce:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80046d2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80046d6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80046da:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80046de:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046e0:	695d      	ldr	r5, [r3, #20]
 80046e2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80046e6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80046e8:	694d      	ldr	r5, [r1, #20]
 80046ea:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80046ec:	69dd      	ldr	r5, [r3, #28]
 80046ee:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80046f2:	f025 0507 	bic.w	r5, r5, #7
 80046f6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046f8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80046fc:	433d      	orrs	r5, r7
 80046fe:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004700:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004702:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004704:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004708:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800470a:	b1fe      	cbz	r6, 800474c <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800470c:	3e01      	subs	r6, #1
 800470e:	2e06      	cmp	r6, #6
 8004710:	d81e      	bhi.n	8004750 <LTDC_SetConfig+0xfc>
 8004712:	4d10      	ldr	r5, [pc, #64]	; (8004754 <LTDC_SetConfig+0x100>)
 8004714:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004716:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004718:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800471c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004720:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004722:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004724:	3407      	adds	r4, #7
 8004726:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004728:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800472a:	436e      	muls	r6, r5
 800472c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004730:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004732:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004734:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004738:	f024 0407 	bic.w	r4, r4, #7
 800473c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800473e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004740:	5883      	ldr	r3, [r0, r2]
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	5083      	str	r3, [r0, r2]
}
 8004748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800474c:	2504      	movs	r5, #4
 800474e:	e7e2      	b.n	8004716 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004750:	2501      	movs	r5, #1
 8004752:	e7e0      	b.n	8004716 <LTDC_SetConfig+0xc2>
 8004754:	080087fc 	.word	0x080087fc

08004758 <HAL_LTDC_MspInit>:
}
 8004758:	4770      	bx	lr
	...

0800475c <HAL_LTDC_Init>:
{
 800475c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800475e:	4604      	mov	r4, r0
 8004760:	2800      	cmp	r0, #0
 8004762:	d063      	beq.n	800482c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004764:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004768:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800476c:	b91b      	cbnz	r3, 8004776 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800476e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004772:	f7ff fff1 	bl	8004758 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004784:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004786:	6999      	ldr	r1, [r3, #24]
 8004788:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800478c:	4302      	orrs	r2, r0
 800478e:	68e0      	ldr	r0, [r4, #12]
 8004790:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004792:	6920      	ldr	r0, [r4, #16]
 8004794:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004796:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004798:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800479a:	4925      	ldr	r1, [pc, #148]	; (8004830 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800479c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	400a      	ands	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047aa:	69a0      	ldr	r0, [r4, #24]
 80047ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80047ae:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047b0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	400a      	ands	r2, r1
 80047b6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047be:	6a20      	ldr	r0, [r4, #32]
 80047c0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80047c4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	400a      	ands	r2, r1
 80047ca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80047d4:	4302      	orrs	r2, r0
 80047d6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047de:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047e8:	430a      	orrs	r2, r1
 80047ea:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80047ee:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80047f6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80047fe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004802:	432a      	orrs	r2, r5
 8004804:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004808:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800480a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004812:	f042 0206 	orr.w	r2, r2, #6
 8004816:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004820:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004822:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004826:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800482a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800482c:	2001      	movs	r0, #1
 800482e:	e7fc      	b.n	800482a <HAL_LTDC_Init+0xce>
 8004830:	f000f800 	.word	0xf000f800

08004834 <HAL_LTDC_ConfigLayer>:
{
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004838:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800483c:	4606      	mov	r6, r0
 800483e:	460f      	mov	r7, r1
 8004840:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004842:	2b01      	cmp	r3, #1
 8004844:	f04f 0002 	mov.w	r0, #2
 8004848:	d01f      	beq.n	800488a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800484a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800484c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004850:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004852:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004856:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800485a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800485e:	3438      	adds	r4, #56	; 0x38
 8004860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800486a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800486c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800486e:	4630      	mov	r0, r6
 8004870:	4662      	mov	r2, ip
 8004872:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004874:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004876:	f7ff feed 	bl	8004654 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800487a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800487c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800487e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004882:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004886:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800488e <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800488e:	b538      	push	{r3, r4, r5, lr}
 8004890:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004892:	f7fe faad 	bl	8002df0 <HAL_GetTick>
 8004896:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004898:	2c00      	cmp	r4, #0
 800489a:	d061      	beq.n	8004960 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800489c:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800489e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80048a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80048a4:	2302      	movs	r3, #2
 80048a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80048aa:	68d3      	ldr	r3, [r2, #12]
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	07d2      	lsls	r2, r2, #31
 80048b8:	d448      	bmi.n	800494c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80048ba:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80048be:	430a      	orrs	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80048c2:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	69e1      	ldr	r1, [r4, #28]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	6a21      	ldr	r1, [r4, #32]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048d2:	430a      	orrs	r2, r1
 80048d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80048d6:	430a      	orrs	r2, r1
 80048d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80048da:	430a      	orrs	r2, r1
 80048dc:	68a1      	ldr	r1, [r4, #8]
 80048de:	430a      	orrs	r2, r1
 80048e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048e2:	3901      	subs	r1, #1
 80048e4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80048ee:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80048f0:	d103      	bne.n	80048fa <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80048f8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80048fa:	2200      	movs	r2, #0
 80048fc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80048fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004900:	2a00      	cmp	r2, #0
 8004902:	da04      	bge.n	800490e <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004904:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8004906:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004908:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800490c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800490e:	b292      	uxth	r2, r2
 8004910:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004914:	2a00      	cmp	r2, #0
 8004916:	da25      	bge.n	8004964 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004918:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800491a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800491c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8004920:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004922:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004924:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004928:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800492c:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	d019      	beq.n	8004968 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004934:	b2c9      	uxtb	r1, r1
 8004936:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800493a:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800493c:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800493e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8004940:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8004942:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8004946:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800494a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800494c:	f7fe fa50 	bl	8002df0 <HAL_GetTick>
 8004950:	1b40      	subs	r0, r0, r5
 8004952:	2805      	cmp	r0, #5
 8004954:	d9ad      	bls.n	80048b2 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8004956:	2340      	movs	r3, #64	; 0x40
 8004958:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800495a:	2303      	movs	r3, #3
 800495c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
 8004962:	e7f2      	b.n	800494a <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004964:	6a18      	ldr	r0, [r3, #32]
 8004966:	e7dd      	b.n	8004924 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8004968:	629a      	str	r2, [r3, #40]	; 0x28
 800496a:	e7e5      	b.n	8004938 <HAL_MDMA_Init+0xaa>

0800496c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800496c:	b1d8      	cbz	r0, 80049a6 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800496e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004970:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8004972:	68d3      	ldr	r3, [r2, #12]
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800497e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8004980:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8004982:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8004984:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8004986:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8004988:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800498a:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800498c:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800498e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004990:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004992:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8004994:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8004996:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800499a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800499e:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 80049a2:	4618      	mov	r0, r3
 80049a4:	4770      	bx	lr
    return HAL_ERROR;
 80049a6:	2001      	movs	r0, #1
}
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049ae:	4c10      	ldr	r4, [pc, #64]	; (80049f0 <HAL_PWREx_ConfigSupply+0x44>)
 80049b0:	68e3      	ldr	r3, [r4, #12]
 80049b2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049b6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049b8:	d105      	bne.n	80049c6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049ba:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049be:	1a18      	subs	r0, r3, r0
 80049c0:	bf18      	it	ne
 80049c2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	4318      	orrs	r0, r3
 80049cc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80049ce:	f7fe fa0f 	bl	8002df0 <HAL_GetTick>
 80049d2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	049b      	lsls	r3, r3, #18
 80049d8:	d501      	bpl.n	80049de <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e7f2      	b.n	80049c4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049de:	f7fe fa07 	bl	8002df0 <HAL_GetTick>
 80049e2:	1b40      	subs	r0, r0, r5
 80049e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049e8:	d9f4      	bls.n	80049d4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
 80049ec:	e7ea      	b.n	80049c4 <HAL_PWREx_ConfigSupply+0x18>
 80049ee:	bf00      	nop
 80049f0:	58024800 	.word	0x58024800

080049f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f6:	4604      	mov	r4, r0
 80049f8:	b908      	cbnz	r0, 80049fe <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
 80049fc:	e08c      	b.n	8004b18 <HAL_RCC_OscConfig+0x124>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	6803      	ldr	r3, [r0, #0]
 8004a00:	07d8      	lsls	r0, r3, #31
 8004a02:	d45e      	bmi.n	8004ac2 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	0799      	lsls	r1, r3, #30
 8004a08:	f100 80ac 	bmi.w	8004b64 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	06da      	lsls	r2, r3, #27
 8004a10:	d527      	bpl.n	8004a62 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a12:	4a9c      	ldr	r2, [pc, #624]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004a14:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a16:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d007      	beq.n	8004a30 <HAL_RCC_OscConfig+0x3c>
 8004a20:	2b18      	cmp	r3, #24
 8004a22:	f040 8103 	bne.w	8004c2c <HAL_RCC_OscConfig+0x238>
 8004a26:	f001 0303 	and.w	r3, r1, #3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	f040 80fe 	bne.w	8004c2c <HAL_RCC_OscConfig+0x238>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a30:	6813      	ldr	r3, [r2, #0]
 8004a32:	05db      	lsls	r3, r3, #23
 8004a34:	d502      	bpl.n	8004a3c <HAL_RCC_OscConfig+0x48>
 8004a36:	69e3      	ldr	r3, [r4, #28]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d1de      	bne.n	80049fa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a3c:	f7fe f9f0 	bl	8002e20 <HAL_GetREVID>
 8004a40:	f241 0303 	movw	r3, #4099	; 0x1003
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	4b8e      	ldr	r3, [pc, #568]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004a4a:	f200 80e8 	bhi.w	8004c1e <HAL_RCC_OscConfig+0x22a>
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	2920      	cmp	r1, #32
 8004a52:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8004a56:	bf0c      	ite	eq
 8004a58:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8004a5c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004a60:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	0719      	lsls	r1, r3, #28
 8004a66:	f100 8122 	bmi.w	8004cae <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	069a      	lsls	r2, r3, #26
 8004a6e:	f100 8143 	bmi.w	8004cf8 <HAL_RCC_OscConfig+0x304>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	075d      	lsls	r5, r3, #29
 8004a76:	d51e      	bpl.n	8004ab6 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8004a78:	4d83      	ldr	r5, [pc, #524]	; (8004c88 <HAL_RCC_OscConfig+0x294>)
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004a82:	f7fe f9b5 	bl	8002df0 <HAL_GetTick>
 8004a86:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	05da      	lsls	r2, r3, #23
 8004a8c:	f140 8159 	bpl.w	8004d42 <HAL_RCC_OscConfig+0x34e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	4d7c      	ldr	r5, [pc, #496]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 815b 	bne.w	8004d50 <HAL_RCC_OscConfig+0x35c>
 8004a9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f9a3 	bl	8002df0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aaa:	4e76      	ldr	r6, [pc, #472]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004aac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aae:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004ab0:	079b      	lsls	r3, r3, #30
 8004ab2:	f140 8173 	bpl.w	8004d9c <HAL_RCC_OscConfig+0x3a8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f040 8176 	bne.w	8004daa <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e02a      	b.n	8004b18 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac2:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004ac4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ac6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_OscConfig+0xe8>
 8004ad0:	2b18      	cmp	r3, #24
 8004ad2:	d10a      	bne.n	8004aea <HAL_RCC_OscConfig+0xf6>
 8004ad4:	f001 0303 	and.w	r3, r1, #3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	039a      	lsls	r2, r3, #14
 8004ae0:	d590      	bpl.n	8004a04 <HAL_RCC_OscConfig+0x10>
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d18d      	bne.n	8004a04 <HAL_RCC_OscConfig+0x10>
 8004ae8:	e787      	b.n	80049fa <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	4d65      	ldr	r5, [pc, #404]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d112      	bne.n	8004b1a <HAL_RCC_OscConfig+0x126>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004afc:	f7fe f978 	bl	8002df0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b00:	4e60      	ldr	r6, [pc, #384]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004b02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	039b      	lsls	r3, r3, #14
 8004b08:	f53f af7c 	bmi.w	8004a04 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe f970 	bl	8002df0 <HAL_GetTick>
 8004b10:	1b40      	subs	r0, r0, r5
 8004b12:	2864      	cmp	r0, #100	; 0x64
 8004b14:	d9f6      	bls.n	8004b04 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004b16:	2003      	movs	r0, #3
}
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1a:	b9a3      	cbnz	r3, 8004b46 <HAL_RCC_OscConfig+0x152>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b2c:	f7fe f960 	bl	8002df0 <HAL_GetTick>
 8004b30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	039f      	lsls	r7, r3, #14
 8004b36:	f57f af65 	bpl.w	8004a04 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3a:	f7fe f959 	bl	8002df0 <HAL_GetTick>
 8004b3e:	1b80      	subs	r0, r0, r6
 8004b40:	2864      	cmp	r0, #100	; 0x64
 8004b42:	d9f6      	bls.n	8004b32 <HAL_RCC_OscConfig+0x13e>
 8004b44:	e7e7      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	d103      	bne.n	8004b56 <HAL_RCC_OscConfig+0x162>
 8004b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	e7ce      	b.n	8004af4 <HAL_RCC_OscConfig+0x100>
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5a:	602b      	str	r3, [r5, #0]
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b62:	e7ca      	b.n	8004afa <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b64:	4947      	ldr	r1, [pc, #284]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004b66:	68e2      	ldr	r2, [r4, #12]
 8004b68:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b6a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b6c:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_OscConfig+0x186>
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	d12b      	bne.n	8004bce <HAL_RCC_OscConfig+0x1da>
 8004b76:	0780      	lsls	r0, r0, #30
 8004b78:	d129      	bne.n	8004bce <HAL_RCC_OscConfig+0x1da>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b7a:	680b      	ldr	r3, [r1, #0]
 8004b7c:	075b      	lsls	r3, r3, #29
 8004b7e:	d502      	bpl.n	8004b86 <HAL_RCC_OscConfig+0x192>
 8004b80:	2a00      	cmp	r2, #0
 8004b82:	f43f af3a 	beq.w	80049fa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b86:	4d3f      	ldr	r5, [pc, #252]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	f023 0319 	bic.w	r3, r3, #25
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b92:	f7fe f92d 	bl	8002df0 <HAL_GetTick>
 8004b96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	075f      	lsls	r7, r3, #29
 8004b9c:	d511      	bpl.n	8004bc2 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	f7fe f93f 	bl	8002e20 <HAL_GetREVID>
 8004ba2:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	4298      	cmp	r0, r3
 8004baa:	686b      	ldr	r3, [r5, #4]
 8004bac:	d822      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x200>
 8004bae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004bb2:	2a40      	cmp	r2, #64	; 0x40
 8004bb4:	bf0c      	ite	eq
 8004bb6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8004bba:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004bbe:	606b      	str	r3, [r5, #4]
 8004bc0:	e724      	b.n	8004a0c <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe f915 	bl	8002df0 <HAL_GetTick>
 8004bc6:	1b80      	subs	r0, r0, r6
 8004bc8:	2802      	cmp	r0, #2
 8004bca:	d9e5      	bls.n	8004b98 <HAL_RCC_OscConfig+0x1a4>
 8004bcc:	e7a3      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bce:	4d2d      	ldr	r5, [pc, #180]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bd0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd2:	b1a2      	cbz	r2, 8004bfe <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bd4:	f023 0319 	bic.w	r3, r3, #25
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bdc:	f7fe f908 	bl	8002df0 <HAL_GetTick>
 8004be0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	0758      	lsls	r0, r3, #29
 8004be6:	d4da      	bmi.n	8004b9e <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fe f902 	bl	8002df0 <HAL_GetTick>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	2802      	cmp	r0, #2
 8004bf0:	d9f7      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
 8004bf2:	e790      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004bf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bfc:	e7df      	b.n	8004bbe <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c04:	f7fe f8f4 	bl	8002df0 <HAL_GetTick>
 8004c08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	0759      	lsls	r1, r3, #29
 8004c0e:	f57f aefd 	bpl.w	8004a0c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fe f8ed 	bl	8002df0 <HAL_GetTick>
 8004c16:	1b80      	subs	r0, r0, r6
 8004c18:	2802      	cmp	r0, #2
 8004c1a:	d9f6      	bls.n	8004c0a <HAL_RCC_OscConfig+0x216>
 8004c1c:	e77b      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004c24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c28:	60da      	str	r2, [r3, #12]
 8004c2a:	e71a      	b.n	8004a62 <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c2c:	69e3      	ldr	r3, [r4, #28]
 8004c2e:	4d15      	ldr	r5, [pc, #84]	; (8004c84 <HAL_RCC_OscConfig+0x290>)
 8004c30:	b363      	cbz	r3, 8004c8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c3a:	f7fe f8d9 	bl	8002df0 <HAL_GetTick>
 8004c3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	05df      	lsls	r7, r3, #23
 8004c44:	d511      	bpl.n	8004c6a <HAL_RCC_OscConfig+0x276>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c46:	f7fe f8eb 	bl	8002e20 <HAL_GetREVID>
 8004c4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c4e:	6a22      	ldr	r2, [r4, #32]
 8004c50:	4298      	cmp	r0, r3
 8004c52:	d810      	bhi.n	8004c76 <HAL_RCC_OscConfig+0x282>
 8004c54:	686b      	ldr	r3, [r5, #4]
 8004c56:	2a20      	cmp	r2, #32
 8004c58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c5c:	bf0c      	ite	eq
 8004c5e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004c62:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004c66:	606b      	str	r3, [r5, #4]
 8004c68:	e6fb      	b.n	8004a62 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c6a:	f7fe f8c1 	bl	8002df0 <HAL_GetTick>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9e5      	bls.n	8004c40 <HAL_RCC_OscConfig+0x24c>
 8004c74:	e74f      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c76:	68eb      	ldr	r3, [r5, #12]
 8004c78:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004c7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c80:	60eb      	str	r3, [r5, #12]
 8004c82:	e6ee      	b.n	8004a62 <HAL_RCC_OscConfig+0x6e>
 8004c84:	58024400 	.word	0x58024400
 8004c88:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c94:	f7fe f8ac 	bl	8002df0 <HAL_GetTick>
 8004c98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	05d8      	lsls	r0, r3, #23
 8004c9e:	f57f aee0 	bpl.w	8004a62 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ca2:	f7fe f8a5 	bl	8002df0 <HAL_GetTick>
 8004ca6:	1b80      	subs	r0, r0, r6
 8004ca8:	2802      	cmp	r0, #2
 8004caa:	d9f6      	bls.n	8004c9a <HAL_RCC_OscConfig+0x2a6>
 8004cac:	e733      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cae:	6963      	ldr	r3, [r4, #20]
 8004cb0:	4da5      	ldr	r5, [pc, #660]	; (8004f48 <HAL_RCC_OscConfig+0x554>)
 8004cb2:	b183      	cbz	r3, 8004cd6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8004cb4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004cbc:	f7fe f898 	bl	8002df0 <HAL_GetTick>
 8004cc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cc2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004cc4:	079b      	lsls	r3, r3, #30
 8004cc6:	f53f aed0 	bmi.w	8004a6a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe f891 	bl	8002df0 <HAL_GetTick>
 8004cce:	1b80      	subs	r0, r0, r6
 8004cd0:	2802      	cmp	r0, #2
 8004cd2:	d9f6      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x2ce>
 8004cd4:	e71f      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8004cd6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004cde:	f7fe f887 	bl	8002df0 <HAL_GetTick>
 8004ce2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ce4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004ce6:	079f      	lsls	r7, r3, #30
 8004ce8:	f57f aebf 	bpl.w	8004a6a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fe f880 	bl	8002df0 <HAL_GetTick>
 8004cf0:	1b80      	subs	r0, r0, r6
 8004cf2:	2802      	cmp	r0, #2
 8004cf4:	d9f6      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x2f0>
 8004cf6:	e70e      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cf8:	69a3      	ldr	r3, [r4, #24]
 8004cfa:	4d93      	ldr	r5, [pc, #588]	; (8004f48 <HAL_RCC_OscConfig+0x554>)
 8004cfc:	b183      	cbz	r3, 8004d20 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d04:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d06:	f7fe f873 	bl	8002df0 <HAL_GetTick>
 8004d0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	0498      	lsls	r0, r3, #18
 8004d10:	f53f aeaf 	bmi.w	8004a72 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d14:	f7fe f86c 	bl	8002df0 <HAL_GetTick>
 8004d18:	1b80      	subs	r0, r0, r6
 8004d1a:	2802      	cmp	r0, #2
 8004d1c:	d9f6      	bls.n	8004d0c <HAL_RCC_OscConfig+0x318>
 8004d1e:	e6fa      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d26:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d28:	f7fe f862 	bl	8002df0 <HAL_GetTick>
 8004d2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	0499      	lsls	r1, r3, #18
 8004d32:	f57f ae9e 	bpl.w	8004a72 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d36:	f7fe f85b 	bl	8002df0 <HAL_GetTick>
 8004d3a:	1b80      	subs	r0, r0, r6
 8004d3c:	2802      	cmp	r0, #2
 8004d3e:	d9f6      	bls.n	8004d2e <HAL_RCC_OscConfig+0x33a>
 8004d40:	e6e9      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe f855 	bl	8002df0 <HAL_GetTick>
 8004d46:	1b80      	subs	r0, r0, r6
 8004d48:	2864      	cmp	r0, #100	; 0x64
 8004d4a:	f67f ae9d 	bls.w	8004a88 <HAL_RCC_OscConfig+0x94>
 8004d4e:	e6e2      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d50:	b9b3      	cbnz	r3, 8004d80 <HAL_RCC_OscConfig+0x38c>
 8004d52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	672b      	str	r3, [r5, #112]	; 0x70
 8004d5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d60:	f023 0304 	bic.w	r3, r3, #4
 8004d64:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004d66:	f7fe f843 	bl	8002df0 <HAL_GetTick>
 8004d6a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d6e:	0798      	lsls	r0, r3, #30
 8004d70:	f57f aea1 	bpl.w	8004ab6 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe f83c 	bl	8002df0 <HAL_GetTick>
 8004d78:	1b80      	subs	r0, r0, r6
 8004d7a:	42b8      	cmp	r0, r7
 8004d7c:	d9f6      	bls.n	8004d6c <HAL_RCC_OscConfig+0x378>
 8004d7e:	e6ca      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d84:	d103      	bne.n	8004d8e <HAL_RCC_OscConfig+0x39a>
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	672b      	str	r3, [r5, #112]	; 0x70
 8004d8c:	e685      	b.n	8004a9a <HAL_RCC_OscConfig+0xa6>
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	672b      	str	r3, [r5, #112]	; 0x70
 8004d94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	e681      	b.n	8004aa0 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fe f828 	bl	8002df0 <HAL_GetTick>
 8004da0:	1b40      	subs	r0, r0, r5
 8004da2:	42b8      	cmp	r0, r7
 8004da4:	f67f ae83 	bls.w	8004aae <HAL_RCC_OscConfig+0xba>
 8004da8:	e6b5      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004daa:	4d67      	ldr	r5, [pc, #412]	; (8004f48 <HAL_RCC_OscConfig+0x554>)
 8004dac:	692b      	ldr	r3, [r5, #16]
 8004dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db2:	2b18      	cmp	r3, #24
 8004db4:	d07a      	beq.n	8004eac <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8004db6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc0:	d167      	bne.n	8004e92 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8004dc2:	f7fe f815 	bl	8002df0 <HAL_GetTick>
 8004dc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	0199      	lsls	r1, r3, #6
 8004dcc:	d45b      	bmi.n	8004e86 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004dd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004dd2:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dde:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004de2:	62ab      	str	r3, [r5, #40]	; 0x28
 8004de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004de8:	3b01      	subs	r3, #1
 8004dea:	3a01      	subs	r2, #1
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	0412      	lsls	r2, r2, #16
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004df6:	4313      	orrs	r3, r2
 8004df8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e00:	4313      	orrs	r3, r2
 8004e02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0612      	lsls	r2, r2, #24
 8004e08:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004e1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e28:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e2e:	f023 030c 	bic.w	r3, r3, #12
 8004e32:	4313      	orrs	r3, r2
 8004e34:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004e3a:	f023 0302 	bic.w	r3, r3, #2
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e50:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e58:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e6a:	f7fd ffc1 	bl	8002df0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e6e:	4d36      	ldr	r5, [pc, #216]	; (8004f48 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8004e70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	019a      	lsls	r2, r3, #6
 8004e76:	f53f ae22 	bmi.w	8004abe <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd ffb9 	bl	8002df0 <HAL_GetTick>
 8004e7e:	1b00      	subs	r0, r0, r4
 8004e80:	2802      	cmp	r0, #2
 8004e82:	d9f6      	bls.n	8004e72 <HAL_RCC_OscConfig+0x47e>
 8004e84:	e647      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fd ffb3 	bl	8002df0 <HAL_GetTick>
 8004e8a:	1b80      	subs	r0, r0, r6
 8004e8c:	2802      	cmp	r0, #2
 8004e8e:	d99b      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x3d4>
 8004e90:	e641      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8004e92:	f7fd ffad 	bl	8002df0 <HAL_GetTick>
 8004e96:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	f57f ae0f 	bpl.w	8004abe <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd ffa6 	bl	8002df0 <HAL_GetTick>
 8004ea4:	1b00      	subs	r0, r0, r4
 8004ea6:	2802      	cmp	r0, #2
 8004ea8:	d9f6      	bls.n	8004e98 <HAL_RCC_OscConfig+0x4a4>
 8004eaa:	e634      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eac:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004eae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004eb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb2:	f43f ae31 	beq.w	8004b18 <HAL_RCC_OscConfig+0x124>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ebc:	4281      	cmp	r1, r0
 8004ebe:	f47f ad9c 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ec8:	428a      	cmp	r2, r1
 8004eca:	f47f ad96 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ed0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8004ed4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	f47f ad8f 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004edc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ede:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8004ee2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ee4:	4291      	cmp	r1, r2
 8004ee6:	f47f ad88 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004eec:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8004ef0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	f47f ad81 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ef8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004efa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004efe:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f00:	4293      	cmp	r3, r2
 8004f02:	f47f ad7a 	bne.w	80049fa <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f0a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f43f add5 	beq.w	8004abe <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f14:	4d0c      	ldr	r5, [pc, #48]	; (8004f48 <HAL_RCC_OscConfig+0x554>)
 8004f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004f1e:	f7fd ff67 	bl	8002df0 <HAL_GetTick>
 8004f22:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f24:	f7fd ff64 	bl	8002df0 <HAL_GetTick>
 8004f28:	42b0      	cmp	r0, r6
 8004f2a:	d0fb      	beq.n	8004f24 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004f2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f3c:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004f46:	e5ba      	b.n	8004abe <HAL_RCC_OscConfig+0xca>
 8004f48:	58024400 	.word	0x58024400

08004f4c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCC_GetSysClockFreq+0x128>)
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004f54:	2a10      	cmp	r2, #16
{
 8004f56:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f58:	f000 8088 	beq.w	800506c <HAL_RCC_GetSysClockFreq+0x120>
 8004f5c:	2a18      	cmp	r2, #24
 8004f5e:	d00c      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0x2e>
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	f040 8085 	bne.w	8005070 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4843      	ldr	r0, [pc, #268]	; (8005078 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f6a:	f012 0f20 	tst.w	r2, #32
 8004f6e:	d003      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f76:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004f78:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f7c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f7e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8004f80:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f84:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 8004f8a:	d0f5      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f8c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f90:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f94:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f98:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f9c:	4362      	muls	r2, r4
 8004f9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004fa2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004fa8:	ee06 2a90 	vmov	s13, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004fb0:	d04e      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0x104>
 8004fb2:	2902      	cmp	r1, #2
 8004fb4:	d03e      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xe8>
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d14a      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d527      	bpl.n	8005010 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fc4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fca:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd0:	ee07 2a90 	vmov	s15, r2
 8004fd4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004fd8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004fdc:	ee07 3a10 	vmov	s14, r3
 8004fe0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004fe4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004fe8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004fec:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <HAL_RCC_GetSysClockFreq+0x128>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004ff8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ffa:	ee07 3a10 	vmov	s14, r3
 8004ffe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005002:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005006:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800500a:	ee17 0a90 	vmov	r0, s15
 800500e:	e7b3      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005022:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005026:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800507c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800502a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800502e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8005032:	e7dd      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee77 7a86 	vadd.f32	s15, s15, s12
 800504a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8005080 <HAL_RCC_GetSysClockFreq+0x134>
 800504e:	e7ec      	b.n	800502a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005066:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8005084 <HAL_RCC_GetSysClockFreq+0x138>
 800506a:	e7de      	b.n	800502a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506c:	4806      	ldr	r0, [pc, #24]	; (8005088 <HAL_RCC_GetSysClockFreq+0x13c>)
 800506e:	e783      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <HAL_RCC_GetSysClockFreq+0x140>)
 8005072:	e781      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x2c>
 8005074:	58024400 	.word	0x58024400
 8005078:	03d09000 	.word	0x03d09000
 800507c:	4c742400 	.word	0x4c742400
 8005080:	4bbebc20 	.word	0x4bbebc20
 8005084:	4a742400 	.word	0x4a742400
 8005088:	017d7840 	.word	0x017d7840
 800508c:	003d0900 	.word	0x003d0900

08005090 <HAL_RCC_ClockConfig>:
{
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005096:	4604      	mov	r4, r0
 8005098:	b910      	cbnz	r0, 80050a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800509a:	2001      	movs	r0, #1
}
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4a88      	ldr	r2, [pc, #544]	; (80052c4 <HAL_RCC_ClockConfig+0x234>)
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	428b      	cmp	r3, r1
 80050aa:	f0c0 8093 	bcc.w	80051d4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	075f      	lsls	r7, r3, #29
 80050b2:	f100 809b 	bmi.w	80051ec <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b6:	071e      	lsls	r6, r3, #28
 80050b8:	d50b      	bpl.n	80050d2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050ba:	4983      	ldr	r1, [pc, #524]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80050bc:	6960      	ldr	r0, [r4, #20]
 80050be:	69ca      	ldr	r2, [r1, #28]
 80050c0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80050c4:	4290      	cmp	r0, r2
 80050c6:	d904      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050c8:	69ca      	ldr	r2, [r1, #28]
 80050ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050ce:	4302      	orrs	r2, r0
 80050d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d2:	06d8      	lsls	r0, r3, #27
 80050d4:	d50b      	bpl.n	80050ee <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050d6:	497c      	ldr	r1, [pc, #496]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80050d8:	69a0      	ldr	r0, [r4, #24]
 80050da:	69ca      	ldr	r2, [r1, #28]
 80050dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80050e0:	4290      	cmp	r0, r2
 80050e2:	d904      	bls.n	80050ee <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050e4:	69ca      	ldr	r2, [r1, #28]
 80050e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ea:	4302      	orrs	r2, r0
 80050ec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ee:	0699      	lsls	r1, r3, #26
 80050f0:	d50b      	bpl.n	800510a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050f2:	4975      	ldr	r1, [pc, #468]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80050f4:	69e0      	ldr	r0, [r4, #28]
 80050f6:	6a0a      	ldr	r2, [r1, #32]
 80050f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80050fc:	4290      	cmp	r0, r2
 80050fe:	d904      	bls.n	800510a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005100:	6a0a      	ldr	r2, [r1, #32]
 8005102:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005106:	4302      	orrs	r2, r0
 8005108:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510a:	079a      	lsls	r2, r3, #30
 800510c:	d50b      	bpl.n	8005126 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800510e:	496e      	ldr	r1, [pc, #440]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	698a      	ldr	r2, [r1, #24]
 8005114:	f002 020f 	and.w	r2, r2, #15
 8005118:	4290      	cmp	r0, r2
 800511a:	d904      	bls.n	8005126 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511c:	698a      	ldr	r2, [r1, #24]
 800511e:	f022 020f 	bic.w	r2, r2, #15
 8005122:	4302      	orrs	r2, r0
 8005124:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	07df      	lsls	r7, r3, #31
 8005128:	d46e      	bmi.n	8005208 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	079e      	lsls	r6, r3, #30
 800512e:	f100 80a1 	bmi.w	8005274 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005132:	4964      	ldr	r1, [pc, #400]	; (80052c4 <HAL_RCC_ClockConfig+0x234>)
 8005134:	680a      	ldr	r2, [r1, #0]
 8005136:	f002 020f 	and.w	r2, r2, #15
 800513a:	42aa      	cmp	r2, r5
 800513c:	f200 80a8 	bhi.w	8005290 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005140:	0758      	lsls	r0, r3, #29
 8005142:	f100 80b1 	bmi.w	80052a8 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005146:	0719      	lsls	r1, r3, #28
 8005148:	d50b      	bpl.n	8005162 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800514a:	495f      	ldr	r1, [pc, #380]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 800514c:	6960      	ldr	r0, [r4, #20]
 800514e:	69ca      	ldr	r2, [r1, #28]
 8005150:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005154:	4290      	cmp	r0, r2
 8005156:	d204      	bcs.n	8005162 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005158:	69ca      	ldr	r2, [r1, #28]
 800515a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800515e:	4302      	orrs	r2, r0
 8005160:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	06da      	lsls	r2, r3, #27
 8005164:	d50b      	bpl.n	800517e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005166:	4958      	ldr	r1, [pc, #352]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 8005168:	69a0      	ldr	r0, [r4, #24]
 800516a:	69ca      	ldr	r2, [r1, #28]
 800516c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005170:	4290      	cmp	r0, r2
 8005172:	d204      	bcs.n	800517e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005174:	69ca      	ldr	r2, [r1, #28]
 8005176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800517a:	4302      	orrs	r2, r0
 800517c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800517e:	069b      	lsls	r3, r3, #26
 8005180:	d50b      	bpl.n	800519a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005182:	4a51      	ldr	r2, [pc, #324]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 8005184:	69e1      	ldr	r1, [r4, #28]
 8005186:	6a13      	ldr	r3, [r2, #32]
 8005188:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800518c:	4299      	cmp	r1, r3
 800518e:	d204      	bcs.n	800519a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005190:	6a13      	ldr	r3, [r2, #32]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	430b      	orrs	r3, r1
 8005198:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800519a:	f7ff fed7 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 800519e:	494a      	ldr	r1, [pc, #296]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80051a0:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <HAL_RCC_ClockConfig+0x23c>)
 80051a2:	698b      	ldr	r3, [r1, #24]
 80051a4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80051a8:	5cd3      	ldrb	r3, [r2, r3]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051b0:	698b      	ldr	r3, [r1, #24]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	5cd3      	ldrb	r3, [r2, r3]
 80051b8:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	fa20 f303 	lsr.w	r3, r0, r3
 80051c2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80051c8:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCC_ClockConfig+0x248>)
}
 80051ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	f7fd bdae 	b.w	8002d30 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d4:	6813      	ldr	r3, [r2, #0]
 80051d6:	f023 030f 	bic.w	r3, r3, #15
 80051da:	430b      	orrs	r3, r1
 80051dc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	428b      	cmp	r3, r1
 80051e6:	f47f af58 	bne.w	800509a <HAL_RCC_ClockConfig+0xa>
 80051ea:	e760      	b.n	80050ae <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051ec:	4936      	ldr	r1, [pc, #216]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80051ee:	6920      	ldr	r0, [r4, #16]
 80051f0:	698a      	ldr	r2, [r1, #24]
 80051f2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80051f6:	4290      	cmp	r0, r2
 80051f8:	f67f af5d 	bls.w	80050b6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051fc:	698a      	ldr	r2, [r1, #24]
 80051fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005202:	4302      	orrs	r2, r0
 8005204:	618a      	str	r2, [r1, #24]
 8005206:	e756      	b.n	80050b6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005208:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 800520a:	68a1      	ldr	r1, [r4, #8]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005212:	430a      	orrs	r2, r1
 8005214:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005218:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	2902      	cmp	r1, #2
 800521c:	d11d      	bne.n	800525a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800521e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005222:	f43f af3a 	beq.w	800509a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005226:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005228:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522c:	4f26      	ldr	r7, [pc, #152]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800522e:	f022 0207 	bic.w	r2, r2, #7
 8005232:	430a      	orrs	r2, r1
 8005234:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8005236:	f7fd fddb 	bl	8002df0 <HAL_GetTick>
 800523a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005244:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005248:	f43f af6f 	beq.w	800512a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fd fdd0 	bl	8002df0 <HAL_GetTick>
 8005250:	1b80      	subs	r0, r0, r6
 8005252:	4540      	cmp	r0, r8
 8005254:	d9f2      	bls.n	800523c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8005256:	2003      	movs	r0, #3
 8005258:	e720      	b.n	800509c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525a:	2903      	cmp	r1, #3
 800525c:	d102      	bne.n	8005264 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005262:	e7de      	b.n	8005222 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005264:	2901      	cmp	r1, #1
 8005266:	d102      	bne.n	800526e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005268:	f412 7f80 	tst.w	r2, #256	; 0x100
 800526c:	e7d9      	b.n	8005222 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800526e:	f012 0f04 	tst.w	r2, #4
 8005272:	e7d6      	b.n	8005222 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005274:	4914      	ldr	r1, [pc, #80]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	698a      	ldr	r2, [r1, #24]
 800527a:	f002 020f 	and.w	r2, r2, #15
 800527e:	4290      	cmp	r0, r2
 8005280:	f4bf af57 	bcs.w	8005132 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005284:	698a      	ldr	r2, [r1, #24]
 8005286:	f022 020f 	bic.w	r2, r2, #15
 800528a:	4302      	orrs	r2, r0
 800528c:	618a      	str	r2, [r1, #24]
 800528e:	e750      	b.n	8005132 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005290:	680a      	ldr	r2, [r1, #0]
 8005292:	f022 020f 	bic.w	r2, r2, #15
 8005296:	432a      	orrs	r2, r5
 8005298:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	680a      	ldr	r2, [r1, #0]
 800529c:	f002 020f 	and.w	r2, r2, #15
 80052a0:	42aa      	cmp	r2, r5
 80052a2:	f47f aefa 	bne.w	800509a <HAL_RCC_ClockConfig+0xa>
 80052a6:	e74b      	b.n	8005140 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052a8:	4907      	ldr	r1, [pc, #28]	; (80052c8 <HAL_RCC_ClockConfig+0x238>)
 80052aa:	6920      	ldr	r0, [r4, #16]
 80052ac:	698a      	ldr	r2, [r1, #24]
 80052ae:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80052b2:	4290      	cmp	r0, r2
 80052b4:	f4bf af47 	bcs.w	8005146 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052b8:	698a      	ldr	r2, [r1, #24]
 80052ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80052be:	4302      	orrs	r2, r0
 80052c0:	618a      	str	r2, [r1, #24]
 80052c2:	e740      	b.n	8005146 <HAL_RCC_ClockConfig+0xb6>
 80052c4:	52002000 	.word	0x52002000
 80052c8:	58024400 	.word	0x58024400
 80052cc:	080087bd 	.word	0x080087bd
 80052d0:	20000004 	.word	0x20000004
 80052d4:	20000000 	.word	0x20000000
 80052d8:	2000006c 	.word	0x2000006c

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052de:	4c0c      	ldr	r4, [pc, #48]	; (8005310 <HAL_RCC_GetHCLKFreq+0x34>)
 80052e0:	f7ff fe34 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 80052e4:	490b      	ldr	r1, [pc, #44]	; (8005314 <HAL_RCC_GetHCLKFreq+0x38>)
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80052ec:	5ccb      	ldrb	r3, [r1, r3]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	fa20 f203 	lsr.w	r2, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052f6:	69a3      	ldr	r3, [r4, #24]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	5ccb      	ldrb	r3, [r1, r3]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	fa22 f003 	lsr.w	r0, r2, r3
 8005306:	4b04      	ldr	r3, [pc, #16]	; (8005318 <HAL_RCC_GetHCLKFreq+0x3c>)
 8005308:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <HAL_RCC_GetHCLKFreq+0x40>)
 800530c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800530e:	bd10      	pop	{r4, pc}
 8005310:	58024400 	.word	0x58024400
 8005314:	080087bd 	.word	0x080087bd
 8005318:	20000004 	.word	0x20000004
 800531c:	20000000 	.word	0x20000000

08005320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005320:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005322:	f7ff ffdb 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005336:	40d8      	lsrs	r0, r3
 8005338:	bd08      	pop	{r3, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	080087bd 	.word	0x080087bd

08005344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005344:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005346:	f7ff ffc9 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x20>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800535a:	40d8      	lsrs	r0, r3
 800535c:	bd08      	pop	{r3, pc}
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
 8005364:	080087bd 	.word	0x080087bd

08005368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800536a:	4c3a      	ldr	r4, [pc, #232]	; (8005454 <RCCEx_PLL2_Config+0xec>)
{
 800536c:	4606      	mov	r6, r0
 800536e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d069      	beq.n	800544e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005380:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005382:	f7fd fd35 	bl	8002df0 <HAL_GetTick>
 8005386:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	d44b      	bmi.n	8005426 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800538e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005390:	6832      	ldr	r2, [r6, #0]
 8005392:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005396:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800539a:	62a3      	str	r3, [r4, #40]	; 0x28
 800539c:	68b3      	ldr	r3, [r6, #8]
 800539e:	68f2      	ldr	r2, [r6, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	3a01      	subs	r2, #1
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	0412      	lsls	r2, r2, #16
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80053ae:	4313      	orrs	r3, r2
 80053b0:	6872      	ldr	r2, [r6, #4]
 80053b2:	3a01      	subs	r2, #1
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	4313      	orrs	r3, r2
 80053ba:	6932      	ldr	r2, [r6, #16]
 80053bc:	3a01      	subs	r2, #1
 80053be:	0612      	lsls	r2, r2, #24
 80053c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80053c4:	4313      	orrs	r3, r2
 80053c6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053ca:	6972      	ldr	r2, [r6, #20]
 80053cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053d0:	4313      	orrs	r3, r2
 80053d2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053d6:	69b2      	ldr	r2, [r6, #24]
 80053d8:	f023 0320 	bic.w	r3, r3, #32
 80053dc:	4313      	orrs	r3, r2
 80053de:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053ea:	69f2      	ldr	r2, [r6, #28]
 80053ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053f8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053fc:	f043 0310 	orr.w	r3, r3, #16
 8005400:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005404:	b9b5      	cbnz	r5, 8005434 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800540a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800540c:	4c11      	ldr	r4, [pc, #68]	; (8005454 <RCCEx_PLL2_Config+0xec>)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005414:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fd fceb 	bl	8002df0 <HAL_GetTick>
 800541a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	d50f      	bpl.n	8005442 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8005422:	2000      	movs	r0, #0
 8005424:	e005      	b.n	8005432 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005426:	f7fd fce3 	bl	8002df0 <HAL_GetTick>
 800542a:	1bc0      	subs	r0, r0, r7
 800542c:	2802      	cmp	r0, #2
 800542e:	d9ab      	bls.n	8005388 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8005430:	2003      	movs	r0, #3
}
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005434:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005436:	bf0c      	ite	eq
 8005438:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800543c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005440:	e7e3      	b.n	800540a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005442:	f7fd fcd5 	bl	8002df0 <HAL_GetTick>
 8005446:	1b40      	subs	r0, r0, r5
 8005448:	2802      	cmp	r0, #2
 800544a:	d9e7      	bls.n	800541c <RCCEx_PLL2_Config+0xb4>
 800544c:	e7f0      	b.n	8005430 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800544e:	2001      	movs	r0, #1
 8005450:	e7ef      	b.n	8005432 <RCCEx_PLL2_Config+0xca>
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400

08005458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800545a:	4c3a      	ldr	r4, [pc, #232]	; (8005544 <RCCEx_PLL3_Config+0xec>)
{
 800545c:	4606      	mov	r6, r0
 800545e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b03      	cmp	r3, #3
 8005468:	d069      	beq.n	800553e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005470:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005472:	f7fd fcbd 	bl	8002df0 <HAL_GetTick>
 8005476:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	d44b      	bmi.n	8005516 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800547e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005480:	6832      	ldr	r2, [r6, #0]
 8005482:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005486:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800548a:	62a3      	str	r3, [r4, #40]	; 0x28
 800548c:	68b3      	ldr	r3, [r6, #8]
 800548e:	68f2      	ldr	r2, [r6, #12]
 8005490:	3b01      	subs	r3, #1
 8005492:	3a01      	subs	r2, #1
 8005494:	025b      	lsls	r3, r3, #9
 8005496:	0412      	lsls	r2, r2, #16
 8005498:	b29b      	uxth	r3, r3
 800549a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800549e:	4313      	orrs	r3, r2
 80054a0:	6872      	ldr	r2, [r6, #4]
 80054a2:	3a01      	subs	r2, #1
 80054a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a8:	4313      	orrs	r3, r2
 80054aa:	6932      	ldr	r2, [r6, #16]
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0612      	lsls	r2, r2, #24
 80054b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80054b4:	4313      	orrs	r3, r2
 80054b6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054ba:	6972      	ldr	r2, [r6, #20]
 80054bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054c0:	4313      	orrs	r3, r2
 80054c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054c6:	69b2      	ldr	r2, [r6, #24]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054da:	69f2      	ldr	r2, [r6, #28]
 80054dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80054e8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80054f4:	b9b5      	cbnz	r5, 8005524 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054fc:	4c11      	ldr	r4, [pc, #68]	; (8005544 <RCCEx_PLL3_Config+0xec>)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fd fc73 	bl	8002df0 <HAL_GetTick>
 800550a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	d50f      	bpl.n	8005532 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8005512:	2000      	movs	r0, #0
 8005514:	e005      	b.n	8005522 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005516:	f7fd fc6b 	bl	8002df0 <HAL_GetTick>
 800551a:	1bc0      	subs	r0, r0, r7
 800551c:	2802      	cmp	r0, #2
 800551e:	d9ab      	bls.n	8005478 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8005520:	2003      	movs	r0, #3
}
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005524:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005526:	bf0c      	ite	eq
 8005528:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800552c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005530:	e7e3      	b.n	80054fa <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005532:	f7fd fc5d 	bl	8002df0 <HAL_GetTick>
 8005536:	1b40      	subs	r0, r0, r5
 8005538:	2802      	cmp	r0, #2
 800553a:	d9e7      	bls.n	800550c <RCCEx_PLL3_Config+0xb4>
 800553c:	e7f0      	b.n	8005520 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800553e:	2001      	movs	r0, #1
 8005540:	e7ef      	b.n	8005522 <RCCEx_PLL3_Config+0xca>
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400

08005548 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800554c:	6803      	ldr	r3, [r0, #0]
{
 800554e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005550:	0118      	lsls	r0, r3, #4
 8005552:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8005556:	d509      	bpl.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005558:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800555a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555e:	d02f      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005560:	d813      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005562:	b1f3      	cbz	r3, 80055a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8005564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005568:	d021      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x66>
 800556a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	05d9      	lsls	r1, r3, #23
 8005570:	f140 80ed 	bpl.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005574:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005576:	2b04      	cmp	r3, #4
 8005578:	f200 80e8 	bhi.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800557c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005580:	002d0026 	.word	0x002d0026
 8005584:	002b00e0 	.word	0x002b00e0
 8005588:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 800558a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800558e:	d1ec      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005590:	4aa9      	ldr	r2, [pc, #676]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005592:	2600      	movs	r6, #0
 8005594:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8005596:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005598:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800559c:	430b      	orrs	r3, r1
 800559e:	6513      	str	r3, [r2, #80]	; 0x50
 80055a0:	e7e4      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a2:	4aa5      	ldr	r2, [pc, #660]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80055a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80055ac:	e7f0      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ae:	2102      	movs	r1, #2
 80055b0:	f105 0008 	add.w	r0, r5, #8
 80055b4:	f7ff fed8 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055b8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d1d6      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x24>
 80055be:	e7e7      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c0:	2102      	movs	r1, #2
 80055c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80055c6:	f7ff ff47 	bl	8005458 <RCCEx_PLL3_Config>
 80055ca:	e7f5      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055cc:	4a9a      	ldr	r2, [pc, #616]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80055d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 80055d6:	4634      	mov	r4, r6
 80055d8:	e005      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055da:	2100      	movs	r1, #0
 80055dc:	f105 0008 	add.w	r0, r5, #8
 80055e0:	f7ff fec2 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055e4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	f040 80b3 	bne.w	8005752 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ec:	4a92      	ldr	r2, [pc, #584]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ee:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80055f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	430b      	orrs	r3, r1
 80055f8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	059a      	lsls	r2, r3, #22
 80055fe:	d50d      	bpl.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005600:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8005602:	2b80      	cmp	r3, #128	; 0x80
 8005604:	f000 80c3 	beq.w	800578e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8005608:	f200 80a5 	bhi.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80b1 	beq.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	f000 80b4 	beq.w	8005780 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005618:	2601      	movs	r6, #1
 800561a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	055b      	lsls	r3, r3, #21
 8005620:	d510      	bpl.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005622:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	f000 80d6 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x292>
 800562e:	f200 80b6 	bhi.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80c4 	beq.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563c:	f000 80c6 	beq.w	80057cc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005640:	2601      	movs	r6, #1
 8005642:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	051f      	lsls	r7, r3, #20
 8005648:	d510      	bpl.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 800564a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800564e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005652:	f000 80e8 	beq.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005656:	f200 80c8 	bhi.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80d6 	beq.w	800580c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005664:	f000 80d8 	beq.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005668:	2601      	movs	r6, #1
 800566a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	0198      	lsls	r0, r3, #6
 8005670:	d50d      	bpl.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8005672:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005674:	2b20      	cmp	r3, #32
 8005676:	f000 80f3 	beq.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800567a:	f200 80df 	bhi.w	800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80df 	beq.w	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005684:	2b10      	cmp	r3, #16
 8005686:	f000 80e5 	beq.w	8005854 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800568a:	2601      	movs	r6, #1
 800568c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	04d9      	lsls	r1, r3, #19
 8005692:	d50f      	bpl.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005694:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	f000 8107 	beq.w	80058ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 800569e:	f200 80e8 	bhi.w	8005872 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80f5 	beq.w	8005892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ac:	f000 80f7 	beq.w	800589e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80056b0:	2601      	movs	r6, #1
 80056b2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	049a      	lsls	r2, r3, #18
 80056b8:	d50f      	bpl.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 80056ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c0:	f000 8115 	beq.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80056c4:	f200 80fa 	bhi.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0x374>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8100 	beq.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x386>
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	f000 8105 	beq.w	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80056d6:	2601      	movs	r6, #1
 80056d8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	045b      	lsls	r3, r3, #17
 80056de:	d510      	bpl.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 80056e0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	f000 8123 	beq.w	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80056ec:	f200 8107 	bhi.w	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 810d 	beq.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80056f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056fa:	f000 8113 	beq.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80056fe:	2601      	movs	r6, #1
 8005700:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	041f      	lsls	r7, r3, #16
 8005706:	d50d      	bpl.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 8005708:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800570a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800570e:	f000 8118 	beq.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005716:	f000 8122 	beq.w	800595e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8116 	beq.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005720:	2601      	movs	r6, #1
 8005722:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	01d8      	lsls	r0, r3, #7
 8005728:	f140 8130 	bpl.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 800572c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800572e:	2b03      	cmp	r3, #3
 8005730:	f200 8171 	bhi.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005734:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005738:	011c0121 	.word	0x011c0121
 800573c:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005740:	2100      	movs	r1, #0
 8005742:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005746:	f7ff fe87 	bl	8005458 <RCCEx_PLL3_Config>
 800574a:	e74b      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 800574c:	2601      	movs	r6, #1
 800574e:	4634      	mov	r4, r6
 8005750:	e753      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8005752:	4626      	mov	r6, r4
 8005754:	e751      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005756:	2bc0      	cmp	r3, #192	; 0xc0
 8005758:	d003      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800575a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575e:	f47f af5b 	bne.w	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 8005762:	b9d4      	cbnz	r4, 800579a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005764:	4a34      	ldr	r2, [pc, #208]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005766:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8005768:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800576a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800576e:	430b      	orrs	r3, r1
 8005770:	6513      	str	r3, [r2, #80]	; 0x50
 8005772:	e753      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005774:	4a30      	ldr	r2, [pc, #192]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005776:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800577e:	e7f0      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005780:	2100      	movs	r1, #0
 8005782:	f105 0008 	add.w	r0, r5, #8
 8005786:	f7ff fdef 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578a:	4604      	mov	r4, r0
        break;
 800578c:	e7e9      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578e:	2100      	movs	r1, #0
 8005790:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005794:	f7ff fe60 	bl	8005458 <RCCEx_PLL3_Config>
 8005798:	e7f7      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800579a:	4626      	mov	r6, r4
 800579c:	e73e      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 800579e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057a2:	d003      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
 80057a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057a8:	f47f af4a 	bne.w	8005640 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 80057ac:	b9dc      	cbnz	r4, 80057e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057b0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80057b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057b6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
 80057be:	e741      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80057ca:	e7ef      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057cc:	2100      	movs	r1, #0
 80057ce:	f105 0008 	add.w	r0, r5, #8
 80057d2:	f7ff fdc9 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057d6:	4604      	mov	r4, r0
        break;
 80057d8:	e7e8      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057da:	2100      	movs	r1, #0
 80057dc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80057e0:	f7ff fe3a 	bl	8005458 <RCCEx_PLL3_Config>
 80057e4:	e7f7      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80057e6:	4626      	mov	r6, r4
 80057e8:	e72c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 80057ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f4:	f47f af38 	bne.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 80057f8:	b9dc      	cbnz	r4, 8005832 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057fa:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057fc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8005800:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005806:	430b      	orrs	r3, r1
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
 800580a:	e72f      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580c:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800580e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005814:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005816:	e7ef      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005818:	2100      	movs	r1, #0
 800581a:	f105 0008 	add.w	r0, r5, #8
 800581e:	f7ff fda3 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005822:	4604      	mov	r4, r0
        break;
 8005824:	e7e8      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005826:	2100      	movs	r1, #0
 8005828:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800582c:	f7ff fe14 	bl	8005458 <RCCEx_PLL3_Config>
 8005830:	e7f7      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005832:	4626      	mov	r6, r4
 8005834:	e71a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	f47f af24 	bne.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 8005842:	b9a4      	cbnz	r4, 800586e <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005844:	4aa0      	ldr	r2, [pc, #640]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005846:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005848:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800584a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800584e:	430b      	orrs	r3, r1
 8005850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005852:	e71c      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005854:	4a9c      	ldr	r2, [pc, #624]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005856:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800585e:	e7f0      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005860:	2102      	movs	r1, #2
 8005862:	f105 0008 	add.w	r0, r5, #8
 8005866:	f7ff fd7f 	bl	8005368 <RCCEx_PLL2_Config>
 800586a:	4604      	mov	r4, r0
        break;
 800586c:	e7e9      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800586e:	4626      	mov	r6, r4
 8005870:	e70d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587c:	f47f af18 	bne.w	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 8005880:	b9d4      	cbnz	r4, 80058b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005882:	4a91      	ldr	r2, [pc, #580]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005884:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8005886:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588c:	430b      	orrs	r3, r1
 800588e:	6513      	str	r3, [r2, #80]	; 0x50
 8005890:	e710      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005892:	4a8d      	ldr	r2, [pc, #564]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005894:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800589c:	e7f0      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800589e:	2100      	movs	r1, #0
 80058a0:	f105 0008 	add.w	r0, r5, #8
 80058a4:	f7ff fd60 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a8:	4604      	mov	r4, r0
        break;
 80058aa:	e7e9      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ac:	2100      	movs	r1, #0
 80058ae:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80058b2:	f7ff fdd1 	bl	8005458 <RCCEx_PLL3_Config>
 80058b6:	e7f7      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058b8:	4626      	mov	r6, r4
 80058ba:	e6fb      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80058bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80058c4:	d003      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x386>
 80058c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058ca:	f47f af04 	bne.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 80058ce:	b9a4      	cbnz	r4, 80058fa <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058d0:	4a7d      	ldr	r2, [pc, #500]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80058d2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80058d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80058d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80058da:	430b      	orrs	r3, r1
 80058dc:	6513      	str	r3, [r2, #80]	; 0x50
 80058de:	e6fc      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e0:	2101      	movs	r1, #1
 80058e2:	f105 0008 	add.w	r0, r5, #8
 80058e6:	f7ff fd3f 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ea:	4604      	mov	r4, r0
        break;
 80058ec:	e7ef      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ee:	2101      	movs	r1, #1
 80058f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80058f4:	f7ff fdb0 	bl	8005458 <RCCEx_PLL3_Config>
 80058f8:	e7f7      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80058fa:	4626      	mov	r6, r4
 80058fc:	e6ed      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 80058fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005902:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005906:	d003      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800590c:	f47f aef7 	bne.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 8005910:	b9ac      	cbnz	r4, 800593e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005912:	4a6d      	ldr	r2, [pc, #436]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005914:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8005918:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800591a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800591e:	430b      	orrs	r3, r1
 8005920:	6593      	str	r3, [r2, #88]	; 0x58
 8005922:	e6ee      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005924:	2101      	movs	r1, #1
 8005926:	f105 0008 	add.w	r0, r5, #8
 800592a:	f7ff fd1d 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800592e:	4604      	mov	r4, r0
        break;
 8005930:	e7ee      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005932:	2101      	movs	r1, #1
 8005934:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005938:	f7ff fd8e 	bl	8005458 <RCCEx_PLL3_Config>
 800593c:	e7f7      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800593e:	4626      	mov	r6, r4
 8005940:	e6df      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005942:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005944:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800594c:	b974      	cbnz	r4, 800596c <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800594e:	4a5e      	ldr	r2, [pc, #376]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005950:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8005952:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005954:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005958:	430b      	orrs	r3, r1
 800595a:	6513      	str	r3, [r2, #80]	; 0x50
 800595c:	e6e2      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800595e:	2101      	movs	r1, #1
 8005960:	f105 0008 	add.w	r0, r5, #8
 8005964:	f7ff fd00 	bl	8005368 <RCCEx_PLL2_Config>
 8005968:	4604      	mov	r4, r0
        break;
 800596a:	e7ef      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800596c:	4626      	mov	r6, r4
 800596e:	e6d9      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4a55      	ldr	r2, [pc, #340]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005972:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005978:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800597a:	2c00      	cmp	r4, #0
 800597c:	d14e      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800597e:	4a52      	ldr	r2, [pc, #328]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005980:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005982:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005984:	f023 0303 	bic.w	r3, r3, #3
 8005988:	430b      	orrs	r3, r1
 800598a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	0259      	lsls	r1, r3, #9
 8005990:	d54e      	bpl.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005992:	4f4e      	ldr	r7, [pc, #312]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800599c:	f7fd fa28 	bl	8002df0 <HAL_GetTick>
 80059a0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	05da      	lsls	r2, r3, #23
 80059a6:	d53b      	bpl.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 80059a8:	2c00      	cmp	r4, #0
 80059aa:	d16d      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80059ae:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80059b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059b4:	4042      	eors	r2, r0
 80059b6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80059ba:	d00b      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80059be:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80059c8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80059cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80059d0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80059d2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80059d8:	d041      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059da:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 80059de:	493a      	ldr	r1, [pc, #232]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80059e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80059e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80059e8:	d14a      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80059ea:	6908      	ldr	r0, [r1, #16]
 80059ec:	4a38      	ldr	r2, [pc, #224]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80059ee:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80059f2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80059f6:	4302      	orrs	r2, r0
 80059f8:	610a      	str	r2, [r1, #16]
 80059fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fe:	4a32      	ldr	r2, [pc, #200]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005a00:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005a02:	430b      	orrs	r3, r1
 8005a04:	6713      	str	r3, [r2, #112]	; 0x70
 8005a06:	e013      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a08:	2102      	movs	r1, #2
 8005a0a:	f105 0008 	add.w	r0, r5, #8
 8005a0e:	f7ff fcab 	bl	8005368 <RCCEx_PLL2_Config>
 8005a12:	4604      	mov	r4, r0
        break;
 8005a14:	e7b1      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 8005a16:	2601      	movs	r6, #1
 8005a18:	4634      	mov	r4, r6
 8005a1a:	e7b7      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005a1c:	4626      	mov	r6, r4
 8005a1e:	e7b5      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fd f9e6 	bl	8002df0 <HAL_GetTick>
 8005a24:	eba0 0008 	sub.w	r0, r0, r8
 8005a28:	2864      	cmp	r0, #100	; 0x64
 8005a2a:	d9ba      	bls.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 8005a2c:	2603      	movs	r6, #3
 8005a2e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	07d8      	lsls	r0, r3, #31
 8005a34:	d508      	bpl.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a36:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d03d      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005a3c:	d826      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x544>
 8005a3e:	b35b      	cbz	r3, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d032      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005a44:	2601      	movs	r6, #1
 8005a46:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	0799      	lsls	r1, r3, #30
 8005a4c:	d550      	bpl.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a4e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d863      	bhi.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a54:	e8df f003 	tbb	[pc, r3]
 8005a58:	445c3e44 	.word	0x445c3e44
 8005a5c:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 8005a5e:	f7fd f9c7 	bl	8002df0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a62:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8005a66:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a68:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a6c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005a70:	079b      	lsls	r3, r3, #30
 8005a72:	d4b2      	bmi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fd f9bc 	bl	8002df0 <HAL_GetTick>
 8005a78:	1bc0      	subs	r0, r0, r7
 8005a7a:	4548      	cmp	r0, r9
 8005a7c:	d9f6      	bls.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a7e:	e7d5      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a80:	690a      	ldr	r2, [r1, #16]
 8005a82:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a86:	e7b7      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a88:	4626      	mov	r6, r4
 8005a8a:	e7d1      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a8c:	f023 0208 	bic.w	r2, r3, #8
 8005a90:	2a20      	cmp	r2, #32
 8005a92:	d001      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a94:	2b18      	cmp	r3, #24
 8005a96:	d1d5      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 8005a98:	b9a4      	cbnz	r4, 8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a9a:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005a9c:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8005a9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005aa0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6553      	str	r3, [r2, #84]	; 0x54
 8005aa8:	e7ce      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aaa:	2101      	movs	r1, #1
 8005aac:	f105 0008 	add.w	r0, r5, #8
 8005ab0:	f7ff fc5a 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab4:	4604      	mov	r4, r0
        break;
 8005ab6:	e7ef      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab8:	2101      	movs	r1, #1
 8005aba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005abe:	f7ff fccb 	bl	8005458 <RCCEx_PLL3_Config>
 8005ac2:	e7f7      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8005ac4:	4626      	mov	r6, r4
 8005ac6:	e7bf      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	58024800 	.word	0x58024800
 8005ad0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	f105 0008 	add.w	r0, r5, #8
 8005ada:	f7ff fc45 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ade:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005ae0:	b9fc      	cbnz	r4, 8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ae2:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8005ae4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8005ae6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005ae8:	f023 0307 	bic.w	r3, r3, #7
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	075a      	lsls	r2, r3, #29
 8005af4:	d52b      	bpl.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005af6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	f200 817c 	bhi.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005b00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b04:	0014001a 	.word	0x0014001a
 8005b08:	001a0174 	.word	0x001a0174
 8005b0c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b10:	2101      	movs	r1, #1
 8005b12:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005b16:	f7ff fc9f 	bl	8005458 <RCCEx_PLL3_Config>
 8005b1a:	e7e0      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b1c:	2601      	movs	r6, #1
 8005b1e:	4634      	mov	r4, r6
 8005b20:	e7e6      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8005b22:	4626      	mov	r6, r4
 8005b24:	e7e4      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	f105 0008 	add.w	r0, r5, #8
 8005b32:	f7ff fc19 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b36:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005b38:	2c00      	cmp	r4, #0
 8005b3a:	f040 8160 	bne.w	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b3e:	4aaa      	ldr	r2, [pc, #680]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005b40:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8005b44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	069b      	lsls	r3, r3, #26
 8005b52:	d510      	bpl.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b54:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5c:	f000 816b 	beq.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005b60:	f200 814f 	bhi.w	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8155 	beq.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8005b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b6e:	f000 815b 	beq.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8005b72:	2601      	movs	r6, #1
 8005b74:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	065f      	lsls	r7, r3, #25
 8005b7a:	d510      	bpl.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b7c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b84:	f000 8179 	beq.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8005b88:	f200 815d 	bhi.w	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8163 	beq.w	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b96:	f000 8169 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b9a:	2601      	movs	r6, #1
 8005b9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b9e:	682b      	ldr	r3, [r5, #0]
 8005ba0:	0618      	lsls	r0, r3, #24
 8005ba2:	d510      	bpl.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ba4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8005ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bac:	f000 8187 	beq.w	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005bb0:	f200 816b 	bhi.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x942>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8171 	beq.w	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	f000 8177 	beq.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005bc2:	2601      	movs	r6, #1
 8005bc4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005bc6:	682b      	ldr	r3, [r5, #0]
 8005bc8:	0719      	lsls	r1, r3, #28
 8005bca:	d514      	bpl.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005bcc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005bdc:	f7ff fc3c 	bl	8005458 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005be0:	2800      	cmp	r0, #0
 8005be2:	bf18      	it	ne
 8005be4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005be6:	4a80      	ldr	r2, [pc, #512]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005be8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8005bec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	06da      	lsls	r2, r3, #27
 8005bfa:	d514      	bpl.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bfc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c04:	d107      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c06:	2102      	movs	r1, #2
 8005c08:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005c0c:	f7ff fc24 	bl	8005458 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005c10:	2800      	cmp	r0, #0
 8005c12:	bf18      	it	ne
 8005c14:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c16:	4a74      	ldr	r2, [pc, #464]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005c18:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8005c1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	d51b      	bpl.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 8005c2c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8005c30:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005c34:	f000 814b 	beq.w	8005ece <HAL_RCCEx_PeriphCLKConfig+0x986>
 8005c38:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005c3c:	d007      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	f040 814b 	bne.w	8005eda <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c44:	f105 0008 	add.w	r0, r5, #8
 8005c48:	f7ff fb8e 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c4c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005c4e:	2c00      	cmp	r4, #0
 8005c50:	f040 8146 	bne.w	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c54:	4a64      	ldr	r2, [pc, #400]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005c56:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8005c5a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005c5c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	035f      	lsls	r7, r3, #13
 8005c68:	d51c      	bpl.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 8005c6a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8005c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c72:	f000 8137 	beq.w	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8005c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c80:	f040 8137 	bne.w	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c84:	4a58      	ldr	r2, [pc, #352]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005c86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	f040 8132 	bne.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c94:	4a54      	ldr	r2, [pc, #336]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005c96:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8005c9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	03d8      	lsls	r0, r3, #15
 8005ca8:	d509      	bpl.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005caa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8125 	beq.w	8005efc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb6:	f000 812f 	beq.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cba:	2601      	movs	r6, #1
 8005cbc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	0099      	lsls	r1, r3, #2
 8005cc2:	d507      	bpl.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005cca:	f7ff fbc5 	bl	8005458 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	bf18      	it	ne
 8005cd2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cd4:	e9d5 3100 	ldrd	r3, r1, [r5]
 8005cd8:	039a      	lsls	r2, r3, #14
 8005cda:	d50b      	bpl.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 8005cdc:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8005ce0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005ce4:	f000 812f 	beq.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8005ce8:	f200 811f 	bhi.w	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f000 8122 	beq.w	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005cf2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cf4:	02df      	lsls	r7, r3, #11
 8005cf6:	d506      	bpl.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cf8:	483b      	ldr	r0, [pc, #236]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005cfa:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8005cfc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d02:	4322      	orrs	r2, r4
 8005d04:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d06:	00dc      	lsls	r4, r3, #3
 8005d08:	d507      	bpl.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d0a:	4837      	ldr	r0, [pc, #220]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005d0c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8005d10:	6902      	ldr	r2, [r0, #16]
 8005d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d16:	4322      	orrs	r2, r4
 8005d18:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d1a:	0298      	lsls	r0, r3, #10
 8005d1c:	d506      	bpl.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d1e:	4832      	ldr	r0, [pc, #200]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005d20:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8005d22:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005d24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d28:	4322      	orrs	r2, r4
 8005d2a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d2c:	005a      	lsls	r2, r3, #1
 8005d2e:	d509      	bpl.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d30:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005d32:	6910      	ldr	r0, [r2, #16]
 8005d34:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005d38:	6110      	str	r0, [r2, #16]
 8005d3a:	6910      	ldr	r0, [r2, #16]
 8005d3c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8005d40:	4320      	orrs	r0, r4
 8005d42:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da06      	bge.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d48:	4827      	ldr	r0, [pc, #156]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005d4a:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8005d4c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005d4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d52:	4322      	orrs	r2, r4
 8005d54:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	d507      	bpl.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d5a:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005d5c:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8005d60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005d66:	4303      	orrs	r3, r0
 8005d68:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d6a:	07cf      	lsls	r7, r1, #31
 8005d6c:	d507      	bpl.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f105 0008 	add.w	r0, r5, #8
 8005d74:	f7ff faf8 	bl	8005368 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	bf18      	it	ne
 8005d7c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d7e:	686b      	ldr	r3, [r5, #4]
 8005d80:	079c      	lsls	r4, r3, #30
 8005d82:	d507      	bpl.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d84:	2101      	movs	r1, #1
 8005d86:	f105 0008 	add.w	r0, r5, #8
 8005d8a:	f7ff faed 	bl	8005368 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	bf18      	it	ne
 8005d92:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d94:	686b      	ldr	r3, [r5, #4]
 8005d96:	0758      	lsls	r0, r3, #29
 8005d98:	d507      	bpl.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	f105 0008 	add.w	r0, r5, #8
 8005da0:	f7ff fae2 	bl	8005368 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005da4:	2800      	cmp	r0, #0
 8005da6:	bf18      	it	ne
 8005da8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005daa:	686b      	ldr	r3, [r5, #4]
 8005dac:	0719      	lsls	r1, r3, #28
 8005dae:	d507      	bpl.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db0:	2100      	movs	r1, #0
 8005db2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005db6:	f7ff fb4f 	bl	8005458 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	bf18      	it	ne
 8005dbe:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dc0:	686b      	ldr	r3, [r5, #4]
 8005dc2:	06da      	lsls	r2, r3, #27
 8005dc4:	d507      	bpl.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005dcc:	f7ff fb44 	bl	8005458 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	bf18      	it	ne
 8005dd4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dd6:	686b      	ldr	r3, [r5, #4]
 8005dd8:	069b      	lsls	r3, r3, #26
 8005dda:	f100 80bc 	bmi.w	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 8005dde:	1e30      	subs	r0, r6, #0
 8005de0:	bf18      	it	ne
 8005de2:	2001      	movne	r0, #1
}
 8005de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dec:	2101      	movs	r1, #1
 8005dee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005df2:	f7ff fb31 	bl	8005458 <RCCEx_PLL3_Config>
 8005df6:	e69e      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005df8:	2601      	movs	r6, #1
 8005dfa:	4634      	mov	r4, r6
 8005dfc:	e6a7      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x606>
 8005dfe:	4626      	mov	r6, r4
 8005e00:	e6a5      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005e0a:	d003      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8005e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e10:	f47f aeaf 	bne.w	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 8005e14:	b9ac      	cbnz	r4, 8005e42 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e16:	4a55      	ldr	r2, [pc, #340]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005e18:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8005e1c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005e1e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6553      	str	r3, [r2, #84]	; 0x54
 8005e26:	e6a6      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f105 0008 	add.w	r0, r5, #8
 8005e2e:	f7ff fa9b 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e32:	4604      	mov	r4, r0
        break;
 8005e34:	e7ee      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e36:	2102      	movs	r1, #2
 8005e38:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005e3c:	f7ff fb0c 	bl	8005458 <RCCEx_PLL3_Config>
 8005e40:	e7f7      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8005e42:	4626      	mov	r6, r4
 8005e44:	e697      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e4a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005e4e:	d003      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e54:	f47f aea1 	bne.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8005e58:	b9ac      	cbnz	r4, 8005e86 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e5a:	4a44      	ldr	r2, [pc, #272]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005e5c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8005e60:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e62:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005e66:	430b      	orrs	r3, r1
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
 8005e6a:	e698      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f105 0008 	add.w	r0, r5, #8
 8005e72:	f7ff fa79 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e76:	4604      	mov	r4, r0
        break;
 8005e78:	e7ee      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005e80:	f7ff faea 	bl	8005458 <RCCEx_PLL3_Config>
 8005e84:	e7f7      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8005e86:	4626      	mov	r6, r4
 8005e88:	e689      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e8a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e8e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005e92:	d003      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>
 8005e94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e98:	f47f ae93 	bne.w	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 8005e9c:	b9ac      	cbnz	r4, 8005eca <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e9e:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005ea0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8005ea4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005ea6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	6593      	str	r3, [r2, #88]	; 0x58
 8005eae:	e68a      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f105 0008 	add.w	r0, r5, #8
 8005eb6:	f7ff fa57 	bl	8005368 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eba:	4604      	mov	r4, r0
        break;
 8005ebc:	e7ee      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005ec4:	f7ff fac8 	bl	8005458 <RCCEx_PLL3_Config>
 8005ec8:	e7f7      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005eca:	4626      	mov	r6, r4
 8005ecc:	e67b      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ece:	2102      	movs	r1, #2
 8005ed0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005ed4:	f7ff fac0 	bl	8005458 <RCCEx_PLL3_Config>
 8005ed8:	e6b8      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 8005eda:	2601      	movs	r6, #1
 8005edc:	4634      	mov	r4, r6
 8005ede:	e6c1      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ee0:	4626      	mov	r6, r4
 8005ee2:	e6bf      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005eea:	f7ff fab5 	bl	8005458 <RCCEx_PLL3_Config>
 8005eee:	4604      	mov	r4, r0
        break;
 8005ef0:	e6cd      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 8005ef2:	2601      	movs	r6, #1
 8005ef4:	4634      	mov	r4, r6
 8005ef6:	e6d5      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8005ef8:	4626      	mov	r6, r4
 8005efa:	e6d3      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005efe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f04:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005f06:	b974      	cbnz	r4, 8005f26 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005f0a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8005f0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f12:	430b      	orrs	r3, r1
 8005f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f16:	e6d2      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f18:	2102      	movs	r1, #2
 8005f1a:	f105 0008 	add.w	r0, r5, #8
 8005f1e:	f7ff fa23 	bl	8005368 <RCCEx_PLL2_Config>
 8005f22:	4604      	mov	r4, r0
        break;
 8005f24:	e7ef      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005f26:	4626      	mov	r6, r4
 8005f28:	e6c9      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 8005f2a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 8005f2e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005f32:	f47f aede 	bne.w	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 8005f36:	b964      	cbnz	r4, 8005f52 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f38:	4c0c      	ldr	r4, [pc, #48]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005f3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f40:	4302      	orrs	r2, r0
 8005f42:	6562      	str	r2, [r4, #84]	; 0x54
 8005f44:	e6d6      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f46:	4f09      	ldr	r7, [pc, #36]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8005f50:	e7f1      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005f52:	4626      	mov	r6, r4
 8005f54:	e6ce      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f56:	2102      	movs	r1, #2
 8005f58:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005f5c:	f7ff fa7c 	bl	8005458 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f43f af3c 	beq.w	8005dde <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 8005f66:	2001      	movs	r0, #1
 8005f68:	e73c      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8005f6a:	bf00      	nop
 8005f6c:	58024400 	.word	0x58024400

08005f70 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005f70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f72:	f7ff f9b3 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005f78:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005f80:	5cd3      	ldrb	r3, [r2, r3]
 8005f82:	f003 031f 	and.w	r3, r3, #31
}
 8005f86:	40d8      	lsrs	r0, r3
 8005f88:	bd08      	pop	{r3, pc}
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	080087bd 	.word	0x080087bd

08005f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f94:	494f      	ldr	r1, [pc, #316]	; (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8005f96:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f9a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f9c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll2m != 0U)
 8005f9e:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fa2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fa6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8005fa8:	f000 8090 	beq.w	80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fac:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fb0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fb4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fb8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fc0:	4353      	muls	r3, r2
    switch (pllsource)
 8005fc2:	2c01      	cmp	r4, #1
 8005fc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fc8:	ee06 3a90 	vmov	s13, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fcc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005fd0:	d06e      	beq.n	80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8005fd2:	2c02      	cmp	r4, #2
 8005fd4:	d05e      	beq.n	8006094 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	d16a      	bne.n	80060b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fda:	680b      	ldr	r3, [r1, #0]
 8005fdc:	069b      	lsls	r3, r3, #26
 8005fde:	d547      	bpl.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe0:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005fe8:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fee:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff0:	ee07 2a90 	vmov	s15, r2
 8005ff4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005ff8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005ffc:	ee07 3a10 	vmov	s14, r3
 8006000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006004:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006008:	ee37 7a06 	vadd.f32	s14, s14, s12
 800600c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006010:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8006012:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006014:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006018:	ee07 3a10 	vmov	s14, r3
 800601c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006020:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006024:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006028:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800602c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006030:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006032:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006036:	ee07 3a10 	vmov	s14, r3
 800603a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800603e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006046:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800604a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800604e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006050:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006054:	ee06 3a90 	vmov	s13, r3
 8006058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800605c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006060:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006064:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006068:	ee17 3a90 	vmov	r3, s15
 800606c:	6083      	str	r3, [r0, #8]
}
 800606e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006070:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006072:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800608a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800608e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8006092:	e7bd      	b.n	8006010 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006094:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006096:	eddf 5a12 	vldr	s11, [pc, #72]	; 80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80060ae:	e7ec      	b.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80060b2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80060ca:	e7de      	b.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060cc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060d0:	e7cc      	b.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	4c742400 	.word	0x4c742400
 80060e0:	4bbebc20 	.word	0x4bbebc20
 80060e4:	4a742400 	.word	0x4a742400

080060e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060e8:	494f      	ldr	r1, [pc, #316]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80060ea:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060ec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060ee:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060f0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll3m != 0U)
 80060f2:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060f6:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80060fa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80060fc:	f000 8090 	beq.w	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006100:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006104:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006108:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800610c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006114:	4353      	muls	r3, r2
    switch (pllsource)
 8006116:	2c01      	cmp	r4, #1
 8006118:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800611c:	ee06 3a90 	vmov	s13, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006120:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006124:	d06e      	beq.n	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8006126:	2c02      	cmp	r4, #2
 8006128:	d05e      	beq.n	80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800612a:	2c00      	cmp	r4, #0
 800612c:	d16a      	bne.n	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	069b      	lsls	r3, r3, #26
 8006132:	d547      	bpl.n	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006134:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006136:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006138:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800613c:	4a3b      	ldr	r2, [pc, #236]	; (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006142:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006144:	ee07 2a90 	vmov	s15, r2
 8006148:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800614c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8006150:	ee07 3a10 	vmov	s14, r3
 8006154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006158:	ee37 7a26 	vadd.f32	s14, s14, s13
 800615c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006160:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006164:	4a30      	ldr	r2, [pc, #192]	; (8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8006166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006168:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800616c:	ee07 3a10 	vmov	s14, r3
 8006170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006174:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006178:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800617c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006180:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006184:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006186:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800618a:	ee07 3a10 	vmov	s14, r3
 800618e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006192:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006196:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800619a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800619e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80061a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061a8:	ee06 3a90 	vmov	s13, r3
 80061ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80061b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80061bc:	ee17 3a90 	vmov	r3, s15
 80061c0:	6083      	str	r3, [r0, #8]
}
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061c6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061de:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80061e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80061e6:	e7bd      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061ea:	eddf 5a12 	vldr	s11, [pc, #72]	; 8006234 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006202:	e7ec      	b.n	80061de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006206:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800621e:	e7de      	b.n	80061de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006220:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006224:	e7cc      	b.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	03d09000 	.word	0x03d09000
 8006230:	4c742400 	.word	0x4c742400
 8006234:	4bbebc20 	.word	0x4bbebc20
 8006238:	4a742400 	.word	0x4a742400

0800623c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800623c:	4770      	bx	lr
	...

08006240 <HAL_SDRAM_Init>:
{
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8006244:	4604      	mov	r4, r0
 8006246:	b1f0      	cbz	r0, 8006286 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006248:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800624c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006250:	b91b      	cbnz	r3, 800625a <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8006252:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006256:	f7ff fff1 	bl	800623c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800625a:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800625c:	1d21      	adds	r1, r4, #4
 800625e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006260:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006264:	f001 f9a6 	bl	80075b4 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006268:	6862      	ldr	r2, [r4, #4]
 800626a:	4629      	mov	r1, r5
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	f001 f9d9 	bl	8007624 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8006272:	4a06      	ldr	r2, [pc, #24]	; (800628c <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 8006274:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800627c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800627e:	2301      	movs	r3, #1
 8006280:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006284:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006286:	2001      	movs	r0, #1
 8006288:	e7fc      	b.n	8006284 <HAL_SDRAM_Init+0x44>
 800628a:	bf00      	nop
 800628c:	52004000 	.word	0x52004000

08006290 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006290:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006292:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006296:	4605      	mov	r5, r0
 8006298:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800629a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800629c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800629e:	d010      	beq.n	80062c2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80062a0:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80062a4:	2c01      	cmp	r4, #1
 80062a6:	d110      	bne.n	80062ca <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062a8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062aa:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062ac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062b0:	f001 f9ee 	bl	8007690 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d104      	bne.n	80062c4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062ba:	2305      	movs	r3, #5
 80062bc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80062c0:	2000      	movs	r0, #0
}
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80062c4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80062c8:	e7fa      	b.n	80062c0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80062ca:	2001      	movs	r0, #1
 80062cc:	e7f9      	b.n	80062c2 <HAL_SDRAM_SendCommand+0x32>

080062ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80062ce:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80062d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80062d4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	b2d8      	uxtb	r0, r3
 80062da:	d00d      	beq.n	80062f8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80062dc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	b2dd      	uxtb	r5, r3
 80062e4:	d109      	bne.n	80062fa <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062e6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062e8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062ee:	f001 f9e1 	bl	80076b4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80062f2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80062f4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80062fa:	2001      	movs	r0, #1
 80062fc:	e7fc      	b.n	80062f8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

08006300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006300:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006302:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	e852 3f00 	ldrex	r3, [r2]
 8006308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006310:	6802      	ldr	r2, [r0, #0]
 8006312:	2900      	cmp	r1, #0
 8006314:	d1f5      	bne.n	8006302 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006316:	4c0f      	ldr	r4, [pc, #60]	; (8006354 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	f102 0308 	add.w	r3, r2, #8
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	f102 0c08 	add.w	ip, r2, #8
 8006326:	e84c 3100 	strex	r1, r3, [ip]
 800632a:	2900      	cmp	r1, #0
 800632c:	d1f4      	bne.n	8006318 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	e842 3100 	strex	r1, r3, [r2]
 8006340:	2900      	cmp	r1, #0
 8006342:	d1f7      	bne.n	8006334 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006344:	2320      	movs	r3, #32
 8006346:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	2300      	movs	r3, #0
 800634c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800634e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006350:	bd10      	pop	{r4, pc}
 8006352:	bf00      	nop
 8006354:	effffffe 	.word	0xeffffffe

08006358 <UART_TxISR_16BIT.part.0>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006358:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	e852 3f00 	ldrex	r3, [r2]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006366:	6802      	ldr	r2, [r0, #0]
 8006368:	2900      	cmp	r1, #0
 800636a:	d1f5      	bne.n	8006358 <UART_TxISR_16BIT.part.0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	e842 3100 	strex	r1, r3, [r2]
 8006378:	2900      	cmp	r1, #0
 800637a:	d1f7      	bne.n	800636c <UART_TxISR_16BIT.part.0+0x14>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800637c:	4770      	bx	lr

0800637e <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800637e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8006382:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006384:	2a21      	cmp	r2, #33	; 0x21
 8006386:	d111      	bne.n	80063ac <UART_TxISR_8BIT+0x2e>
    if (huart->TxXferCount == 0U)
 8006388:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800638c:	b292      	uxth	r2, r2
 800638e:	b90a      	cbnz	r2, 8006394 <UART_TxISR_8BIT+0x16>
 8006390:	f7ff bfe2 	b.w	8006358 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006394:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006396:	6801      	ldr	r1, [r0, #0]
 8006398:	f812 0b01 	ldrb.w	r0, [r2], #1
 800639c:	6288      	str	r0, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 800639e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80063a0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80063a4:	3a01      	subs	r2, #1
 80063a6:	b292      	uxth	r2, r2
 80063a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80063ac:	4770      	bx	lr

080063ae <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 80063b2:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063b4:	2a21      	cmp	r2, #33	; 0x21
 80063b6:	d113      	bne.n	80063e0 <UART_TxISR_16BIT+0x32>
  {
    if (huart->TxXferCount == 0U)
 80063b8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80063bc:	b292      	uxth	r2, r2
 80063be:	b90a      	cbnz	r2, 80063c4 <UART_TxISR_16BIT+0x16>
 80063c0:	f7ff bfca 	b.w	8006358 <UART_TxISR_16BIT.part.0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063c6:	6800      	ldr	r0, [r0, #0]
 80063c8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80063cc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80063d0:	6281      	str	r1, [r0, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80063d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80063d4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80063d8:	3a01      	subs	r2, #1
 80063da:	b292      	uxth	r2, r2
 80063dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    }
  }
}
 80063e0:	4770      	bx	lr

080063e2 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80063e6:	2b21      	cmp	r3, #33	; 0x21
{
 80063e8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ea:	d11b      	bne.n	8006424 <UART_TxISR_8BIT_FIFOEN+0x42>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063ec:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80063f0:	b1c2      	cbz	r2, 8006424 <UART_TxISR_8BIT_FIFOEN+0x42>
    {
      if (huart->TxXferCount == 0U)
 80063f2:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80063f6:	6803      	ldr	r3, [r0, #0]
      if (huart->TxXferCount == 0U)
 80063f8:	b289      	uxth	r1, r1
 80063fa:	b9a1      	cbnz	r1, 8006426 <UART_TxISR_8BIT_FIFOEN+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	f103 0208 	add.w	r2, r3, #8
 8006400:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006404:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	f103 0008 	add.w	r0, r3, #8
 800640c:	e840 2100 	strex	r1, r2, [r0]
 8006410:	2900      	cmp	r1, #0
 8006412:	d1f3      	bne.n	80063fc <UART_TxISR_8BIT_FIFOEN+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	e843 2100 	strex	r1, r2, [r3]
 8006420:	2900      	cmp	r1, #0
 8006422:	d1f7      	bne.n	8006414 <UART_TxISR_8BIT_FIFOEN+0x32>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006424:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006426:	69d9      	ldr	r1, [r3, #28]
 8006428:	0609      	lsls	r1, r1, #24
 800642a:	d50a      	bpl.n	8006442 <UART_TxISR_8BIT_FIFOEN+0x60>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800642c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800642e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006432:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 8006434:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 8006438:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800643a:	3b01      	subs	r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006442:	3a01      	subs	r2, #1
 8006444:	b292      	uxth	r2, r2
 8006446:	e7d3      	b.n	80063f0 <UART_TxISR_8BIT_FIFOEN+0xe>

08006448 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006448:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800644c:	2b21      	cmp	r3, #33	; 0x21
{
 800644e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006450:	d11b      	bne.n	800648a <UART_TxISR_16BIT_FIFOEN+0x42>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006452:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006456:	b1c2      	cbz	r2, 800648a <UART_TxISR_16BIT_FIFOEN+0x42>
    {
      if (huart->TxXferCount == 0U)
 8006458:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800645c:	6803      	ldr	r3, [r0, #0]
      if (huart->TxXferCount == 0U)
 800645e:	b289      	uxth	r1, r1
 8006460:	b9a1      	cbnz	r1, 800648c <UART_TxISR_16BIT_FIFOEN+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	f103 0208 	add.w	r2, r3, #8
 8006466:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800646a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f103 0008 	add.w	r0, r3, #8
 8006472:	e840 2100 	strex	r1, r2, [r0]
 8006476:	2900      	cmp	r1, #0
 8006478:	d1f3      	bne.n	8006462 <UART_TxISR_16BIT_FIFOEN+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	e843 2100 	strex	r1, r2, [r3]
 8006486:	2900      	cmp	r1, #0
 8006488:	d1f7      	bne.n	800647a <UART_TxISR_16BIT_FIFOEN+0x32>
      {
        /* Nothing to do */
      }
    }
  }
}
 800648a:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800648c:	69d9      	ldr	r1, [r3, #28]
 800648e:	0609      	lsls	r1, r1, #24
 8006490:	d50c      	bpl.n	80064ac <UART_TxISR_16BIT_FIFOEN+0x64>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006492:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006494:	f831 4b02 	ldrh.w	r4, [r1], #2
 8006498:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800649c:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 800649e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 80064a2:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80064ac:	3a01      	subs	r2, #1
 80064ae:	b292      	uxth	r2, r2
 80064b0:	e7d1      	b.n	8006456 <UART_TxISR_16BIT_FIFOEN+0xe>
	...

080064b4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80064b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064b8:	2b20      	cmp	r3, #32
{
 80064ba:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80064bc:	d143      	bne.n	8006546 <HAL_UART_Transmit_IT+0x92>
    if ((pData == NULL) || (Size == 0U))
 80064be:	2900      	cmp	r1, #0
 80064c0:	d043      	beq.n	800654a <HAL_UART_Transmit_IT+0x96>
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	d041      	beq.n	800654a <HAL_UART_Transmit_IT+0x96>
    huart->TxXferCount = Size;
 80064c6:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	2300      	movs	r3, #0
    huart->TxXferSize  = Size;
 80064cc:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064d0:	6e42      	ldr	r2, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d6:	2321      	movs	r3, #33	; 0x21
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    huart->pTxBuffPtr  = pData;
 80064dc:	6501      	str	r1, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064de:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064e2:	6802      	ldr	r2, [r0, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	6883      	ldr	r3, [r0, #8]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064e6:	d119      	bne.n	800651c <HAL_UART_Transmit_IT+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ec:	d114      	bne.n	8006518 <HAL_UART_Transmit_IT+0x64>
 80064ee:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <HAL_UART_Transmit_IT+0x9c>)
 80064f2:	4918      	ldr	r1, [pc, #96]	; (8006554 <HAL_UART_Transmit_IT+0xa0>)
 80064f4:	2c00      	cmp	r4, #0
 80064f6:	bf08      	it	eq
 80064f8:	460b      	moveq	r3, r1
 80064fa:	6783      	str	r3, [r0, #120]	; 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	f102 0308 	add.w	r3, r2, #8
 8006500:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	f102 0008 	add.w	r0, r2, #8
 800650c:	e840 3100 	strex	r1, r3, [r0]
 8006510:	2900      	cmp	r1, #0
 8006512:	d1f3      	bne.n	80064fc <HAL_UART_Transmit_IT+0x48>
    return HAL_OK;
 8006514:	2000      	movs	r0, #0
}
 8006516:	bd10      	pop	{r4, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <HAL_UART_Transmit_IT+0x9c>)
 800651a:	e7ee      	b.n	80064fa <HAL_UART_Transmit_IT+0x46>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006520:	d10f      	bne.n	8006542 <HAL_UART_Transmit_IT+0x8e>
 8006522:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT;
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <HAL_UART_Transmit_IT+0xa4>)
 8006526:	490d      	ldr	r1, [pc, #52]	; (800655c <HAL_UART_Transmit_IT+0xa8>)
 8006528:	2c00      	cmp	r4, #0
 800652a:	bf08      	it	eq
 800652c:	460b      	moveq	r3, r1
 800652e:	6783      	str	r3, [r0, #120]	; 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	e842 3100 	strex	r1, r3, [r2]
 800653c:	2900      	cmp	r1, #0
 800653e:	d1f7      	bne.n	8006530 <HAL_UART_Transmit_IT+0x7c>
 8006540:	e7e8      	b.n	8006514 <HAL_UART_Transmit_IT+0x60>
        huart->TxISR = UART_TxISR_8BIT;
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_UART_Transmit_IT+0xa4>)
 8006544:	e7f3      	b.n	800652e <HAL_UART_Transmit_IT+0x7a>
    return HAL_BUSY;
 8006546:	2002      	movs	r0, #2
 8006548:	e7e5      	b.n	8006516 <HAL_UART_Transmit_IT+0x62>
      return HAL_ERROR;
 800654a:	2001      	movs	r0, #1
 800654c:	e7e3      	b.n	8006516 <HAL_UART_Transmit_IT+0x62>
 800654e:	bf00      	nop
 8006550:	080063e3 	.word	0x080063e3
 8006554:	08006449 	.word	0x08006449
 8006558:	0800637f 	.word	0x0800637f
 800655c:	080063af 	.word	0x080063af

08006560 <HAL_UART_TxCpltCallback>:
 8006560:	4770      	bx	lr

08006562 <HAL_UART_ErrorCallback>:
 8006562:	4770      	bx	lr

08006564 <UART_DMAAbortOnError>:
{
 8006564:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006566:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800656e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006572:	f7ff fff6 	bl	8006562 <HAL_UART_ErrorCallback>
}
 8006576:	bd08      	pop	{r3, pc}

08006578 <HAL_UARTEx_RxEventCallback>:
}
 8006578:	4770      	bx	lr
	...

0800657c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800657c:	6803      	ldr	r3, [r0, #0]
{
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006582:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 8006584:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006588:	681a      	ldr	r2, [r3, #0]
{
 800658a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800658c:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800658e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8006590:	d110      	bne.n	80065b4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006592:	068e      	lsls	r6, r1, #26
 8006594:	f140 8097 	bpl.w	80066c6 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006598:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800659c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 80065a0:	433e      	orrs	r6, r7
 80065a2:	f000 8090 	beq.w	80066c6 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 80065a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8085 	beq.w	80066b8 <HAL_UART_IRQHandler+0x13c>
}
 80065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065b2:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065b4:	4eaa      	ldr	r6, [pc, #680]	; (8006860 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065b6:	48ab      	ldr	r0, [pc, #684]	; (8006864 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065b8:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065ba:	4010      	ands	r0, r2
 80065bc:	4330      	orrs	r0, r6
 80065be:	f000 8082 	beq.w	80066c6 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c2:	07cf      	lsls	r7, r1, #31
 80065c4:	d509      	bpl.n	80065da <HAL_UART_IRQHandler+0x5e>
 80065c6:	05d0      	lsls	r0, r2, #23
 80065c8:	d507      	bpl.n	80065da <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065ca:	2001      	movs	r0, #1
 80065cc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80065d2:	f040 0001 	orr.w	r0, r0, #1
 80065d6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065da:	078f      	lsls	r7, r1, #30
 80065dc:	d509      	bpl.n	80065f2 <HAL_UART_IRQHandler+0x76>
 80065de:	07e8      	lsls	r0, r5, #31
 80065e0:	d507      	bpl.n	80065f2 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065e2:	2002      	movs	r0, #2
 80065e4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80065ea:	f040 0004 	orr.w	r0, r0, #4
 80065ee:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f2:	074f      	lsls	r7, r1, #29
 80065f4:	d509      	bpl.n	800660a <HAL_UART_IRQHandler+0x8e>
 80065f6:	07e8      	lsls	r0, r5, #31
 80065f8:	d507      	bpl.n	800660a <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065fa:	2004      	movs	r0, #4
 80065fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006602:	f040 0002 	orr.w	r0, r0, #2
 8006606:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800660a:	070f      	lsls	r7, r1, #28
 800660c:	d50b      	bpl.n	8006626 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800660e:	f002 0020 	and.w	r0, r2, #32
 8006612:	4330      	orrs	r0, r6
 8006614:	d007      	beq.n	8006626 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006616:	2008      	movs	r0, #8
 8006618:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800661a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800661e:	f040 0008 	orr.w	r0, r0, #8
 8006622:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006626:	050e      	lsls	r6, r1, #20
 8006628:	d50a      	bpl.n	8006640 <HAL_UART_IRQHandler+0xc4>
 800662a:	0150      	lsls	r0, r2, #5
 800662c:	d508      	bpl.n	8006640 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006632:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006634:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006638:	f043 0320 	orr.w	r3, r3, #32
 800663c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006640:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006644:	2b00      	cmp	r3, #0
 8006646:	d037      	beq.n	80066b8 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006648:	068b      	lsls	r3, r1, #26
 800664a:	d509      	bpl.n	8006660 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800664c:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006650:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8006654:	432a      	orrs	r2, r5
 8006656:	d003      	beq.n	8006660 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8006658:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800665a:	b10b      	cbz	r3, 8006660 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800665c:	4620      	mov	r0, r4
 800665e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006660:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8006662:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8006664:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006668:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800666a:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	ea53 0502 	orrs.w	r5, r3, r2
 8006676:	d021      	beq.n	80066bc <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8006678:	f7ff fe42 	bl	8006300 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	68b3      	ldr	r3, [r6, #8]
 800667e:	065f      	lsls	r7, r3, #25
 8006680:	d517      	bpl.n	80066b2 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	f102 0308 	add.w	r3, r2, #8
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	3208      	adds	r2, #8
 8006692:	e842 3100 	strex	r1, r3, [r2]
 8006696:	2900      	cmp	r1, #0
 8006698:	d1f3      	bne.n	8006682 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800669a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800669e:	b140      	cbz	r0, 80066b2 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066a0:	4b71      	ldr	r3, [pc, #452]	; (8006868 <HAL_UART_IRQHandler+0x2ec>)
 80066a2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a4:	f7fc fde0 	bl	8003268 <HAL_DMA_Abort_IT>
 80066a8:	b130      	cbz	r0, 80066b8 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066aa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80066ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80066b0:	e77d      	b.n	80065ae <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ff55 	bl	8006562 <HAL_UART_ErrorCallback>
}
 80066b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 80066bc:	f7ff ff51 	bl	8006562 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 80066c4:	e7f8      	b.n	80066b8 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80066c8:	2801      	cmp	r0, #1
 80066ca:	f040 80ae 	bne.w	800682a <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ce:	06ce      	lsls	r6, r1, #27
 80066d0:	f140 80ab 	bpl.w	800682a <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066d4:	06d0      	lsls	r0, r2, #27
 80066d6:	f140 80a8 	bpl.w	800682a <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066da:	2210      	movs	r2, #16
 80066dc:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	0652      	lsls	r2, r2, #25
 80066e2:	d56e      	bpl.n	80067c2 <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80066e8:	4860      	ldr	r0, [pc, #384]	; (800686c <HAL_UART_IRQHandler+0x2f0>)
 80066ea:	680a      	ldr	r2, [r1, #0]
 80066ec:	4282      	cmp	r2, r0
 80066ee:	d01e      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 80066f0:	3018      	adds	r0, #24
 80066f2:	4282      	cmp	r2, r0
 80066f4:	d01b      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 80066f6:	3018      	adds	r0, #24
 80066f8:	4282      	cmp	r2, r0
 80066fa:	d018      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 80066fc:	3018      	adds	r0, #24
 80066fe:	4282      	cmp	r2, r0
 8006700:	d015      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 8006702:	3018      	adds	r0, #24
 8006704:	4282      	cmp	r2, r0
 8006706:	d012      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 8006708:	3018      	adds	r0, #24
 800670a:	4282      	cmp	r2, r0
 800670c:	d00f      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 800670e:	3018      	adds	r0, #24
 8006710:	4282      	cmp	r2, r0
 8006712:	d00c      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 8006714:	3018      	adds	r0, #24
 8006716:	4282      	cmp	r2, r0
 8006718:	d009      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 800671a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800671e:	4282      	cmp	r2, r0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 8006722:	3018      	adds	r0, #24
 8006724:	4282      	cmp	r2, r0
 8006726:	d002      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 8006728:	3018      	adds	r0, #24
 800672a:	4282      	cmp	r2, r0
 800672c:	d0ff      	beq.n	800672e <HAL_UART_IRQHandler+0x1b2>
 800672e:	6852      	ldr	r2, [r2, #4]
 8006730:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006732:	2a00      	cmp	r2, #0
 8006734:	d0c0      	beq.n	80066b8 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006736:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800673a:	4290      	cmp	r0, r2
 800673c:	d9bc      	bls.n	80066b8 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 800673e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006742:	69ca      	ldr	r2, [r1, #28]
 8006744:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006748:	d02f      	beq.n	80067aa <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800674e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	e843 2100 	strex	r1, r2, [r3]
 8006756:	2900      	cmp	r1, #0
 8006758:	d1f7      	bne.n	800674a <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	f103 0008 	add.w	r0, r3, #8
 800676a:	e840 2100 	strex	r1, r2, [r0]
 800676e:	2900      	cmp	r1, #0
 8006770:	d1f3      	bne.n	800675a <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	f103 0008 	add.w	r0, r3, #8
 8006782:	e840 2100 	strex	r1, r2, [r0]
 8006786:	2900      	cmp	r1, #0
 8006788:	d1f3      	bne.n	8006772 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800678a:	2220      	movs	r2, #32
 800678c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006796:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	e843 2100 	strex	r1, r2, [r3]
 800679e:	2900      	cmp	r1, #0
 80067a0:	d1f7      	bne.n	8006792 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80067a6:	f7fc fbb9 	bl	8002f1c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067aa:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067ac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b0:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80067b6:	1ac9      	subs	r1, r1, r3
 80067b8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff fedc 	bl	8006578 <HAL_UARTEx_RxEventCallback>
 80067c0:	e77a      	b.n	80066b8 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 80067c6:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80067ce:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80067d0:	b280      	uxth	r0, r0
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f43f af70 	beq.w	80066b8 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067d8:	1a89      	subs	r1, r1, r2
 80067da:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80067dc:	2900      	cmp	r1, #0
 80067de:	f43f af6b 	beq.w	80066b8 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	e843 2000 	strex	r0, r2, [r3]
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1f7      	bne.n	80067e2 <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067f2:	4d1f      	ldr	r5, [pc, #124]	; (8006870 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f103 0208 	add.w	r2, r3, #8
 80067f8:	e852 2f00 	ldrex	r2, [r2]
 80067fc:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f103 0608 	add.w	r6, r3, #8
 8006802:	e846 2000 	strex	r0, r2, [r6]
 8006806:	2800      	cmp	r0, #0
 8006808:	d1f4      	bne.n	80067f4 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800680c:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800680e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	e843 2000 	strex	r0, r2, [r3]
 8006820:	2800      	cmp	r0, #0
 8006822:	d1f7      	bne.n	8006814 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006824:	2302      	movs	r3, #2
 8006826:	6723      	str	r3, [r4, #112]	; 0x70
 8006828:	e7c7      	b.n	80067ba <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800682a:	02cf      	lsls	r7, r1, #11
 800682c:	d509      	bpl.n	8006842 <HAL_UART_IRQHandler+0x2c6>
 800682e:	026e      	lsls	r6, r5, #9
 8006830:	d507      	bpl.n	8006842 <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006832:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006836:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800683e:	f000 be5b 	b.w	80074f8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006842:	0608      	lsls	r0, r1, #24
 8006844:	d516      	bpl.n	8006874 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006846:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800684a:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 800684e:	4328      	orrs	r0, r5
 8006850:	d010      	beq.n	8006874 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 8006852:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006854:	2b00      	cmp	r3, #0
 8006856:	f43f af2f 	beq.w	80066b8 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800685a:	4620      	mov	r0, r4
 800685c:	e6a7      	b.n	80065ae <HAL_UART_IRQHandler+0x32>
 800685e:	bf00      	nop
 8006860:	10000001 	.word	0x10000001
 8006864:	04000120 	.word	0x04000120
 8006868:	08006565 	.word	0x08006565
 800686c:	40020010 	.word	0x40020010
 8006870:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006874:	064f      	lsls	r7, r1, #25
 8006876:	d511      	bpl.n	800689c <HAL_UART_IRQHandler+0x320>
 8006878:	0656      	lsls	r6, r2, #25
 800687a:	d50f      	bpl.n	800689c <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	e843 2100 	strex	r1, r2, [r3]
 8006888:	2900      	cmp	r1, #0
 800688a:	d1f7      	bne.n	800687c <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800688c:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800688e:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8006890:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8006892:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 8006896:	f7ff fe63 	bl	8006560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800689a:	e70d      	b.n	80066b8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800689c:	020d      	lsls	r5, r1, #8
 800689e:	d506      	bpl.n	80068ae <HAL_UART_IRQHandler+0x332>
 80068a0:	0050      	lsls	r0, r2, #1
 80068a2:	d504      	bpl.n	80068ae <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068a4:	4620      	mov	r0, r4
}
 80068a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068aa:	f000 be27 	b.w	80074fc <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068ae:	01cb      	lsls	r3, r1, #7
 80068b0:	f57f af02 	bpl.w	80066b8 <HAL_UART_IRQHandler+0x13c>
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f6bf aeff 	bge.w	80066b8 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068ba:	4620      	mov	r0, r4
}
 80068bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068c0:	f000 be1b 	b.w	80074fa <HAL_UARTEx_RxFifoFullCallback>

080068c4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 80068c8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068cc:	2a22      	cmp	r2, #34	; 0x22
{
 80068ce:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068d0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d2:	d155      	bne.n	8006980 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068d6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80068d8:	400b      	ands	r3, r1
 80068da:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80068dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80068de:	3301      	adds	r3, #1
 80068e0:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80068e2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80068ee:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d142      	bne.n	800697e <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068f8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	e852 3f00 	ldrex	r3, [r2]
 80068fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006906:	6803      	ldr	r3, [r0, #0]
 8006908:	2900      	cmp	r1, #0
 800690a:	d1f5      	bne.n	80068f8 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f103 0208 	add.w	r2, r3, #8
 8006910:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006914:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	f103 0c08 	add.w	ip, r3, #8
 800691c:	e84c 2100 	strex	r1, r2, [ip]
 8006920:	2900      	cmp	r1, #0
 8006922:	d1f3      	bne.n	800690c <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006924:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006926:	6741      	str	r1, [r0, #116]	; 0x74
      huart->RxState = HAL_UART_STATE_READY;
 8006928:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800692c:	4a17      	ldr	r2, [pc, #92]	; (800698c <UART_RxISR_8BIT+0xc8>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692e:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006930:	4293      	cmp	r3, r2
 8006932:	d105      	bne.n	8006940 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006936:	2a01      	cmp	r2, #1
 8006938:	d00e      	beq.n	8006958 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800693a:	f7fa fc0d 	bl	8001158 <HAL_UART_RxCpltCallback>
 800693e:	e01e      	b.n	800697e <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	0211      	lsls	r1, r2, #8
 8006944:	d5f6      	bpl.n	8006934 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800694a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	e843 2100 	strex	r1, r2, [r3]
 8006952:	2900      	cmp	r1, #0
 8006954:	d1f7      	bne.n	8006946 <UART_RxISR_8BIT+0x82>
 8006956:	e7ed      	b.n	8006934 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	2200      	movs	r2, #0
 800695a:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	e843 2100 	strex	r1, r2, [r3]
 8006968:	2900      	cmp	r1, #0
 800696a:	d1f7      	bne.n	800695c <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800696c:	69da      	ldr	r2, [r3, #28]
 800696e:	06d2      	lsls	r2, r2, #27
 8006970:	d501      	bpl.n	8006976 <UART_RxISR_8BIT+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006972:	2210      	movs	r2, #16
 8006974:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006976:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800697a:	f7ff fdfd 	bl	8006578 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800697e:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	f042 0208 	orr.w	r2, r2, #8
 8006986:	619a      	str	r2, [r3, #24]
}
 8006988:	e7f9      	b.n	800697e <UART_RxISR_8BIT+0xba>
 800698a:	bf00      	nop
 800698c:	58000c00 	.word	0x58000c00

08006990 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006990:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 8006994:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006998:	2a22      	cmp	r2, #34	; 0x22
{
 800699a:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800699c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699e:	d152      	bne.n	8006a46 <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80069a2:	4011      	ands	r1, r2
 80069a4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80069a6:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80069aa:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80069ac:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80069b0:	3a01      	subs	r2, #1
 80069b2:	b292      	uxth	r2, r2
 80069b4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069b8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80069bc:	b292      	uxth	r2, r2
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d140      	bne.n	8006a44 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	e843 2100 	strex	r1, r2, [r3]
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d1f7      	bne.n	80069c2 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	f103 0208 	add.w	r2, r3, #8
 80069d6:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	f103 0c08 	add.w	ip, r3, #8
 80069e2:	e84c 2100 	strex	r1, r2, [ip]
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d1f3      	bne.n	80069d2 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ea:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069ec:	6741      	str	r1, [r0, #116]	; 0x74
      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <UART_RxISR_16BIT+0xc0>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f4:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d105      	bne.n	8006a06 <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80069fc:	2a01      	cmp	r2, #1
 80069fe:	d00e      	beq.n	8006a1e <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a00:	f7fa fbaa 	bl	8001158 <HAL_UART_RxCpltCallback>
 8006a04:	e01e      	b.n	8006a44 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	0211      	lsls	r1, r2, #8
 8006a0a:	d5f6      	bpl.n	80069fa <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	e843 2100 	strex	r1, r2, [r3]
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	d1f7      	bne.n	8006a0c <UART_RxISR_16BIT+0x7c>
 8006a1c:	e7ed      	b.n	80069fa <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	e843 2100 	strex	r1, r2, [r3]
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	d1f7      	bne.n	8006a22 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	06d2      	lsls	r2, r2, #27
 8006a36:	d501      	bpl.n	8006a3c <UART_RxISR_16BIT+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a38:	2210      	movs	r2, #16
 8006a3a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a3c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006a40:	f7ff fd9a 	bl	8006578 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a44:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	619a      	str	r2, [r3, #24]
}
 8006a4e:	e7f9      	b.n	8006a44 <UART_RxISR_16BIT+0xb4>
 8006a50:	58000c00 	.word	0x58000c00

08006a54 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a54:	6803      	ldr	r3, [r0, #0]
{
 8006a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a5a:	69df      	ldr	r7, [r3, #28]
{
 8006a5c:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a5e:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a60:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a62:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint16_t  uhMask = huart->Mask;
 8006a66:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a6a:	2922      	cmp	r1, #34	; 0x22
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a6c:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a6e:	f040 80b4 	bne.w	8006bda <UART_RxISR_8BIT_FIFOEN+0x186>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a72:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	2600      	movs	r6, #0
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a78:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8006be8 <UART_RxISR_8BIT_FIFOEN+0x194>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a7c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8006bec <UART_RxISR_8BIT_FIFOEN+0x198>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a80:	f1b9 0f00 	cmp.w	r9, #0
 8006a84:	d001      	beq.n	8006a8a <UART_RxISR_8BIT_FIFOEN+0x36>
 8006a86:	06bb      	lsls	r3, r7, #26
 8006a88:	d421      	bmi.n	8006ace <UART_RxISR_8BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a8e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a90:	b1d3      	cbz	r3, 8006ac8 <UART_RxISR_8BIT_FIFOEN+0x74>
 8006a92:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d916      	bls.n	8006ac8 <UART_RxISR_8BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	f102 0308 	add.w	r3, r2, #8
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	3208      	adds	r2, #8
 8006aaa:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d1f2      	bne.n	8006a9a <UART_RxISR_8BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ab4:	4b4b      	ldr	r3, [pc, #300]	; (8006be4 <UART_RxISR_8BIT_FIFOEN+0x190>)
 8006ab6:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006abc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	e842 3100 	strex	r1, r3, [r2]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d1f7      	bne.n	8006ab8 <UART_RxISR_8BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac8:	b003      	add	sp, #12
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ace:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ad0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ad4:	ea03 0308 	and.w	r3, r3, r8
 8006ad8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006adc:	3301      	adds	r3, #1
 8006ade:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006ae0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006af0:	0778      	lsls	r0, r7, #29
 8006af2:	d02c      	beq.n	8006b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006af4:	07f9      	lsls	r1, r7, #31
 8006af6:	d50a      	bpl.n	8006b0e <UART_RxISR_8BIT_FIFOEN+0xba>
 8006af8:	9a01      	ldr	r2, [sp, #4]
 8006afa:	05d2      	lsls	r2, r2, #23
 8006afc:	d507      	bpl.n	8006b0e <UART_RxISR_8BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006afe:	2101      	movs	r1, #1
 8006b00:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b02:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006b06:	f041 0101 	orr.w	r1, r1, #1
 8006b0a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0e:	07b8      	lsls	r0, r7, #30
 8006b10:	d509      	bpl.n	8006b26 <UART_RxISR_8BIT_FIFOEN+0xd2>
 8006b12:	07e9      	lsls	r1, r5, #31
 8006b14:	d507      	bpl.n	8006b26 <UART_RxISR_8BIT_FIFOEN+0xd2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b16:	2102      	movs	r1, #2
 8006b18:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006b1e:	f041 0104 	orr.w	r1, r1, #4
 8006b22:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b26:	077a      	lsls	r2, r7, #29
 8006b28:	d509      	bpl.n	8006b3e <UART_RxISR_8BIT_FIFOEN+0xea>
 8006b2a:	07e8      	lsls	r0, r5, #31
 8006b2c:	d507      	bpl.n	8006b3e <UART_RxISR_8BIT_FIFOEN+0xea>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b2e:	2104      	movs	r1, #4
 8006b30:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006b36:	f043 0302 	orr.w	r3, r3, #2
 8006b3a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006b42:	b123      	cbz	r3, 8006b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
          HAL_UART_ErrorCallback(huart);
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7ff fd0c 	bl	8006562 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8006b4e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d193      	bne.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b58:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	e851 3f00 	ldrex	r3, [r1]
 8006b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d1f5      	bne.n	8006b58 <UART_RxISR_8BIT_FIFOEN+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	f103 0208 	add.w	r2, r3, #8
 8006b70:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b74:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	e842 1000 	strex	r0, r1, [r2]
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1f5      	bne.n	8006b6c <UART_RxISR_8BIT_FIFOEN+0x118>
        huart->RxState = HAL_UART_STATE_READY;
 8006b80:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b82:	455b      	cmp	r3, fp
        huart->RxISR = NULL;
 8006b84:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b86:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8a:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b8c:	d00a      	beq.n	8006ba4 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b8e:	6859      	ldr	r1, [r3, #4]
 8006b90:	0209      	lsls	r1, r1, #8
 8006b92:	d507      	bpl.n	8006ba4 <UART_RxISR_8BIT_FIFOEN+0x150>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b98:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	e843 1000 	strex	r0, r1, [r3]
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1f7      	bne.n	8006b94 <UART_RxISR_8BIT_FIFOEN+0x140>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006ba6:	2901      	cmp	r1, #1
 8006ba8:	d113      	bne.n	8006bd2 <UART_RxISR_8BIT_FIFOEN+0x17e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb0:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	e843 1000 	strex	r0, r1, [r3]
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d1f7      	bne.n	8006bac <UART_RxISR_8BIT_FIFOEN+0x158>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bbc:	69d9      	ldr	r1, [r3, #28]
 8006bbe:	06ca      	lsls	r2, r1, #27
 8006bc0:	d501      	bpl.n	8006bc6 <UART_RxISR_8BIT_FIFOEN+0x172>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bc2:	2110      	movs	r1, #16
 8006bc4:	6219      	str	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bc6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f7ff fcd4 	bl	8006578 <HAL_UARTEx_RxEventCallback>
 8006bd0:	e756      	b.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7fa fac0 	bl	8001158 <HAL_UART_RxCpltCallback>
 8006bd8:	e752      	b.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bda:	699a      	ldr	r2, [r3, #24]
 8006bdc:	f042 0208 	orr.w	r2, r2, #8
 8006be0:	619a      	str	r2, [r3, #24]
}
 8006be2:	e771      	b.n	8006ac8 <UART_RxISR_8BIT_FIFOEN+0x74>
 8006be4:	080068c5 	.word	0x080068c5
 8006be8:	effffffe 	.word	0xeffffffe
 8006bec:	58000c00 	.word	0x58000c00

08006bf0 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bf0:	6803      	ldr	r3, [r0, #0]
{
 8006bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bf6:	69df      	ldr	r7, [r3, #28]
{
 8006bf8:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bfa:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bfc:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bfe:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint16_t  uhMask = huart->Mask;
 8006c02:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c06:	2922      	cmp	r1, #34	; 0x22
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c08:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c0a:	f040 80b2 	bne.w	8006d72 <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c0e:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c12:	2600      	movs	r6, #0
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c14:	f8df a168 	ldr.w	sl, [pc, #360]	; 8006d80 <UART_RxISR_16BIT_FIFOEN+0x190>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c18:	f8df b168 	ldr.w	fp, [pc, #360]	; 8006d84 <UART_RxISR_16BIT_FIFOEN+0x194>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	d001      	beq.n	8006c26 <UART_RxISR_16BIT_FIFOEN+0x36>
 8006c22:	06bb      	lsls	r3, r7, #26
 8006c24:	d421      	bmi.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c26:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006c2a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c2c:	b1d3      	cbz	r3, 8006c64 <UART_RxISR_16BIT_FIFOEN+0x74>
 8006c2e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d916      	bls.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	f102 0308 	add.w	r3, r2, #8
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	3208      	adds	r2, #8
 8006c46:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d1f2      	bne.n	8006c36 <UART_RxISR_16BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <UART_RxISR_16BIT_FIFOEN+0x18c>)
 8006c52:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c58:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	e842 3100 	strex	r1, r3, [r2]
 8006c60:	2900      	cmp	r1, #0
 8006c62:	d1f7      	bne.n	8006c54 <UART_RxISR_16BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c64:	b003      	add	sp, #12
 8006c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c6a:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c6c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c70:	ea08 0101 	and.w	r1, r8, r1
 8006c74:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8006c78:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006c7a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	b292      	uxth	r2, r2
 8006c82:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c86:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c88:	0778      	lsls	r0, r7, #29
 8006c8a:	d02c      	beq.n	8006ce6 <UART_RxISR_16BIT_FIFOEN+0xf6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c8c:	07f9      	lsls	r1, r7, #31
 8006c8e:	d50a      	bpl.n	8006ca6 <UART_RxISR_16BIT_FIFOEN+0xb6>
 8006c90:	9a01      	ldr	r2, [sp, #4]
 8006c92:	05d2      	lsls	r2, r2, #23
 8006c94:	d507      	bpl.n	8006ca6 <UART_RxISR_16BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c96:	2101      	movs	r1, #1
 8006c98:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c9a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006c9e:	f041 0101 	orr.w	r1, r1, #1
 8006ca2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca6:	07b8      	lsls	r0, r7, #30
 8006ca8:	d509      	bpl.n	8006cbe <UART_RxISR_16BIT_FIFOEN+0xce>
 8006caa:	07e9      	lsls	r1, r5, #31
 8006cac:	d507      	bpl.n	8006cbe <UART_RxISR_16BIT_FIFOEN+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cae:	2102      	movs	r1, #2
 8006cb0:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006cb6:	f041 0104 	orr.w	r1, r1, #4
 8006cba:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cbe:	077a      	lsls	r2, r7, #29
 8006cc0:	d509      	bpl.n	8006cd6 <UART_RxISR_16BIT_FIFOEN+0xe6>
 8006cc2:	07e8      	lsls	r0, r5, #31
 8006cc4:	d507      	bpl.n	8006cd6 <UART_RxISR_16BIT_FIFOEN+0xe6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cc6:	2104      	movs	r1, #4
 8006cc8:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cce:	f043 0302 	orr.w	r3, r3, #2
 8006cd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cda:	b123      	cbz	r3, 8006ce6 <UART_RxISR_16BIT_FIFOEN+0xf6>
          HAL_UART_ErrorCallback(huart);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fc40 	bl	8006562 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8006ce6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d195      	bne.n	8006c1c <UART_RxISR_16BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf0:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	e851 3f00 	ldrex	r3, [r1]
 8006cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1f5      	bne.n	8006cf0 <UART_RxISR_16BIT_FIFOEN+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	f103 0208 	add.w	r2, r3, #8
 8006d08:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d0c:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	e842 1000 	strex	r0, r1, [r2]
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d1f5      	bne.n	8006d04 <UART_RxISR_16BIT_FIFOEN+0x114>
        huart->RxState = HAL_UART_STATE_READY;
 8006d18:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d1a:	455b      	cmp	r3, fp
        huart->RxISR = NULL;
 8006d1c:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d22:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d24:	d00a      	beq.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0x14c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	0209      	lsls	r1, r1, #8
 8006d2a:	d507      	bpl.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0x14c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d30:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	e843 1000 	strex	r0, r1, [r3]
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d1f7      	bne.n	8006d2c <UART_RxISR_16BIT_FIFOEN+0x13c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006d3e:	2901      	cmp	r1, #1
 8006d40:	d113      	bne.n	8006d6a <UART_RxISR_16BIT_FIFOEN+0x17a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	e843 1000 	strex	r0, r1, [r3]
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d1f7      	bne.n	8006d44 <UART_RxISR_16BIT_FIFOEN+0x154>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d54:	69d9      	ldr	r1, [r3, #28]
 8006d56:	06ca      	lsls	r2, r1, #27
 8006d58:	d501      	bpl.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	6219      	str	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006d62:	4620      	mov	r0, r4
 8006d64:	f7ff fc08 	bl	8006578 <HAL_UARTEx_RxEventCallback>
 8006d68:	e758      	b.n	8006c1c <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7fa f9f4 	bl	8001158 <HAL_UART_RxCpltCallback>
 8006d70:	e754      	b.n	8006c1c <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	f042 0208 	orr.w	r2, r2, #8
 8006d78:	619a      	str	r2, [r3, #24]
}
 8006d7a:	e773      	b.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0x74>
 8006d7c:	08006991 	.word	0x08006991
 8006d80:	effffffe 	.word	0xeffffffe
 8006d84:	58000c00 	.word	0x58000c00

08006d88 <UART_SetConfig>:
{
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d8c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d8e:	69c0      	ldr	r0, [r0, #28]
{
 8006d90:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d92:	6921      	ldr	r1, [r4, #16]
 8006d94:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d96:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	6961      	ldr	r1, [r4, #20]
 8006d9c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9e:	4997      	ldr	r1, [pc, #604]	; (8006ffc <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da2:	4029      	ands	r1, r5
 8006da4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006db0:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006db2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006db6:	4a92      	ldr	r2, [pc, #584]	; (8007000 <UART_SetConfig+0x278>)
 8006db8:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006dba:	bf1c      	itt	ne
 8006dbc:	6a22      	ldrne	r2, [r4, #32]
 8006dbe:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006dc6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006dca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	f022 020f 	bic.w	r2, r2, #15
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dda:	4a8a      	ldr	r2, [pc, #552]	; (8007004 <UART_SetConfig+0x27c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d11b      	bne.n	8006e18 <UART_SetConfig+0x90>
 8006de0:	4b89      	ldr	r3, [pc, #548]	; (8007008 <UART_SetConfig+0x280>)
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de8:	2b28      	cmp	r3, #40	; 0x28
 8006dea:	d86c      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006dec:	4a87      	ldr	r2, [pc, #540]	; (800700c <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006df2:	5cd3      	ldrb	r3, [r2, r3]
 8006df4:	f040 8132 	bne.w	800705c <UART_SetConfig+0x2d4>
    switch (clocksource)
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	f200 80c0 	bhi.w	8006f7e <UART_SetConfig+0x1f6>
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d861      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e06:	00e7      	.short	0x00e7
 8006e08:	006000ec 	.word	0x006000ec
 8006e0c:	00ef0060 	.word	0x00ef0060
 8006e10:	00600060 	.word	0x00600060
 8006e14:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e18:	4a7d      	ldr	r2, [pc, #500]	; (8007010 <UART_SetConfig+0x288>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d107      	bne.n	8006e2e <UART_SetConfig+0xa6>
 8006e1e:	4b7a      	ldr	r3, [pc, #488]	; (8007008 <UART_SetConfig+0x280>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d84d      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e2a:	4a7a      	ldr	r2, [pc, #488]	; (8007014 <UART_SetConfig+0x28c>)
 8006e2c:	e7df      	b.n	8006dee <UART_SetConfig+0x66>
 8006e2e:	4a7a      	ldr	r2, [pc, #488]	; (8007018 <UART_SetConfig+0x290>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d107      	bne.n	8006e44 <UART_SetConfig+0xbc>
 8006e34:	4b74      	ldr	r3, [pc, #464]	; (8007008 <UART_SetConfig+0x280>)
 8006e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d842      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e40:	4a76      	ldr	r2, [pc, #472]	; (800701c <UART_SetConfig+0x294>)
 8006e42:	e7d4      	b.n	8006dee <UART_SetConfig+0x66>
 8006e44:	4a76      	ldr	r2, [pc, #472]	; (8007020 <UART_SetConfig+0x298>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d107      	bne.n	8006e5a <UART_SetConfig+0xd2>
 8006e4a:	4b6f      	ldr	r3, [pc, #444]	; (8007008 <UART_SetConfig+0x280>)
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d837      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e56:	4a73      	ldr	r2, [pc, #460]	; (8007024 <UART_SetConfig+0x29c>)
 8006e58:	e7c9      	b.n	8006dee <UART_SetConfig+0x66>
 8006e5a:	4a73      	ldr	r2, [pc, #460]	; (8007028 <UART_SetConfig+0x2a0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d107      	bne.n	8006e70 <UART_SetConfig+0xe8>
 8006e60:	4b69      	ldr	r3, [pc, #420]	; (8007008 <UART_SetConfig+0x280>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	2b05      	cmp	r3, #5
 8006e6a:	d82c      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e6c:	4a6f      	ldr	r2, [pc, #444]	; (800702c <UART_SetConfig+0x2a4>)
 8006e6e:	e7be      	b.n	8006dee <UART_SetConfig+0x66>
 8006e70:	4a6f      	ldr	r2, [pc, #444]	; (8007030 <UART_SetConfig+0x2a8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d107      	bne.n	8006e86 <UART_SetConfig+0xfe>
 8006e76:	4b64      	ldr	r3, [pc, #400]	; (8007008 <UART_SetConfig+0x280>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e7e:	2b28      	cmp	r3, #40	; 0x28
 8006e80:	d821      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e82:	4a6c      	ldr	r2, [pc, #432]	; (8007034 <UART_SetConfig+0x2ac>)
 8006e84:	e7b3      	b.n	8006dee <UART_SetConfig+0x66>
 8006e86:	4a6c      	ldr	r2, [pc, #432]	; (8007038 <UART_SetConfig+0x2b0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d107      	bne.n	8006e9c <UART_SetConfig+0x114>
 8006e8c:	4b5e      	ldr	r3, [pc, #376]	; (8007008 <UART_SetConfig+0x280>)
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d816      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006e98:	4a68      	ldr	r2, [pc, #416]	; (800703c <UART_SetConfig+0x2b4>)
 8006e9a:	e7a8      	b.n	8006dee <UART_SetConfig+0x66>
 8006e9c:	4a68      	ldr	r2, [pc, #416]	; (8007040 <UART_SetConfig+0x2b8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d107      	bne.n	8006eb2 <UART_SetConfig+0x12a>
 8006ea2:	4b59      	ldr	r3, [pc, #356]	; (8007008 <UART_SetConfig+0x280>)
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	d80b      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006eae:	4a65      	ldr	r2, [pc, #404]	; (8007044 <UART_SetConfig+0x2bc>)
 8006eb0:	e79d      	b.n	8006dee <UART_SetConfig+0x66>
 8006eb2:	4a53      	ldr	r2, [pc, #332]	; (8007000 <UART_SetConfig+0x278>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d106      	bne.n	8006ec6 <UART_SetConfig+0x13e>
 8006eb8:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8006ebc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d901      	bls.n	8006eca <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e00e      	b.n	8006ee8 <UART_SetConfig+0x160>
 8006eca:	495f      	ldr	r1, [pc, #380]	; (8007048 <UART_SetConfig+0x2c0>)
 8006ecc:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d023      	beq.n	8006f1a <UART_SetConfig+0x192>
 8006ed2:	d811      	bhi.n	8006ef8 <UART_SetConfig+0x170>
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d016      	beq.n	8006f06 <UART_SetConfig+0x17e>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d019      	beq.n	8006f10 <UART_SetConfig+0x188>
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d1f2      	bne.n	8006ec6 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006ee0:	f7ff f846 	bl	8005f70 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8006ee4:	bb10      	cbnz	r0, 8006f2c <UART_SetConfig+0x1a4>
 8006ee6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8006ee8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006eec:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006eee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006ef0:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 8006ef4:	b007      	add	sp, #28
 8006ef6:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d03e      	beq.n	8006f7a <UART_SetConfig+0x1f2>
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d1e2      	bne.n	8006ec6 <UART_SetConfig+0x13e>
 8006f00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f04:	e012      	b.n	8006f2c <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f06:	4668      	mov	r0, sp
 8006f08:	f7ff f844 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f0c:	9801      	ldr	r0, [sp, #4]
        break;
 8006f0e:	e7e9      	b.n	8006ee4 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f10:	a803      	add	r0, sp, #12
 8006f12:	f7ff f8e9 	bl	80060e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f16:	9804      	ldr	r0, [sp, #16]
        break;
 8006f18:	e7e4      	b.n	8006ee4 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f1a:	6813      	ldr	r3, [r2, #0]
 8006f1c:	484b      	ldr	r0, [pc, #300]	; (800704c <UART_SetConfig+0x2c4>)
 8006f1e:	f013 0f20 	tst.w	r3, #32
 8006f22:	d003      	beq.n	8006f2c <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f2a:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f2c:	4b48      	ldr	r3, [pc, #288]	; (8007050 <UART_SetConfig+0x2c8>)
 8006f2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f30:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f32:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f36:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f3a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	d8c1      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
 8006f42:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006f46:	d8be      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f7f9 fa30 	bl	80003b0 <__aeabi_uldivmod>
 8006f50:	462a      	mov	r2, r5
 8006f52:	0209      	lsls	r1, r1, #8
 8006f54:	086b      	lsrs	r3, r5, #1
 8006f56:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006f5a:	0200      	lsls	r0, r0, #8
 8006f5c:	18c0      	adds	r0, r0, r3
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	f141 0100 	adc.w	r1, r1, #0
 8006f66:	f7f9 fa23 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f6a:	4b3a      	ldr	r3, [pc, #232]	; (8007054 <UART_SetConfig+0x2cc>)
 8006f6c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d8a8      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	60d8      	str	r0, [r3, #12]
 8006f78:	e7b5      	b.n	8006ee6 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8006f7a:	4837      	ldr	r0, [pc, #220]	; (8007058 <UART_SetConfig+0x2d0>)
 8006f7c:	e7d6      	b.n	8006f2c <UART_SetConfig+0x1a4>
    switch (clocksource)
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d03a      	beq.n	8006ff8 <UART_SetConfig+0x270>
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	d00b      	beq.n	8006f9e <UART_SetConfig+0x216>
 8006f86:	2b10      	cmp	r3, #16
 8006f88:	d19d      	bne.n	8006ec6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f8a:	4b1f      	ldr	r3, [pc, #124]	; (8007008 <UART_SetConfig+0x280>)
 8006f8c:	482f      	ldr	r0, [pc, #188]	; (800704c <UART_SetConfig+0x2c4>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	f012 0f20 	tst.w	r2, #32
 8006f94:	d003      	beq.n	8006f9e <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f9c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <UART_SetConfig+0x2c8>)
 8006fa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006fa8:	084b      	lsrs	r3, r1, #1
 8006faa:	fbb0 f2f2 	udiv	r2, r0, r2
 8006fae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb2:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb6:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fba:	f1a3 0110 	sub.w	r1, r3, #16
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d881      	bhi.n	8006ec6 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc2:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fc6:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006fca:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fcc:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60cb      	str	r3, [r1, #12]
 8006fd2:	e788      	b.n	8006ee6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f7fe f9a4 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d084      	beq.n	8006ee6 <UART_SetConfig+0x15e>
 8006fdc:	e7df      	b.n	8006f9e <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fde:	f7fe f9b1 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
        break;
 8006fe2:	e7f9      	b.n	8006fd8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe4:	4668      	mov	r0, sp
 8006fe6:	f7fe ffd5 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fea:	9801      	ldr	r0, [sp, #4]
        break;
 8006fec:	e7f4      	b.n	8006fd8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fee:	a803      	add	r0, sp, #12
 8006ff0:	f7ff f87a 	bl	80060e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ff4:	9804      	ldr	r0, [sp, #16]
        break;
 8006ff6:	e7ef      	b.n	8006fd8 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8006ff8:	4817      	ldr	r0, [pc, #92]	; (8007058 <UART_SetConfig+0x2d0>)
 8006ffa:	e7d0      	b.n	8006f9e <UART_SetConfig+0x216>
 8006ffc:	cfff69f3 	.word	0xcfff69f3
 8007000:	58000c00 	.word	0x58000c00
 8007004:	40011000 	.word	0x40011000
 8007008:	58024400 	.word	0x58024400
 800700c:	08008803 	.word	0x08008803
 8007010:	40004400 	.word	0x40004400
 8007014:	0800882c 	.word	0x0800882c
 8007018:	40004800 	.word	0x40004800
 800701c:	0800882c 	.word	0x0800882c
 8007020:	40004c00 	.word	0x40004c00
 8007024:	0800882c 	.word	0x0800882c
 8007028:	40005000 	.word	0x40005000
 800702c:	0800882c 	.word	0x0800882c
 8007030:	40011400 	.word	0x40011400
 8007034:	08008803 	.word	0x08008803
 8007038:	40007800 	.word	0x40007800
 800703c:	0800882c 	.word	0x0800882c
 8007040:	40007c00 	.word	0x40007c00
 8007044:	0800882c 	.word	0x0800882c
 8007048:	08008832 	.word	0x08008832
 800704c:	03d09000 	.word	0x03d09000
 8007050:	08008838 	.word	0x08008838
 8007054:	000ffcff 	.word	0x000ffcff
 8007058:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800705c:	2b08      	cmp	r3, #8
 800705e:	d817      	bhi.n	8007090 <UART_SetConfig+0x308>
 8007060:	2b08      	cmp	r3, #8
 8007062:	f63f af30 	bhi.w	8006ec6 <UART_SetConfig+0x13e>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0x2e4>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070d3 	.word	0x080070d3
 8007070:	080070df 	.word	0x080070df
 8007074:	08006ec7 	.word	0x08006ec7
 8007078:	08006ec7 	.word	0x08006ec7
 800707c:	080070e5 	.word	0x080070e5
 8007080:	08006ec7 	.word	0x08006ec7
 8007084:	08006ec7 	.word	0x08006ec7
 8007088:	08006ec7 	.word	0x08006ec7
 800708c:	080070ef 	.word	0x080070ef
 8007090:	2b20      	cmp	r3, #32
 8007092:	d031      	beq.n	80070f8 <UART_SetConfig+0x370>
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	d031      	beq.n	80070fc <UART_SetConfig+0x374>
 8007098:	2b10      	cmp	r3, #16
 800709a:	f47f af14 	bne.w	8006ec6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709e:	4b19      	ldr	r3, [pc, #100]	; (8007104 <UART_SetConfig+0x37c>)
 80070a0:	4819      	ldr	r0, [pc, #100]	; (8007108 <UART_SetConfig+0x380>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	f012 0f20 	tst.w	r2, #32
 80070a8:	d003      	beq.n	80070b2 <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070b0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <UART_SetConfig+0x384>)
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80070bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80070c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80070c4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80070cc:	f1a0 0210 	sub.w	r2, r0, #16
 80070d0:	e74e      	b.n	8006f70 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fe f925 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f af05 	beq.w	8006ee6 <UART_SetConfig+0x15e>
 80070dc:	e7e9      	b.n	80070b2 <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80070de:	f7fe f931 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
        break;
 80070e2:	e7f8      	b.n	80070d6 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e4:	4668      	mov	r0, sp
 80070e6:	f7fe ff55 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070ea:	9801      	ldr	r0, [sp, #4]
        break;
 80070ec:	e7f3      	b.n	80070d6 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ee:	a803      	add	r0, sp, #12
 80070f0:	f7fe fffa 	bl	80060e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070f4:	9804      	ldr	r0, [sp, #16]
        break;
 80070f6:	e7ee      	b.n	80070d6 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <UART_SetConfig+0x388>)
 80070fa:	e7da      	b.n	80070b2 <UART_SetConfig+0x32a>
    switch (clocksource)
 80070fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007100:	e7d7      	b.n	80070b2 <UART_SetConfig+0x32a>
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
 800710c:	08008838 	.word	0x08008838
 8007110:	003d0900 	.word	0x003d0900

08007114 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007114:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007116:	07da      	lsls	r2, r3, #31
{
 8007118:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800711a:	d506      	bpl.n	800712a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800711c:	6801      	ldr	r1, [r0, #0]
 800711e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007120:	684a      	ldr	r2, [r1, #4]
 8007122:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007126:	4322      	orrs	r2, r4
 8007128:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800712a:	079c      	lsls	r4, r3, #30
 800712c:	d506      	bpl.n	800713c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800712e:	6801      	ldr	r1, [r0, #0]
 8007130:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007132:	684a      	ldr	r2, [r1, #4]
 8007134:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007138:	4322      	orrs	r2, r4
 800713a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800713c:	0759      	lsls	r1, r3, #29
 800713e:	d506      	bpl.n	800714e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007140:	6801      	ldr	r1, [r0, #0]
 8007142:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007144:	684a      	ldr	r2, [r1, #4]
 8007146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800714a:	4322      	orrs	r2, r4
 800714c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800714e:	071a      	lsls	r2, r3, #28
 8007150:	d506      	bpl.n	8007160 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007152:	6801      	ldr	r1, [r0, #0]
 8007154:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007156:	684a      	ldr	r2, [r1, #4]
 8007158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800715c:	4322      	orrs	r2, r4
 800715e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007160:	06dc      	lsls	r4, r3, #27
 8007162:	d506      	bpl.n	8007172 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007164:	6801      	ldr	r1, [r0, #0]
 8007166:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800716e:	4322      	orrs	r2, r4
 8007170:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007172:	0699      	lsls	r1, r3, #26
 8007174:	d506      	bpl.n	8007184 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	6801      	ldr	r1, [r0, #0]
 8007178:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800717a:	688a      	ldr	r2, [r1, #8]
 800717c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007180:	4322      	orrs	r2, r4
 8007182:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007184:	065a      	lsls	r2, r3, #25
 8007186:	d510      	bpl.n	80071aa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007188:	6801      	ldr	r1, [r0, #0]
 800718a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800718c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007192:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007196:	ea42 0204 	orr.w	r2, r2, r4
 800719a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800719c:	d105      	bne.n	80071aa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800719e:	684a      	ldr	r2, [r1, #4]
 80071a0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80071a2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80071a6:	4322      	orrs	r2, r4
 80071a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	d506      	bpl.n	80071bc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ae:	6802      	ldr	r2, [r0, #0]
 80071b0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80071b2:	6853      	ldr	r3, [r2, #4]
 80071b4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6053      	str	r3, [r2, #4]
}
 80071bc:	bd10      	pop	{r4, pc}

080071be <UART_WaitOnFlagUntilTimeout>:
{
 80071be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071c6:	4604      	mov	r4, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	4616      	mov	r6, r2
 80071cc:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	69d3      	ldr	r3, [r2, #28]
 80071d2:	ea37 0303 	bics.w	r3, r7, r3
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	42b3      	cmp	r3, r6
 80071de:	d001      	beq.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80071e0:	2000      	movs	r0, #0
 80071e2:	e01e      	b.n	8007222 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80071e8:	d0f2      	beq.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ea:	f7fb fe01 	bl	8002df0 <HAL_GetTick>
 80071ee:	eba0 0008 	sub.w	r0, r0, r8
 80071f2:	4548      	cmp	r0, r9
 80071f4:	d825      	bhi.n	8007242 <UART_WaitOnFlagUntilTimeout+0x84>
 80071f6:	f1b9 0f00 	cmp.w	r9, #0
 80071fa:	d022      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	6803      	ldr	r3, [r0, #0]
 8007200:	075a      	lsls	r2, r3, #29
 8007202:	d5e4      	bpl.n	80071ce <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007204:	69c5      	ldr	r5, [r0, #28]
 8007206:	f015 0508 	ands.w	r5, r5, #8
 800720a:	d00c      	beq.n	8007226 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800720c:	2508      	movs	r5, #8
 800720e:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 8007210:	4620      	mov	r0, r4
 8007212:	f7ff f875 	bl	8006300 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8007216:	2300      	movs	r3, #0
           return HAL_ERROR;
 8007218:	2001      	movs	r0, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800721a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 800721e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8007222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007226:	69c3      	ldr	r3, [r0, #28]
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	d5d0      	bpl.n	80071ce <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800722c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007230:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8007232:	4620      	mov	r0, r4
 8007234:	f7ff f864 	bl	8006300 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007238:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800723a:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800723e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8007242:	2003      	movs	r0, #3
 8007244:	e7ed      	b.n	8007222 <UART_WaitOnFlagUntilTimeout+0x64>

08007246 <UART_CheckIdleState>:
{
 8007246:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	2500      	movs	r5, #0
{
 800724a:	4604      	mov	r4, r0
 800724c:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007252:	f7fb fdcd 	bl	8002df0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007256:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007258:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	0711      	lsls	r1, r2, #28
 800725e:	d51d      	bpl.n	800729c <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007260:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007264:	9003      	str	r0, [sp, #12]
 8007266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800726a:	4620      	mov	r0, r4
 800726c:	9200      	str	r2, [sp, #0]
 800726e:	462a      	mov	r2, r5
 8007270:	f7ff ffa5 	bl	80071be <UART_WaitOnFlagUntilTimeout>
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	b188      	cbz	r0, 800729c <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007278:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	e852 3f00 	ldrex	r3, [r2]
 800727e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	e842 3100 	strex	r1, r3, [r2]
 8007286:	2900      	cmp	r1, #0
 8007288:	d1f6      	bne.n	8007278 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 800728a:	2320      	movs	r3, #32
 800728c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8007290:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007292:	2300      	movs	r3, #0
 8007294:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8007298:	b005      	add	sp, #20
 800729a:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	0752      	lsls	r2, r2, #29
 80072a2:	d523      	bpl.n	80072ec <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80072a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072ac:	4620      	mov	r0, r4
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f7ff ff84 	bl	80071be <UART_WaitOnFlagUntilTimeout>
 80072b6:	b1c8      	cbz	r0, 80072ec <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	e852 3f00 	ldrex	r3, [r2]
 80072be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d1f5      	bne.n	80072b8 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	f102 0308 	add.w	r3, r2, #8
 80072d0:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	f102 0008 	add.w	r0, r2, #8
 80072dc:	e840 3100 	strex	r1, r3, [r0]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d1f3      	bne.n	80072cc <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 80072e4:	2320      	movs	r3, #32
 80072e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80072ea:	e7d1      	b.n	8007290 <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 80072ec:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ee:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80072f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fa:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 80072fc:	e7c9      	b.n	8007292 <UART_CheckIdleState+0x4c>

080072fe <HAL_UART_Init>:
{
 80072fe:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007300:	4604      	mov	r4, r0
 8007302:	b350      	cbz	r0, 800735a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007304:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007308:	b91b      	cbnz	r3, 8007312 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800730a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800730e:	f7fa fa5b 	bl	80017c8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007312:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007316:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007324:	f7ff fd30 	bl	8006d88 <UART_SetConfig>
 8007328:	2801      	cmp	r0, #1
 800732a:	d016      	beq.n	800735a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800732c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800732e:	b113      	cbz	r3, 8007336 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff feef 	bl	8007114 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007336:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007338:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007348:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f042 0201 	orr.w	r2, r2, #1
}
 8007350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007354:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007356:	f7ff bf76 	b.w	8007246 <UART_CheckIdleState>
}
 800735a:	2001      	movs	r0, #1
 800735c:	bd10      	pop	{r4, pc}
	...

08007360 <UART_Start_Receive_IT>:
{
 8007360:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 8007362:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 8007364:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8007366:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8007368:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 800736c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 8007370:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007374:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8007376:	d135      	bne.n	80073e4 <UART_Start_Receive_IT+0x84>
 8007378:	6903      	ldr	r3, [r0, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007380:	bf18      	it	ne
 8007382:	23ff      	movne	r3, #255	; 0xff
 8007384:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	2300      	movs	r3, #0
 800738a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800738e:	2322      	movs	r3, #34	; 0x22
 8007390:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007394:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	f101 0308 	add.w	r3, r1, #8
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	3108      	adds	r1, #8
 80073a4:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 80073a8:	6803      	ldr	r3, [r0, #0]
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d1f2      	bne.n	8007394 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073ae:	6e45      	ldr	r5, [r0, #100]	; 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b0:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073b2:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b6:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073b8:	d134      	bne.n	8007424 <UART_Start_Receive_IT+0xc4>
 80073ba:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80073be:	4295      	cmp	r5, r2
 80073c0:	d830      	bhi.n	8007424 <UART_Start_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80073c6:	d11d      	bne.n	8007404 <UART_Start_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073c8:	4a25      	ldr	r2, [pc, #148]	; (8007460 <UART_Start_Receive_IT+0x100>)
 80073ca:	4c26      	ldr	r4, [pc, #152]	; (8007464 <UART_Start_Receive_IT+0x104>)
 80073cc:	2900      	cmp	r1, #0
 80073ce:	bf18      	it	ne
 80073d0:	4622      	movne	r2, r4
 80073d2:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073d4:	b1c1      	cbz	r1, 8007408 <UART_Start_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 80073e2:	e7f7      	b.n	80073d4 <UART_Start_Receive_IT+0x74>
  UART_MASK_COMPUTATION(huart);
 80073e4:	b929      	cbnz	r1, 80073f2 <UART_Start_Receive_IT+0x92>
 80073e6:	6903      	ldr	r3, [r0, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	237f      	movne	r3, #127	; 0x7f
 80073ee:	23ff      	moveq	r3, #255	; 0xff
 80073f0:	e7c8      	b.n	8007384 <UART_Start_Receive_IT+0x24>
 80073f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80073f6:	d1c5      	bne.n	8007384 <UART_Start_Receive_IT+0x24>
 80073f8:	6903      	ldr	r3, [r0, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	237f      	moveq	r3, #127	; 0x7f
 8007400:	233f      	movne	r3, #63	; 0x3f
 8007402:	e7bf      	b.n	8007384 <UART_Start_Receive_IT+0x24>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007404:	4a17      	ldr	r2, [pc, #92]	; (8007464 <UART_Start_Receive_IT+0x104>)
 8007406:	e7e4      	b.n	80073d2 <UART_Start_Receive_IT+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	f103 0208 	add.w	r2, r3, #8
 800740c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	f103 0008 	add.w	r0, r3, #8
 8007418:	e840 2100 	strex	r1, r2, [r0]
 800741c:	2900      	cmp	r1, #0
 800741e:	d1f3      	bne.n	8007408 <UART_Start_Receive_IT+0xa8>
}
 8007420:	2000      	movs	r0, #0
 8007422:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007428:	d10f      	bne.n	800744a <UART_Start_Receive_IT+0xea>
      huart->RxISR = UART_RxISR_8BIT;
 800742a:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <UART_Start_Receive_IT+0x108>)
 800742c:	4c0f      	ldr	r4, [pc, #60]	; (800746c <UART_Start_Receive_IT+0x10c>)
 800742e:	2900      	cmp	r1, #0
 8007430:	bf18      	it	ne
 8007432:	4622      	movne	r2, r4
 8007434:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007436:	b151      	cbz	r1, 800744e <UART_Start_Receive_IT+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800743c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	e843 2100 	strex	r1, r2, [r3]
 8007444:	2900      	cmp	r1, #0
 8007446:	d1f7      	bne.n	8007438 <UART_Start_Receive_IT+0xd8>
 8007448:	e7ea      	b.n	8007420 <UART_Start_Receive_IT+0xc0>
      huart->RxISR = UART_RxISR_8BIT;
 800744a:	4a08      	ldr	r2, [pc, #32]	; (800746c <UART_Start_Receive_IT+0x10c>)
 800744c:	e7f2      	b.n	8007434 <UART_Start_Receive_IT+0xd4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007452:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	e843 2100 	strex	r1, r2, [r3]
 800745a:	2900      	cmp	r1, #0
 800745c:	d1f7      	bne.n	800744e <UART_Start_Receive_IT+0xee>
 800745e:	e7df      	b.n	8007420 <UART_Start_Receive_IT+0xc0>
 8007460:	08006bf1 	.word	0x08006bf1
 8007464:	08006a55 	.word	0x08006a55
 8007468:	08006991 	.word	0x08006991
 800746c:	080068c5 	.word	0x080068c5

08007470 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007470:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007474:	2b20      	cmp	r3, #32
{
 8007476:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007478:	d115      	bne.n	80074a6 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 800747a:	b1b9      	cbz	r1, 80074ac <HAL_UART_Receive_IT+0x3c>
 800747c:	b1b2      	cbz	r2, 80074ac <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007480:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007484:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <HAL_UART_Receive_IT+0x40>)
 8007486:	429c      	cmp	r4, r3
 8007488:	d00a      	beq.n	80074a0 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	d507      	bpl.n	80074a0 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	e844 3500 	strex	r5, r3, [r4]
 800749c:	2d00      	cmp	r5, #0
 800749e:	d1f7      	bne.n	8007490 <HAL_UART_Receive_IT+0x20>
}
 80074a0:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80074a2:	f7ff bf5d 	b.w	8007360 <UART_Start_Receive_IT>
    return HAL_BUSY;
 80074a6:	2002      	movs	r0, #2
}
 80074a8:	bc30      	pop	{r4, r5}
 80074aa:	4770      	bx	lr
      return HAL_ERROR;
 80074ac:	2001      	movs	r0, #1
 80074ae:	e7fb      	b.n	80074a8 <HAL_UART_Receive_IT+0x38>
 80074b0:	58000c00 	.word	0x58000c00

080074b4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80074b6:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074b8:	b92b      	cbnz	r3, 80074c6 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074c0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074c6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074c8:	4d09      	ldr	r5, [pc, #36]	; (80074f0 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ca:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074cc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80074ce:	4c09      	ldr	r4, [pc, #36]	; (80074f4 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074d0:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074d4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074d6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80074d8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80074e0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80074e6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80074ee:	e7e7      	b.n	80074c0 <UARTEx_SetNbDataToProcess+0xc>
 80074f0:	08008858 	.word	0x08008858
 80074f4:	08008850 	.word	0x08008850

080074f8 <HAL_UARTEx_WakeupCallback>:
}
 80074f8:	4770      	bx	lr

080074fa <HAL_UARTEx_RxFifoFullCallback>:
 80074fa:	4770      	bx	lr

080074fc <HAL_UARTEx_TxFifoEmptyCallback>:
 80074fc:	4770      	bx	lr

080074fe <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80074fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007502:	2b01      	cmp	r3, #1
 8007504:	d014      	beq.n	8007530 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007506:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007508:	2324      	movs	r3, #36	; 0x24
 800750a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007510:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007512:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800751c:	2300      	movs	r3, #0
 800751e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007522:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8007524:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007528:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 800752c:	4618      	mov	r0, r3
 800752e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007530:	2002      	movs	r0, #2
}
 8007532:	4770      	bx	lr

08007534 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007534:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8007536:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 800753a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800753c:	2b01      	cmp	r3, #1
 800753e:	d017      	beq.n	8007570 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007540:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007542:	2324      	movs	r3, #36	; 0x24
 8007544:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007548:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007552:	68ab      	ldr	r3, [r5, #8]
 8007554:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007558:	4319      	orrs	r1, r3
 800755a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800755c:	f7ff ffaa 	bl	80074b4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007560:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007562:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007564:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007568:	2000      	movs	r0, #0
 800756a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800756e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8007570:	2002      	movs	r0, #2
 8007572:	e7fc      	b.n	800756e <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08007574 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007574:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8007576:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 800757a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800757c:	2b01      	cmp	r3, #1
 800757e:	d017      	beq.n	80075b0 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007580:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007582:	2324      	movs	r3, #36	; 0x24
 8007584:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007588:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007592:	68ab      	ldr	r3, [r5, #8]
 8007594:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007598:	4319      	orrs	r1, r3
 800759a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800759c:	f7ff ff8a 	bl	80074b4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a2:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80075a4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80075a8:	2000      	movs	r0, #0
 80075aa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80075b0:	2002      	movs	r0, #2
 80075b2:	e7fc      	b.n	80075ae <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080075b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075b8:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80075bc:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80075c0:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 80075c4:	ea43 0308 	orr.w	r3, r3, r8
 80075c8:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80075cc:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80075d0:	6809      	ldr	r1, [r1, #0]
 80075d2:	b991      	cbnz	r1, 80075fa <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075d4:	ea43 030e 	orr.w	r3, r3, lr
 80075d8:	6801      	ldr	r1, [r0, #0]
 80075da:	4313      	orrs	r3, r2
 80075dc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80075e0:	ea43 030c 	orr.w	r3, r3, ip
 80075e4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80075e8:	433b      	orrs	r3, r7
 80075ea:	4333      	orrs	r3, r6
 80075ec:	432b      	orrs	r3, r5
 80075ee:	4323      	orrs	r3, r4
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80075f4:	2000      	movs	r0, #0
 80075f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075fa:	6801      	ldr	r1, [r0, #0]
 80075fc:	ea43 030e 	orr.w	r3, r3, lr
 8007600:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007604:	430b      	orrs	r3, r1
 8007606:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007608:	ea42 030c 	orr.w	r3, r2, ip
 800760c:	6841      	ldr	r1, [r0, #4]
 800760e:	433b      	orrs	r3, r7
 8007610:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 8007614:	4333      	orrs	r3, r6
 8007616:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800761a:	432b      	orrs	r3, r5
 800761c:	4323      	orrs	r3, r4
 800761e:	4313      	orrs	r3, r2
 8007620:	6043      	str	r3, [r0, #4]
 8007622:	e7e7      	b.n	80075f4 <FMC_SDRAM_Init+0x40>

08007624 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007624:	68cb      	ldr	r3, [r1, #12]
 8007626:	f103 3cff 	add.w	ip, r3, #4294967295
 800762a:	694b      	ldr	r3, [r1, #20]
{
 800762c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800762e:	3b01      	subs	r3, #1
 8007630:	680f      	ldr	r7, [r1, #0]
 8007632:	684c      	ldr	r4, [r1, #4]
 8007634:	688e      	ldr	r6, [r1, #8]
 8007636:	051b      	lsls	r3, r3, #20
 8007638:	690d      	ldr	r5, [r1, #16]
 800763a:	3c01      	subs	r4, #1
 800763c:	6989      	ldr	r1, [r1, #24]
 800763e:	3e01      	subs	r6, #1
 8007640:	3d01      	subs	r5, #1
 8007642:	3f01      	subs	r7, #1
 8007644:	3901      	subs	r1, #1
 8007646:	0124      	lsls	r4, r4, #4
 8007648:	0236      	lsls	r6, r6, #8
 800764a:	042d      	lsls	r5, r5, #16
 800764c:	0609      	lsls	r1, r1, #24
 800764e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8007652:	b95a      	cbnz	r2, 800766c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007654:	433b      	orrs	r3, r7
 8007656:	6882      	ldr	r2, [r0, #8]
 8007658:	4323      	orrs	r3, r4
 800765a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800765e:	4333      	orrs	r3, r6
 8007660:	432b      	orrs	r3, r5
 8007662:	430b      	orrs	r3, r1
 8007664:	4313      	orrs	r3, r2
 8007666:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007668:	2000      	movs	r0, #0
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800766c:	6882      	ldr	r2, [r0, #8]
 800766e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007672:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007676:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007678:	ea44 0306 	orr.w	r3, r4, r6
 800767c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800767e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007680:	68c2      	ldr	r2, [r0, #12]
 8007682:	432b      	orrs	r3, r5
 8007684:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007688:	430b      	orrs	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	60c3      	str	r3, [r0, #12]
 800768e:	e7eb      	b.n	8007668 <FMC_SDRAM_Timing_Init+0x44>

08007690 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007690:	6902      	ldr	r2, [r0, #16]
{
 8007692:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007694:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007698:	0d92      	lsrs	r2, r2, #22
 800769a:	4323      	orrs	r3, r4
 800769c:	68cc      	ldr	r4, [r1, #12]
 800769e:	0592      	lsls	r2, r2, #22
 80076a0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80076a4:	4313      	orrs	r3, r2
 80076a6:	688a      	ldr	r2, [r1, #8]
 80076a8:	3a01      	subs	r2, #1
 80076aa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80076ae:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80076b0:	2000      	movs	r0, #0
 80076b2:	bd10      	pop	{r4, pc}

080076b4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80076b4:	6943      	ldr	r3, [r0, #20]
 80076b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80076ba:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80076be:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80076c2:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80076c4:	2000      	movs	r0, #0
 80076c6:	4770      	bx	lr

080076c8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80076c8:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80076ca:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 80076cc:	2500      	movs	r5, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80076ce:	4c14      	ldr	r4, [pc, #80]	; (8007720 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80076d0:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80076d2:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80076d4:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80076d6:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80076d8:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80076da:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80076dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80076de:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80076e0:	68c3      	ldr	r3, [r0, #12]
  DrawProp->LcdLayer = 0;
 80076e2:	4e10      	ldr	r6, [pc, #64]	; (8007724 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80076e4:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80076e6:	6903      	ldr	r3, [r0, #16]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80076e8:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80076ec:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.FillRect       = pDrv->FillRect;
 80076ee:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80076f0:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80076f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80076f4:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80076f6:	6983      	ldr	r3, [r0, #24]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80076f8:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80076fa:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80076fc:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80076fe:	4628      	mov	r0, r5
  DrawProp->LcdDevice = 0;
 8007700:	e9c6 5503 	strd	r5, r5, [r6, #12]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8007704:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8007706:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8007708:	6a23      	ldr	r3, [r4, #32]
 800770a:	f106 0118 	add.w	r1, r6, #24
 800770e:	4628      	mov	r0, r5
 8007710:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8007712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007714:	f106 011c 	add.w	r1, r6, #28
 8007718:	4628      	mov	r0, r5
}
 800771a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800771e:	4718      	bx	r3
 8007720:	20001bd4 	.word	0x20001bd4
 8007724:	20001b94 	.word	0x20001b94

08007728 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8007728:	4a02      	ldr	r2, [pc, #8]	; (8007734 <UTIL_LCD_SetTextColor+0xc>)
 800772a:	68d3      	ldr	r3, [r2, #12]
 800772c:	015b      	lsls	r3, r3, #5
 800772e:	50d0      	str	r0, [r2, r3]
}
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20001b94 	.word	0x20001b94

08007738 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <UTIL_LCD_SetBackColor+0xc>)
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007740:	6058      	str	r0, [r3, #4]
}
 8007742:	4770      	bx	lr
 8007744:	20001b94 	.word	0x20001b94

08007748 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <UTIL_LCD_SetFont+0xc>)
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007750:	6098      	str	r0, [r3, #8]
}
 8007752:	4770      	bx	lr
 8007754:	20001b94 	.word	0x20001b94

08007758 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8007758:	b513      	push	{r0, r1, r4, lr}
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800775a:	9c04      	ldr	r4, [sp, #16]
 800775c:	e9cd 3400 	strd	r3, r4, [sp]
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <UTIL_LCD_FillRGBRect+0x1c>)
 8007762:	685c      	ldr	r4, [r3, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	460a      	mov	r2, r1
 8007768:	4601      	mov	r1, r0
 800776a:	4803      	ldr	r0, [pc, #12]	; (8007778 <UTIL_LCD_FillRGBRect+0x20>)
 800776c:	6900      	ldr	r0, [r0, #16]
 800776e:	47a0      	blx	r4
}
 8007770:	b002      	add	sp, #8
 8007772:	bd10      	pop	{r4, pc}
 8007774:	20001bd4 	.word	0x20001bd4
 8007778:	20001b94 	.word	0x20001b94

0800777c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800777c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800777e:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <UTIL_LCD_DrawHLine+0x38>)
{
 8007780:	4606      	mov	r6, r0
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8007782:	480d      	ldr	r0, [pc, #52]	; (80077b8 <UTIL_LCD_DrawHLine+0x3c>)
 8007784:	6887      	ldr	r7, [r0, #8]
 8007786:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007788:	69e4      	ldr	r4, [r4, #28]
 800778a:	2c02      	cmp	r4, #2
 800778c:	d110      	bne.n	80077b0 <UTIL_LCD_DrawHLine+0x34>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800778e:	095c      	lsrs	r4, r3, #5
 8007790:	0a1d      	lsrs	r5, r3, #8
 8007792:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8007796:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 800779a:	4325      	orrs	r5, r4
 800779c:	f3c3 04c4 	ubfx	r4, r3, #3, #5
 80077a0:	432c      	orrs	r4, r5
 80077a2:	9400      	str	r4, [sp, #0]
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80077a4:	4613      	mov	r3, r2
 80077a6:	460a      	mov	r2, r1
 80077a8:	4631      	mov	r1, r6
 80077aa:	47b8      	blx	r7
  }
}
 80077ac:	b003      	add	sp, #12
 80077ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	e7f7      	b.n	80077a4 <UTIL_LCD_DrawHLine+0x28>
 80077b4:	20001b94 	.word	0x20001b94
 80077b8:	20001bd4 	.word	0x20001bd4

080077bc <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 80077bc:	4613      	mov	r3, r2
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <UTIL_LCD_SetPixel+0x34>)
{
 80077c0:	b470      	push	{r4, r5, r6}
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80077c2:	6996      	ldr	r6, [r2, #24]
{
 80077c4:	4605      	mov	r5, r0
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80077c6:	4a0b      	ldr	r2, [pc, #44]	; (80077f4 <UTIL_LCD_SetPixel+0x38>)
 80077c8:	6910      	ldr	r0, [r2, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80077ca:	69d2      	ldr	r2, [r2, #28]
 80077cc:	2a02      	cmp	r2, #2
 80077ce:	d109      	bne.n	80077e4 <UTIL_LCD_SetPixel+0x28>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80077d0:	095c      	lsrs	r4, r3, #5
 80077d2:	0a1a      	lsrs	r2, r3, #8
 80077d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80077d8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80077dc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80077e0:	4314      	orrs	r4, r2
 80077e2:	4323      	orrs	r3, r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 80077e4:	460a      	mov	r2, r1
 80077e6:	46b4      	mov	ip, r6
 80077e8:	4629      	mov	r1, r5
  }
}
 80077ea:	bc70      	pop	{r4, r5, r6}
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 80077ec:	4760      	bx	ip
 80077ee:	bf00      	nop
 80077f0:	20001bd4 	.word	0x20001bd4
 80077f4:	20001b94 	.word	0x20001b94

080077f8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80077fc:	4f45      	ldr	r7, [pc, #276]	; (8007914 <UTIL_LCD_DisplayChar+0x11c>)
{
 80077fe:	b0ad      	sub	sp, #180	; 0xb4
 8007800:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8007802:	3a20      	subs	r2, #32
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f04f 0801 	mov.w	r8, #1
{
 800780a:	9106      	str	r1, [sp, #24]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800780c:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 8007810:	6899      	ldr	r1, [r3, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8007812:	88cb      	ldrh	r3, [r1, #6]
 8007814:	888d      	ldrh	r5, [r1, #4]
 8007816:	9304      	str	r3, [sp, #16]
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8007818:	1deb      	adds	r3, r5, #7
 800781a:	680c      	ldr	r4, [r1, #0]
 800781c:	f023 0007 	bic.w	r0, r3, #7
 8007820:	9005      	str	r0, [sp, #20]

  for(i = 0; i < height; i++)
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8007822:	08d8      	lsrs	r0, r3, #3
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8007824:	10db      	asrs	r3, r3, #3
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8007826:	9003      	str	r0, [sp, #12]
 8007828:	9806      	ldr	r0, [sp, #24]
 800782a:	1c46      	adds	r6, r0, #1
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800782c:	9804      	ldr	r0, [sp, #16]
 800782e:	4342      	muls	r2, r0
 8007830:	fb03 4402 	mla	r4, r3, r2, r4
  for(i = 0; i < height; i++)
 8007834:	9b06      	ldr	r3, [sp, #24]
 8007836:	1e71      	subs	r1, r6, #1
 8007838:	9a04      	ldr	r2, [sp, #16]
 800783a:	1af3      	subs	r3, r6, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	429a      	cmp	r2, r3
 8007840:	d802      	bhi.n	8007848 <UTIL_LCD_DisplayChar+0x50>
}
 8007842:	b02d      	add	sp, #180	; 0xb4
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    switch(((width + 7)/8))
 8007848:	9b03      	ldr	r3, [sp, #12]
    {

    case 1:
      line =  pchar[0];
 800784a:	7822      	ldrb	r2, [r4, #0]
    switch(((width + 7)/8))
 800784c:	2b01      	cmp	r3, #1
 800784e:	d004      	beq.n	800785a <UTIL_LCD_DisplayChar+0x62>
 8007850:	2b02      	cmp	r3, #2
 8007852:	d116      	bne.n	8007882 <UTIL_LCD_DisplayChar+0x8a>
      break;

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007854:	8822      	ldrh	r2, [r4, #0]
 8007856:	ba52      	rev16	r2, r2
 8007858:	b292      	uxth	r2, r2
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
      break;
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	eb07 1040 	add.w	r0, r7, r0, lsl #5
 8007860:	69c3      	ldr	r3, [r0, #28]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d014      	beq.n	8007890 <UTIL_LCD_DisplayChar+0x98>
    }
    else
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 8007866:	9b05      	ldr	r3, [sp, #20]
 8007868:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
      for (j = 0; j < width; j++)
 800786c:	f04f 0c00 	mov.w	ip, #0
        if(line & (1 << (width- j + offset- 1)))
 8007870:	3b01      	subs	r3, #1
 8007872:	9307      	str	r3, [sp, #28]
      for (j = 0; j < width; j++)
 8007874:	4565      	cmp	r5, ip
 8007876:	d83c      	bhi.n	80078f2 <UTIL_LCD_DisplayChar+0xfa>
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8007878:	462b      	mov	r3, r5
 800787a:	aa14      	add	r2, sp, #80	; 0x50
 800787c:	f8cd 8000 	str.w	r8, [sp]
 8007880:	e013      	b.n	80078aa <UTIL_LCD_DisplayChar+0xb2>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8007882:	7863      	ldrb	r3, [r4, #1]
 8007884:	0412      	lsls	r2, r2, #16
 8007886:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800788a:	78a3      	ldrb	r3, [r4, #2]
 800788c:	431a      	orrs	r2, r3
      break;
 800788e:	e7e4      	b.n	800785a <UTIL_LCD_DisplayChar+0x62>
        if(line & (1 << (width- j + offset- 1)))
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	f10d 0920 	add.w	r9, sp, #32
      for (j = 0; j < width; j++)
 8007896:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
 800789a:	3b01      	subs	r3, #1
 800789c:	9307      	str	r3, [sp, #28]
      for (j = 0; j < width; j++)
 800789e:	4575      	cmp	r5, lr
 80078a0:	d80a      	bhi.n	80078b8 <UTIL_LCD_DisplayChar+0xc0>
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80078a2:	462b      	mov	r3, r5
 80078a4:	aa08      	add	r2, sp, #32
 80078a6:	f8cd 8000 	str.w	r8, [sp]
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80078aa:	4658      	mov	r0, fp
 80078ac:	3601      	adds	r6, #1
 80078ae:	f7ff ff53 	bl	8007758 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	441c      	add	r4, r3
 80078b6:	e7bd      	b.n	8007834 <UTIL_LCD_DisplayChar+0x3c>
        if(line & (1 << (width- j + offset- 1)))
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	eba3 030e 	sub.w	r3, r3, lr
      for (j = 0; j < width; j++)
 80078be:	f10e 0e01 	add.w	lr, lr, #1
        if(line & (1 << (width- j + offset- 1)))
 80078c2:	fa08 f303 	lsl.w	r3, r8, r3
 80078c6:	4213      	tst	r3, r2
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80078c8:	bf14      	ite	ne
 80078ca:	f8d0 c000 	ldrne.w	ip, [r0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80078ce:	f8d0 c004 	ldreq.w	ip, [r0, #4]
 80078d2:	f3cc 03c4 	ubfx	r3, ip, #3, #5
 80078d6:	ea4f 4adc 	mov.w	sl, ip, lsr #19
 80078da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80078de:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
 80078e2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80078e6:	ea43 030c 	orr.w	r3, r3, ip
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f829 3b02 	strh.w	r3, [r9], #2
      for (j = 0; j < width; j++)
 80078f0:	e7d5      	b.n	800789e <UTIL_LCD_DisplayChar+0xa6>
        if(line & (1 << (width- j + offset- 1)))
 80078f2:	9b07      	ldr	r3, [sp, #28]
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80078f4:	f8d0 e000 	ldr.w	lr, [r0]
        if(line & (1 << (width- j + offset- 1)))
 80078f8:	eba3 090c 	sub.w	r9, r3, ip
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80078fc:	6843      	ldr	r3, [r0, #4]
      for (j = 0; j < width; j++)
 80078fe:	f10c 0c01 	add.w	ip, ip, #1
        if(line & (1 << (width- j + offset- 1)))
 8007902:	fa08 f909 	lsl.w	r9, r8, r9
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8007906:	ea19 0f02 	tst.w	r9, r2
 800790a:	bf08      	it	eq
 800790c:	469e      	moveq	lr, r3
 800790e:	f84a eb04 	str.w	lr, [sl], #4
      for (j = 0; j < width; j++)
 8007912:	e7af      	b.n	8007874 <UTIL_LCD_DisplayChar+0x7c>
 8007914:	20001b94 	.word	0x20001b94

08007918 <UTIL_LCD_DisplayStringAt>:
{
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	4605      	mov	r5, r0
 800791e:	4688      	mov	r8, r1
 8007920:	4617      	mov	r7, r2
  while (*ptr++) size ++ ;
 8007922:	4614      	mov	r4, r2
 8007924:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007928:	2900      	cmp	r1, #0
 800792a:	d1fa      	bne.n	8007922 <UTIL_LCD_DisplayStringAt+0xa>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800792c:	4e1c      	ldr	r6, [pc, #112]	; (80079a0 <UTIL_LCD_DisplayStringAt+0x88>)
  switch (Mode)
 800792e:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8007930:	68f2      	ldr	r2, [r6, #12]
 8007932:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8007936:	6892      	ldr	r2, [r2, #8]
 8007938:	8891      	ldrh	r1, [r2, #4]
 800793a:	6972      	ldr	r2, [r6, #20]
 800793c:	fbb2 f2f1 	udiv	r2, r2, r1
  switch (Mode)
 8007940:	d017      	beq.n	8007972 <UTIL_LCD_DisplayStringAt+0x5a>
 8007942:	2b02      	cmp	r3, #2
 8007944:	d01b      	beq.n	800797e <UTIL_LCD_DisplayStringAt+0x66>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8007946:	1e6a      	subs	r2, r5, #1
    refcolumn = 1;
 8007948:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800794c:	2400      	movs	r4, #0
 800794e:	429a      	cmp	r2, r3
 8007950:	bf88      	it	hi
 8007952:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8007954:	68f3      	ldr	r3, [r6, #12]
 8007956:	5d3a      	ldrb	r2, [r7, r4]
 8007958:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	8899      	ldrh	r1, [r3, #4]
 8007960:	6973      	ldr	r3, [r6, #20]
 8007962:	fb04 3311 	mls	r3, r4, r1, r3
 8007966:	b29b      	uxth	r3, r3
 8007968:	4299      	cmp	r1, r3
 800796a:	d800      	bhi.n	800796e <UTIL_LCD_DisplayStringAt+0x56>
 800796c:	b962      	cbnz	r2, 8007988 <UTIL_LCD_DisplayStringAt+0x70>
}
 800796e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8007972:	1b3c      	subs	r4, r7, r4
 8007974:	4414      	add	r4, r2
 8007976:	434c      	muls	r4, r1
 8007978:	eb05 0554 	add.w	r5, r5, r4, lsr #1
      break;
 800797c:	e7e3      	b.n	8007946 <UTIL_LCD_DisplayStringAt+0x2e>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800797e:	1b3c      	subs	r4, r7, r4
 8007980:	4414      	add	r4, r2
 8007982:	434c      	muls	r4, r1
 8007984:	1b65      	subs	r5, r4, r5
      break;
 8007986:	e7de      	b.n	8007946 <UTIL_LCD_DisplayStringAt+0x2e>
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8007988:	4628      	mov	r0, r5
 800798a:	4641      	mov	r1, r8
 800798c:	f7ff ff34 	bl	80077f8 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8007990:	68f3      	ldr	r3, [r6, #12]
    i++;
 8007992:	3401      	adds	r4, #1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8007994:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	889b      	ldrh	r3, [r3, #4]
 800799c:	441d      	add	r5, r3
    i++;
 800799e:	e7d9      	b.n	8007954 <UTIL_LCD_DisplayStringAt+0x3c>
 80079a0:	20001b94 	.word	0x20001b94

080079a4 <UTIL_LCD_DrawCircle>:
{
 80079a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 80079a8:	0057      	lsls	r7, r2, #1
{
 80079aa:	4680      	mov	r8, r0
 80079ac:	468a      	mov	sl, r1
 80079ae:	4614      	mov	r4, r2
 80079b0:	4699      	mov	r9, r3
  decision = 3 - (Radius << 1);
 80079b2:	f1c7 0703 	rsb	r7, r7, #3
  current_x = 0;
 80079b6:	2600      	movs	r6, #0
    if((Ypos - current_y) < DrawProp->LcdYsize)
 80079b8:	4d3f      	ldr	r5, [pc, #252]	; (8007ab8 <UTIL_LCD_DrawCircle+0x114>)
 80079ba:	ebaa 0b04 	sub.w	fp, sl, r4
 80079be:	69ab      	ldr	r3, [r5, #24]
 80079c0:	459b      	cmp	fp, r3
 80079c2:	d215      	bcs.n	80079f0 <UTIL_LCD_DrawCircle+0x4c>
      if((Xpos + current_x) < DrawProp->LcdXsize)
 80079c4:	eb08 0006 	add.w	r0, r8, r6
 80079c8:	696b      	ldr	r3, [r5, #20]
 80079ca:	4283      	cmp	r3, r0
 80079cc:	d905      	bls.n	80079da <UTIL_LCD_DrawCircle+0x36>
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 80079ce:	464a      	mov	r2, r9
 80079d0:	fa1f f18b 	uxth.w	r1, fp
 80079d4:	b280      	uxth	r0, r0
 80079d6:	f7ff fef1 	bl	80077bc <UTIL_LCD_SetPixel>
      if((Xpos - current_x) < DrawProp->LcdXsize)
 80079da:	eba8 0006 	sub.w	r0, r8, r6
 80079de:	696b      	ldr	r3, [r5, #20]
 80079e0:	4283      	cmp	r3, r0
 80079e2:	d905      	bls.n	80079f0 <UTIL_LCD_DrawCircle+0x4c>
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 80079e4:	464a      	mov	r2, r9
 80079e6:	fa1f f18b 	uxth.w	r1, fp
 80079ea:	b280      	uxth	r0, r0
 80079ec:	f7ff fee6 	bl	80077bc <UTIL_LCD_SetPixel>
    if((Ypos - current_x) < DrawProp->LcdYsize)
 80079f0:	ebaa 0b06 	sub.w	fp, sl, r6
 80079f4:	69ab      	ldr	r3, [r5, #24]
 80079f6:	455b      	cmp	r3, fp
 80079f8:	d915      	bls.n	8007a26 <UTIL_LCD_DrawCircle+0x82>
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80079fa:	eb08 0004 	add.w	r0, r8, r4
 80079fe:	696b      	ldr	r3, [r5, #20]
 8007a00:	4298      	cmp	r0, r3
 8007a02:	d205      	bcs.n	8007a10 <UTIL_LCD_DrawCircle+0x6c>
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8007a04:	464a      	mov	r2, r9
 8007a06:	fa1f f18b 	uxth.w	r1, fp
 8007a0a:	b280      	uxth	r0, r0
 8007a0c:	f7ff fed6 	bl	80077bc <UTIL_LCD_SetPixel>
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8007a10:	eba8 0004 	sub.w	r0, r8, r4
 8007a14:	696b      	ldr	r3, [r5, #20]
 8007a16:	4298      	cmp	r0, r3
 8007a18:	d205      	bcs.n	8007a26 <UTIL_LCD_DrawCircle+0x82>
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8007a1a:	464a      	mov	r2, r9
 8007a1c:	fa1f f18b 	uxth.w	r1, fp
 8007a20:	b280      	uxth	r0, r0
 8007a22:	f7ff fecb 	bl	80077bc <UTIL_LCD_SetPixel>
    if((Ypos + current_y) < DrawProp->LcdYsize)
 8007a26:	eb0a 0b04 	add.w	fp, sl, r4
 8007a2a:	69ab      	ldr	r3, [r5, #24]
 8007a2c:	459b      	cmp	fp, r3
 8007a2e:	d215      	bcs.n	8007a5c <UTIL_LCD_DrawCircle+0xb8>
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8007a30:	eb08 0006 	add.w	r0, r8, r6
 8007a34:	696b      	ldr	r3, [r5, #20]
 8007a36:	4283      	cmp	r3, r0
 8007a38:	d905      	bls.n	8007a46 <UTIL_LCD_DrawCircle+0xa2>
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	fa1f f18b 	uxth.w	r1, fp
 8007a40:	b280      	uxth	r0, r0
 8007a42:	f7ff febb 	bl	80077bc <UTIL_LCD_SetPixel>
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8007a46:	eba8 0006 	sub.w	r0, r8, r6
 8007a4a:	696b      	ldr	r3, [r5, #20]
 8007a4c:	4283      	cmp	r3, r0
 8007a4e:	d905      	bls.n	8007a5c <UTIL_LCD_DrawCircle+0xb8>
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8007a50:	464a      	mov	r2, r9
 8007a52:	fa1f f18b 	uxth.w	r1, fp
 8007a56:	b280      	uxth	r0, r0
 8007a58:	f7ff feb0 	bl	80077bc <UTIL_LCD_SetPixel>
    if((Ypos + current_x) < DrawProp->LcdYsize)
 8007a5c:	eb0a 0b06 	add.w	fp, sl, r6
 8007a60:	69ab      	ldr	r3, [r5, #24]
 8007a62:	455b      	cmp	r3, fp
 8007a64:	d915      	bls.n	8007a92 <UTIL_LCD_DrawCircle+0xee>
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8007a66:	eb08 0004 	add.w	r0, r8, r4
 8007a6a:	696b      	ldr	r3, [r5, #20]
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	d205      	bcs.n	8007a7c <UTIL_LCD_DrawCircle+0xd8>
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8007a70:	464a      	mov	r2, r9
 8007a72:	fa1f f18b 	uxth.w	r1, fp
 8007a76:	b280      	uxth	r0, r0
 8007a78:	f7ff fea0 	bl	80077bc <UTIL_LCD_SetPixel>
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8007a7c:	eba8 0004 	sub.w	r0, r8, r4
 8007a80:	696b      	ldr	r3, [r5, #20]
 8007a82:	4298      	cmp	r0, r3
 8007a84:	d205      	bcs.n	8007a92 <UTIL_LCD_DrawCircle+0xee>
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8007a86:	464a      	mov	r2, r9
 8007a88:	fa1f f18b 	uxth.w	r1, fp
 8007a8c:	b280      	uxth	r0, r0
 8007a8e:	f7ff fe95 	bl	80077bc <UTIL_LCD_SetPixel>
    if (decision < 0)
 8007a92:	2f00      	cmp	r7, #0
      decision += (current_x << 2) + 6;
 8007a94:	bfb1      	iteee	lt
 8007a96:	3706      	addlt	r7, #6
      decision += ((current_x - current_y) << 2) + 10;
 8007a98:	1b33      	subge	r3, r6, r4
 8007a9a:	370a      	addge	r7, #10
      current_y--;
 8007a9c:	f104 34ff 	addge.w	r4, r4, #4294967295
      decision += (current_x << 2) + 6;
 8007aa0:	bfb8      	it	lt
 8007aa2:	eb07 0786 	addlt.w	r7, r7, r6, lsl #2
    current_x++;
 8007aa6:	f106 0601 	add.w	r6, r6, #1
      decision += ((current_x - current_y) << 2) + 10;
 8007aaa:	bfa8      	it	ge
 8007aac:	eb07 0783 	addge.w	r7, r7, r3, lsl #2
  while (current_x <= current_y)
 8007ab0:	42b4      	cmp	r4, r6
 8007ab2:	d282      	bcs.n	80079ba <UTIL_LCD_DrawCircle+0x16>
}
 8007ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	20001b94 	.word	0x20001b94

08007abc <UTIL_LCD_FillRect>:
{
 8007abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8007abe:	4c0f      	ldr	r4, [pc, #60]	; (8007afc <UTIL_LCD_FillRect+0x40>)
{
 8007ac0:	4606      	mov	r6, r0
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8007ac2:	480f      	ldr	r0, [pc, #60]	; (8007b00 <UTIL_LCD_FillRect+0x44>)
{
 8007ac4:	9d08      	ldr	r5, [sp, #32]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8007ac6:	6907      	ldr	r7, [r0, #16]
 8007ac8:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007aca:	69e4      	ldr	r4, [r4, #28]
 8007acc:	2c02      	cmp	r4, #2
 8007ace:	d113      	bne.n	8007af8 <UTIL_LCD_FillRect+0x3c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8007ad0:	096c      	lsrs	r4, r5, #5
 8007ad2:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8007ad6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8007ada:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8007ade:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8007ae2:	ea44 040c 	orr.w	r4, r4, ip
 8007ae6:	432c      	orrs	r4, r5
 8007ae8:	9401      	str	r4, [sp, #4]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	460a      	mov	r2, r1
 8007af0:	4631      	mov	r1, r6
 8007af2:	47b8      	blx	r7
}
 8007af4:	b003      	add	sp, #12
 8007af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8007af8:	9501      	str	r5, [sp, #4]
 8007afa:	e7f6      	b.n	8007aea <UTIL_LCD_FillRect+0x2e>
 8007afc:	20001b94 	.word	0x20001b94
 8007b00:	20001bd4 	.word	0x20001bd4

08007b04 <UTIL_LCD_Clear>:
{
 8007b04:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8007b06:	2100      	movs	r1, #0
 8007b08:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <UTIL_LCD_Clear+0x18>)
 8007b0a:	9000      	str	r0, [sp, #0]
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8007b12:	f7ff ffd3 	bl	8007abc <UTIL_LCD_FillRect>
}
 8007b16:	b003      	add	sp, #12
 8007b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b1c:	20001b94 	.word	0x20001b94

08007b20 <UTIL_LCD_FillCircle>:
{
 8007b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8007b24:	0056      	lsls	r6, r2, #1
{
 8007b26:	4607      	mov	r7, r0
 8007b28:	4688      	mov	r8, r1
 8007b2a:	4691      	mov	r9, r2
 8007b2c:	469b      	mov	fp, r3
  decision = 3 - (Radius << 1);
 8007b2e:	f1c6 0603 	rsb	r6, r6, #3
  current_y = Radius;
 8007b32:	4615      	mov	r5, r2
  current_x = 0;
 8007b34:	2400      	movs	r4, #0
    if(current_y > 0)
 8007b36:	b18d      	cbz	r5, 8007b5c <UTIL_LCD_FillCircle+0x3c>
      if(current_y >= Xpos)
 8007b38:	42af      	cmp	r7, r5
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8007b3a:	eb08 0104 	add.w	r1, r8, r4
 8007b3e:	eba8 0a04 	sub.w	sl, r8, r4
      if(current_y >= Xpos)
 8007b42:	d838      	bhi.n	8007bb6 <UTIL_LCD_FillCircle+0x96>
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8007b44:	197a      	adds	r2, r7, r5
 8007b46:	465b      	mov	r3, fp
 8007b48:	2000      	movs	r0, #0
 8007b4a:	9200      	str	r2, [sp, #0]
 8007b4c:	f7ff fe16 	bl	800777c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8007b50:	465b      	mov	r3, fp
 8007b52:	9a00      	ldr	r2, [sp, #0]
 8007b54:	4651      	mov	r1, sl
 8007b56:	2000      	movs	r0, #0
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8007b58:	f7ff fe10 	bl	800777c <UTIL_LCD_DrawHLine>
    if(current_x > 0)
 8007b5c:	b18c      	cbz	r4, 8007b82 <UTIL_LCD_FillCircle+0x62>
      if(current_x >= Xpos)
 8007b5e:	42a7      	cmp	r7, r4
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8007b60:	eba8 0105 	sub.w	r1, r8, r5
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8007b64:	eb08 0a05 	add.w	sl, r8, r5
      if(current_x >= Xpos)
 8007b68:	d831      	bhi.n	8007bce <UTIL_LCD_FillCircle+0xae>
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8007b6a:	193a      	adds	r2, r7, r4
 8007b6c:	465b      	mov	r3, fp
 8007b6e:	2000      	movs	r0, #0
 8007b70:	9200      	str	r2, [sp, #0]
 8007b72:	f7ff fe03 	bl	800777c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8007b76:	465b      	mov	r3, fp
 8007b78:	9a00      	ldr	r2, [sp, #0]
 8007b7a:	4651      	mov	r1, sl
 8007b7c:	2000      	movs	r0, #0
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8007b7e:	f7ff fdfd 	bl	800777c <UTIL_LCD_DrawHLine>
    if (decision < 0)
 8007b82:	2e00      	cmp	r6, #0
      decision += (current_x << 2) + 6;
 8007b84:	bfb1      	iteee	lt
 8007b86:	3606      	addlt	r6, #6
      decision += ((current_x - current_y) << 2) + 10;
 8007b88:	1b63      	subge	r3, r4, r5
 8007b8a:	360a      	addge	r6, #10
      current_y--;
 8007b8c:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 8007b90:	bfb8      	it	lt
 8007b92:	eb06 0684 	addlt.w	r6, r6, r4, lsl #2
    current_x++;
 8007b96:	f104 0401 	add.w	r4, r4, #1
      decision += ((current_x - current_y) << 2) + 10;
 8007b9a:	bfa8      	it	ge
 8007b9c:	eb06 0683 	addge.w	r6, r6, r3, lsl #2
  while (current_x <= current_y)
 8007ba0:	42a5      	cmp	r5, r4
 8007ba2:	d2c8      	bcs.n	8007b36 <UTIL_LCD_FillCircle+0x16>
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	464a      	mov	r2, r9
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4638      	mov	r0, r7
}
 8007bac:	b003      	add	sp, #12
 8007bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8007bb2:	f7ff bef7 	b.w	80079a4 <UTIL_LCD_DrawCircle>
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8007bb6:	006a      	lsls	r2, r5, #1
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8007bb8:	1b78      	subs	r0, r7, r5
 8007bba:	465b      	mov	r3, fp
 8007bbc:	e9cd 0200 	strd	r0, r2, [sp]
 8007bc0:	f7ff fddc 	bl	800777c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	9a01      	ldr	r2, [sp, #4]
 8007bc8:	4651      	mov	r1, sl
 8007bca:	9800      	ldr	r0, [sp, #0]
 8007bcc:	e7c4      	b.n	8007b58 <UTIL_LCD_FillCircle+0x38>
 8007bce:	0062      	lsls	r2, r4, #1
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8007bd0:	1b38      	subs	r0, r7, r4
 8007bd2:	465b      	mov	r3, fp
 8007bd4:	e9cd 0200 	strd	r0, r2, [sp]
 8007bd8:	f7ff fdd0 	bl	800777c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8007bdc:	465b      	mov	r3, fp
 8007bde:	9a01      	ldr	r2, [sp, #4]
 8007be0:	4651      	mov	r1, sl
 8007be2:	9800      	ldr	r0, [sp, #0]
 8007be4:	e7cb      	b.n	8007b7e <UTIL_LCD_FillCircle+0x5e>
	...

08007be8 <sniprintf>:
 8007be8:	b40c      	push	{r2, r3}
 8007bea:	b530      	push	{r4, r5, lr}
 8007bec:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <sniprintf+0x64>)
 8007bee:	1e0c      	subs	r4, r1, #0
 8007bf0:	681d      	ldr	r5, [r3, #0]
 8007bf2:	b09d      	sub	sp, #116	; 0x74
 8007bf4:	da08      	bge.n	8007c08 <sniprintf+0x20>
 8007bf6:	238b      	movs	r3, #139	; 0x8b
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfe:	b01d      	add	sp, #116	; 0x74
 8007c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c04:	b002      	add	sp, #8
 8007c06:	4770      	bx	lr
 8007c08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c10:	bf14      	ite	ne
 8007c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c16:	4623      	moveq	r3, r4
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c20:	9002      	str	r0, [sp, #8]
 8007c22:	9006      	str	r0, [sp, #24]
 8007c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c2a:	ab21      	add	r3, sp, #132	; 0x84
 8007c2c:	a902      	add	r1, sp, #8
 8007c2e:	4628      	mov	r0, r5
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	f000 f9eb 	bl	800800c <_svfiprintf_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	bfbc      	itt	lt
 8007c3a:	238b      	movlt	r3, #139	; 0x8b
 8007c3c:	602b      	strlt	r3, [r5, #0]
 8007c3e:	2c00      	cmp	r4, #0
 8007c40:	d0dd      	beq.n	8007bfe <sniprintf+0x16>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	e7d9      	b.n	8007bfe <sniprintf+0x16>
 8007c4a:	bf00      	nop
 8007c4c:	200000c4 	.word	0x200000c4

08007c50 <siprintf>:
 8007c50:	b40e      	push	{r1, r2, r3}
 8007c52:	b500      	push	{lr}
 8007c54:	b09c      	sub	sp, #112	; 0x70
 8007c56:	ab1d      	add	r3, sp, #116	; 0x74
 8007c58:	9002      	str	r0, [sp, #8]
 8007c5a:	9006      	str	r0, [sp, #24]
 8007c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c60:	4809      	ldr	r0, [pc, #36]	; (8007c88 <siprintf+0x38>)
 8007c62:	9107      	str	r1, [sp, #28]
 8007c64:	9104      	str	r1, [sp, #16]
 8007c66:	4909      	ldr	r1, [pc, #36]	; (8007c8c <siprintf+0x3c>)
 8007c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	a902      	add	r1, sp, #8
 8007c74:	f000 f9ca 	bl	800800c <_svfiprintf_r>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	b01c      	add	sp, #112	; 0x70
 8007c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c84:	b003      	add	sp, #12
 8007c86:	4770      	bx	lr
 8007c88:	200000c4 	.word	0x200000c4
 8007c8c:	ffff0208 	.word	0xffff0208

08007c90 <memset>:
 8007c90:	4402      	add	r2, r0
 8007c92:	4603      	mov	r3, r0
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d100      	bne.n	8007c9a <memset+0xa>
 8007c98:	4770      	bx	lr
 8007c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9e:	e7f9      	b.n	8007c94 <memset+0x4>

08007ca0 <strncpy>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	3901      	subs	r1, #1
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	b132      	cbz	r2, 8007cb6 <strncpy+0x16>
 8007ca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cac:	f803 4b01 	strb.w	r4, [r3], #1
 8007cb0:	3a01      	subs	r2, #1
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d1f7      	bne.n	8007ca6 <strncpy+0x6>
 8007cb6:	441a      	add	r2, r3
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d100      	bne.n	8007cc0 <strncpy+0x20>
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc4:	e7f9      	b.n	8007cba <strncpy+0x1a>

08007cc6 <strstr>:
 8007cc6:	780a      	ldrb	r2, [r1, #0]
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	b96a      	cbnz	r2, 8007ce8 <strstr+0x22>
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d109      	bne.n	8007ce6 <strstr+0x20>
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f6      	beq.n	8007ccc <strstr+0x6>
 8007cde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ce2:	429e      	cmp	r6, r3
 8007ce4:	d0f7      	beq.n	8007cd6 <strstr+0x10>
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	7803      	ldrb	r3, [r0, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1ef      	bne.n	8007cce <strstr+0x8>
 8007cee:	4618      	mov	r0, r3
 8007cf0:	e7ec      	b.n	8007ccc <strstr+0x6>
	...

08007cf4 <__errno>:
 8007cf4:	4b01      	ldr	r3, [pc, #4]	; (8007cfc <__errno+0x8>)
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200000c4 	.word	0x200000c4

08007d00 <__libc_init_array>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4d0d      	ldr	r5, [pc, #52]	; (8007d38 <__libc_init_array+0x38>)
 8007d04:	4c0d      	ldr	r4, [pc, #52]	; (8007d3c <__libc_init_array+0x3c>)
 8007d06:	1b64      	subs	r4, r4, r5
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	42a6      	cmp	r6, r4
 8007d0e:	d109      	bne.n	8007d24 <__libc_init_array+0x24>
 8007d10:	4d0b      	ldr	r5, [pc, #44]	; (8007d40 <__libc_init_array+0x40>)
 8007d12:	4c0c      	ldr	r4, [pc, #48]	; (8007d44 <__libc_init_array+0x44>)
 8007d14:	f000 fc6a 	bl	80085ec <_init>
 8007d18:	1b64      	subs	r4, r4, r5
 8007d1a:	10a4      	asrs	r4, r4, #2
 8007d1c:	2600      	movs	r6, #0
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	d105      	bne.n	8007d2e <__libc_init_array+0x2e>
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d28:	4798      	blx	r3
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7ee      	b.n	8007d0c <__libc_init_array+0xc>
 8007d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d32:	4798      	blx	r3
 8007d34:	3601      	adds	r6, #1
 8007d36:	e7f2      	b.n	8007d1e <__libc_init_array+0x1e>
 8007d38:	0800a354 	.word	0x0800a354
 8007d3c:	0800a354 	.word	0x0800a354
 8007d40:	0800a354 	.word	0x0800a354
 8007d44:	0800a358 	.word	0x0800a358

08007d48 <__retarget_lock_acquire_recursive>:
 8007d48:	4770      	bx	lr

08007d4a <__retarget_lock_release_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <memcpy>:
 8007d4c:	440a      	add	r2, r1
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d54:	d100      	bne.n	8007d58 <memcpy+0xc>
 8007d56:	4770      	bx	lr
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d62:	4291      	cmp	r1, r2
 8007d64:	d1f9      	bne.n	8007d5a <memcpy+0xe>
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <_free_r>:
 8007d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	d044      	beq.n	8007df8 <_free_r+0x90>
 8007d6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d72:	9001      	str	r0, [sp, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f1a1 0404 	sub.w	r4, r1, #4
 8007d7a:	bfb8      	it	lt
 8007d7c:	18e4      	addlt	r4, r4, r3
 8007d7e:	f000 f8df 	bl	8007f40 <__malloc_lock>
 8007d82:	4a1e      	ldr	r2, [pc, #120]	; (8007dfc <_free_r+0x94>)
 8007d84:	9801      	ldr	r0, [sp, #4]
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	b933      	cbnz	r3, 8007d98 <_free_r+0x30>
 8007d8a:	6063      	str	r3, [r4, #4]
 8007d8c:	6014      	str	r4, [r2, #0]
 8007d8e:	b003      	add	sp, #12
 8007d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d94:	f000 b8da 	b.w	8007f4c <__malloc_unlock>
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d908      	bls.n	8007dae <_free_r+0x46>
 8007d9c:	6825      	ldr	r5, [r4, #0]
 8007d9e:	1961      	adds	r1, r4, r5
 8007da0:	428b      	cmp	r3, r1
 8007da2:	bf01      	itttt	eq
 8007da4:	6819      	ldreq	r1, [r3, #0]
 8007da6:	685b      	ldreq	r3, [r3, #4]
 8007da8:	1949      	addeq	r1, r1, r5
 8007daa:	6021      	streq	r1, [r4, #0]
 8007dac:	e7ed      	b.n	8007d8a <_free_r+0x22>
 8007dae:	461a      	mov	r2, r3
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	b10b      	cbz	r3, 8007db8 <_free_r+0x50>
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d9fa      	bls.n	8007dae <_free_r+0x46>
 8007db8:	6811      	ldr	r1, [r2, #0]
 8007dba:	1855      	adds	r5, r2, r1
 8007dbc:	42a5      	cmp	r5, r4
 8007dbe:	d10b      	bne.n	8007dd8 <_free_r+0x70>
 8007dc0:	6824      	ldr	r4, [r4, #0]
 8007dc2:	4421      	add	r1, r4
 8007dc4:	1854      	adds	r4, r2, r1
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	d1e0      	bne.n	8007d8e <_free_r+0x26>
 8007dcc:	681c      	ldr	r4, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	6053      	str	r3, [r2, #4]
 8007dd2:	440c      	add	r4, r1
 8007dd4:	6014      	str	r4, [r2, #0]
 8007dd6:	e7da      	b.n	8007d8e <_free_r+0x26>
 8007dd8:	d902      	bls.n	8007de0 <_free_r+0x78>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	6003      	str	r3, [r0, #0]
 8007dde:	e7d6      	b.n	8007d8e <_free_r+0x26>
 8007de0:	6825      	ldr	r5, [r4, #0]
 8007de2:	1961      	adds	r1, r4, r5
 8007de4:	428b      	cmp	r3, r1
 8007de6:	bf04      	itt	eq
 8007de8:	6819      	ldreq	r1, [r3, #0]
 8007dea:	685b      	ldreq	r3, [r3, #4]
 8007dec:	6063      	str	r3, [r4, #4]
 8007dee:	bf04      	itt	eq
 8007df0:	1949      	addeq	r1, r1, r5
 8007df2:	6021      	streq	r1, [r4, #0]
 8007df4:	6054      	str	r4, [r2, #4]
 8007df6:	e7ca      	b.n	8007d8e <_free_r+0x26>
 8007df8:	b003      	add	sp, #12
 8007dfa:	bd30      	pop	{r4, r5, pc}
 8007dfc:	20001d40 	.word	0x20001d40

08007e00 <sbrk_aligned>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4e0e      	ldr	r6, [pc, #56]	; (8007e3c <sbrk_aligned+0x3c>)
 8007e04:	460c      	mov	r4, r1
 8007e06:	6831      	ldr	r1, [r6, #0]
 8007e08:	4605      	mov	r5, r0
 8007e0a:	b911      	cbnz	r1, 8007e12 <sbrk_aligned+0x12>
 8007e0c:	f000 fba6 	bl	800855c <_sbrk_r>
 8007e10:	6030      	str	r0, [r6, #0]
 8007e12:	4621      	mov	r1, r4
 8007e14:	4628      	mov	r0, r5
 8007e16:	f000 fba1 	bl	800855c <_sbrk_r>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d00a      	beq.n	8007e34 <sbrk_aligned+0x34>
 8007e1e:	1cc4      	adds	r4, r0, #3
 8007e20:	f024 0403 	bic.w	r4, r4, #3
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d007      	beq.n	8007e38 <sbrk_aligned+0x38>
 8007e28:	1a21      	subs	r1, r4, r0
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 fb96 	bl	800855c <_sbrk_r>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d101      	bne.n	8007e38 <sbrk_aligned+0x38>
 8007e34:	f04f 34ff 	mov.w	r4, #4294967295
 8007e38:	4620      	mov	r0, r4
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	20001d44 	.word	0x20001d44

08007e40 <_malloc_r>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	1ccd      	adds	r5, r1, #3
 8007e46:	f025 0503 	bic.w	r5, r5, #3
 8007e4a:	3508      	adds	r5, #8
 8007e4c:	2d0c      	cmp	r5, #12
 8007e4e:	bf38      	it	cc
 8007e50:	250c      	movcc	r5, #12
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	4607      	mov	r7, r0
 8007e56:	db01      	blt.n	8007e5c <_malloc_r+0x1c>
 8007e58:	42a9      	cmp	r1, r5
 8007e5a:	d905      	bls.n	8007e68 <_malloc_r+0x28>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	2600      	movs	r6, #0
 8007e62:	4630      	mov	r0, r6
 8007e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f3c <_malloc_r+0xfc>
 8007e6c:	f000 f868 	bl	8007f40 <__malloc_lock>
 8007e70:	f8d8 3000 	ldr.w	r3, [r8]
 8007e74:	461c      	mov	r4, r3
 8007e76:	bb5c      	cbnz	r4, 8007ed0 <_malloc_r+0x90>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ffc0 	bl	8007e00 <sbrk_aligned>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	4604      	mov	r4, r0
 8007e84:	d155      	bne.n	8007f32 <_malloc_r+0xf2>
 8007e86:	f8d8 4000 	ldr.w	r4, [r8]
 8007e8a:	4626      	mov	r6, r4
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d145      	bne.n	8007f1c <_malloc_r+0xdc>
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d048      	beq.n	8007f26 <_malloc_r+0xe6>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	4631      	mov	r1, r6
 8007e98:	4638      	mov	r0, r7
 8007e9a:	eb04 0903 	add.w	r9, r4, r3
 8007e9e:	f000 fb5d 	bl	800855c <_sbrk_r>
 8007ea2:	4581      	cmp	r9, r0
 8007ea4:	d13f      	bne.n	8007f26 <_malloc_r+0xe6>
 8007ea6:	6821      	ldr	r1, [r4, #0]
 8007ea8:	1a6d      	subs	r5, r5, r1
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff ffa7 	bl	8007e00 <sbrk_aligned>
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d037      	beq.n	8007f26 <_malloc_r+0xe6>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	442b      	add	r3, r5
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d038      	beq.n	8007f36 <_malloc_r+0xf6>
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	42a2      	cmp	r2, r4
 8007ec8:	d12b      	bne.n	8007f22 <_malloc_r+0xe2>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	e00f      	b.n	8007ef0 <_malloc_r+0xb0>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	1b52      	subs	r2, r2, r5
 8007ed4:	d41f      	bmi.n	8007f16 <_malloc_r+0xd6>
 8007ed6:	2a0b      	cmp	r2, #11
 8007ed8:	d917      	bls.n	8007f0a <_malloc_r+0xca>
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	6025      	str	r5, [r4, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	6059      	strne	r1, [r3, #4]
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	bf08      	it	eq
 8007ee8:	f8c8 1000 	streq.w	r1, [r8]
 8007eec:	5162      	str	r2, [r4, r5]
 8007eee:	604b      	str	r3, [r1, #4]
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f104 060b 	add.w	r6, r4, #11
 8007ef6:	f000 f829 	bl	8007f4c <__malloc_unlock>
 8007efa:	f026 0607 	bic.w	r6, r6, #7
 8007efe:	1d23      	adds	r3, r4, #4
 8007f00:	1af2      	subs	r2, r6, r3
 8007f02:	d0ae      	beq.n	8007e62 <_malloc_r+0x22>
 8007f04:	1b9b      	subs	r3, r3, r6
 8007f06:	50a3      	str	r3, [r4, r2]
 8007f08:	e7ab      	b.n	8007e62 <_malloc_r+0x22>
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	6862      	ldr	r2, [r4, #4]
 8007f0e:	d1dd      	bne.n	8007ecc <_malloc_r+0x8c>
 8007f10:	f8c8 2000 	str.w	r2, [r8]
 8007f14:	e7ec      	b.n	8007ef0 <_malloc_r+0xb0>
 8007f16:	4623      	mov	r3, r4
 8007f18:	6864      	ldr	r4, [r4, #4]
 8007f1a:	e7ac      	b.n	8007e76 <_malloc_r+0x36>
 8007f1c:	4634      	mov	r4, r6
 8007f1e:	6876      	ldr	r6, [r6, #4]
 8007f20:	e7b4      	b.n	8007e8c <_malloc_r+0x4c>
 8007f22:	4613      	mov	r3, r2
 8007f24:	e7cc      	b.n	8007ec0 <_malloc_r+0x80>
 8007f26:	230c      	movs	r3, #12
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f000 f80e 	bl	8007f4c <__malloc_unlock>
 8007f30:	e797      	b.n	8007e62 <_malloc_r+0x22>
 8007f32:	6025      	str	r5, [r4, #0]
 8007f34:	e7dc      	b.n	8007ef0 <_malloc_r+0xb0>
 8007f36:	605b      	str	r3, [r3, #4]
 8007f38:	deff      	udf	#255	; 0xff
 8007f3a:	bf00      	nop
 8007f3c:	20001d40 	.word	0x20001d40

08007f40 <__malloc_lock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_lock+0x8>)
 8007f42:	f7ff bf01 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20001d3c 	.word	0x20001d3c

08007f4c <__malloc_unlock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__malloc_unlock+0x8>)
 8007f4e:	f7ff befc 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20001d3c 	.word	0x20001d3c

08007f58 <__ssputs_r>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	688e      	ldr	r6, [r1, #8]
 8007f5e:	461f      	mov	r7, r3
 8007f60:	42be      	cmp	r6, r7
 8007f62:	680b      	ldr	r3, [r1, #0]
 8007f64:	4682      	mov	sl, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4690      	mov	r8, r2
 8007f6a:	d82c      	bhi.n	8007fc6 <__ssputs_r+0x6e>
 8007f6c:	898a      	ldrh	r2, [r1, #12]
 8007f6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f72:	d026      	beq.n	8007fc2 <__ssputs_r+0x6a>
 8007f74:	6965      	ldr	r5, [r4, #20]
 8007f76:	6909      	ldr	r1, [r1, #16]
 8007f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f7c:	eba3 0901 	sub.w	r9, r3, r1
 8007f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f84:	1c7b      	adds	r3, r7, #1
 8007f86:	444b      	add	r3, r9
 8007f88:	106d      	asrs	r5, r5, #1
 8007f8a:	429d      	cmp	r5, r3
 8007f8c:	bf38      	it	cc
 8007f8e:	461d      	movcc	r5, r3
 8007f90:	0553      	lsls	r3, r2, #21
 8007f92:	d527      	bpl.n	8007fe4 <__ssputs_r+0x8c>
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7ff ff53 	bl	8007e40 <_malloc_r>
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	b360      	cbz	r0, 8007ff8 <__ssputs_r+0xa0>
 8007f9e:	6921      	ldr	r1, [r4, #16]
 8007fa0:	464a      	mov	r2, r9
 8007fa2:	f7ff fed3 	bl	8007d4c <memcpy>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	6126      	str	r6, [r4, #16]
 8007fb4:	6165      	str	r5, [r4, #20]
 8007fb6:	444e      	add	r6, r9
 8007fb8:	eba5 0509 	sub.w	r5, r5, r9
 8007fbc:	6026      	str	r6, [r4, #0]
 8007fbe:	60a5      	str	r5, [r4, #8]
 8007fc0:	463e      	mov	r6, r7
 8007fc2:	42be      	cmp	r6, r7
 8007fc4:	d900      	bls.n	8007fc8 <__ssputs_r+0x70>
 8007fc6:	463e      	mov	r6, r7
 8007fc8:	6820      	ldr	r0, [r4, #0]
 8007fca:	4632      	mov	r2, r6
 8007fcc:	4641      	mov	r1, r8
 8007fce:	f000 faab 	bl	8008528 <memmove>
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	1b9b      	subs	r3, r3, r6
 8007fd6:	60a3      	str	r3, [r4, #8]
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	4433      	add	r3, r6
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	f000 fac9 	bl	800857c <_realloc_r>
 8007fea:	4606      	mov	r6, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1e0      	bne.n	8007fb2 <__ssputs_r+0x5a>
 8007ff0:	6921      	ldr	r1, [r4, #16]
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	f7ff feb8 	bl	8007d68 <_free_r>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	f8ca 3000 	str.w	r3, [sl]
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	e7e9      	b.n	8007fe0 <__ssputs_r+0x88>

0800800c <_svfiprintf_r>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	4698      	mov	r8, r3
 8008012:	898b      	ldrh	r3, [r1, #12]
 8008014:	061b      	lsls	r3, r3, #24
 8008016:	b09d      	sub	sp, #116	; 0x74
 8008018:	4607      	mov	r7, r0
 800801a:	460d      	mov	r5, r1
 800801c:	4614      	mov	r4, r2
 800801e:	d50e      	bpl.n	800803e <_svfiprintf_r+0x32>
 8008020:	690b      	ldr	r3, [r1, #16]
 8008022:	b963      	cbnz	r3, 800803e <_svfiprintf_r+0x32>
 8008024:	2140      	movs	r1, #64	; 0x40
 8008026:	f7ff ff0b 	bl	8007e40 <_malloc_r>
 800802a:	6028      	str	r0, [r5, #0]
 800802c:	6128      	str	r0, [r5, #16]
 800802e:	b920      	cbnz	r0, 800803a <_svfiprintf_r+0x2e>
 8008030:	230c      	movs	r3, #12
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e0d0      	b.n	80081dc <_svfiprintf_r+0x1d0>
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	616b      	str	r3, [r5, #20]
 800803e:	2300      	movs	r3, #0
 8008040:	9309      	str	r3, [sp, #36]	; 0x24
 8008042:	2320      	movs	r3, #32
 8008044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008048:	f8cd 800c 	str.w	r8, [sp, #12]
 800804c:	2330      	movs	r3, #48	; 0x30
 800804e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081f4 <_svfiprintf_r+0x1e8>
 8008052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008056:	f04f 0901 	mov.w	r9, #1
 800805a:	4623      	mov	r3, r4
 800805c:	469a      	mov	sl, r3
 800805e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008062:	b10a      	cbz	r2, 8008068 <_svfiprintf_r+0x5c>
 8008064:	2a25      	cmp	r2, #37	; 0x25
 8008066:	d1f9      	bne.n	800805c <_svfiprintf_r+0x50>
 8008068:	ebba 0b04 	subs.w	fp, sl, r4
 800806c:	d00b      	beq.n	8008086 <_svfiprintf_r+0x7a>
 800806e:	465b      	mov	r3, fp
 8008070:	4622      	mov	r2, r4
 8008072:	4629      	mov	r1, r5
 8008074:	4638      	mov	r0, r7
 8008076:	f7ff ff6f 	bl	8007f58 <__ssputs_r>
 800807a:	3001      	adds	r0, #1
 800807c:	f000 80a9 	beq.w	80081d2 <_svfiprintf_r+0x1c6>
 8008080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008082:	445a      	add	r2, fp
 8008084:	9209      	str	r2, [sp, #36]	; 0x24
 8008086:	f89a 3000 	ldrb.w	r3, [sl]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80a1 	beq.w	80081d2 <_svfiprintf_r+0x1c6>
 8008090:	2300      	movs	r3, #0
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809a:	f10a 0a01 	add.w	sl, sl, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	9307      	str	r3, [sp, #28]
 80080a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a6:	931a      	str	r3, [sp, #104]	; 0x68
 80080a8:	4654      	mov	r4, sl
 80080aa:	2205      	movs	r2, #5
 80080ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b0:	4850      	ldr	r0, [pc, #320]	; (80081f4 <_svfiprintf_r+0x1e8>)
 80080b2:	f7f8 f92d 	bl	8000310 <memchr>
 80080b6:	9a04      	ldr	r2, [sp, #16]
 80080b8:	b9d8      	cbnz	r0, 80080f2 <_svfiprintf_r+0xe6>
 80080ba:	06d0      	lsls	r0, r2, #27
 80080bc:	bf44      	itt	mi
 80080be:	2320      	movmi	r3, #32
 80080c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c4:	0711      	lsls	r1, r2, #28
 80080c6:	bf44      	itt	mi
 80080c8:	232b      	movmi	r3, #43	; 0x2b
 80080ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ce:	f89a 3000 	ldrb.w	r3, [sl]
 80080d2:	2b2a      	cmp	r3, #42	; 0x2a
 80080d4:	d015      	beq.n	8008102 <_svfiprintf_r+0xf6>
 80080d6:	9a07      	ldr	r2, [sp, #28]
 80080d8:	4654      	mov	r4, sl
 80080da:	2000      	movs	r0, #0
 80080dc:	f04f 0c0a 	mov.w	ip, #10
 80080e0:	4621      	mov	r1, r4
 80080e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e6:	3b30      	subs	r3, #48	; 0x30
 80080e8:	2b09      	cmp	r3, #9
 80080ea:	d94d      	bls.n	8008188 <_svfiprintf_r+0x17c>
 80080ec:	b1b0      	cbz	r0, 800811c <_svfiprintf_r+0x110>
 80080ee:	9207      	str	r2, [sp, #28]
 80080f0:	e014      	b.n	800811c <_svfiprintf_r+0x110>
 80080f2:	eba0 0308 	sub.w	r3, r0, r8
 80080f6:	fa09 f303 	lsl.w	r3, r9, r3
 80080fa:	4313      	orrs	r3, r2
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	46a2      	mov	sl, r4
 8008100:	e7d2      	b.n	80080a8 <_svfiprintf_r+0x9c>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	1d19      	adds	r1, r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	9103      	str	r1, [sp, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfbb      	ittet	lt
 800810e:	425b      	neglt	r3, r3
 8008110:	f042 0202 	orrlt.w	r2, r2, #2
 8008114:	9307      	strge	r3, [sp, #28]
 8008116:	9307      	strlt	r3, [sp, #28]
 8008118:	bfb8      	it	lt
 800811a:	9204      	strlt	r2, [sp, #16]
 800811c:	7823      	ldrb	r3, [r4, #0]
 800811e:	2b2e      	cmp	r3, #46	; 0x2e
 8008120:	d10c      	bne.n	800813c <_svfiprintf_r+0x130>
 8008122:	7863      	ldrb	r3, [r4, #1]
 8008124:	2b2a      	cmp	r3, #42	; 0x2a
 8008126:	d134      	bne.n	8008192 <_svfiprintf_r+0x186>
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	1d1a      	adds	r2, r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	9203      	str	r2, [sp, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	bfb8      	it	lt
 8008134:	f04f 33ff 	movlt.w	r3, #4294967295
 8008138:	3402      	adds	r4, #2
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008204 <_svfiprintf_r+0x1f8>
 8008140:	7821      	ldrb	r1, [r4, #0]
 8008142:	2203      	movs	r2, #3
 8008144:	4650      	mov	r0, sl
 8008146:	f7f8 f8e3 	bl	8000310 <memchr>
 800814a:	b138      	cbz	r0, 800815c <_svfiprintf_r+0x150>
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	eba0 000a 	sub.w	r0, r0, sl
 8008152:	2240      	movs	r2, #64	; 0x40
 8008154:	4082      	lsls	r2, r0
 8008156:	4313      	orrs	r3, r2
 8008158:	3401      	adds	r4, #1
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	4825      	ldr	r0, [pc, #148]	; (80081f8 <_svfiprintf_r+0x1ec>)
 8008162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008166:	2206      	movs	r2, #6
 8008168:	f7f8 f8d2 	bl	8000310 <memchr>
 800816c:	2800      	cmp	r0, #0
 800816e:	d038      	beq.n	80081e2 <_svfiprintf_r+0x1d6>
 8008170:	4b22      	ldr	r3, [pc, #136]	; (80081fc <_svfiprintf_r+0x1f0>)
 8008172:	bb1b      	cbnz	r3, 80081bc <_svfiprintf_r+0x1b0>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	3307      	adds	r3, #7
 8008178:	f023 0307 	bic.w	r3, r3, #7
 800817c:	3308      	adds	r3, #8
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	4433      	add	r3, r6
 8008184:	9309      	str	r3, [sp, #36]	; 0x24
 8008186:	e768      	b.n	800805a <_svfiprintf_r+0x4e>
 8008188:	fb0c 3202 	mla	r2, ip, r2, r3
 800818c:	460c      	mov	r4, r1
 800818e:	2001      	movs	r0, #1
 8008190:	e7a6      	b.n	80080e0 <_svfiprintf_r+0xd4>
 8008192:	2300      	movs	r3, #0
 8008194:	3401      	adds	r4, #1
 8008196:	9305      	str	r3, [sp, #20]
 8008198:	4619      	mov	r1, r3
 800819a:	f04f 0c0a 	mov.w	ip, #10
 800819e:	4620      	mov	r0, r4
 80081a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a4:	3a30      	subs	r2, #48	; 0x30
 80081a6:	2a09      	cmp	r2, #9
 80081a8:	d903      	bls.n	80081b2 <_svfiprintf_r+0x1a6>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c6      	beq.n	800813c <_svfiprintf_r+0x130>
 80081ae:	9105      	str	r1, [sp, #20]
 80081b0:	e7c4      	b.n	800813c <_svfiprintf_r+0x130>
 80081b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b6:	4604      	mov	r4, r0
 80081b8:	2301      	movs	r3, #1
 80081ba:	e7f0      	b.n	800819e <_svfiprintf_r+0x192>
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	462a      	mov	r2, r5
 80081c2:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <_svfiprintf_r+0x1f4>)
 80081c4:	a904      	add	r1, sp, #16
 80081c6:	4638      	mov	r0, r7
 80081c8:	f3af 8000 	nop.w
 80081cc:	1c42      	adds	r2, r0, #1
 80081ce:	4606      	mov	r6, r0
 80081d0:	d1d6      	bne.n	8008180 <_svfiprintf_r+0x174>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	065b      	lsls	r3, r3, #25
 80081d6:	f53f af2d 	bmi.w	8008034 <_svfiprintf_r+0x28>
 80081da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081dc:	b01d      	add	sp, #116	; 0x74
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	ab03      	add	r3, sp, #12
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	462a      	mov	r2, r5
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <_svfiprintf_r+0x1f4>)
 80081ea:	a904      	add	r1, sp, #16
 80081ec:	4638      	mov	r0, r7
 80081ee:	f000 f879 	bl	80082e4 <_printf_i>
 80081f2:	e7eb      	b.n	80081cc <_svfiprintf_r+0x1c0>
 80081f4:	0800a318 	.word	0x0800a318
 80081f8:	0800a322 	.word	0x0800a322
 80081fc:	00000000 	.word	0x00000000
 8008200:	08007f59 	.word	0x08007f59
 8008204:	0800a31e 	.word	0x0800a31e

08008208 <_printf_common>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	4616      	mov	r6, r2
 800820e:	4699      	mov	r9, r3
 8008210:	688a      	ldr	r2, [r1, #8]
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008218:	4293      	cmp	r3, r2
 800821a:	bfb8      	it	lt
 800821c:	4613      	movlt	r3, r2
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008224:	4607      	mov	r7, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b10a      	cbz	r2, 800822e <_printf_common+0x26>
 800822a:	3301      	adds	r3, #1
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	6833      	ldrmi	r3, [r6, #0]
 8008236:	3302      	addmi	r3, #2
 8008238:	6033      	strmi	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d106      	bne.n	8008250 <_printf_common+0x48>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	42ab      	cmp	r3, r5
 800824e:	dc26      	bgt.n	800829e <_printf_common+0x96>
 8008250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008254:	1e13      	subs	r3, r2, #0
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	0692      	lsls	r2, r2, #26
 800825e:	d42b      	bmi.n	80082b8 <_printf_common+0xb0>
 8008260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008264:	4649      	mov	r1, r9
 8008266:	4638      	mov	r0, r7
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d01e      	beq.n	80082ac <_printf_common+0xa4>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	f003 0306 	and.w	r3, r3, #6
 8008276:	2b04      	cmp	r3, #4
 8008278:	bf02      	ittt	eq
 800827a:	68e5      	ldreq	r5, [r4, #12]
 800827c:	6833      	ldreq	r3, [r6, #0]
 800827e:	1aed      	subeq	r5, r5, r3
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	bf0c      	ite	eq
 8008284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008288:	2500      	movne	r5, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	bfc4      	itt	gt
 800828e:	1a9b      	subgt	r3, r3, r2
 8008290:	18ed      	addgt	r5, r5, r3
 8008292:	2600      	movs	r6, #0
 8008294:	341a      	adds	r4, #26
 8008296:	42b5      	cmp	r5, r6
 8008298:	d11a      	bne.n	80082d0 <_printf_common+0xc8>
 800829a:	2000      	movs	r0, #0
 800829c:	e008      	b.n	80082b0 <_printf_common+0xa8>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4649      	mov	r1, r9
 80082a4:	4638      	mov	r0, r7
 80082a6:	47c0      	blx	r8
 80082a8:	3001      	adds	r0, #1
 80082aa:	d103      	bne.n	80082b4 <_printf_common+0xac>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	3501      	adds	r5, #1
 80082b6:	e7c6      	b.n	8008246 <_printf_common+0x3e>
 80082b8:	18e1      	adds	r1, r4, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	2030      	movs	r0, #48	; 0x30
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c2:	4422      	add	r2, r4
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082cc:	3302      	adds	r3, #2
 80082ce:	e7c7      	b.n	8008260 <_printf_common+0x58>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4622      	mov	r2, r4
 80082d4:	4649      	mov	r1, r9
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d0e6      	beq.n	80082ac <_printf_common+0xa4>
 80082de:	3601      	adds	r6, #1
 80082e0:	e7d9      	b.n	8008296 <_printf_common+0x8e>
	...

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	7e0f      	ldrb	r7, [r1, #24]
 80082ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ec:	2f78      	cmp	r7, #120	; 0x78
 80082ee:	4691      	mov	r9, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	469a      	mov	sl, r3
 80082f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	; 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d4 	beq.w	80084ae <_printf_i+0x1ca>
 8008306:	2f58      	cmp	r7, #88	; 0x58
 8008308:	f000 80c0 	beq.w	800848c <_printf_i+0x1a8>
 800830c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a101      	add	r1, pc, #4	; (adr r1, 8008324 <_printf_i+0x40>)
 8008320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	08008495 	.word	0x08008495
 8008354:	080083bd 	.word	0x080083bd
 8008358:	0800844f 	.word	0x0800844f
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084b7 	.word	0x080084b7
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083bd 	.word	0x080083bd
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008457 	.word	0x08008457
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	602a      	str	r2, [r5, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e09f      	b.n	80084d0 <_printf_i+0x1ec>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	0607      	lsls	r7, r0, #24
 8008396:	f103 0104 	add.w	r1, r3, #4
 800839a:	6029      	str	r1, [r5, #0]
 800839c:	d501      	bpl.n	80083a2 <_printf_i+0xbe>
 800839e:	681e      	ldr	r6, [r3, #0]
 80083a0:	e003      	b.n	80083aa <_printf_i+0xc6>
 80083a2:	0646      	lsls	r6, r0, #25
 80083a4:	d5fb      	bpl.n	800839e <_printf_i+0xba>
 80083a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	da03      	bge.n	80083b6 <_printf_i+0xd2>
 80083ae:	232d      	movs	r3, #45	; 0x2d
 80083b0:	4276      	negs	r6, r6
 80083b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b6:	485a      	ldr	r0, [pc, #360]	; (8008520 <_printf_i+0x23c>)
 80083b8:	230a      	movs	r3, #10
 80083ba:	e012      	b.n	80083e2 <_printf_i+0xfe>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	6820      	ldr	r0, [r4, #0]
 80083c0:	1d19      	adds	r1, r3, #4
 80083c2:	6029      	str	r1, [r5, #0]
 80083c4:	0605      	lsls	r5, r0, #24
 80083c6:	d501      	bpl.n	80083cc <_printf_i+0xe8>
 80083c8:	681e      	ldr	r6, [r3, #0]
 80083ca:	e002      	b.n	80083d2 <_printf_i+0xee>
 80083cc:	0641      	lsls	r1, r0, #25
 80083ce:	d5fb      	bpl.n	80083c8 <_printf_i+0xe4>
 80083d0:	881e      	ldrh	r6, [r3, #0]
 80083d2:	4853      	ldr	r0, [pc, #332]	; (8008520 <_printf_i+0x23c>)
 80083d4:	2f6f      	cmp	r7, #111	; 0x6f
 80083d6:	bf0c      	ite	eq
 80083d8:	2308      	moveq	r3, #8
 80083da:	230a      	movne	r3, #10
 80083dc:	2100      	movs	r1, #0
 80083de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e2:	6865      	ldr	r5, [r4, #4]
 80083e4:	60a5      	str	r5, [r4, #8]
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	bfa2      	ittt	ge
 80083ea:	6821      	ldrge	r1, [r4, #0]
 80083ec:	f021 0104 	bicge.w	r1, r1, #4
 80083f0:	6021      	strge	r1, [r4, #0]
 80083f2:	b90e      	cbnz	r6, 80083f8 <_printf_i+0x114>
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d04b      	beq.n	8008490 <_printf_i+0x1ac>
 80083f8:	4615      	mov	r5, r2
 80083fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80083fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008402:	5dc7      	ldrb	r7, [r0, r7]
 8008404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008408:	4637      	mov	r7, r6
 800840a:	42bb      	cmp	r3, r7
 800840c:	460e      	mov	r6, r1
 800840e:	d9f4      	bls.n	80083fa <_printf_i+0x116>
 8008410:	2b08      	cmp	r3, #8
 8008412:	d10b      	bne.n	800842c <_printf_i+0x148>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	07de      	lsls	r6, r3, #31
 8008418:	d508      	bpl.n	800842c <_printf_i+0x148>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4299      	cmp	r1, r3
 8008420:	bfde      	ittt	le
 8008422:	2330      	movle	r3, #48	; 0x30
 8008424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800842c:	1b52      	subs	r2, r2, r5
 800842e:	6122      	str	r2, [r4, #16]
 8008430:	f8cd a000 	str.w	sl, [sp]
 8008434:	464b      	mov	r3, r9
 8008436:	aa03      	add	r2, sp, #12
 8008438:	4621      	mov	r1, r4
 800843a:	4640      	mov	r0, r8
 800843c:	f7ff fee4 	bl	8008208 <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	d14a      	bne.n	80084da <_printf_i+0x1f6>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	b004      	add	sp, #16
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f043 0320 	orr.w	r3, r3, #32
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	4833      	ldr	r0, [pc, #204]	; (8008524 <_printf_i+0x240>)
 8008458:	2778      	movs	r7, #120	; 0x78
 800845a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	061f      	lsls	r7, r3, #24
 8008464:	f851 6b04 	ldr.w	r6, [r1], #4
 8008468:	d402      	bmi.n	8008470 <_printf_i+0x18c>
 800846a:	065f      	lsls	r7, r3, #25
 800846c:	bf48      	it	mi
 800846e:	b2b6      	uxthmi	r6, r6
 8008470:	07df      	lsls	r7, r3, #31
 8008472:	bf48      	it	mi
 8008474:	f043 0320 	orrmi.w	r3, r3, #32
 8008478:	6029      	str	r1, [r5, #0]
 800847a:	bf48      	it	mi
 800847c:	6023      	strmi	r3, [r4, #0]
 800847e:	b91e      	cbnz	r6, 8008488 <_printf_i+0x1a4>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	f023 0320 	bic.w	r3, r3, #32
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	2310      	movs	r3, #16
 800848a:	e7a7      	b.n	80083dc <_printf_i+0xf8>
 800848c:	4824      	ldr	r0, [pc, #144]	; (8008520 <_printf_i+0x23c>)
 800848e:	e7e4      	b.n	800845a <_printf_i+0x176>
 8008490:	4615      	mov	r5, r2
 8008492:	e7bd      	b.n	8008410 <_printf_i+0x12c>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	6826      	ldr	r6, [r4, #0]
 8008498:	6961      	ldr	r1, [r4, #20]
 800849a:	1d18      	adds	r0, r3, #4
 800849c:	6028      	str	r0, [r5, #0]
 800849e:	0635      	lsls	r5, r6, #24
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	d501      	bpl.n	80084a8 <_printf_i+0x1c4>
 80084a4:	6019      	str	r1, [r3, #0]
 80084a6:	e002      	b.n	80084ae <_printf_i+0x1ca>
 80084a8:	0670      	lsls	r0, r6, #25
 80084aa:	d5fb      	bpl.n	80084a4 <_printf_i+0x1c0>
 80084ac:	8019      	strh	r1, [r3, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	4615      	mov	r5, r2
 80084b4:	e7bc      	b.n	8008430 <_printf_i+0x14c>
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	1d1a      	adds	r2, r3, #4
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	6862      	ldr	r2, [r4, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7f7 ff24 	bl	8000310 <memchr>
 80084c8:	b108      	cbz	r0, 80084ce <_printf_i+0x1ea>
 80084ca:	1b40      	subs	r0, r0, r5
 80084cc:	6060      	str	r0, [r4, #4]
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	2300      	movs	r3, #0
 80084d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d8:	e7aa      	b.n	8008430 <_printf_i+0x14c>
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	462a      	mov	r2, r5
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	47d0      	blx	sl
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0ad      	beq.n	8008444 <_printf_i+0x160>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	079b      	lsls	r3, r3, #30
 80084ec:	d413      	bmi.n	8008516 <_printf_i+0x232>
 80084ee:	68e0      	ldr	r0, [r4, #12]
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	4298      	cmp	r0, r3
 80084f4:	bfb8      	it	lt
 80084f6:	4618      	movlt	r0, r3
 80084f8:	e7a6      	b.n	8008448 <_printf_i+0x164>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4632      	mov	r2, r6
 80084fe:	4649      	mov	r1, r9
 8008500:	4640      	mov	r0, r8
 8008502:	47d0      	blx	sl
 8008504:	3001      	adds	r0, #1
 8008506:	d09d      	beq.n	8008444 <_printf_i+0x160>
 8008508:	3501      	adds	r5, #1
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	9903      	ldr	r1, [sp, #12]
 800850e:	1a5b      	subs	r3, r3, r1
 8008510:	42ab      	cmp	r3, r5
 8008512:	dcf2      	bgt.n	80084fa <_printf_i+0x216>
 8008514:	e7eb      	b.n	80084ee <_printf_i+0x20a>
 8008516:	2500      	movs	r5, #0
 8008518:	f104 0619 	add.w	r6, r4, #25
 800851c:	e7f5      	b.n	800850a <_printf_i+0x226>
 800851e:	bf00      	nop
 8008520:	0800a329 	.word	0x0800a329
 8008524:	0800a33a 	.word	0x0800a33a

08008528 <memmove>:
 8008528:	4288      	cmp	r0, r1
 800852a:	b510      	push	{r4, lr}
 800852c:	eb01 0402 	add.w	r4, r1, r2
 8008530:	d902      	bls.n	8008538 <memmove+0x10>
 8008532:	4284      	cmp	r4, r0
 8008534:	4623      	mov	r3, r4
 8008536:	d807      	bhi.n	8008548 <memmove+0x20>
 8008538:	1e43      	subs	r3, r0, #1
 800853a:	42a1      	cmp	r1, r4
 800853c:	d008      	beq.n	8008550 <memmove+0x28>
 800853e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008546:	e7f8      	b.n	800853a <memmove+0x12>
 8008548:	4402      	add	r2, r0
 800854a:	4601      	mov	r1, r0
 800854c:	428a      	cmp	r2, r1
 800854e:	d100      	bne.n	8008552 <memmove+0x2a>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800855a:	e7f7      	b.n	800854c <memmove+0x24>

0800855c <_sbrk_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_sbrk_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	f7f9 f87c 	bl	8001664 <_sbrk>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_sbrk_r+0x1a>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_sbrk_r+0x1a>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20001d38 	.word	0x20001d38

0800857c <_realloc_r>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	4680      	mov	r8, r0
 8008582:	4614      	mov	r4, r2
 8008584:	460e      	mov	r6, r1
 8008586:	b921      	cbnz	r1, 8008592 <_realloc_r+0x16>
 8008588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	4611      	mov	r1, r2
 800858e:	f7ff bc57 	b.w	8007e40 <_malloc_r>
 8008592:	b92a      	cbnz	r2, 80085a0 <_realloc_r+0x24>
 8008594:	f7ff fbe8 	bl	8007d68 <_free_r>
 8008598:	4625      	mov	r5, r4
 800859a:	4628      	mov	r0, r5
 800859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a0:	f000 f81b 	bl	80085da <_malloc_usable_size_r>
 80085a4:	4284      	cmp	r4, r0
 80085a6:	4607      	mov	r7, r0
 80085a8:	d802      	bhi.n	80085b0 <_realloc_r+0x34>
 80085aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085ae:	d812      	bhi.n	80085d6 <_realloc_r+0x5a>
 80085b0:	4621      	mov	r1, r4
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7ff fc44 	bl	8007e40 <_malloc_r>
 80085b8:	4605      	mov	r5, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0ed      	beq.n	800859a <_realloc_r+0x1e>
 80085be:	42bc      	cmp	r4, r7
 80085c0:	4622      	mov	r2, r4
 80085c2:	4631      	mov	r1, r6
 80085c4:	bf28      	it	cs
 80085c6:	463a      	movcs	r2, r7
 80085c8:	f7ff fbc0 	bl	8007d4c <memcpy>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4640      	mov	r0, r8
 80085d0:	f7ff fbca 	bl	8007d68 <_free_r>
 80085d4:	e7e1      	b.n	800859a <_realloc_r+0x1e>
 80085d6:	4635      	mov	r5, r6
 80085d8:	e7df      	b.n	800859a <_realloc_r+0x1e>

080085da <_malloc_usable_size_r>:
 80085da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085de:	1f18      	subs	r0, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbc      	itt	lt
 80085e4:	580b      	ldrlt	r3, [r1, r0]
 80085e6:	18c0      	addlt	r0, r0, r3
 80085e8:	4770      	bx	lr
	...

080085ec <_init>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr

080085f8 <_fini>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr
