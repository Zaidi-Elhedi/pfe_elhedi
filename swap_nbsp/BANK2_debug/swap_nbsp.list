
swap_nbsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000080  20000010  08002d38  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  08002d38  00020090  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008fda  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001821  00000000  00000000  0002905b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000790  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000597  00000000  00000000  0002b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348b7  00000000  00000000  0002b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000092b7  00000000  00000000  0005fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014dd7a  00000000  00000000  00069115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001d14  00000000  00000000  001b6e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  001b8ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002cf8 	.word	0x08002cf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002cf8 	.word	0x08002cf8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002de:	4b3c      	ldr	r3, [pc, #240]	; (80003d0 <main+0xf8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d11b      	bne.n	8000322 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
}
 80002f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002f6:	4b36      	ldr	r3, [pc, #216]	; (80003d0 <main+0xf8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002fe:	f3bf 8f4f 	dsb	sy
}
 8000302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
}
 8000308:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <main+0xf8>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <main+0xf8>)
 8000310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000314:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000316:	f3bf 8f4f 	dsb	sy
}
 800031a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800031c:	f3bf 8f6f 	isb	sy
}
 8000320:	e000      	b.n	8000324 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000322:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <main+0xf8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d138      	bne.n	80003a2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <main+0xf8>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000338:	f3bf 8f4f 	dsb	sy
}
 800033c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800033e:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <main+0xf8>)
 8000340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000344:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	0b5b      	lsrs	r3, r3, #13
 800034a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800034e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000358:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	015a      	lsls	r2, r3, #5
 800035e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000362:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000368:	4919      	ldr	r1, [pc, #100]	; (80003d0 <main+0xf8>)
 800036a:	4313      	orrs	r3, r2
 800036c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1ef      	bne.n	800035a <main+0x82>
    } while(sets-- != 0U);
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	60ba      	str	r2, [r7, #8]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1e5      	bne.n	8000350 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
}
 8000388:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <main+0xf8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <main+0xf8>)
 8000390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000394:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	e000      	b.n	80003a4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003a2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 faae 	bl	8000904 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003a8:	f000 f97c 	bl	80006a4 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f816 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f87c 	bl	80004ac <MX_GPIO_Init>
	  #ifdef FLASH_BANK1

	        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	  #else
	        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80003b4:	2110      	movs	r1, #16
 80003b6:	4807      	ldr	r0, [pc, #28]	; (80003d4 <main+0xfc>)
 80003b8:	f001 fc79 	bl	8001cae <HAL_GPIO_TogglePin>
 	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <main+0x100>)
 80003c4:	f001 fc5a 	bl	8001c7c <HAL_GPIO_WritePin>

	  #endif

	        HAL_Delay(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fb2d 	bl	8000a28 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80003ce:	e7f1      	b.n	80003b4 <main+0xdc>
 80003d0:	e000ed00 	.word	0xe000ed00
 80003d4:	58020000 	.word	0x58020000
 80003d8:	58021400 	.word	0x58021400

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09c      	sub	sp, #112	; 0x70
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e6:	224c      	movs	r2, #76	; 0x4c
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fc58 	bl	8002ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2220      	movs	r2, #32
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fc52 	bl	8002ca0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f001 fc8b 	bl	8001d18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <SystemClock_Config+0xc8>)
 8000408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040a:	4a26      	ldr	r2, [pc, #152]	; (80004a4 <SystemClock_Config+0xc8>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <SystemClock_Config+0xc8>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <SystemClock_Config+0xcc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemClock_Config+0xcc>)
 8000422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <SystemClock_Config+0xcc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000434:	bf00      	nop
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <SystemClock_Config+0xcc>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000442:	d1f8      	bne.n	8000436 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000444:	2302      	movs	r3, #2
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000448:	2301      	movs	r3, #1
 800044a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	2340      	movs	r3, #64	; 0x40
 800044e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000450:	2300      	movs	r3, #0
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fc97 	bl	8001d8c <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000464:	f000 f94a 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	233f      	movs	r3, #63	; 0x3f
 800046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f8d7 	bl	8002640 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000498:	f000 f930 	bl	80006fc <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3770      	adds	r7, #112	; 0x70
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	58000400 	.word	0x58000400
 80004a8:	58024800 	.word	0x58024800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c8:	4a3d      	ldr	r2, [pc, #244]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d2:	4b3b      	ldr	r3, [pc, #236]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e0:	4b37      	ldr	r3, [pc, #220]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e6:	4a36      	ldr	r2, [pc, #216]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f0:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <MX_GPIO_Init+0x114>)
 80004f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <MX_GPIO_Init+0x114>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000504:	4a2e      	ldr	r2, [pc, #184]	; (80005c0 <MX_GPIO_Init+0x114>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_GPIO_Init+0x114>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x114>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <MX_GPIO_Init+0x114>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0x114>)
 800052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <MX_GPIO_Init+0x118>)
 8000542:	f001 fb9b 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <MX_GPIO_Init+0x11c>)
 800054c:	f001 fb96 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000556:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4819      	ldr	r0, [pc, #100]	; (80005cc <MX_GPIO_Init+0x120>)
 8000568:	f001 f9d8 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	480f      	ldr	r0, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x118>)
 8000586:	f001 f9c9 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800058a:	2310      	movs	r3, #16
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0x11c>)
 80005a2:	f001 f9bb 	bl	800191c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2028      	movs	r0, #40	; 0x28
 80005ac:	f000 fb5d 	bl	8000c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b0:	2028      	movs	r0, #40	; 0x28
 80005b2:	f000 fb74 	bl	8000c9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024400 	.word	0x58024400
 80005c4:	58021400 	.word	0x58021400
 80005c8:	58020000 	.word	0x58020000
 80005cc:	58020800 	.word	0x58020800

080005d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d155      	bne.n	800068e <HAL_GPIO_EXTI_Callback+0xbe>
	  HAL_FLASH_Unlock();
 80005e2:	f000 fbf7 	bl	8000dd4 <HAL_FLASH_Unlock>

	   HAL_FLASH_OB_Unlock();
 80005e6:	f000 fc2f 	bl	8000e48 <HAL_FLASH_OB_Unlock>
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 80005ea:	482c      	ldr	r0, [pc, #176]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 80005ec:	f000 fe76 	bl	80012dc <HAL_FLASHEx_OBGetConfig>

	  OBInit.Banks     = FLASH_BANK_1;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
	  HAL_FLASHEx_OBGetConfig(&OBInit);
 80005f6:	4829      	ldr	r0, [pc, #164]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 80005f8:	f000 fe70 	bl	80012dc <HAL_FLASHEx_OBGetConfig>


	 if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db22      	blt.n	800064a <HAL_GPIO_EXTI_Callback+0x7a>
	  	{

	  	          OBInit.OptionType = OPTIONBYTE_USER;
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000606:	2204      	movs	r2, #4
 8000608:	601a      	str	r2, [r3, #0]
	  	          OBInit.USERType   = OB_USER_SWAP_BANK;
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 800060c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000610:	615a      	str	r2, [r3, #20]
	  	          OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000614:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000618:	619a      	str	r2, [r3, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 800061a:	4820      	ldr	r0, [pc, #128]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 800061c:	f000 fdba 	bl	8001194 <HAL_FLASHEx_OBProgram>

	  	          HAL_FLASH_OB_Launch();
 8000620:	f000 fc34 	bl	8000e8c <HAL_FLASH_OB_Launch>

	  	          HAL_NVIC_SystemReset();
 8000624:	f000 fb49 	bl	8000cba <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8000628:	f3bf 8f4f 	dsb	sy
}
 800062c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062e:	f3bf 8f6f 	isb	sy
}
 8000632:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000636:	2200      	movs	r2, #0
 8000638:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
}
 8000640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000642:	f3bf 8f6f 	isb	sy
}
 8000646:	bf00      	nop
}
 8000648:	e023      	b.n	8000692 <HAL_GPIO_EXTI_Callback+0xc2>
	  	          SCB_InvalidateICache();
	  	        }
	  	        else
	  	        {

	  	          OBInit.OptionType = OPTIONBYTE_USER;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 800064c:	2204      	movs	r2, #4
 800064e:	601a      	str	r2, [r3, #0]
	  	          OBInit.USERType = OB_USER_SWAP_BANK;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	615a      	str	r2, [r3, #20]
	  	          OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
	  	          HAL_FLASHEx_OBProgram(&OBInit);
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000660:	f000 fd98 	bl	8001194 <HAL_FLASHEx_OBProgram>

	  	          HAL_FLASH_OB_Launch();
 8000664:	f000 fc12 	bl	8000e8c <HAL_FLASH_OB_Launch>

	  	          HAL_NVIC_SystemReset();
 8000668:	f000 fb27 	bl	8000cba <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800067a:	2200      	movs	r2, #0
 800067c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
}
 8000684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000686:	f3bf 8f6f 	isb	sy
}
 800068a:	bf00      	nop
}
 800068c:	e001      	b.n	8000692 <HAL_GPIO_EXTI_Callback+0xc2>


	  	          SCB_InvalidateICache();
	  	        }
  } else {
      __NOP();
 800068e:	bf00      	nop
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006b6:	f000 fb11 	bl	8000cdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006be:	2300      	movs	r3, #0
 80006c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006c6:	231f      	movs	r3, #31
 80006c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006ca:	2387      	movs	r3, #135	; 0x87
 80006cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006d2:	2300      	movs	r3, #0
 80006d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006e6:	463b      	mov	r3, r7
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fb2f 	bl	8000d4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006ee:	2004      	movs	r0, #4
 80006f0:	f000 fb0c 	bl	8000d0c <HAL_MPU_Enable>

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_MspInit+0x30>)
 8000710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x30>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x30>)
 8000720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	58024400 	.word	0x58024400

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f92e 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000798:	f001 faa3 	bl	8001ce2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <SystemInit+0xe4>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a36      	ldr	r2, [pc, #216]	; (8000884 <SystemInit+0xe4>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <SystemInit+0xe8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f003 030f 	and.w	r3, r3, #15
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d807      	bhi.n	80007d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <SystemInit+0xe8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f023 030f 	bic.w	r3, r3, #15
 80007c8:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <SystemInit+0xe8>)
 80007ca:	f043 0307 	orr.w	r3, r3, #7
 80007ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d0:	4b2e      	ldr	r3, [pc, #184]	; (800088c <SystemInit+0xec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2d      	ldr	r2, [pc, #180]	; (800088c <SystemInit+0xec>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <SystemInit+0xec>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemInit+0xec>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4929      	ldr	r1, [pc, #164]	; (800088c <SystemInit+0xec>)
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <SystemInit+0xf0>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <SystemInit+0xe8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d007      	beq.n	800080a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemInit+0xe8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f023 030f 	bic.w	r3, r3, #15
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemInit+0xe8>)
 8000804:	f043 0307 	orr.w	r3, r3, #7
 8000808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <SystemInit+0xec>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <SystemInit+0xec>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <SystemInit+0xec>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <SystemInit+0xec>)
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <SystemInit+0xf4>)
 8000820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <SystemInit+0xec>)
 8000824:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <SystemInit+0xf8>)
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <SystemInit+0xec>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <SystemInit+0xfc>)
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <SystemInit+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <SystemInit+0xec>)
 8000836:	4a19      	ldr	r2, [pc, #100]	; (800089c <SystemInit+0xfc>)
 8000838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <SystemInit+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0xec>)
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <SystemInit+0xfc>)
 8000844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <SystemInit+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <SystemInit+0xec>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <SystemInit+0xec>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <SystemInit+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <SystemInit+0x100>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <SystemInit+0x104>)
 8000864:	4013      	ands	r3, r2
 8000866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800086a:	d202      	bcs.n	8000872 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <SystemInit+0x108>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <SystemInit+0x10c>)
 8000874:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000878:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	52002000 	.word	0x52002000
 800088c:	58024400 	.word	0x58024400
 8000890:	eaf6ed7f 	.word	0xeaf6ed7f
 8000894:	02020200 	.word	0x02020200
 8000898:	01ff0000 	.word	0x01ff0000
 800089c:	01010280 	.word	0x01010280
 80008a0:	5c001000 	.word	0x5c001000
 80008a4:	ffff0000 	.word	0xffff0000
 80008a8:	51008108 	.word	0x51008108
 80008ac:	52004000 	.word	0x52004000

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff ff74 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f002 f9e7 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fcf9 	bl	80002d8 <main>
  bx  lr
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08002d28 	.word	0x08002d28
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	20000090 	.word	0x20000090

08000900 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC3_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090a:	2003      	movs	r0, #3
 800090c:	f000 f9a2 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000910:	f002 f84c 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8000914:	4602      	mov	r2, r0
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_Init+0x68>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	f003 030f 	and.w	r3, r3, #15
 8000920:	4913      	ldr	r1, [pc, #76]	; (8000970 <HAL_Init+0x6c>)
 8000922:	5ccb      	ldrb	r3, [r1, r3]
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	fa22 f303 	lsr.w	r3, r2, r3
 800092c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_Init+0x68>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <HAL_Init+0x6c>)
 8000938:	5cd3      	ldrb	r3, [r2, r3]
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	fa22 f303 	lsr.w	r3, r2, r3
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_Init+0x70>)
 8000946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_Init+0x74>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f814 	bl	800097c <HAL_InitTick>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e002      	b.n	8000964 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800095e:	f7ff fed3 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	08002d10 	.word	0x08002d10
 8000974:	20000004 	.word	0x20000004
 8000978:	20000000 	.word	0x20000000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_InitTick+0x60>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e021      	b.n	80009d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_InitTick+0x64>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f98b 	bl	8000cc2 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f951 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x68>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2000000c 	.word	0x2000000c
 8000a0c:	20000070 	.word	0x20000070

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000070 	.word	0x20000070

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000000c 	.word	0x2000000c

08000a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetREVID+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	0c1b      	lsrs	r3, r3, #16
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	5c001000 	.word	0x5c001000

08000a88 <__NVIC_SetPriorityGrouping>:
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	05fa0000 	.word	0x05fa0000

08000ad0 <__NVIC_GetPriorityGrouping>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <__NVIC_SystemReset>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
}
 8000bec:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <__NVIC_SystemReset+0x24>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bf6:	4904      	ldr	r1, [pc, #16]	; (8000c08 <__NVIC_SystemReset+0x24>)
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_SystemReset+0x28>)
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfe:	f3bf 8f4f 	dsb	sy
}
 8000c02:	bf00      	nop
    __NOP();
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <__NVIC_SystemReset+0x20>
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	05fa0004 	.word	0x05fa0004

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff78 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff13 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff2a 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff7a 	bl	8000b7c <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff49 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff1d 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000cbe:	f7ff ff91 	bl	8000be4 <__NVIC_SystemReset>

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffa0 	bl	8000c10 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ce0:	f3bf 8f5f 	dmb	sy
}
 8000ce4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_MPU_Disable+0x28>)
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_MPU_Disable+0x28>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_MPU_Disable+0x2c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	e000ed90 	.word	0xe000ed90

08000d0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_MPU_Enable+0x38>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_MPU_Enable+0x3c>)
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_MPU_Enable+0x3c>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2a:	f3bf 8f4f 	dsb	sy
}
 8000d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d30:	f3bf 8f6f 	isb	sy
}
 8000d34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed90 	.word	0xe000ed90
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	785a      	ldrb	r2, [r3, #1]
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_MPU_ConfigRegion+0x84>)
 8000d5a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d029      	beq.n	8000db8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_MPU_ConfigRegion+0x84>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7adb      	ldrb	r3, [r3, #11]
 8000d76:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7a9b      	ldrb	r3, [r3, #10]
 8000d7e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7b5b      	ldrb	r3, [r3, #13]
 8000d86:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7b9b      	ldrb	r3, [r3, #14]
 8000d8e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7bdb      	ldrb	r3, [r3, #15]
 8000d96:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a5b      	ldrb	r3, [r3, #9]
 8000d9e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000da0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000da8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000db2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000db6:	e005      	b.n	8000dc4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_MPU_ConfigRegion+0x84>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_MPU_ConfigRegion+0x84>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed90 	.word	0xe000ed90

08000dd4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00d      	beq.n	8000e00 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_FLASH_Unlock+0x6c>)
 8000de8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <HAL_FLASH_Unlock+0x70>)
 8000dee:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e018      	b.n	8000e32 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000e02:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d010      	beq.n	8000e30 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_FLASH_Unlock+0x6c>)
 8000e12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_FLASH_Unlock+0x70>)
 8000e1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <HAL_FLASH_Unlock+0x68>)
 8000e20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	52002000 	.word	0x52002000
 8000e40:	45670123 	.word	0x45670123
 8000e44:	cdef89ab 	.word	0xcdef89ab

08000e48 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_FLASH_OB_Unlock+0x38>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00d      	beq.n	8000e74 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_FLASH_OB_Unlock+0x38>)
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_FLASH_OB_Unlock+0x3c>)
 8000e5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_FLASH_OB_Unlock+0x38>)
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_FLASH_OB_Unlock+0x40>)
 8000e62:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_FLASH_OB_Unlock+0x38>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	52002000 	.word	0x52002000
 8000e84:	08192a3b 	.word	0x08192a3b
 8000e88:	4c5d6e7f 	.word	0x4c5d6e7f

08000e8c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8000e92:	2101      	movs	r1, #1
 8000e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e98:	f000 f902 	bl	80010a0 <FLASH_CRC_WaitForLastOperation>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e00c      	b.n	8000ec2 <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eae:	f000 f8f7 	bl	80010a0 <FLASH_CRC_WaitForLastOperation>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	e001      	b.n	8000ec2 <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10b      	bne.n	8000ee0 <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_FLASH_OB_Launch+0x60>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_FLASH_OB_Launch+0x60>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ed8:	f000 f8a6 	bl	8001028 <FLASH_OB_WaitForLastOperation>
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	52002000 	.word	0x52002000

08000ef0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8000efa:	2304      	movs	r3, #4
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8000f02:	f7ff fd85 	bl	8000a10 <HAL_GetTick>
 8000f06:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d113      	bne.n	8000f36 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <FLASH_WaitForLastOperation+0x124>)
 8000f10:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000f12:	e010      	b.n	8000f36 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1a:	d00c      	beq.n	8000f36 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f1c:	f7ff fd78 	bl	8000a10 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d302      	bcc.n	8000f32 <FLASH_WaitForLastOperation+0x42>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e06a      	b.n	800100c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4b37      	ldr	r3, [pc, #220]	; (8001018 <FLASH_WaitForLastOperation+0x128>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d10a      	bne.n	8000f58 <FLASH_WaitForLastOperation+0x68>
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	e00c      	b.n	8000f72 <FLASH_WaitForLastOperation+0x82>
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000f5a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4013      	ands	r3, r2
 8000f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf0c      	ite	eq
 8000f6c:	2301      	moveq	r3, #1
 8000f6e:	2300      	movne	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ce      	bne.n	8000f14 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <FLASH_WaitForLastOperation+0x130>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e007      	b.n	8000f98 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000f8a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <FLASH_WaitForLastOperation+0x130>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f96:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d017      	beq.n	8000fd2 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <FLASH_WaitForLastOperation+0x134>)
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <FLASH_WaitForLastOperation+0x134>)
 8000fac:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <FLASH_WaitForLastOperation+0x128>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d103      	bne.n	8000fc2 <FLASH_WaitForLastOperation+0xd2>
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	6153      	str	r3, [r2, #20]
 8000fc0:	e005      	b.n	8000fce <FLASH_WaitForLastOperation+0xde>
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fca:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e01c      	b.n	800100c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d10b      	bne.n	8000ff0 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d111      	bne.n	800100a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	e00c      	b.n	800100a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8000ff2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffe:	d104      	bne.n	800100a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <FLASH_WaitForLastOperation+0x12c>)
 8001002:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001006:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	80000004 	.word	0x80000004
 8001018:	1fef000f 	.word	0x1fef000f
 800101c:	52002000 	.word	0x52002000
 8001020:	17ee0000 	.word	0x17ee0000
 8001024:	20000074 	.word	0x20000074

08001028 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fcee 	bl	8000a10 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8001036:	e010      	b.n	800105a <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	d00c      	beq.n	800105a <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001040:	f7ff fce6 	bl	8000a10 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d302      	bcc.n	8001056 <FLASH_OB_WaitForLastOperation+0x2e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e01a      	b.n	8001090 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <FLASH_OB_WaitForLastOperation+0x70>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1e8      	bne.n	8001038 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <FLASH_OB_WaitForLastOperation+0x70>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <FLASH_OB_WaitForLastOperation+0x74>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <FLASH_OB_WaitForLastOperation+0x74>)
 800107c:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <FLASH_OB_WaitForLastOperation+0x70>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <FLASH_OB_WaitForLastOperation+0x70>)
 8001084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001088:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	52002000 	.word	0x52002000
 800109c:	20000074 	.word	0x20000074

080010a0 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 80010aa:	f7ff fcb1 	bl	8000a10 <HAL_GetTick>
 80010ae:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d102      	bne.n	80010bc <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 80010b6:	2308      	movs	r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e013      	b.n	80010e4 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <FLASH_CRC_WaitForLastOperation+0xe4>)
 80010be:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80010c0:	e010      	b.n	80010e4 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d00c      	beq.n	80010e4 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010ca:	f7ff fca1 	bl	8000a10 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d302      	bcc.n	80010e0 <FLASH_CRC_WaitForLastOperation+0x40>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e04b      	b.n	800117c <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <FLASH_CRC_WaitForLastOperation+0xe8>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d10a      	bne.n	8001106 <FLASH_CRC_WaitForLastOperation+0x66>
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	e00c      	b.n	8001120 <FLASH_CRC_WaitForLastOperation+0x80>
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 8001108:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800110c:	43da      	mvns	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1ce      	bne.n	80010c2 <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d112      	bne.n	8001150 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001136:	d120      	bne.n	800117a <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <FLASH_CRC_WaitForLastOperation+0xf0>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001142:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 8001146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800114a:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e015      	b.n	800117c <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 8001152:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800115e:	d10c      	bne.n	800117a <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <FLASH_CRC_WaitForLastOperation+0xf0>)
 800116a:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <FLASH_CRC_WaitForLastOperation+0xec>)
 800116e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001172:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	80000008 	.word	0x80000008
 8001188:	1fef000f 	.word	0x1fef000f
 800118c:	52002000 	.word	0x52002000
 8001190:	20000074 	.word	0x20000074

08001194 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_FLASHEx_OBProgram+0x144>)
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_FLASHEx_OBProgram+0x14>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e092      	b.n	80012ce <HAL_FLASHEx_OBProgram+0x13a>
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <HAL_FLASHEx_OBProgram+0x144>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_FLASHEx_OBProgram+0x144>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80011b4:	2101      	movs	r1, #1
 80011b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011ba:	f7ff fe99 	bl	8000ef0 <FLASH_WaitForLastOperation>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e00c      	b.n	80011e4 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80011ca:	2102      	movs	r1, #2
 80011cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d0:	f7ff fe8e 	bl	8000ef0 <FLASH_WaitForLastOperation>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e001      	b.n	80011e4 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d16d      	bne.n	80012c6 <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d014      	beq.n	8001220 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f000 f8c3 	bl	8001394 <FLASH_OB_EnableWRP>
 800120e:	e007      	b.n	8001220 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	4619      	mov	r1, r3
 800121a:	4610      	mov	r0, r2
 800121c:	f000 f8e4 	bl	80013e8 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f92f 	bl	8001494 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f000 f951 	bl	80014f4 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a18      	ldr	r0, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f000 f9f9 	bl	8001664 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa66 	bl	8001754 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	461a      	mov	r2, r3
 80012a2:	f000 fa79 	bl	8001798 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f000 faaf 	bl	8001824 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_FLASHEx_OBProgram+0x144>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	751a      	strb	r2, [r3, #20]

  return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000074 	.word	0x20000074

080012dc <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2216      	movs	r2, #22
 80012e8:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80012ea:	f000 f8e7 	bl	80014bc <FLASH_OB_GetRDP>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80012f4:	f000 f9a0 	bl	8001638 <FLASH_OB_GetUser>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 80012fe:	f000 fa3d 	bl	800177c <FLASH_OB_GetBOR>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d003      	beq.n	8001318 <HAL_FLASHEx_OBGetConfig+0x3c>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d129      	bne.n	800136c <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1d18      	adds	r0, r3, #4
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f103 0108 	add.w	r1, r3, #8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	461a      	mov	r2, r3
 8001334:	f000 f880 	bl	8001438 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f103 0020 	add.w	r0, r3, #32
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f000 f9bf 	bl	80016d0 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	f000 fa96 	bl	8001898 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3334      	adds	r3, #52	; 0x34
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f000 fa37 	bl	80017ec <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <FLASH_OB_EnableWRP+0x50>)
 80013aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <FLASH_OB_EnableWRP+0x50>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <FLASH_OB_EnableWRP+0x50>)
 80013c4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4905      	ldr	r1, [pc, #20]	; (80013e4 <FLASH_OB_EnableWRP+0x50>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	52002000 	.word	0x52002000

080013e8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <FLASH_OB_DisableWRP+0x4c>)
 80013fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	490b      	ldr	r1, [pc, #44]	; (8001434 <FLASH_OB_DisableWRP+0x4c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <FLASH_OB_DisableWRP+0x4c>)
 8001416:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4905      	ldr	r1, [pc, #20]	; (8001434 <FLASH_OB_DisableWRP+0x4c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	52002000 	.word	0x52002000

08001438 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <FLASH_OB_GetWRP+0x58>)
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d103      	bne.n	8001462 <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <FLASH_OB_GetWRP+0x58>)
 800145c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001460:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	43db      	mvns	r3, r3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 800147a:	e002      	b.n	8001482 <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	52002000 	.word	0x52002000

08001494 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <FLASH_OB_RDPConfig+0x24>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	4904      	ldr	r1, [pc, #16]	; (80014b8 <FLASH_OB_RDPConfig+0x24>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	620b      	str	r3, [r1, #32]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	52002000 	.word	0x52002000

080014bc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <FLASH_OB_GetRDP+0x34>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80014ca:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80014d2:	d006      	beq.n	80014e2 <FLASH_OB_GetRDP+0x26>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 80014da:	d002      	beq.n	80014e2 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 80014dc:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 80014e0:	e000      	b.n	80014e4 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 80014e2:	687b      	ldr	r3, [r7, #4]
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	52002000 	.word	0x52002000

080014f4 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155e:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159a:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80015b8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d6:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015f4:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001612:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <FLASH_OB_UserConfig+0x140>)
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	4905      	ldr	r1, [pc, #20]	; (8001634 <FLASH_OB_UserConfig+0x140>)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	620b      	str	r3, [r1, #32]
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	52002000 	.word	0x52002000

08001638 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <FLASH_OB_GetUser+0x24>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <FLASH_OB_GetUser+0x28>)
 8001648:	4013      	ands	r3, r2
 800164a:	607b      	str	r3, [r7, #4]

  return userConfig;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	52002000 	.word	0x52002000
 8001660:	ffff00f3 	.word	0xffff00f3

08001664 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001682:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 800168e:	431a      	orrs	r2, r3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8001696:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00e      	beq.n	80016c0 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80016a8:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80016b4:	431a      	orrs	r2, r3
 80016b6:	4905      	ldr	r1, [pc, #20]	; (80016cc <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80016bc:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	52002000 	.word	0x52002000

080016d0 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <FLASH_OB_GetPCROP+0x7c>)
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 80016f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016f6:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d106      	bne.n	800170c <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <FLASH_OB_GetPCROP+0x7c>)
 8001700:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001704:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 8001706:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800170a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <FLASH_OB_GetPCROP+0x80>)
 800171c:	4013      	ands	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	441a      	add	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	441a      	add	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	52002000 	.word	0x52002000
 8001750:	000fff00 	.word	0x000fff00

08001754 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <FLASH_OB_BOR_LevelConfig+0x24>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f023 020c 	bic.w	r2, r3, #12
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <FLASH_OB_BOR_LevelConfig+0x24>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	620b      	str	r3, [r1, #32]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	52002000 	.word	0x52002000

0800177c <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <FLASH_OB_GetBOR+0x18>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f003 030c 	and.w	r3, r3, #12
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	52002000 	.word	0x52002000

08001798 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <FLASH_OB_BootAddConfig+0x4c>)
 80017b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <FLASH_OB_BootAddConfig+0x50>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	0c12      	lsrs	r2, r2, #16
 80017ba:	490a      	ldr	r1, [pc, #40]	; (80017e4 <FLASH_OB_BootAddConfig+0x4c>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <FLASH_OB_BootAddConfig+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <FLASH_OB_BootAddConfig+0x4c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	52002000 	.word	0x52002000
 80017e8:	ffff0000 	.word	0xffff0000

080017ec <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <FLASH_OB_GetBootAdd+0x30>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <FLASH_OB_GetBootAdd+0x34>)
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	52002000 	.word	0x52002000
 8001820:	ffff0000 	.word	0xffff0000

08001824 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00f      	beq.n	800185c <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001842:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800184e:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8001856:	490f      	ldr	r1, [pc, #60]	; (8001894 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8001858:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800185a:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 800186c:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8001878:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8001882:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8001884:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	52002000 	.word	0x52002000

08001898 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <FLASH_OB_GetSecureArea+0x7c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 80018ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018be:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d106      	bne.n	80018d4 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <FLASH_OB_GetSecureArea+0x7c>)
 80018c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80018cc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 80018ce:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80018d2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <FLASH_OB_GetSecureArea+0x80>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	441a      	add	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	021a      	lsls	r2, r3, #8
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	441a      	add	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	52002000 	.word	0x52002000
 8001918:	000fff00 	.word	0x000fff00

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_GPIO_Init+0x234>)
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800192e:	e194      	b.n	8001c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8186 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <HAL_GPIO_Init+0x44>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d017      	beq.n	80019fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80e0 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x23c>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x240>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d052      	beq.n	8001b84 <HAL_GPIO_Init+0x268>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_GPIO_Init+0x244>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x248>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_GPIO_Init+0x24c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_GPIO_Init+0x250>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x254>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x258>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x25c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_GPIO_Init+0x260>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_GPIO_Init+0x264>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e02d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e02b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e029      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e027      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e025      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e023      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e021      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e01f      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e01d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e01b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4e:	bf00      	nop
 8001b50:	58000080 	.word	0x58000080
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58000400 	.word	0x58000400
 8001b5c:	58020000 	.word	0x58020000
 8001b60:	58020400 	.word	0x58020400
 8001b64:	58020800 	.word	0x58020800
 8001b68:	58020c00 	.word	0x58020c00
 8001b6c:	58021000 	.word	0x58021000
 8001b70:	58021400 	.word	0x58021400
 8001b74:	58021800 	.word	0x58021800
 8001b78:	58021c00 	.word	0x58021c00
 8001b7c:	58022000 	.word	0x58022000
 8001b80:	58022400 	.word	0x58022400
 8001b84:	2300      	movs	r3, #0
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b96:	4938      	ldr	r1, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x35c>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f ae63 	bne.w	8001930 <HAL_GPIO_Init+0x14>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000400 	.word	0x58000400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	041a      	lsls	r2, r3, #16
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	400b      	ands	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc61 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_PWREx_ConfigSupply+0x70>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d00a      	beq.n	8001d42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_PWREx_ConfigSupply+0x70>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01f      	b.n	8001d7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e01d      	b.n	8001d7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_PWREx_ConfigSupply+0x70>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	490f      	ldr	r1, [pc, #60]	; (8001d88 <HAL_PWREx_ConfigSupply+0x70>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d52:	f7fe fe5d 	bl	8000a10 <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d58:	e009      	b.n	8001d6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d5a:	f7fe fe59 	bl	8000a10 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d68:	d901      	bls.n	8001d6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_PWREx_ConfigSupply+0x70>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	58024800 	.word	0x58024800

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f000 bc48 	b.w	8002630 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8088 	beq.w	8001ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4b99      	ldr	r3, [pc, #612]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001db8:	4b96      	ldr	r3, [pc, #600]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x48>
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2b18      	cmp	r3, #24
 8001dc8:	d111      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d06d      	beq.n	8001ebc <HAL_RCC_OscConfig+0x130>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d169      	bne.n	8001ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f000 bc21 	b.w	8002630 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7a>
 8001df8:	4b86      	ldr	r3, [pc, #536]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a85      	ldr	r2, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x9c>
 8001e0e:	4b81      	ldr	r3, [pc, #516]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a80      	ldr	r2, [pc, #512]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7d      	ldr	r2, [pc, #500]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e32:	4b78      	ldr	r3, [pc, #480]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a77      	ldr	r2, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a74      	ldr	r2, [pc, #464]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e4c:	4b71      	ldr	r3, [pc, #452]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a70      	ldr	r2, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fdd0 	bl	8000a10 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe fdcc 	bl	8000a10 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e3d4      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe fdbc 	bl	8000a10 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7fe fdb8 	bl	8000a10 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e3c0      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x110>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80ca 	beq.w	8002060 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ecc:	4b51      	ldr	r3, [pc, #324]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ed4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x166>
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2b18      	cmp	r3, #24
 8001ee6:	d156      	bne.n	8001f96 <HAL_RCC_OscConfig+0x20a>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d151      	bne.n	8001f96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e392      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f0a:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0219 	bic.w	r2, r3, #25
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	493f      	ldr	r1, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fd78 	bl	8000a10 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f24:	f7fe fd74 	bl	8000a10 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e37c      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	f7fe fd95 	bl	8000a70 <HAL_GetREVID>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d817      	bhi.n	8001f80 <HAL_RCC_OscConfig+0x1f4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d108      	bne.n	8001f6a <HAL_RCC_OscConfig+0x1de>
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f68:	e07a      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	031b      	lsls	r3, r3, #12
 8001f78:	4926      	ldr	r1, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7e:	e06f      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	4921      	ldr	r1, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f94:	e064      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d047      	beq.n	800202e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0219 	bic.w	r2, r3, #25
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	491a      	ldr	r1, [pc, #104]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fd2e 	bl	8000a10 <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fd2a 	bl	8000a10 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e332      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	f7fe fd4b 	bl	8000a70 <HAL_GetREVID>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d819      	bhi.n	8002018 <HAL_RCC_OscConfig+0x28c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d108      	bne.n	8001ffe <HAL_RCC_OscConfig+0x272>
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8001ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffa:	6053      	str	r3, [r2, #4]
 8001ffc:	e030      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	031b      	lsls	r3, r3, #12
 800200c:	4901      	ldr	r1, [pc, #4]	; (8002014 <HAL_RCC_OscConfig+0x288>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
 8002012:	e025      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
 8002014:	58024400 	.word	0x58024400
 8002018:	4b9a      	ldr	r3, [pc, #616]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	4997      	ldr	r1, [pc, #604]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e018      	b.n	8002060 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b95      	ldr	r3, [pc, #596]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fce9 	bl	8000a10 <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe fce5 	bl	8000a10 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e2ed      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002054:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a9 	beq.w	80021c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b85      	ldr	r3, [pc, #532]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002076:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002078:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d007      	beq.n	8002094 <HAL_RCC_OscConfig+0x308>
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b18      	cmp	r3, #24
 8002088:	d13a      	bne.n	8002100 <HAL_RCC_OscConfig+0x374>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d135      	bne.n	8002100 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002094:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x320>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e2c1      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020ac:	f7fe fce0 	bl	8000a70 <HAL_GetREVID>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d817      	bhi.n	80020ea <HAL_RCC_OscConfig+0x35e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d108      	bne.n	80020d4 <HAL_RCC_OscConfig+0x348>
 80020c2:	4b70      	ldr	r3, [pc, #448]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020ca:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020d2:	e075      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	069b      	lsls	r3, r3, #26
 80020e2:	4968      	ldr	r1, [pc, #416]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e8:	e06a      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020ea:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	4962      	ldr	r1, [pc, #392]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020fe:	e05f      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d042      	beq.n	800218e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5d      	ldr	r2, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800210e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fc7c 	bl	8000a10 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800211c:	f7fe fc78 	bl	8000a10 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e280      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800212e:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800213a:	f7fe fc99 	bl	8000a70 <HAL_GetREVID>
 800213e:	4603      	mov	r3, r0
 8002140:	f241 0203 	movw	r2, #4099	; 0x1003
 8002144:	4293      	cmp	r3, r2
 8002146:	d817      	bhi.n	8002178 <HAL_RCC_OscConfig+0x3ec>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	2b20      	cmp	r3, #32
 800214e:	d108      	bne.n	8002162 <HAL_RCC_OscConfig+0x3d6>
 8002150:	4b4c      	ldr	r3, [pc, #304]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800215e:	6053      	str	r3, [r2, #4]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	069b      	lsls	r3, r3, #26
 8002170:	4944      	ldr	r1, [pc, #272]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e023      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
 8002178:	4b42      	ldr	r3, [pc, #264]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	493f      	ldr	r1, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	4313      	orrs	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fc39 	bl	8000a10 <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021a2:	f7fe fc35 	bl	8000a10 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e23d      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d036      	beq.n	800223a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe fc16 	bl	8000a10 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe fc12 	bl	8000a10 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e21a      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x45c>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe fbfc 	bl	8000a10 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fbf8 	bl	8000a10 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e200      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d039      	beq.n	80022ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01c      	beq.n	8002288 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002258:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800225a:	f7fe fbd9 	bl	8000a10 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002262:	f7fe fbd5 	bl	8000a10 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1dd      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x4d6>
 8002280:	e01b      	b.n	80022ba <HAL_RCC_OscConfig+0x52e>
 8002282:	bf00      	nop
 8002284:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002288:	4b9b      	ldr	r3, [pc, #620]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9a      	ldr	r2, [pc, #616]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800228e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002294:	f7fe fbbc 	bl	8000a10 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229c:	f7fe fbb8 	bl	8000a10 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1c0      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022ae:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8081 	beq.w	80023ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022c8:	4b8c      	ldr	r3, [pc, #560]	; (80024fc <HAL_RCC_OscConfig+0x770>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8b      	ldr	r2, [pc, #556]	; (80024fc <HAL_RCC_OscConfig+0x770>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fb9c 	bl	8000a10 <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe fb98 	bl	8000a10 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1a0      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ee:	4b83      	ldr	r3, [pc, #524]	; (80024fc <HAL_RCC_OscConfig+0x770>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x584>
 8002302:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	e02d      	b.n	800236c <HAL_RCC_OscConfig+0x5e0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x5a6>
 8002318:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a76      	ldr	r2, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x5e0>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c8>
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	4b6c      	ldr	r3, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a6b      	ldr	r2, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0x5e0>
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a64      	ldr	r2, [pc, #400]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fb4c 	bl	8000a10 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fb48 	bl	8000a10 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e14e      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002392:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCC_OscConfig+0x5f0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fb36 	bl	8000a10 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fe fb32 	bl	8000a10 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e138      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023be:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 812d 	beq.w	800262e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023dc:	2b18      	cmp	r3, #24
 80023de:	f000 80bd 	beq.w	800255c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	f040 809e 	bne.w	8002528 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a41      	ldr	r2, [pc, #260]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fb0a 	bl	8000a10 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fb06 	bl	8000a10 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e10e      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x774>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	430a      	orrs	r2, r1
 8002432:	4931      	ldr	r1, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	628b      	str	r3, [r1, #40]	; 0x28
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	3b01      	subs	r3, #1
 800243e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	3b01      	subs	r3, #1
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	b29b      	uxth	r3, r3
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	3b01      	subs	r3, #1
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	3b01      	subs	r3, #1
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002468:	4923      	ldr	r1, [pc, #140]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x778>)
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002486:	00d2      	lsls	r2, r2, #3
 8002488:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f023 020c 	bic.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4917      	ldr	r1, [pc, #92]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 800249c:	4313      	orrs	r3, r2
 800249e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f023 0202 	bic.w	r2, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	4912      	ldr	r1, [pc, #72]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fa8f 	bl	8000a10 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f4:	e011      	b.n	800251a <HAL_RCC_OscConfig+0x78e>
 80024f6:	bf00      	nop
 80024f8:	58024400 	.word	0x58024400
 80024fc:	58024800 	.word	0x58024800
 8002500:	fffffc0c 	.word	0xfffffc0c
 8002504:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fa82 	bl	8000a10 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e08a      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x77c>
 8002526:	e082      	b.n	800262e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 800252e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fa6c 	bl	8000a10 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fa68 	bl	8000a10 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e070      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x7b0>
 800255a:	e068      	b.n	800262e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002562:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	d031      	beq.n	80025d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d12a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d122      	bne.n	80025d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0a5b      	lsrs	r3, r3, #9
 80025a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d111      	bne.n	80025d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	0e1b      	lsrs	r3, r3, #24
 80025c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e02b      	b.n	8002630 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d01f      	beq.n	800262e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025fa:	f7fe fa09 	bl	8000a10 <HAL_GetTick>
 80025fe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002600:	bf00      	nop
 8002602:	f7fe fa05 	bl	8000a10 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	4293      	cmp	r3, r2
 800260c:	d0f9      	beq.n	8002602 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x8b0>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 800261e:	4313      	orrs	r3, r2
 8002620:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_OscConfig+0x8ac>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3730      	adds	r7, #48	; 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	58024400 	.word	0x58024400
 800263c:	ffff0007 	.word	0xffff0007

08002640 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e19c      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b87      	ldr	r3, [pc, #540]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 020f 	bic.w	r2, r3, #15
 800266a:	4985      	ldr	r1, [pc, #532]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b83      	ldr	r3, [pc, #524]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e184      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4975      	ldr	r1, [pc, #468]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d908      	bls.n	80026e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	496a      	ldr	r1, [pc, #424]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	495e      	ldr	r1, [pc, #376]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002726:	429a      	cmp	r2, r3
 8002728:	d908      	bls.n	800273c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800272a:	4b56      	ldr	r3, [pc, #344]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4953      	ldr	r1, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002738:	4313      	orrs	r3, r2
 800273a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	429a      	cmp	r2, r3
 8002756:	d908      	bls.n	800276a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f023 020f 	bic.w	r2, r3, #15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4947      	ldr	r1, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002766:	4313      	orrs	r3, r2
 8002768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d055      	beq.n	8002822 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4940      	ldr	r1, [pc, #256]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002784:	4313      	orrs	r3, r2
 8002786:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002790:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d121      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0f6      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d115      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0ea      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0de      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0d6      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4925      	ldr	r1, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f2:	f7fe f90d 	bl	8000a10 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fe f909 	bl	8000a10 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0be      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	429a      	cmp	r2, r3
 8002820:	d1eb      	bne.n	80027fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	429a      	cmp	r2, r3
 800283c:	d208      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f023 020f 	bic.w	r2, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d214      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 020f 	bic.w	r2, r3, #15
 8002866:	4906      	ldr	r1, [pc, #24]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e086      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
 8002880:	52002000 	.word	0x52002000
 8002884:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d208      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4939      	ldr	r1, [pc, #228]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d208      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	492e      	ldr	r1, [pc, #184]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d208      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 800290e:	4313      	orrs	r3, r2
 8002910:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292a:	429a      	cmp	r2, r3
 800292c:	d208      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800292e:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4917      	ldr	r1, [pc, #92]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 800293c:	4313      	orrs	r3, r2
 800293e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002940:	f000 f834 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	4912      	ldr	r1, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x35c>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_RCC_ClockConfig+0x35c>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x360>)
 8002976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x364>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x368>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fffa 	bl	800097c <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	58024400 	.word	0x58024400
 800299c:	08002d10 	.word	0x08002d10
 80029a0:	20000004 	.word	0x20000004
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b2:	4bb3      	ldr	r3, [pc, #716]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	f200 8155 	bhi.w	8002c6a <HAL_RCC_GetSysClockFreq+0x2be>
 80029c0:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	08002a2d 	.word	0x08002a2d
 80029cc:	08002c6b 	.word	0x08002c6b
 80029d0:	08002c6b 	.word	0x08002c6b
 80029d4:	08002c6b 	.word	0x08002c6b
 80029d8:	08002c6b 	.word	0x08002c6b
 80029dc:	08002c6b 	.word	0x08002c6b
 80029e0:	08002c6b 	.word	0x08002c6b
 80029e4:	08002c6b 	.word	0x08002c6b
 80029e8:	08002a53 	.word	0x08002a53
 80029ec:	08002c6b 	.word	0x08002c6b
 80029f0:	08002c6b 	.word	0x08002c6b
 80029f4:	08002c6b 	.word	0x08002c6b
 80029f8:	08002c6b 	.word	0x08002c6b
 80029fc:	08002c6b 	.word	0x08002c6b
 8002a00:	08002c6b 	.word	0x08002c6b
 8002a04:	08002c6b 	.word	0x08002c6b
 8002a08:	08002a59 	.word	0x08002a59
 8002a0c:	08002c6b 	.word	0x08002c6b
 8002a10:	08002c6b 	.word	0x08002c6b
 8002a14:	08002c6b 	.word	0x08002c6b
 8002a18:	08002c6b 	.word	0x08002c6b
 8002a1c:	08002c6b 	.word	0x08002c6b
 8002a20:	08002c6b 	.word	0x08002c6b
 8002a24:	08002c6b 	.word	0x08002c6b
 8002a28:	08002a5f 	.word	0x08002a5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a2c:	4b94      	ldr	r3, [pc, #592]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a38:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	4a90      	ldr	r2, [pc, #576]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a4a:	e111      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a4c:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a4e:	61bb      	str	r3, [r7, #24]
      break;
 8002a50:	e10e      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a54:	61bb      	str	r3, [r7, #24]
      break;
 8002a56:	e10b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a58:	4b8c      	ldr	r3, [pc, #560]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a5a:	61bb      	str	r3, [r7, #24]
      break;
 8002a5c:	e108      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a68:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a74:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a7e:	4b80      	ldr	r3, [pc, #512]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80e1 	beq.w	8002c64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	f000 8083 	beq.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x204>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	f200 80a1 	bhi.w	8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d056      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002abe:	e099      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02d      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002acc:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b26:	e087      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6a:	e065      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bae:	e043      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bf2:	e021      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	0a5b      	lsrs	r3, r3, #9
 8002c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c42:	3301      	adds	r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
      break;
 8002c68:	e002      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c6c:	61bb      	str	r3, [r7, #24]
      break;
 8002c6e:	bf00      	nop
  }

  return sysclockfreq;
 8002c70:	69bb      	ldr	r3, [r7, #24]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
 8002c84:	03d09000 	.word	0x03d09000
 8002c88:	003d0900 	.word	0x003d0900
 8002c8c:	017d7840 	.word	0x017d7840
 8002c90:	46000000 	.word	0x46000000
 8002c94:	4c742400 	.word	0x4c742400
 8002c98:	4a742400 	.word	0x4a742400
 8002c9c:	4bbebc20 	.word	0x4bbebc20

08002ca0 <memset>:
 8002ca0:	4402      	add	r2, r0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ce8 <__libc_init_array+0x38>)
 8002cb4:	4c0d      	ldr	r4, [pc, #52]	; (8002cec <__libc_init_array+0x3c>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	2600      	movs	r6, #0
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	4d0b      	ldr	r5, [pc, #44]	; (8002cf0 <__libc_init_array+0x40>)
 8002cc2:	4c0c      	ldr	r4, [pc, #48]	; (8002cf4 <__libc_init_array+0x44>)
 8002cc4:	f000 f818 	bl	8002cf8 <_init>
 8002cc8:	1b64      	subs	r4, r4, r5
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	2600      	movs	r6, #0
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	08002d20 	.word	0x08002d20
 8002cec:	08002d20 	.word	0x08002d20
 8002cf0:	08002d20 	.word	0x08002d20
 8002cf4:	08002d24 	.word	0x08002d24

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
